
CDC_USB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006634  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08006834  08006834  00016834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800692c  0800692c  0001692c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006934  08006934  00016934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006938  08006938  00016938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001dc  20000000  0800693c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00005d40  200001dc  08006b18  000201dc  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20005f1c  08006b18  00025f1c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 10 .debug_info   00041d18  00000000  00000000  0002020a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00007e7f  00000000  00000000  00061f22  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00015277  00000000  00000000  00069da1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001c68  00000000  00000000  0007f018  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000023f8  00000000  00000000  00080c80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00011e3f  00000000  00000000  00083078  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00009f3c  00000000  00000000  00094eb7  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0009edf3  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000531c  00000000  00000000  0009ee70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001dc 	.word	0x200001dc
 800021c:	00000000 	.word	0x00000000
 8000220:	0800681c 	.word	0x0800681c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e0 	.word	0x200001e0
 800023c:	0800681c 	.word	0x0800681c

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b97a 	b.w	800054c <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	468c      	mov	ip, r1
 8000276:	460d      	mov	r5, r1
 8000278:	4604      	mov	r4, r0
 800027a:	9e08      	ldr	r6, [sp, #32]
 800027c:	2b00      	cmp	r3, #0
 800027e:	d151      	bne.n	8000324 <__udivmoddi4+0xb4>
 8000280:	428a      	cmp	r2, r1
 8000282:	4617      	mov	r7, r2
 8000284:	d96d      	bls.n	8000362 <__udivmoddi4+0xf2>
 8000286:	fab2 fe82 	clz	lr, r2
 800028a:	f1be 0f00 	cmp.w	lr, #0
 800028e:	d00b      	beq.n	80002a8 <__udivmoddi4+0x38>
 8000290:	f1ce 0c20 	rsb	ip, lr, #32
 8000294:	fa01 f50e 	lsl.w	r5, r1, lr
 8000298:	fa20 fc0c 	lsr.w	ip, r0, ip
 800029c:	fa02 f70e 	lsl.w	r7, r2, lr
 80002a0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002a4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002a8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002ac:	0c25      	lsrs	r5, r4, #16
 80002ae:	fbbc f8fa 	udiv	r8, ip, sl
 80002b2:	fa1f f987 	uxth.w	r9, r7
 80002b6:	fb0a cc18 	mls	ip, sl, r8, ip
 80002ba:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002be:	fb08 f309 	mul.w	r3, r8, r9
 80002c2:	42ab      	cmp	r3, r5
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x6c>
 80002c6:	19ed      	adds	r5, r5, r7
 80002c8:	f108 32ff 	add.w	r2, r8, #4294967295
 80002cc:	f080 8123 	bcs.w	8000516 <__udivmoddi4+0x2a6>
 80002d0:	42ab      	cmp	r3, r5
 80002d2:	f240 8120 	bls.w	8000516 <__udivmoddi4+0x2a6>
 80002d6:	f1a8 0802 	sub.w	r8, r8, #2
 80002da:	443d      	add	r5, r7
 80002dc:	1aed      	subs	r5, r5, r3
 80002de:	b2a4      	uxth	r4, r4
 80002e0:	fbb5 f0fa 	udiv	r0, r5, sl
 80002e4:	fb0a 5510 	mls	r5, sl, r0, r5
 80002e8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002ec:	fb00 f909 	mul.w	r9, r0, r9
 80002f0:	45a1      	cmp	r9, r4
 80002f2:	d909      	bls.n	8000308 <__udivmoddi4+0x98>
 80002f4:	19e4      	adds	r4, r4, r7
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	f080 810a 	bcs.w	8000512 <__udivmoddi4+0x2a2>
 80002fe:	45a1      	cmp	r9, r4
 8000300:	f240 8107 	bls.w	8000512 <__udivmoddi4+0x2a2>
 8000304:	3802      	subs	r0, #2
 8000306:	443c      	add	r4, r7
 8000308:	eba4 0409 	sub.w	r4, r4, r9
 800030c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000310:	2100      	movs	r1, #0
 8000312:	2e00      	cmp	r6, #0
 8000314:	d061      	beq.n	80003da <__udivmoddi4+0x16a>
 8000316:	fa24 f40e 	lsr.w	r4, r4, lr
 800031a:	2300      	movs	r3, #0
 800031c:	6034      	str	r4, [r6, #0]
 800031e:	6073      	str	r3, [r6, #4]
 8000320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000324:	428b      	cmp	r3, r1
 8000326:	d907      	bls.n	8000338 <__udivmoddi4+0xc8>
 8000328:	2e00      	cmp	r6, #0
 800032a:	d054      	beq.n	80003d6 <__udivmoddi4+0x166>
 800032c:	2100      	movs	r1, #0
 800032e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000332:	4608      	mov	r0, r1
 8000334:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000338:	fab3 f183 	clz	r1, r3
 800033c:	2900      	cmp	r1, #0
 800033e:	f040 808e 	bne.w	800045e <__udivmoddi4+0x1ee>
 8000342:	42ab      	cmp	r3, r5
 8000344:	d302      	bcc.n	800034c <__udivmoddi4+0xdc>
 8000346:	4282      	cmp	r2, r0
 8000348:	f200 80fa 	bhi.w	8000540 <__udivmoddi4+0x2d0>
 800034c:	1a84      	subs	r4, r0, r2
 800034e:	eb65 0503 	sbc.w	r5, r5, r3
 8000352:	2001      	movs	r0, #1
 8000354:	46ac      	mov	ip, r5
 8000356:	2e00      	cmp	r6, #0
 8000358:	d03f      	beq.n	80003da <__udivmoddi4+0x16a>
 800035a:	e886 1010 	stmia.w	r6, {r4, ip}
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	b912      	cbnz	r2, 800036a <__udivmoddi4+0xfa>
 8000364:	2701      	movs	r7, #1
 8000366:	fbb7 f7f2 	udiv	r7, r7, r2
 800036a:	fab7 fe87 	clz	lr, r7
 800036e:	f1be 0f00 	cmp.w	lr, #0
 8000372:	d134      	bne.n	80003de <__udivmoddi4+0x16e>
 8000374:	1beb      	subs	r3, r5, r7
 8000376:	0c3a      	lsrs	r2, r7, #16
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	2101      	movs	r1, #1
 800037e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000382:	0c25      	lsrs	r5, r4, #16
 8000384:	fb02 3318 	mls	r3, r2, r8, r3
 8000388:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800038c:	fb0c f308 	mul.w	r3, ip, r8
 8000390:	42ab      	cmp	r3, r5
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0x134>
 8000394:	19ed      	adds	r5, r5, r7
 8000396:	f108 30ff 	add.w	r0, r8, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0x132>
 800039c:	42ab      	cmp	r3, r5
 800039e:	f200 80d1 	bhi.w	8000544 <__udivmoddi4+0x2d4>
 80003a2:	4680      	mov	r8, r0
 80003a4:	1aed      	subs	r5, r5, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003ac:	fb02 5510 	mls	r5, r2, r0, r5
 80003b0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003b4:	fb0c fc00 	mul.w	ip, ip, r0
 80003b8:	45a4      	cmp	ip, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x15c>
 80003bc:	19e4      	adds	r4, r4, r7
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x15a>
 80003c4:	45a4      	cmp	ip, r4
 80003c6:	f200 80b8 	bhi.w	800053a <__udivmoddi4+0x2ca>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 040c 	sub.w	r4, r4, ip
 80003d0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003d4:	e79d      	b.n	8000312 <__udivmoddi4+0xa2>
 80003d6:	4631      	mov	r1, r6
 80003d8:	4630      	mov	r0, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	f1ce 0420 	rsb	r4, lr, #32
 80003e2:	fa05 f30e 	lsl.w	r3, r5, lr
 80003e6:	fa07 f70e 	lsl.w	r7, r7, lr
 80003ea:	fa20 f804 	lsr.w	r8, r0, r4
 80003ee:	0c3a      	lsrs	r2, r7, #16
 80003f0:	fa25 f404 	lsr.w	r4, r5, r4
 80003f4:	ea48 0803 	orr.w	r8, r8, r3
 80003f8:	fbb4 f1f2 	udiv	r1, r4, r2
 80003fc:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000400:	fb02 4411 	mls	r4, r2, r1, r4
 8000404:	fa1f fc87 	uxth.w	ip, r7
 8000408:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800040c:	fb01 f30c 	mul.w	r3, r1, ip
 8000410:	42ab      	cmp	r3, r5
 8000412:	fa00 f40e 	lsl.w	r4, r0, lr
 8000416:	d909      	bls.n	800042c <__udivmoddi4+0x1bc>
 8000418:	19ed      	adds	r5, r5, r7
 800041a:	f101 30ff 	add.w	r0, r1, #4294967295
 800041e:	f080 808a 	bcs.w	8000536 <__udivmoddi4+0x2c6>
 8000422:	42ab      	cmp	r3, r5
 8000424:	f240 8087 	bls.w	8000536 <__udivmoddi4+0x2c6>
 8000428:	3902      	subs	r1, #2
 800042a:	443d      	add	r5, r7
 800042c:	1aeb      	subs	r3, r5, r3
 800042e:	fa1f f588 	uxth.w	r5, r8
 8000432:	fbb3 f0f2 	udiv	r0, r3, r2
 8000436:	fb02 3310 	mls	r3, r2, r0, r3
 800043a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800043e:	fb00 f30c 	mul.w	r3, r0, ip
 8000442:	42ab      	cmp	r3, r5
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x1e6>
 8000446:	19ed      	adds	r5, r5, r7
 8000448:	f100 38ff 	add.w	r8, r0, #4294967295
 800044c:	d26f      	bcs.n	800052e <__udivmoddi4+0x2be>
 800044e:	42ab      	cmp	r3, r5
 8000450:	d96d      	bls.n	800052e <__udivmoddi4+0x2be>
 8000452:	3802      	subs	r0, #2
 8000454:	443d      	add	r5, r7
 8000456:	1aeb      	subs	r3, r5, r3
 8000458:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800045c:	e78f      	b.n	800037e <__udivmoddi4+0x10e>
 800045e:	f1c1 0720 	rsb	r7, r1, #32
 8000462:	fa22 f807 	lsr.w	r8, r2, r7
 8000466:	408b      	lsls	r3, r1
 8000468:	fa05 f401 	lsl.w	r4, r5, r1
 800046c:	ea48 0303 	orr.w	r3, r8, r3
 8000470:	fa20 fe07 	lsr.w	lr, r0, r7
 8000474:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000478:	40fd      	lsrs	r5, r7
 800047a:	ea4e 0e04 	orr.w	lr, lr, r4
 800047e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000482:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000486:	fb0c 5519 	mls	r5, ip, r9, r5
 800048a:	fa1f f883 	uxth.w	r8, r3
 800048e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000492:	fb09 f408 	mul.w	r4, r9, r8
 8000496:	42ac      	cmp	r4, r5
 8000498:	fa02 f201 	lsl.w	r2, r2, r1
 800049c:	fa00 fa01 	lsl.w	sl, r0, r1
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x244>
 80004a2:	18ed      	adds	r5, r5, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	d243      	bcs.n	8000532 <__udivmoddi4+0x2c2>
 80004aa:	42ac      	cmp	r4, r5
 80004ac:	d941      	bls.n	8000532 <__udivmoddi4+0x2c2>
 80004ae:	f1a9 0902 	sub.w	r9, r9, #2
 80004b2:	441d      	add	r5, r3
 80004b4:	1b2d      	subs	r5, r5, r4
 80004b6:	fa1f fe8e 	uxth.w	lr, lr
 80004ba:	fbb5 f0fc 	udiv	r0, r5, ip
 80004be:	fb0c 5510 	mls	r5, ip, r0, r5
 80004c2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80004c6:	fb00 f808 	mul.w	r8, r0, r8
 80004ca:	45a0      	cmp	r8, r4
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x26e>
 80004ce:	18e4      	adds	r4, r4, r3
 80004d0:	f100 35ff 	add.w	r5, r0, #4294967295
 80004d4:	d229      	bcs.n	800052a <__udivmoddi4+0x2ba>
 80004d6:	45a0      	cmp	r8, r4
 80004d8:	d927      	bls.n	800052a <__udivmoddi4+0x2ba>
 80004da:	3802      	subs	r0, #2
 80004dc:	441c      	add	r4, r3
 80004de:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e2:	eba4 0408 	sub.w	r4, r4, r8
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	454c      	cmp	r4, r9
 80004ec:	46c6      	mov	lr, r8
 80004ee:	464d      	mov	r5, r9
 80004f0:	d315      	bcc.n	800051e <__udivmoddi4+0x2ae>
 80004f2:	d012      	beq.n	800051a <__udivmoddi4+0x2aa>
 80004f4:	b156      	cbz	r6, 800050c <__udivmoddi4+0x29c>
 80004f6:	ebba 030e 	subs.w	r3, sl, lr
 80004fa:	eb64 0405 	sbc.w	r4, r4, r5
 80004fe:	fa04 f707 	lsl.w	r7, r4, r7
 8000502:	40cb      	lsrs	r3, r1
 8000504:	431f      	orrs	r7, r3
 8000506:	40cc      	lsrs	r4, r1
 8000508:	6037      	str	r7, [r6, #0]
 800050a:	6074      	str	r4, [r6, #4]
 800050c:	2100      	movs	r1, #0
 800050e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000512:	4618      	mov	r0, r3
 8000514:	e6f8      	b.n	8000308 <__udivmoddi4+0x98>
 8000516:	4690      	mov	r8, r2
 8000518:	e6e0      	b.n	80002dc <__udivmoddi4+0x6c>
 800051a:	45c2      	cmp	sl, r8
 800051c:	d2ea      	bcs.n	80004f4 <__udivmoddi4+0x284>
 800051e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000522:	eb69 0503 	sbc.w	r5, r9, r3
 8000526:	3801      	subs	r0, #1
 8000528:	e7e4      	b.n	80004f4 <__udivmoddi4+0x284>
 800052a:	4628      	mov	r0, r5
 800052c:	e7d7      	b.n	80004de <__udivmoddi4+0x26e>
 800052e:	4640      	mov	r0, r8
 8000530:	e791      	b.n	8000456 <__udivmoddi4+0x1e6>
 8000532:	4681      	mov	r9, r0
 8000534:	e7be      	b.n	80004b4 <__udivmoddi4+0x244>
 8000536:	4601      	mov	r1, r0
 8000538:	e778      	b.n	800042c <__udivmoddi4+0x1bc>
 800053a:	3802      	subs	r0, #2
 800053c:	443c      	add	r4, r7
 800053e:	e745      	b.n	80003cc <__udivmoddi4+0x15c>
 8000540:	4608      	mov	r0, r1
 8000542:	e708      	b.n	8000356 <__udivmoddi4+0xe6>
 8000544:	f1a8 0802 	sub.w	r8, r8, #2
 8000548:	443d      	add	r5, r7
 800054a:	e72b      	b.n	80003a4 <__udivmoddi4+0x134>

0800054c <__aeabi_idiv0>:
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop

08000550 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000550:	b508      	push	{r3, lr}
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000552:	2003      	movs	r0, #3
 8000554:	f000 f82c 	bl	80005b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000558:	2000      	movs	r0, #0
 800055a:	f005 fbb3 	bl	8005cc4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800055e:	f005 fb4b 	bl	8005bf8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 8000562:	2000      	movs	r0, #0
 8000564:	bd08      	pop	{r3, pc}
	...

08000568 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000568:	4a03      	ldr	r2, [pc, #12]	; (8000578 <HAL_IncTick+0x10>)
 800056a:	4b04      	ldr	r3, [pc, #16]	; (800057c <HAL_IncTick+0x14>)
 800056c:	6811      	ldr	r1, [r2, #0]
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	440b      	add	r3, r1
 8000572:	6013      	str	r3, [r2, #0]
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop
 8000578:	20003f58 	.word	0x20003f58
 800057c:	20000000 	.word	0x20000000

08000580 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000580:	4b01      	ldr	r3, [pc, #4]	; (8000588 <HAL_GetTick+0x8>)
 8000582:	6818      	ldr	r0, [r3, #0]
}
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	20003f58 	.word	0x20003f58

0800058c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800058c:	b538      	push	{r3, r4, r5, lr}
 800058e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000590:	f7ff fff6 	bl	8000580 <HAL_GetTick>
 8000594:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000596:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000598:	bf1e      	ittt	ne
 800059a:	4b04      	ldrne	r3, [pc, #16]	; (80005ac <HAL_Delay+0x20>)
 800059c:	781b      	ldrbne	r3, [r3, #0]
 800059e:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80005a0:	f7ff ffee 	bl	8000580 <HAL_GetTick>
 80005a4:	1b40      	subs	r0, r0, r5
 80005a6:	4284      	cmp	r4, r0
 80005a8:	d8fa      	bhi.n	80005a0 <HAL_Delay+0x14>
  {
  }
}
 80005aa:	bd38      	pop	{r3, r4, r5, pc}
 80005ac:	20000000 	.word	0x20000000

080005b0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005b0:	4a07      	ldr	r2, [pc, #28]	; (80005d0 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80005b2:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005b4:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80005b6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005ba:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80005be:	041b      	lsls	r3, r3, #16
 80005c0:	0c1b      	lsrs	r3, r3, #16
 80005c2:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80005ca:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80005cc:	60d3      	str	r3, [r2, #12]
 80005ce:	4770      	bx	lr
 80005d0:	e000ed00 	.word	0xe000ed00

080005d4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005d4:	4b19      	ldr	r3, [pc, #100]	; (800063c <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005d6:	b530      	push	{r4, r5, lr}
 80005d8:	68dc      	ldr	r4, [r3, #12]
 80005da:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005de:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005e2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005e4:	2b04      	cmp	r3, #4
 80005e6:	bf28      	it	cs
 80005e8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005ea:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005ec:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005f0:	bf8c      	ite	hi
 80005f2:	3c03      	subhi	r4, #3
 80005f4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005f6:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) < 0)
 80005fa:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005fc:	f103 33ff 	add.w	r3, r3, #4294967295
 8000600:	ea01 0103 	and.w	r1, r1, r3
 8000604:	fa01 f104 	lsl.w	r1, r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000608:	fa05 f404 	lsl.w	r4, r5, r4
 800060c:	f104 34ff 	add.w	r4, r4, #4294967295
 8000610:	ea02 0204 	and.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000614:	ea42 0201 	orr.w	r2, r2, r1
 8000618:	ea4f 1202 	mov.w	r2, r2, lsl #4
  if ((int32_t)(IRQn) < 0)
 800061c:	da05      	bge.n	800062a <HAL_NVIC_SetPriority+0x56>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800061e:	f000 000f 	and.w	r0, r0, #15
 8000622:	b2d2      	uxtb	r2, r2
 8000624:	4b06      	ldr	r3, [pc, #24]	; (8000640 <HAL_NVIC_SetPriority+0x6c>)
 8000626:	541a      	strb	r2, [r3, r0]
 8000628:	bd30      	pop	{r4, r5, pc}
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800062a:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800062e:	b2d2      	uxtb	r2, r2
 8000630:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000634:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	bf00      	nop
 800063c:	e000ed00 	.word	0xe000ed00
 8000640:	e000ed14 	.word	0xe000ed14

08000644 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000644:	0942      	lsrs	r2, r0, #5
 8000646:	2301      	movs	r3, #1
 8000648:	f000 001f 	and.w	r0, r0, #31
 800064c:	fa03 f000 	lsl.w	r0, r3, r0
 8000650:	4b01      	ldr	r3, [pc, #4]	; (8000658 <HAL_NVIC_EnableIRQ+0x14>)
 8000652:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000656:	4770      	bx	lr
 8000658:	e000e100 	.word	0xe000e100

0800065c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800065c:	3801      	subs	r0, #1
 800065e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000662:	d20a      	bcs.n	800067a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000664:	4b06      	ldr	r3, [pc, #24]	; (8000680 <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000666:	21f0      	movs	r1, #240	; 0xf0
 8000668:	4a06      	ldr	r2, [pc, #24]	; (8000684 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800066a:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800066c:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800066e:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000672:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000674:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800067a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	e000e010 	.word	0xe000e010
 8000684:	e000ed00 	.word	0xe000ed00

08000688 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000688:	4b04      	ldr	r3, [pc, #16]	; (800069c <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800068a:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800068c:	681a      	ldr	r2, [r3, #0]
 800068e:	bf0c      	ite	eq
 8000690:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000694:	f022 0204 	bicne.w	r2, r2, #4
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	4770      	bx	lr
 800069c:	e000e010 	.word	0xe000e010

080006a0 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80006a0:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80006a4:	2b02      	cmp	r3, #2
 80006a6:	d003      	beq.n	80006b0 <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80006a8:	2380      	movs	r3, #128	; 0x80
 80006aa:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80006ac:	2001      	movs	r0, #1
 80006ae:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80006b0:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 80006b2:	2305      	movs	r3, #5
 80006b4:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  }

  return HAL_OK;
 80006b8:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 80006ba:	6813      	ldr	r3, [r2, #0]
 80006bc:	f023 0301 	bic.w	r3, r3, #1
 80006c0:	6013      	str	r3, [r2, #0]
}
 80006c2:	4770      	bx	lr

080006c4 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80006c4:	4b16      	ldr	r3, [pc, #88]	; (8000720 <FLASH_SetErrorCode+0x5c>)
 80006c6:	68da      	ldr	r2, [r3, #12]
 80006c8:	0792      	lsls	r2, r2, #30
 80006ca:	d504      	bpl.n	80006d6 <FLASH_SetErrorCode+0x12>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80006cc:	4915      	ldr	r1, [pc, #84]	; (8000724 <FLASH_SetErrorCode+0x60>)
 80006ce:	698a      	ldr	r2, [r1, #24]
 80006d0:	f042 0220 	orr.w	r2, r2, #32
 80006d4:	618a      	str	r2, [r1, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80006d6:	68db      	ldr	r3, [r3, #12]
 80006d8:	06db      	lsls	r3, r3, #27
 80006da:	d504      	bpl.n	80006e6 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80006dc:	4a11      	ldr	r2, [pc, #68]	; (8000724 <FLASH_SetErrorCode+0x60>)
 80006de:	6993      	ldr	r3, [r2, #24]
 80006e0:	f043 0310 	orr.w	r3, r3, #16
 80006e4:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80006e6:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <FLASH_SetErrorCode+0x5c>)
 80006e8:	68da      	ldr	r2, [r3, #12]
 80006ea:	0690      	lsls	r0, r2, #26
 80006ec:	d504      	bpl.n	80006f8 <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80006ee:	490d      	ldr	r1, [pc, #52]	; (8000724 <FLASH_SetErrorCode+0x60>)
 80006f0:	698a      	ldr	r2, [r1, #24]
 80006f2:	f042 0208 	orr.w	r2, r2, #8
 80006f6:	618a      	str	r2, [r1, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80006f8:	68db      	ldr	r3, [r3, #12]
 80006fa:	0659      	lsls	r1, r3, #25
 80006fc:	d504      	bpl.n	8000708 <FLASH_SetErrorCode+0x44>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80006fe:	4a09      	ldr	r2, [pc, #36]	; (8000724 <FLASH_SetErrorCode+0x60>)
 8000700:	6993      	ldr	r3, [r2, #24]
 8000702:	f043 0304 	orr.w	r3, r3, #4
 8000706:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 8000708:	4b05      	ldr	r3, [pc, #20]	; (8000720 <FLASH_SetErrorCode+0x5c>)
 800070a:	68da      	ldr	r2, [r3, #12]
 800070c:	0612      	lsls	r2, r2, #24
 800070e:	d504      	bpl.n	800071a <FLASH_SetErrorCode+0x56>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 8000710:	4904      	ldr	r1, [pc, #16]	; (8000724 <FLASH_SetErrorCode+0x60>)
 8000712:	698a      	ldr	r2, [r1, #24]
 8000714:	f042 0202 	orr.w	r2, r2, #2
 8000718:	618a      	str	r2, [r1, #24]
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 800071a:	22f2      	movs	r2, #242	; 0xf2
 800071c:	60da      	str	r2, [r3, #12]
 800071e:	4770      	bx	lr
 8000720:	40023c00 	.word	0x40023c00
 8000724:	20003f5c 	.word	0x20003f5c

08000728 <HAL_FLASH_EndOfOperationCallback>:
 8000728:	4770      	bx	lr

0800072a <HAL_FLASH_OperationErrorCallback>:
{
 800072a:	4770      	bx	lr

0800072c <HAL_FLASH_IRQHandler>:
  FLASH->CR &= (~FLASH_CR_PG);
 800072c:	4b37      	ldr	r3, [pc, #220]	; (800080c <HAL_FLASH_IRQHandler+0xe0>)
 800072e:	691a      	ldr	r2, [r3, #16]
 8000730:	f022 0201 	bic.w	r2, r2, #1
{
 8000734:	b570      	push	{r4, r5, r6, lr}
  FLASH->CR &= (~FLASH_CR_PG);
 8000736:	611a      	str	r2, [r3, #16]
  FLASH->CR &= (~FLASH_CR_SER);
 8000738:	691a      	ldr	r2, [r3, #16]
 800073a:	4d35      	ldr	r5, [pc, #212]	; (8000810 <HAL_FLASH_IRQHandler+0xe4>)
 800073c:	f022 0202 	bic.w	r2, r2, #2
 8000740:	611a      	str	r2, [r3, #16]
  FLASH->CR &= SECTOR_MASK; 
 8000742:	691a      	ldr	r2, [r3, #16]
 8000744:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000748:	611a      	str	r2, [r3, #16]
  FLASH->CR &= (~FLASH_MER_BIT);
 800074a:	691a      	ldr	r2, [r3, #16]
 800074c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000750:	f022 0204 	bic.w	r2, r2, #4
 8000754:	611a      	str	r2, [r3, #16]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8000756:	68dc      	ldr	r4, [r3, #12]
 8000758:	f014 0401 	ands.w	r4, r4, #1
 800075c:	d018      	beq.n	8000790 <HAL_FLASH_IRQHandler+0x64>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800075e:	2201      	movs	r2, #1
 8000760:	60da      	str	r2, [r3, #12]
    switch (pFlash.ProcedureOnGoing)
 8000762:	782b      	ldrb	r3, [r5, #0]
 8000764:	b2db      	uxtb	r3, r3
 8000766:	2b02      	cmp	r3, #2
 8000768:	d02c      	beq.n	80007c4 <HAL_FLASH_IRQHandler+0x98>
 800076a:	2b03      	cmp	r3, #3
 800076c:	d030      	beq.n	80007d0 <HAL_FLASH_IRQHandler+0xa4>
 800076e:	4293      	cmp	r3, r2
 8000770:	d130      	bne.n	80007d4 <HAL_FLASH_IRQHandler+0xa8>
        pFlash.NbSectorsToErase--;
 8000772:	686b      	ldr	r3, [r5, #4]
 8000774:	3b01      	subs	r3, #1
 8000776:	606b      	str	r3, [r5, #4]
        if(pFlash.NbSectorsToErase != 0)
 8000778:	686e      	ldr	r6, [r5, #4]
 800077a:	b1de      	cbz	r6, 80007b4 <HAL_FLASH_IRQHandler+0x88>
          temp = pFlash.Sector;
 800077c:	68e8      	ldr	r0, [r5, #12]
          HAL_FLASH_EndOfOperationCallback(temp);
 800077e:	f7ff ffd3 	bl	8000728 <HAL_FLASH_EndOfOperationCallback>
          temp = ++pFlash.Sector;
 8000782:	68ec      	ldr	r4, [r5, #12]
 8000784:	3401      	adds	r4, #1
 8000786:	60ec      	str	r4, [r5, #12]
          FLASH_Erase_Sector(temp, pFlash.VoltageForErase);
 8000788:	4620      	mov	r0, r4
 800078a:	7a29      	ldrb	r1, [r5, #8]
 800078c:	f000 f842 	bl	8000814 <FLASH_Erase_Sector>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 8000790:	4b1e      	ldr	r3, [pc, #120]	; (800080c <HAL_FLASH_IRQHandler+0xe0>)
 8000792:	68db      	ldr	r3, [r3, #12]
 8000794:	f013 0ff2 	tst.w	r3, #242	; 0xf2
 8000798:	d026      	beq.n	80007e8 <HAL_FLASH_IRQHandler+0xbc>
    switch (pFlash.ProcedureOnGoing)
 800079a:	782b      	ldrb	r3, [r5, #0]
 800079c:	b2db      	uxtb	r3, r3
 800079e:	2b02      	cmp	r3, #2
 80007a0:	d01a      	beq.n	80007d8 <HAL_FLASH_IRQHandler+0xac>
 80007a2:	2b03      	cmp	r3, #3
 80007a4:	d02f      	beq.n	8000806 <HAL_FLASH_IRQHandler+0xda>
 80007a6:	2b01      	cmp	r3, #1
 80007a8:	d117      	bne.n	80007da <HAL_FLASH_IRQHandler+0xae>
        pFlash.Sector = 0xFFFFFFFFU;
 80007aa:	f04f 33ff 	mov.w	r3, #4294967295
        temp = pFlash.Sector;
 80007ae:	68ec      	ldr	r4, [r5, #12]
        pFlash.Sector = 0xFFFFFFFFU;
 80007b0:	60eb      	str	r3, [r5, #12]
        break;
 80007b2:	e012      	b.n	80007da <HAL_FLASH_IRQHandler+0xae>
          pFlash.Sector = temp = 0xFFFFFFFFU;
 80007b4:	f04f 34ff 	mov.w	r4, #4294967295
          HAL_FLASH_EndOfOperationCallback(temp);
 80007b8:	4620      	mov	r0, r4
          pFlash.Sector = temp = 0xFFFFFFFFU;
 80007ba:	60ec      	str	r4, [r5, #12]
          HAL_FLASH_EndOfOperationCallback(temp);
 80007bc:	f7ff ffb4 	bl	8000728 <HAL_FLASH_EndOfOperationCallback>
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80007c0:	702e      	strb	r6, [r5, #0]
 80007c2:	e7e5      	b.n	8000790 <HAL_FLASH_IRQHandler+0x64>
        HAL_FLASH_EndOfOperationCallback(0);
 80007c4:	2000      	movs	r0, #0
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80007c6:	2400      	movs	r4, #0
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 80007c8:	f7ff ffae 	bl	8000728 <HAL_FLASH_EndOfOperationCallback>
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80007cc:	702c      	strb	r4, [r5, #0]
        break;
 80007ce:	e7df      	b.n	8000790 <HAL_FLASH_IRQHandler+0x64>
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 80007d0:	6928      	ldr	r0, [r5, #16]
 80007d2:	e7f8      	b.n	80007c6 <HAL_FLASH_IRQHandler+0x9a>
  uint32_t temp = 0;
 80007d4:	2400      	movs	r4, #0
 80007d6:	e7db      	b.n	8000790 <HAL_FLASH_IRQHandler+0x64>
        temp = 0;
 80007d8:	2400      	movs	r4, #0
    FLASH_SetErrorCode();
 80007da:	f7ff ff73 	bl	80006c4 <FLASH_SetErrorCode>
    HAL_FLASH_OperationErrorCallback(temp);
 80007de:	4620      	mov	r0, r4
 80007e0:	f7ff ffa3 	bl	800072a <HAL_FLASH_OperationErrorCallback>
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80007e4:	2300      	movs	r3, #0
 80007e6:	702b      	strb	r3, [r5, #0]
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 80007e8:	782b      	ldrb	r3, [r5, #0]
 80007ea:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 80007ee:	b94b      	cbnz	r3, 8000804 <HAL_FLASH_IRQHandler+0xd8>
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 80007f0:	4b06      	ldr	r3, [pc, #24]	; (800080c <HAL_FLASH_IRQHandler+0xe0>)
 80007f2:	691a      	ldr	r2, [r3, #16]
 80007f4:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80007f8:	611a      	str	r2, [r3, #16]
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 80007fa:	691a      	ldr	r2, [r3, #16]
 80007fc:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8000800:	611a      	str	r2, [r3, #16]
    __HAL_UNLOCK(&pFlash);
 8000802:	7529      	strb	r1, [r5, #20]
 8000804:	bd70      	pop	{r4, r5, r6, pc}
        temp = pFlash.Address;
 8000806:	692c      	ldr	r4, [r5, #16]
        break;
 8000808:	e7e7      	b.n	80007da <HAL_FLASH_IRQHandler+0xae>
 800080a:	bf00      	nop
 800080c:	40023c00 	.word	0x40023c00
 8000810:	20003f5c 	.word	0x20003f5c

08000814 <FLASH_Erase_Sector>:

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8000814:	b139      	cbz	r1, 8000826 <FLASH_Erase_Sector+0x12>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8000816:	2901      	cmp	r1, #1
 8000818:	d021      	beq.n	800085e <FLASH_Erase_Sector+0x4a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800081a:	2902      	cmp	r1, #2
  {
    tmp_psize = FLASH_PSIZE_WORD;
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800081c:	bf0c      	ite	eq
 800081e:	f44f 7100 	moveq.w	r1, #512	; 0x200
 8000822:	f44f 7140 	movne.w	r1, #768	; 0x300
  {
    Sector += 4;
  }  

  /* If the previous operation is completed, proceed to erase the sector */
  FLASH->CR &= CR_PSIZE_MASK;
 8000826:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <FLASH_Erase_Sector+0x50>)
  if(Sector > FLASH_SECTOR_11) 
 8000828:	280b      	cmp	r0, #11
  FLASH->CR &= CR_PSIZE_MASK;
 800082a:	691a      	ldr	r2, [r3, #16]
    Sector += 4;
 800082c:	bf88      	it	hi
 800082e:	3004      	addhi	r0, #4
  FLASH->CR &= CR_PSIZE_MASK;
 8000830:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000834:	611a      	str	r2, [r3, #16]
  FLASH->CR |= tmp_psize;
 8000836:	691a      	ldr	r2, [r3, #16]
 8000838:	4311      	orrs	r1, r2
 800083a:	6119      	str	r1, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800083c:	691a      	ldr	r2, [r3, #16]
 800083e:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000842:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8000844:	691a      	ldr	r2, [r3, #16]
 8000846:	f042 0202 	orr.w	r2, r2, #2
 800084a:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 800084e:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8000850:	691a      	ldr	r2, [r3, #16]
 8000852:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000856:	611a      	str	r2, [r3, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000858:	f3bf 8f4f 	dsb	sy
 800085c:	4770      	bx	lr
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800085e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000862:	e7e0      	b.n	8000826 <FLASH_Erase_Sector+0x12>
 8000864:	40023c00 	.word	0x40023c00

08000868 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800086c:	680b      	ldr	r3, [r1, #0]
{
 800086e:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000870:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8000a34 <HAL_GPIO_Init+0x1cc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000874:	9301      	str	r3, [sp, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000876:	2300      	movs	r3, #0
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000878:	4a6c      	ldr	r2, [pc, #432]	; (8000a2c <HAL_GPIO_Init+0x1c4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800087a:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 8000a38 <HAL_GPIO_Init+0x1d0>
    ioposition = ((uint32_t)0x01) << position;
 800087e:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000882:	9c01      	ldr	r4, [sp, #4]
    ioposition = ((uint32_t)0x01) << position;
 8000884:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000888:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 800088c:	45b6      	cmp	lr, r6
 800088e:	f040 80b3 	bne.w	80009f8 <HAL_GPIO_Init+0x190>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000892:	684c      	ldr	r4, [r1, #4]
 8000894:	f024 0710 	bic.w	r7, r4, #16
 8000898:	2f02      	cmp	r7, #2
 800089a:	d116      	bne.n	80008ca <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 800089c:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80008a0:	f003 0b07 	and.w	fp, r3, #7
 80008a4:	f04f 0c0f 	mov.w	ip, #15
 80008a8:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 80008ac:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 80008b0:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80008b4:	fa0c fc0b 	lsl.w	ip, ip, fp
 80008b8:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80008bc:	690d      	ldr	r5, [r1, #16]
 80008be:	fa05 f50b 	lsl.w	r5, r5, fp
 80008c2:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 80008c6:	f8ca 5020 	str.w	r5, [sl, #32]
 80008ca:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80008ce:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80008d0:	f8d0 b000 	ldr.w	fp, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80008d4:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80008d8:	fa05 f50a 	lsl.w	r5, r5, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008dc:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80008de:	fa0c fc0a 	lsl.w	ip, ip, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80008e2:	43ed      	mvns	r5, r5
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008e4:	2f01      	cmp	r7, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80008e6:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80008ea:	ea4c 0c0b 	orr.w	ip, ip, fp
      GPIOx->MODER = temp;
 80008ee:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008f2:	d811      	bhi.n	8000918 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 80008f4:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80008f6:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 80008fa:	68cf      	ldr	r7, [r1, #12]
 80008fc:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000900:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000904:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000906:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000908:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800090c:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000910:	409f      	lsls	r7, r3
 8000912:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000916:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000918:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800091a:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800091c:	688f      	ldr	r7, [r1, #8]
 800091e:	fa07 f70a 	lsl.w	r7, r7, sl
 8000922:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000924:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000926:	00e5      	lsls	r5, r4, #3
 8000928:	d566      	bpl.n	80009f8 <HAL_GPIO_Init+0x190>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800092a:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 800092e:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000932:	f003 0e03 	and.w	lr, r3, #3
 8000936:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800093a:	f445 4580 	orr.w	r5, r5, #16384	; 0x4000
 800093e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000942:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000946:	f8c8 5044 	str.w	r5, [r8, #68]	; 0x44
 800094a:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 800094e:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 8000952:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 8000956:	9503      	str	r5, [sp, #12]
 8000958:	9d03      	ldr	r5, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800095a:	fa0c f50e 	lsl.w	r5, ip, lr
        temp = SYSCFG->EXTICR[position >> 2];
 800095e:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000962:	ea2a 0c05 	bic.w	ip, sl, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000966:	4d32      	ldr	r5, [pc, #200]	; (8000a30 <HAL_GPIO_Init+0x1c8>)
 8000968:	42a8      	cmp	r0, r5
 800096a:	d04c      	beq.n	8000a06 <HAL_GPIO_Init+0x19e>
 800096c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000970:	42a8      	cmp	r0, r5
 8000972:	d04a      	beq.n	8000a0a <HAL_GPIO_Init+0x1a2>
 8000974:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000978:	42a8      	cmp	r0, r5
 800097a:	d048      	beq.n	8000a0e <HAL_GPIO_Init+0x1a6>
 800097c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000980:	42a8      	cmp	r0, r5
 8000982:	d046      	beq.n	8000a12 <HAL_GPIO_Init+0x1aa>
 8000984:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000988:	42a8      	cmp	r0, r5
 800098a:	d044      	beq.n	8000a16 <HAL_GPIO_Init+0x1ae>
 800098c:	4548      	cmp	r0, r9
 800098e:	d044      	beq.n	8000a1a <HAL_GPIO_Init+0x1b2>
 8000990:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000994:	42a8      	cmp	r0, r5
 8000996:	d042      	beq.n	8000a1e <HAL_GPIO_Init+0x1b6>
 8000998:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800099c:	42a8      	cmp	r0, r5
 800099e:	d040      	beq.n	8000a22 <HAL_GPIO_Init+0x1ba>
 80009a0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80009a4:	42a8      	cmp	r0, r5
 80009a6:	d03e      	beq.n	8000a26 <HAL_GPIO_Init+0x1be>
 80009a8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80009ac:	42a8      	cmp	r0, r5
 80009ae:	bf14      	ite	ne
 80009b0:	250a      	movne	r5, #10
 80009b2:	2509      	moveq	r5, #9
 80009b4:	fa05 f50e 	lsl.w	r5, r5, lr
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009b8:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80009bc:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 80009c0:	60bd      	str	r5, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 80009c2:	ea6f 0706 	mvn.w	r7, r6
        temp = EXTI->IMR;
 80009c6:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80009c8:	bf0c      	ite	eq
 80009ca:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80009cc:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80009ce:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
 80009d2:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 80009d4:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 80009d6:	bf0c      	ite	eq
 80009d8:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80009da:	4335      	orrne	r5, r6
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80009dc:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
 80009e0:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 80009e2:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 80009e4:	bf0c      	ite	eq
 80009e6:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80009e8:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80009ea:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 80009ec:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 80009ee:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 80009f0:	bf54      	ite	pl
 80009f2:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80009f4:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80009f6:	60d5      	str	r5, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80009f8:	3301      	adds	r3, #1
 80009fa:	2b10      	cmp	r3, #16
 80009fc:	f47f af3f 	bne.w	800087e <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000a00:	b005      	add	sp, #20
 8000a02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000a06:	2500      	movs	r5, #0
 8000a08:	e7d4      	b.n	80009b4 <HAL_GPIO_Init+0x14c>
 8000a0a:	2501      	movs	r5, #1
 8000a0c:	e7d2      	b.n	80009b4 <HAL_GPIO_Init+0x14c>
 8000a0e:	2502      	movs	r5, #2
 8000a10:	e7d0      	b.n	80009b4 <HAL_GPIO_Init+0x14c>
 8000a12:	2503      	movs	r5, #3
 8000a14:	e7ce      	b.n	80009b4 <HAL_GPIO_Init+0x14c>
 8000a16:	2504      	movs	r5, #4
 8000a18:	e7cc      	b.n	80009b4 <HAL_GPIO_Init+0x14c>
 8000a1a:	2505      	movs	r5, #5
 8000a1c:	e7ca      	b.n	80009b4 <HAL_GPIO_Init+0x14c>
 8000a1e:	2506      	movs	r5, #6
 8000a20:	e7c8      	b.n	80009b4 <HAL_GPIO_Init+0x14c>
 8000a22:	2507      	movs	r5, #7
 8000a24:	e7c6      	b.n	80009b4 <HAL_GPIO_Init+0x14c>
 8000a26:	2508      	movs	r5, #8
 8000a28:	e7c4      	b.n	80009b4 <HAL_GPIO_Init+0x14c>
 8000a2a:	bf00      	nop
 8000a2c:	40013c00 	.word	0x40013c00
 8000a30:	40020000 	.word	0x40020000
 8000a34:	40023800 	.word	0x40023800
 8000a38:	40021400 	.word	0x40021400

08000a3c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000a3c:	b10a      	cbz	r2, 8000a42 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000a3e:	6181      	str	r1, [r0, #24]
 8000a40:	4770      	bx	lr
 8000a42:	0409      	lsls	r1, r1, #16
 8000a44:	e7fb      	b.n	8000a3e <HAL_GPIO_WritePin+0x2>

08000a46 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8000a46:	6803      	ldr	r3, [r0, #0]
 8000a48:	699a      	ldr	r2, [r3, #24]
 8000a4a:	0791      	lsls	r1, r2, #30
 8000a4c:	d501      	bpl.n	8000a52 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8000a4e:	2200      	movs	r2, #0
 8000a50:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000a52:	699a      	ldr	r2, [r3, #24]
 8000a54:	07d2      	lsls	r2, r2, #31
 8000a56:	d403      	bmi.n	8000a60 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8000a58:	699a      	ldr	r2, [r3, #24]
 8000a5a:	f042 0201 	orr.w	r2, r2, #1
 8000a5e:	619a      	str	r2, [r3, #24]
 8000a60:	4770      	bx	lr

08000a62 <I2C_Disable_IRQ>:
  */
static HAL_StatusTypeDef I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8000a62:	f011 0301 	ands.w	r3, r1, #1
 8000a66:	d007      	beq.n	8000a78 <I2C_Disable_IRQ+0x16>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 8000a68:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000a6c:	f003 0328 	and.w	r3, r3, #40	; 0x28
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8000a70:	2b28      	cmp	r3, #40	; 0x28
 8000a72:	bf0c      	ite	eq
 8000a74:	2342      	moveq	r3, #66	; 0x42
 8000a76:	23f2      	movne	r3, #242	; 0xf2
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8000a78:	078a      	lsls	r2, r1, #30
 8000a7a:	d509      	bpl.n	8000a90 <I2C_Disable_IRQ+0x2e>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;

    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 8000a7c:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8000a80:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8000a84:	2a28      	cmp	r2, #40	; 0x28
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8000a86:	bf0c      	ite	eq
 8000a88:	f043 0344 	orreq.w	r3, r3, #68	; 0x44
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8000a8c:	f043 03f4 	orrne.w	r3, r3, #244	; 0xf4
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8000a90:	074a      	lsls	r2, r1, #29
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8000a92:	f001 0211 	and.w	r2, r1, #17
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8000a96:	f001 0112 	and.w	r1, r1, #18
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8000a9a:	bf48      	it	mi
 8000a9c:	f043 03b8 	orrmi.w	r3, r3, #184	; 0xb8
  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8000aa0:	2a11      	cmp	r2, #17
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8000aa2:	bf08      	it	eq
 8000aa4:	f043 0390 	orreq.w	r3, r3, #144	; 0x90
  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8000aa8:	2912      	cmp	r1, #18
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8000aaa:	6801      	ldr	r1, [r0, #0]

  return HAL_OK;
}
 8000aac:	f04f 0000 	mov.w	r0, #0
    tmpisr |= I2C_IT_TCI;
 8000ab0:	bf08      	it	eq
 8000ab2:	f043 0360 	orreq.w	r3, r3, #96	; 0x60
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8000ab6:	680a      	ldr	r2, [r1, #0]
 8000ab8:	ea22 0303 	bic.w	r3, r2, r3
 8000abc:	600b      	str	r3, [r1, #0]
}
 8000abe:	4770      	bx	lr

08000ac0 <HAL_I2C_Init>:
{
 8000ac0:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8000ac2:	4604      	mov	r4, r0
 8000ac4:	2800      	cmp	r0, #0
 8000ac6:	d04a      	beq.n	8000b5e <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000ac8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000acc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000ad0:	b91b      	cbnz	r3, 8000ada <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8000ad2:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8000ad6:	f004 fcd3 	bl	8005480 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000ada:	2324      	movs	r3, #36	; 0x24
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000adc:	68e1      	ldr	r1, [r4, #12]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000ade:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000ae2:	2901      	cmp	r1, #1
  __HAL_I2C_DISABLE(hi2c);
 8000ae4:	6823      	ldr	r3, [r4, #0]
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	f022 0201 	bic.w	r2, r2, #1
 8000aec:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000aee:	6862      	ldr	r2, [r4, #4]
 8000af0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000af4:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000af6:	689a      	ldr	r2, [r3, #8]
 8000af8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000afc:	609a      	str	r2, [r3, #8]
 8000afe:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000b00:	d124      	bne.n	8000b4c <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000b02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000b06:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000b08:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000b0a:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000b0c:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000b0e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8000b12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000b16:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000b18:	68da      	ldr	r2, [r3, #12]
 8000b1a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000b1e:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000b20:	6922      	ldr	r2, [r4, #16]
 8000b22:	430a      	orrs	r2, r1
 8000b24:	69a1      	ldr	r1, [r4, #24]
 8000b26:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000b2a:	6a21      	ldr	r1, [r4, #32]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000b2c:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000b2e:	69e2      	ldr	r2, [r4, #28]
 8000b30:	430a      	orrs	r2, r1
 8000b32:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	f042 0201 	orr.w	r2, r2, #1
 8000b3a:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8000b3c:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000b3e:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000b40:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000b44:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000b46:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 8000b4a:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000b4c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000b50:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000b52:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000b54:	d1d8      	bne.n	8000b08 <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000b56:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b5a:	605a      	str	r2, [r3, #4]
 8000b5c:	e7d4      	b.n	8000b08 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8000b5e:	2001      	movs	r0, #1
}
 8000b60:	bd10      	pop	{r4, pc}

08000b62 <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8000b62:	6802      	ldr	r2, [r0, #0]
  if (hi2c->XferISR != NULL)
 8000b64:	6b43      	ldr	r3, [r0, #52]	; 0x34
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8000b66:	6991      	ldr	r1, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8000b68:	6812      	ldr	r2, [r2, #0]
  if (hi2c->XferISR != NULL)
 8000b6a:	b103      	cbz	r3, 8000b6e <HAL_I2C_EV_IRQHandler+0xc>
    hi2c->XferISR(hi2c, itflags, itsources);
 8000b6c:	4718      	bx	r3
 8000b6e:	4770      	bx	lr

08000b70 <HAL_I2C_SlaveTxCpltCallback>:
 8000b70:	4770      	bx	lr

08000b72 <HAL_I2C_SlaveRxCpltCallback>:
 8000b72:	4770      	bx	lr

08000b74 <I2C_ITSlaveSequentialCplt>:
{
 8000b74:	b538      	push	{r3, r4, r5, lr}
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000b76:	2500      	movs	r5, #0
{
 8000b78:	4604      	mov	r4, r0
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000b7a:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8000b7e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000b82:	2b29      	cmp	r3, #41	; 0x29
 8000b84:	d10d      	bne.n	8000ba2 <I2C_ITSlaveSequentialCplt+0x2e>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8000b86:	2328      	movs	r3, #40	; 0x28
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8000b88:	2101      	movs	r1, #1
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8000b8a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8000b8e:	2321      	movs	r3, #33	; 0x21
 8000b90:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8000b92:	f7ff ff66 	bl	8000a62 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8000b96:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8000b9a:	4620      	mov	r0, r4
 8000b9c:	f7ff ffe8 	bl	8000b70 <HAL_I2C_SlaveTxCpltCallback>
 8000ba0:	bd38      	pop	{r3, r4, r5, pc}
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8000ba2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000ba6:	2b2a      	cmp	r3, #42	; 0x2a
 8000ba8:	d10c      	bne.n	8000bc4 <I2C_ITSlaveSequentialCplt+0x50>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8000baa:	2328      	movs	r3, #40	; 0x28
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8000bac:	2102      	movs	r1, #2
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8000bae:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8000bb2:	2322      	movs	r3, #34	; 0x22
 8000bb4:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8000bb6:	f7ff ff54 	bl	8000a62 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8000bba:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8000bbe:	4620      	mov	r0, r4
 8000bc0:	f7ff ffd7 	bl	8000b72 <HAL_I2C_SlaveRxCpltCallback>
 8000bc4:	bd38      	pop	{r3, r4, r5, pc}

08000bc6 <HAL_I2C_AddrCallback>:
{
 8000bc6:	4770      	bx	lr

08000bc8 <HAL_I2C_ListenCpltCallback>:
 8000bc8:	4770      	bx	lr
	...

08000bcc <I2C_ITListenCplt>:
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000bcc:	4b16      	ldr	r3, [pc, #88]	; (8000c28 <I2C_ITListenCplt+0x5c>)
  hi2c->State = HAL_I2C_STATE_READY;
 8000bce:	2220      	movs	r2, #32
{
 8000bd0:	b510      	push	{r4, lr}
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000bd2:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8000bd4:	2300      	movs	r3, #0
{
 8000bd6:	4604      	mov	r4, r0
  hi2c->PreviousState = I2C_STATE_NONE;
 8000bd8:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->XferISR = NULL;
 8000bda:	6343      	str	r3, [r0, #52]	; 0x34
  hi2c->State = HAL_I2C_STATE_READY;
 8000bdc:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000be0:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  if (((ITFlags & I2C_FLAG_RXNE) != RESET))
 8000be4:	074b      	lsls	r3, r1, #29
 8000be6:	d511      	bpl.n	8000c0c <I2C_ITListenCplt+0x40>
    (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8000be8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000bea:	1c5a      	adds	r2, r3, #1
 8000bec:	6242      	str	r2, [r0, #36]	; 0x24
 8000bee:	6802      	ldr	r2, [r0, #0]
 8000bf0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000bf2:	701a      	strb	r2, [r3, #0]
    if ((hi2c->XferSize > 0U))
 8000bf4:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8000bf6:	b14b      	cbz	r3, 8000c0c <I2C_ITListenCplt+0x40>
      hi2c->XferSize--;
 8000bf8:	3b01      	subs	r3, #1
 8000bfa:	8503      	strh	r3, [r0, #40]	; 0x28
      hi2c->XferCount--;
 8000bfc:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8000bfe:	3b01      	subs	r3, #1
 8000c00:	b29b      	uxth	r3, r3
 8000c02:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8000c04:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000c06:	f043 0304 	orr.w	r3, r3, #4
 8000c0a:	6443      	str	r3, [r0, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8000c0c:	2107      	movs	r1, #7
 8000c0e:	4620      	mov	r0, r4
 8000c10:	f7ff ff27 	bl	8000a62 <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000c14:	6823      	ldr	r3, [r4, #0]
 8000c16:	2210      	movs	r2, #16
  HAL_I2C_ListenCpltCallback(hi2c);
 8000c18:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000c1a:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 8000c22:	f7ff ffd1 	bl	8000bc8 <HAL_I2C_ListenCpltCallback>
 8000c26:	bd10      	pop	{r4, pc}
 8000c28:	ffff0000 	.word	0xffff0000

08000c2c <HAL_I2C_ErrorCallback>:
 8000c2c:	4770      	bx	lr

08000c2e <HAL_I2C_AbortCpltCallback>:
{
 8000c2e:	4770      	bx	lr

08000c30 <I2C_ITError>:
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8000c30:	2300      	movs	r3, #0
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8000c32:	4a34      	ldr	r2, [pc, #208]	; (8000d04 <I2C_ITError+0xd4>)
{
 8000c34:	b510      	push	{r4, lr}
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8000c36:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
{
 8000c3a:	4604      	mov	r4, r0
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8000c3c:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8000c3e:	8543      	strh	r3, [r0, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8000c40:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000c42:	4319      	orrs	r1, r3
 8000c44:	6441      	str	r1, [r0, #68]	; 0x44
  if ((hi2c->State == HAL_I2C_STATE_LISTEN)         ||
 8000c46:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000c4a:	2b28      	cmp	r3, #40	; 0x28
 8000c4c:	d007      	beq.n	8000c5e <I2C_ITError+0x2e>
      (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8000c4e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  if ((hi2c->State == HAL_I2C_STATE_LISTEN)         ||
 8000c52:	2b29      	cmp	r3, #41	; 0x29
 8000c54:	d003      	beq.n	8000c5e <I2C_ITError+0x2e>
      (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8000c56:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
      (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8000c5a:	2b2a      	cmp	r3, #42	; 0x2a
 8000c5c:	d121      	bne.n	8000ca2 <I2C_ITError+0x72>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8000c5e:	2103      	movs	r1, #3
 8000c60:	4620      	mov	r0, r4
 8000c62:	f7ff fefe 	bl	8000a62 <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8000c66:	2328      	movs	r3, #40	; 0x28
 8000c68:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8000c70:	4b25      	ldr	r3, [pc, #148]	; (8000d08 <I2C_ITError+0xd8>)
    hi2c->XferISR       = NULL;
 8000c72:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8000c74:	6823      	ldr	r3, [r4, #0]
 8000c76:	6819      	ldr	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8000c78:	681a      	ldr	r2, [r3, #0]
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8000c7a:	f411 4180 	ands.w	r1, r1, #16384	; 0x4000
 8000c7e:	d01d      	beq.n	8000cbc <I2C_ITError+0x8c>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8000c80:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
    hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8000c84:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8000c86:	601a      	str	r2, [r3, #0]
    hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8000c88:	4b20      	ldr	r3, [pc, #128]	; (8000d0c <I2C_ITError+0xdc>)
 8000c8a:	6503      	str	r3, [r0, #80]	; 0x50
    __HAL_UNLOCK(hi2c);
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8000c92:	f7ff fd05 	bl	80006a0 <HAL_DMA_Abort_IT>
 8000c96:	b3a0      	cbz	r0, 8000d02 <I2C_ITError+0xd2>
      hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8000c98:	6ba0      	ldr	r0, [r4, #56]	; 0x38
      hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8000c9a:	6d03      	ldr	r3, [r0, #80]	; 0x50
}
 8000c9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8000ca0:	4718      	bx	r3
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8000ca2:	2107      	movs	r1, #7
 8000ca4:	f7ff fedd 	bl	8000a62 <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8000ca8:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8000cac:	2b60      	cmp	r3, #96	; 0x60
 8000cae:	d002      	beq.n	8000cb6 <I2C_ITError+0x86>
      hi2c->State         = HAL_I2C_STATE_READY;
 8000cb0:	2320      	movs	r3, #32
 8000cb2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	6323      	str	r3, [r4, #48]	; 0x30
 8000cba:	e7da      	b.n	8000c72 <I2C_ITError+0x42>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8000cbc:	f412 4200 	ands.w	r2, r2, #32768	; 0x8000
 8000cc0:	d00d      	beq.n	8000cde <I2C_ITError+0xae>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8000cc2:	681a      	ldr	r2, [r3, #0]
    hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8000cc4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8000cc6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000cca:	601a      	str	r2, [r3, #0]
    hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8000ccc:	4b0f      	ldr	r3, [pc, #60]	; (8000d0c <I2C_ITError+0xdc>)
 8000cce:	6503      	str	r3, [r0, #80]	; 0x50
    __HAL_UNLOCK(hi2c);
 8000cd0:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8000cd4:	f7ff fce4 	bl	80006a0 <HAL_DMA_Abort_IT>
 8000cd8:	b198      	cbz	r0, 8000d02 <I2C_ITError+0xd2>
      hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8000cda:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8000cdc:	e7dd      	b.n	8000c9a <I2C_ITError+0x6a>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8000cde:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8000ce2:	2b60      	cmp	r3, #96	; 0x60
 8000ce4:	d108      	bne.n	8000cf8 <I2C_ITError+0xc8>
    hi2c->State = HAL_I2C_STATE_READY;
 8000ce6:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 8000ce8:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8000cec:	4620      	mov	r0, r4
    hi2c->State = HAL_I2C_STATE_READY;
 8000cee:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    HAL_I2C_AbortCpltCallback(hi2c);
 8000cf2:	f7ff ff9c 	bl	8000c2e <HAL_I2C_AbortCpltCallback>
 8000cf6:	bd10      	pop	{r4, pc}
    __HAL_UNLOCK(hi2c);
 8000cf8:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8000cfc:	4620      	mov	r0, r4
 8000cfe:	f7ff ff95 	bl	8000c2c <HAL_I2C_ErrorCallback>
 8000d02:	bd10      	pop	{r4, pc}
 8000d04:	ffff0000 	.word	0xffff0000
 8000d08:	08000e11 	.word	0x08000e11
 8000d0c:	08001023 	.word	0x08001023

08000d10 <I2C_ITSlaveCplt>:
{
 8000d10:	b538      	push	{r3, r4, r5, lr}
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000d12:	2220      	movs	r2, #32
 8000d14:	6803      	ldr	r3, [r0, #0]
{
 8000d16:	4604      	mov	r4, r0
 8000d18:	460d      	mov	r5, r1
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000d1a:	61da      	str	r2, [r3, #28]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8000d1c:	2208      	movs	r2, #8
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8000d1e:	2107      	movs	r1, #7
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8000d20:	61da      	str	r2, [r3, #28]
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8000d22:	f7ff fe9e 	bl	8000a62 <I2C_Disable_IRQ>
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8000d26:	6823      	ldr	r3, [r4, #0]
  I2C_Flush_TXDR(hi2c);
 8000d28:	4620      	mov	r0, r4
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8000d2a:	685a      	ldr	r2, [r3, #4]
 8000d2c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000d30:	605a      	str	r2, [r3, #4]
  I2C_RESET_CR2(hi2c);
 8000d32:	685a      	ldr	r2, [r3, #4]
 8000d34:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8000d38:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8000d3c:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8000d40:	f022 0201 	bic.w	r2, r2, #1
 8000d44:	605a      	str	r2, [r3, #4]
  I2C_Flush_TXDR(hi2c);
 8000d46:	f7ff fe7e 	bl	8000a46 <I2C_Flush_TXDR>
  if (((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN) ||
 8000d4a:	6822      	ldr	r2, [r4, #0]
 8000d4c:	6813      	ldr	r3, [r2, #0]
 8000d4e:	0458      	lsls	r0, r3, #17
 8000d50:	d402      	bmi.n	8000d58 <I2C_ITSlaveCplt+0x48>
      ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN))
 8000d52:	6813      	ldr	r3, [r2, #0]
  if (((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN) ||
 8000d54:	0419      	lsls	r1, r3, #16
 8000d56:	d509      	bpl.n	8000d6c <I2C_ITSlaveCplt+0x5c>
    hi2c->XferCount = I2C_GET_DMA_REMAIN_DATA(hi2c);
 8000d58:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8000d5c:	2b21      	cmp	r3, #33	; 0x21
 8000d5e:	bf0c      	ite	eq
 8000d60:	6ba3      	ldreq	r3, [r4, #56]	; 0x38
 8000d62:	6be3      	ldrne	r3, [r4, #60]	; 0x3c
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	b29b      	uxth	r3, r3
 8000d6a:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 8000d6c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000d6e:	b29b      	uxth	r3, r3
 8000d70:	b11b      	cbz	r3, 8000d7a <I2C_ITSlaveCplt+0x6a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8000d72:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000d74:	f043 0304 	orr.w	r3, r3, #4
 8000d78:	6463      	str	r3, [r4, #68]	; 0x44
  if (((ITFlags & I2C_FLAG_RXNE) != RESET))
 8000d7a:	076b      	lsls	r3, r5, #29
 8000d7c:	d510      	bpl.n	8000da0 <I2C_ITSlaveCplt+0x90>
    (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8000d7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000d80:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000d82:	1c59      	adds	r1, r3, #1
 8000d84:	6261      	str	r1, [r4, #36]	; 0x24
 8000d86:	701a      	strb	r2, [r3, #0]
    if ((hi2c->XferSize > 0U))
 8000d88:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8000d8a:	b14b      	cbz	r3, 8000da0 <I2C_ITSlaveCplt+0x90>
      hi2c->XferSize--;
 8000d8c:	3b01      	subs	r3, #1
 8000d8e:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8000d90:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000d92:	3b01      	subs	r3, #1
 8000d94:	b29b      	uxth	r3, r3
 8000d96:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8000d98:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000d9a:	f043 0304 	orr.w	r3, r3, #4
 8000d9e:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->PreviousState = I2C_STATE_NONE;
 8000da0:	2300      	movs	r3, #0
 8000da2:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->XferISR = NULL;
 8000da4:	6363      	str	r3, [r4, #52]	; 0x34
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000da6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8000daa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000dac:	b16b      	cbz	r3, 8000dca <I2C_ITSlaveCplt+0xba>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8000dae:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8000db0:	4620      	mov	r0, r4
 8000db2:	f7ff ff3d 	bl	8000c30 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8000db6:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8000dba:	2b28      	cmp	r3, #40	; 0x28
 8000dbc:	d124      	bne.n	8000e08 <I2C_ITSlaveCplt+0xf8>
      I2C_ITListenCplt(hi2c, ITFlags);
 8000dbe:	4629      	mov	r1, r5
 8000dc0:	4620      	mov	r0, r4
}
 8000dc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      I2C_ITListenCplt(hi2c, ITFlags);
 8000dc6:	f7ff bf01 	b.w	8000bcc <I2C_ITListenCplt>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8000dca:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000dcc:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8000dd0:	d00a      	beq.n	8000de8 <I2C_ITSlaveCplt+0xd8>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000dd2:	4a0e      	ldr	r2, [pc, #56]	; (8000e0c <I2C_ITSlaveCplt+0xfc>)
    HAL_I2C_ListenCpltCallback(hi2c);
 8000dd4:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 8000dd6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000dda:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8000ddc:	2220      	movs	r2, #32
 8000dde:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    HAL_I2C_ListenCpltCallback(hi2c);
 8000de2:	f7ff fef1 	bl	8000bc8 <HAL_I2C_ListenCpltCallback>
 8000de6:	bd38      	pop	{r3, r4, r5, pc}
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8000de8:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8000dec:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 8000dee:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8000df2:	2a22      	cmp	r2, #34	; 0x22
 8000df4:	f04f 0220 	mov.w	r2, #32
    hi2c->State = HAL_I2C_STATE_READY;
 8000df8:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8000dfc:	d102      	bne.n	8000e04 <I2C_ITSlaveCplt+0xf4>
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8000dfe:	f7ff feb8 	bl	8000b72 <HAL_I2C_SlaveRxCpltCallback>
 8000e02:	bd38      	pop	{r3, r4, r5, pc}
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8000e04:	f7ff feb4 	bl	8000b70 <HAL_I2C_SlaveTxCpltCallback>
 8000e08:	bd38      	pop	{r3, r4, r5, pc}
 8000e0a:	bf00      	nop
 8000e0c:	ffff0000 	.word	0xffff0000

08000e10 <I2C_Slave_ISR_IT>:
{
 8000e10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(hi2c);
 8000e14:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
{
 8000e18:	4604      	mov	r4, r0
 8000e1a:	460e      	mov	r6, r1
 8000e1c:	4617      	mov	r7, r2
  __HAL_LOCK(hi2c);
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	f000 80cb 	beq.w	8000fba <I2C_Slave_ISR_IT+0x1aa>
 8000e24:	2301      	movs	r3, #1
  if (((ITFlags & I2C_FLAG_AF) != RESET) && ((ITSources & I2C_IT_NACKI) != RESET))
 8000e26:	06cd      	lsls	r5, r1, #27
  __HAL_LOCK(hi2c);
 8000e28:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if (((ITFlags & I2C_FLAG_AF) != RESET) && ((ITSources & I2C_IT_NACKI) != RESET))
 8000e2c:	d53e      	bpl.n	8000eac <I2C_Slave_ISR_IT+0x9c>
 8000e2e:	06d0      	lsls	r0, r2, #27
 8000e30:	d53c      	bpl.n	8000eac <I2C_Slave_ISR_IT+0x9c>
    if (hi2c->XferCount == 0U)
 8000e32:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000e34:	b29b      	uxth	r3, r3
 8000e36:	bb8b      	cbnz	r3, 8000e9c <I2C_Slave_ISR_IT+0x8c>
      if (((hi2c->XferOptions == I2C_FIRST_AND_LAST_FRAME) || (hi2c->XferOptions == I2C_LAST_FRAME)) && \
 8000e38:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000e3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000e3e:	d003      	beq.n	8000e48 <I2C_Slave_ISR_IT+0x38>
 8000e40:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000e42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000e46:	d114      	bne.n	8000e72 <I2C_Slave_ISR_IT+0x62>
          (hi2c->State == HAL_I2C_STATE_LISTEN))
 8000e48:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
      if (((hi2c->XferOptions == I2C_FIRST_AND_LAST_FRAME) || (hi2c->XferOptions == I2C_LAST_FRAME)) && \
 8000e4c:	2b28      	cmp	r3, #40	; 0x28
 8000e4e:	d110      	bne.n	8000e72 <I2C_Slave_ISR_IT+0x62>
        I2C_ITListenCplt(hi2c, ITFlags);
 8000e50:	4631      	mov	r1, r6
 8000e52:	4620      	mov	r0, r4
 8000e54:	f7ff feba 	bl	8000bcc <I2C_ITListenCplt>
  if (((ITFlags & I2C_FLAG_STOPF) != RESET) && ((ITSources & I2C_IT_STOPI) != RESET))
 8000e58:	06b2      	lsls	r2, r6, #26
 8000e5a:	d505      	bpl.n	8000e68 <I2C_Slave_ISR_IT+0x58>
 8000e5c:	06bb      	lsls	r3, r7, #26
 8000e5e:	d503      	bpl.n	8000e68 <I2C_Slave_ISR_IT+0x58>
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8000e60:	4631      	mov	r1, r6
 8000e62:	4620      	mov	r0, r4
 8000e64:	f7ff ff54 	bl	8000d10 <I2C_ITSlaveCplt>
  __HAL_UNLOCK(hi2c);
 8000e68:	2000      	movs	r0, #0
 8000e6a:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
 8000e6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      else if ((hi2c->XferOptions != I2C_NO_OPTION_FRAME) && (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8000e72:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000e74:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8000e78:	6823      	ldr	r3, [r4, #0]
 8000e7a:	d00c      	beq.n	8000e96 <I2C_Slave_ISR_IT+0x86>
 8000e7c:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8000e80:	2a29      	cmp	r2, #41	; 0x29
 8000e82:	d108      	bne.n	8000e96 <I2C_Slave_ISR_IT+0x86>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000e84:	2210      	movs	r2, #16
        I2C_Flush_TXDR(hi2c);
 8000e86:	4620      	mov	r0, r4
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000e88:	61da      	str	r2, [r3, #28]
        I2C_Flush_TXDR(hi2c);
 8000e8a:	f7ff fddc 	bl	8000a46 <I2C_Flush_TXDR>
      I2C_ITSlaveSequentialCplt(hi2c);
 8000e8e:	4620      	mov	r0, r4
 8000e90:	f7ff fe70 	bl	8000b74 <I2C_ITSlaveSequentialCplt>
 8000e94:	e7e0      	b.n	8000e58 <I2C_Slave_ISR_IT+0x48>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000e96:	2210      	movs	r2, #16
 8000e98:	61da      	str	r2, [r3, #28]
 8000e9a:	e7dd      	b.n	8000e58 <I2C_Slave_ISR_IT+0x48>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000e9c:	6823      	ldr	r3, [r4, #0]
 8000e9e:	2210      	movs	r2, #16
 8000ea0:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8000ea2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000ea4:	f043 0304 	orr.w	r3, r3, #4
 8000ea8:	6463      	str	r3, [r4, #68]	; 0x44
 8000eaa:	e7d5      	b.n	8000e58 <I2C_Slave_ISR_IT+0x48>
  else if (((ITFlags & I2C_FLAG_RXNE) != RESET) && ((ITSources & I2C_IT_RXI) != RESET))
 8000eac:	0771      	lsls	r1, r6, #29
 8000eae:	d51a      	bpl.n	8000ee6 <I2C_Slave_ISR_IT+0xd6>
 8000eb0:	077a      	lsls	r2, r7, #29
 8000eb2:	d518      	bpl.n	8000ee6 <I2C_Slave_ISR_IT+0xd6>
    if (hi2c->XferCount > 0U)
 8000eb4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000eb6:	b29b      	uxth	r3, r3
 8000eb8:	b163      	cbz	r3, 8000ed4 <I2C_Slave_ISR_IT+0xc4>
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8000eba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000ebc:	1c5a      	adds	r2, r3, #1
 8000ebe:	6262      	str	r2, [r4, #36]	; 0x24
 8000ec0:	6822      	ldr	r2, [r4, #0]
 8000ec2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000ec4:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 8000ec6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8000ec8:	3b01      	subs	r3, #1
 8000eca:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8000ecc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000ece:	3b01      	subs	r3, #1
 8000ed0:	b29b      	uxth	r3, r3
 8000ed2:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 8000ed4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000ed6:	b29b      	uxth	r3, r3
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d1bd      	bne.n	8000e58 <I2C_Slave_ISR_IT+0x48>
        (hi2c->XferOptions != I2C_NO_OPTION_FRAME))
 8000edc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if ((hi2c->XferCount == 0U) && \
 8000ede:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8000ee2:	d1d4      	bne.n	8000e8e <I2C_Slave_ISR_IT+0x7e>
 8000ee4:	e7b8      	b.n	8000e58 <I2C_Slave_ISR_IT+0x48>
  else if (((ITFlags & I2C_FLAG_ADDR) != RESET) && ((ITSources & I2C_IT_ADDRI) != RESET))
 8000ee6:	0733      	lsls	r3, r6, #28
 8000ee8:	d546      	bpl.n	8000f78 <I2C_Slave_ISR_IT+0x168>
 8000eea:	073d      	lsls	r5, r7, #28
 8000eec:	d544      	bpl.n	8000f78 <I2C_Slave_ISR_IT+0x168>
  if ((hi2c->State & HAL_I2C_STATE_LISTEN) == HAL_I2C_STATE_LISTEN)
 8000eee:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8000ef2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8000ef6:	2b28      	cmp	r3, #40	; 0x28
 8000ef8:	6823      	ldr	r3, [r4, #0]
 8000efa:	d137      	bne.n	8000f6c <I2C_Slave_ISR_IT+0x15c>
    transferdirection = I2C_GET_DIR(hi2c);
 8000efc:	699a      	ldr	r2, [r3, #24]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000efe:	68e1      	ldr	r1, [r4, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8000f00:	699d      	ldr	r5, [r3, #24]
    transferdirection = I2C_GET_DIR(hi2c);
 8000f02:	f3c2 4800 	ubfx	r8, r2, #16, #1
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000f06:	2902      	cmp	r1, #2
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8000f08:	689a      	ldr	r2, [r3, #8]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8000f0a:	ea4f 4515 	mov.w	r5, r5, lsr #16
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8000f0e:	f8d3 900c 	ldr.w	r9, [r3, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8000f12:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000f16:	d120      	bne.n	8000f5a <I2C_Slave_ISR_IT+0x14a>
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8000f18:	f3c2 0209 	ubfx	r2, r2, #0, #10
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8000f1c:	ea85 15d2 	eor.w	r5, r5, r2, lsr #7
 8000f20:	f015 0506 	ands.w	r5, r5, #6
 8000f24:	d10f      	bne.n	8000f46 <I2C_Slave_ISR_IT+0x136>
        hi2c->AddrEventCount++;
 8000f26:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8000f28:	3101      	adds	r1, #1
 8000f2a:	64a1      	str	r1, [r4, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8000f2c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8000f2e:	2902      	cmp	r1, #2
 8000f30:	d192      	bne.n	8000e58 <I2C_Slave_ISR_IT+0x48>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8000f32:	2108      	movs	r1, #8
          hi2c->AddrEventCount = 0U;
 8000f34:	64a5      	str	r5, [r4, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8000f36:	61d9      	str	r1, [r3, #28]
          __HAL_UNLOCK(hi2c);
 8000f38:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8000f3c:	4641      	mov	r1, r8
 8000f3e:	4620      	mov	r0, r4
 8000f40:	f7ff fe41 	bl	8000bc6 <HAL_I2C_AddrCallback>
 8000f44:	e788      	b.n	8000e58 <I2C_Slave_ISR_IT+0x48>
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8000f46:	2104      	movs	r1, #4
 8000f48:	4620      	mov	r0, r4
 8000f4a:	f7ff fd8a 	bl	8000a62 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8000f4e:	2300      	movs	r3, #0
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8000f50:	f009 02fe 	and.w	r2, r9, #254	; 0xfe
        __HAL_UNLOCK(hi2c);
 8000f54:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8000f58:	e7f0      	b.n	8000f3c <I2C_Slave_ISR_IT+0x12c>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8000f5a:	2104      	movs	r1, #4
 8000f5c:	4620      	mov	r0, r4
 8000f5e:	f7ff fd80 	bl	8000a62 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8000f62:	2300      	movs	r3, #0
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8000f64:	462a      	mov	r2, r5
      __HAL_UNLOCK(hi2c);
 8000f66:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8000f6a:	e7e7      	b.n	8000f3c <I2C_Slave_ISR_IT+0x12c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8000f6c:	2208      	movs	r2, #8
 8000f6e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8000f70:	2300      	movs	r3, #0
 8000f72:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8000f76:	e76f      	b.n	8000e58 <I2C_Slave_ISR_IT+0x48>
  else if (((ITFlags & I2C_FLAG_TXIS) != RESET) && ((ITSources & I2C_IT_TXI) != RESET))
 8000f78:	07b0      	lsls	r0, r6, #30
 8000f7a:	f57f af6d 	bpl.w	8000e58 <I2C_Slave_ISR_IT+0x48>
 8000f7e:	07b9      	lsls	r1, r7, #30
 8000f80:	f57f af6a 	bpl.w	8000e58 <I2C_Slave_ISR_IT+0x48>
    if (hi2c->XferCount > 0U)
 8000f84:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	b16b      	cbz	r3, 8000fa6 <I2C_Slave_ISR_IT+0x196>
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8000f8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000f8c:	6822      	ldr	r2, [r4, #0]
 8000f8e:	1c59      	adds	r1, r3, #1
 8000f90:	6261      	str	r1, [r4, #36]	; 0x24
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferCount--;
 8000f96:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000f98:	3b01      	subs	r3, #1
 8000f9a:	b29b      	uxth	r3, r3
 8000f9c:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000f9e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8000fa0:	3b01      	subs	r3, #1
 8000fa2:	8523      	strh	r3, [r4, #40]	; 0x28
 8000fa4:	e758      	b.n	8000e58 <I2C_Slave_ISR_IT+0x48>
      if ((hi2c->XferOptions == I2C_NEXT_FRAME) || (hi2c->XferOptions == I2C_FIRST_FRAME))
 8000fa6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000fa8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fac:	f43f af6f 	beq.w	8000e8e <I2C_Slave_ISR_IT+0x7e>
 8000fb0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	f43f af6b 	beq.w	8000e8e <I2C_Slave_ISR_IT+0x7e>
 8000fb8:	e74e      	b.n	8000e58 <I2C_Slave_ISR_IT+0x48>
  __HAL_LOCK(hi2c);
 8000fba:	2002      	movs	r0, #2
}
 8000fbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08000fc0 <HAL_I2C_ER_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8000fc0:	6803      	ldr	r3, [r0, #0]
 8000fc2:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8000fc4:	681a      	ldr	r2, [r3, #0]
{
 8000fc6:	b410      	push	{r4}
  if (((itflags & I2C_FLAG_BERR) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 8000fc8:	05cc      	lsls	r4, r1, #23
 8000fca:	d508      	bpl.n	8000fde <HAL_I2C_ER_IRQHandler+0x1e>
 8000fcc:	0614      	lsls	r4, r2, #24
 8000fce:	d506      	bpl.n	8000fde <HAL_I2C_ER_IRQHandler+0x1e>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8000fd0:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8000fd2:	f044 0401 	orr.w	r4, r4, #1
 8000fd6:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8000fd8:	f44f 7480 	mov.w	r4, #256	; 0x100
 8000fdc:	61dc      	str	r4, [r3, #28]
  if (((itflags & I2C_FLAG_OVR) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 8000fde:	054c      	lsls	r4, r1, #21
 8000fe0:	d508      	bpl.n	8000ff4 <HAL_I2C_ER_IRQHandler+0x34>
 8000fe2:	0614      	lsls	r4, r2, #24
 8000fe4:	d506      	bpl.n	8000ff4 <HAL_I2C_ER_IRQHandler+0x34>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8000fe6:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8000fe8:	f044 0408 	orr.w	r4, r4, #8
 8000fec:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8000fee:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000ff2:	61dc      	str	r4, [r3, #28]
  if (((itflags & I2C_FLAG_ARLO) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 8000ff4:	0589      	lsls	r1, r1, #22
 8000ff6:	d508      	bpl.n	800100a <HAL_I2C_ER_IRQHandler+0x4a>
 8000ff8:	0612      	lsls	r2, r2, #24
 8000ffa:	d506      	bpl.n	800100a <HAL_I2C_ER_IRQHandler+0x4a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8000ffc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8000ffe:	f042 0202 	orr.w	r2, r2, #2
 8001002:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001004:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001008:	61da      	str	r2, [r3, #28]
  if ((hi2c->ErrorCode & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800100a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800100c:	f013 0f0b 	tst.w	r3, #11
 8001010:	d004      	beq.n	800101c <HAL_I2C_ER_IRQHandler+0x5c>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001012:	6c41      	ldr	r1, [r0, #68]	; 0x44
}
 8001014:	f85d 4b04 	ldr.w	r4, [sp], #4
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001018:	f7ff be0a 	b.w	8000c30 <I2C_ITError>
}
 800101c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001020:	4770      	bx	lr

08001022 <I2C_DMAAbort>:
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001022:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001024:	6802      	ldr	r2, [r0, #0]
{
 8001026:	b508      	push	{r3, lr}
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001028:	6853      	ldr	r3, [r2, #4]
 800102a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800102e:	6053      	str	r3, [r2, #4]
  hi2c->hdmatx->XferAbortCallback = NULL;
 8001030:	2300      	movs	r3, #0
 8001032:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8001034:	6513      	str	r3, [r2, #80]	; 0x50
  hi2c->hdmarx->XferAbortCallback = NULL;
 8001036:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8001038:	6513      	str	r3, [r2, #80]	; 0x50
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800103a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800103e:	2b60      	cmp	r3, #96	; 0x60
 8001040:	d105      	bne.n	800104e <I2C_DMAAbort+0x2c>
    hi2c->State = HAL_I2C_STATE_READY;
 8001042:	2320      	movs	r3, #32
 8001044:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2C_AbortCpltCallback(hi2c);
 8001048:	f7ff fdf1 	bl	8000c2e <HAL_I2C_AbortCpltCallback>
 800104c:	bd08      	pop	{r3, pc}
    HAL_I2C_ErrorCallback(hi2c);
 800104e:	f7ff fded 	bl	8000c2c <HAL_I2C_ErrorCallback>
 8001052:	bd08      	pop	{r3, pc}

08001054 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001054:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8001058:	b2d2      	uxtb	r2, r2
 800105a:	2a20      	cmp	r2, #32
{
 800105c:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 800105e:	d11d      	bne.n	800109c <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001060:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001064:	2b01      	cmp	r3, #1
 8001066:	d019      	beq.n	800109c <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001068:	2324      	movs	r3, #36	; 0x24
 800106a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800106e:	6803      	ldr	r3, [r0, #0]
 8001070:	681c      	ldr	r4, [r3, #0]
 8001072:	f024 0401 	bic.w	r4, r4, #1
 8001076:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001078:	681c      	ldr	r4, [r3, #0]
 800107a:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 800107e:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001080:	681c      	ldr	r4, [r3, #0]
 8001082:	4321      	orrs	r1, r4
 8001084:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001086:	6819      	ldr	r1, [r3, #0]
 8001088:	f041 0101 	orr.w	r1, r1, #1
 800108c:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800108e:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001090:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001094:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001098:	4618      	mov	r0, r3
 800109a:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 800109c:	2002      	movs	r0, #2
  }
}
 800109e:	bd10      	pop	{r4, pc}

080010a0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80010a0:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80010a2:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 80010a6:	b2e4      	uxtb	r4, r4
 80010a8:	2c20      	cmp	r4, #32
 80010aa:	d11c      	bne.n	80010e6 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80010ac:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d018      	beq.n	80010e6 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80010b4:	2324      	movs	r3, #36	; 0x24
 80010b6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80010ba:	6803      	ldr	r3, [r0, #0]
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	f022 0201 	bic.w	r2, r2, #1
 80010c2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80010c4:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80010c6:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80010ca:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80010ce:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	f042 0201 	orr.w	r2, r2, #1
 80010d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80010d8:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80010da:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80010de:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80010e2:	4618      	mov	r0, r3
 80010e4:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 80010e6:	2002      	movs	r0, #2
  }
}
 80010e8:	bd10      	pop	{r4, pc}

080010ea <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80010ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t i;

  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 80010ee:	4604      	mov	r4, r0
{
 80010f0:	b08a      	sub	sp, #40	; 0x28
  if(hpcd == NULL)
 80010f2:	2800      	cmp	r0, #0
 80010f4:	d06b      	beq.n	80011ce <HAL_PCD_Init+0xe4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 80010f6:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
 80010fa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80010fe:	b91b      	cbnz	r3, 8001108 <HAL_PCD_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001100:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001104:	f005 f87c 	bl	8006200 <HAL_PCD_MspInit>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001108:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 800110a:	2303      	movs	r3, #3

  /*Init the Core (common init.) */
  (void)USB_CoreInit(hpcd->Instance, hpcd->Init);
 800110c:	466e      	mov	r6, sp
 800110e:	f104 0804 	add.w	r8, r4, #4
  __HAL_PCD_DISABLE(hpcd);
 8001112:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 8001116:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  __HAL_PCD_DISABLE(hpcd);
 800111a:	f002 f994 	bl	8003446 <USB_DisableGlobalInt>
  (void)USB_CoreInit(hpcd->Instance, hpcd->Init);
 800111e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001120:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001122:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001124:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001126:	e895 0003 	ldmia.w	r5, {r0, r1}
 800112a:	f104 0510 	add.w	r5, r4, #16
 800112e:	e886 0003 	stmia.w	r6, {r0, r1}
 8001132:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8001136:	6820      	ldr	r0, [r4, #0]

  /* Init endpoints structures */
  for (i = 0U; i < 15U; i++)
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001138:	2601      	movs	r6, #1
  (void)USB_CoreInit(hpcd->Instance, hpcd->Init);
 800113a:	f002 f943 	bl	80033c4 <USB_CoreInit>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800113e:	2100      	movs	r1, #0
 8001140:	6820      	ldr	r0, [r4, #0]
 8001142:	f002 f986 	bl	8003452 <USB_SetCurrentMode>
 8001146:	2100      	movs	r1, #0
 8001148:	4622      	mov	r2, r4
 800114a:	4623      	mov	r3, r4
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800114c:	4608      	mov	r0, r1
    hpcd->IN_ep[i].num = i;
 800114e:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
 8001152:	331c      	adds	r3, #28
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001154:	84d9      	strh	r1, [r3, #38]	; 0x26
 8001156:	3101      	adds	r1, #1
    hpcd->IN_ep[i].is_in = 1U;
 8001158:	f883 6021 	strb.w	r6, [r3, #33]	; 0x21
  for (i = 0U; i < 15U; i++)
 800115c:	290f      	cmp	r1, #15
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800115e:	f883 0023 	strb.w	r0, [r3, #35]	; 0x23
    hpcd->IN_ep[i].maxpacket = 0U;
 8001162:	6298      	str	r0, [r3, #40]	; 0x28
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001164:	62d8      	str	r0, [r3, #44]	; 0x2c
    hpcd->IN_ep[i].xfer_len = 0U;
 8001166:	6358      	str	r0, [r3, #52]	; 0x34
  for (i = 0U; i < 15U; i++)
 8001168:	d1f1      	bne.n	800114e <HAL_PCD_Init+0x64>
 800116a:	2300      	movs	r3, #0
  }

  for (i = 0U; i < 15U; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800116c:	461f      	mov	r7, r3
    hpcd->OUT_ep[i].num = i;
 800116e:	f882 31fc 	strb.w	r3, [r2, #508]	; 0x1fc
 8001172:	3301      	adds	r3, #1
    hpcd->OUT_ep[i].is_in = 0U;
 8001174:	f882 71fd 	strb.w	r7, [r2, #509]	; 0x1fd
 8001178:	321c      	adds	r2, #28
  for (i = 0U; i < 15U; i++)
 800117a:	2b0f      	cmp	r3, #15
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800117c:	f882 71e3 	strb.w	r7, [r2, #483]	; 0x1e3
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001180:	f8c2 71e8 	str.w	r7, [r2, #488]	; 0x1e8
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001184:	f8c2 71ec 	str.w	r7, [r2, #492]	; 0x1ec
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001188:	f8c2 71f4 	str.w	r7, [r2, #500]	; 0x1f4
  for (i = 0U; i < 15U; i++)
 800118c:	d1ef      	bne.n	800116e <HAL_PCD_Init+0x84>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800118e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001190:	466e      	mov	r6, sp
 8001192:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001194:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001196:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001198:	e895 0003 	ldmia.w	r5, {r0, r1}
 800119c:	e886 0003 	stmia.w	r6, {r0, r1}
 80011a0:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 80011a4:	6820      	ldr	r0, [r4, #0]
 80011a6:	f002 f995 	bl	80034d4 <USB_DevInit>

  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
 80011aa:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 80011ac:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80011b0:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80011b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d102      	bne.n	80011c0 <HAL_PCD_Init+0xd6>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80011ba:	4620      	mov	r0, r4
 80011bc:	f000 fc9f 	bl	8001afe <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect (hpcd->Instance);
 80011c0:	6820      	ldr	r0, [r4, #0]
 80011c2:	f002 fca9 	bl	8003b18 <USB_DevDisconnect>

  return HAL_OK;
 80011c6:	2000      	movs	r0, #0
}
 80011c8:	b00a      	add	sp, #40	; 0x28
 80011ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 80011ce:	2001      	movs	r0, #1
 80011d0:	e7fa      	b.n	80011c8 <HAL_PCD_Init+0xde>

080011d2 <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 80011d2:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 80011d6:	2b01      	cmp	r3, #1
{
 80011d8:	b510      	push	{r4, lr}
 80011da:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80011dc:	d00c      	beq.n	80011f8 <HAL_PCD_Start+0x26>
 80011de:	2301      	movs	r3, #1
 80011e0:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  (void)USB_DevConnect (hpcd->Instance);
 80011e4:	6800      	ldr	r0, [r0, #0]
 80011e6:	f002 fc8b 	bl	8003b00 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80011ea:	6820      	ldr	r0, [r4, #0]
 80011ec:	f002 f925 	bl	800343a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80011f0:	2000      	movs	r0, #0
 80011f2:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 80011f6:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80011f8:	2002      	movs	r0, #2
}
 80011fa:	bd10      	pop	{r4, pc}

080011fc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80011fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001200:	6807      	ldr	r7, [r0, #0]
{
 8001202:	b087      	sub	sp, #28
 8001204:	4604      	mov	r4, r0
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;
  uint32_t hclk;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001206:	4638      	mov	r0, r7
  uint32_t gSNPSiD = *(uint32_t *) TempReg;
 8001208:	f8d7 a040 	ldr.w	sl, [r7, #64]	; 0x40
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800120c:	f002 fcbf 	bl	8003b8e <USB_GetMode>
 8001210:	9002      	str	r0, [sp, #8]
 8001212:	2800      	cmp	r0, #0
 8001214:	f040 814f 	bne.w	80014b6 <HAL_PCD_IRQHandler+0x2ba>
  {
    /* avoid spurious interrupt */
    if(__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001218:	6820      	ldr	r0, [r4, #0]
 800121a:	f002 fc89 	bl	8003b30 <USB_ReadInterrupts>
 800121e:	2800      	cmp	r0, #0
 8001220:	f000 8149 	beq.w	80014b6 <HAL_PCD_IRQHandler+0x2ba>
    {
      return;
    }

    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001224:	6820      	ldr	r0, [r4, #0]
 8001226:	f002 fc83 	bl	8003b30 <USB_ReadInterrupts>
 800122a:	0785      	lsls	r5, r0, #30
 800122c:	d504      	bpl.n	8001238 <HAL_PCD_IRQHandler+0x3c>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800122e:	6822      	ldr	r2, [r4, #0]
 8001230:	6953      	ldr	r3, [r2, #20]
 8001232:	f003 0302 	and.w	r3, r3, #2
 8001236:	6153      	str	r3, [r2, #20]
    }

    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001238:	6820      	ldr	r0, [r4, #0]
 800123a:	f002 fc79 	bl	8003b30 <USB_ReadInterrupts>
 800123e:	f410 2500 	ands.w	r5, r0, #524288	; 0x80000
 8001242:	d00c      	beq.n	800125e <HAL_PCD_IRQHandler+0x62>
 8001244:	f507 6830 	add.w	r8, r7, #2816	; 0xb00
 8001248:	4626      	mov	r6, r4
    {
      epnum = 0U;
 800124a:	2500      	movs	r5, #0

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800124c:	6820      	ldr	r0, [r4, #0]

      while (ep_intr != 0U)
 800124e:	46c1      	mov	r9, r8
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001250:	f002 fc72 	bl	8003b38 <USB_ReadDevAllOutEpInterrupt>
 8001254:	9003      	str	r0, [sp, #12]
      while (ep_intr != 0U)
 8001256:	9b03      	ldr	r3, [sp, #12]
 8001258:	2b00      	cmp	r3, #0
 800125a:	f040 812f 	bne.w	80014bc <HAL_PCD_IRQHandler+0x2c0>
        epnum++;
        ep_intr >>= 1U;
      }
    }

    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800125e:	6820      	ldr	r0, [r4, #0]
 8001260:	f002 fc66 	bl	8003b30 <USB_ReadInterrupts>
 8001264:	0342      	lsls	r2, r0, #13
 8001266:	d50b      	bpl.n	8001280 <HAL_PCD_IRQHandler+0x84>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001268:	6820      	ldr	r0, [r4, #0]
 800126a:	4626      	mov	r6, r4
 800126c:	f002 fc6c 	bl	8003b48 <USB_ReadDevAllInEpInterrupt>
 8001270:	f507 6910 	add.w	r9, r7, #2304	; 0x900
 8001274:	4683      	mov	fp, r0

      epnum = 0U;
 8001276:	2500      	movs	r5, #0

      while (ep_intr != 0U)
 8001278:	f1bb 0f00 	cmp.w	fp, #0
 800127c:	f040 81a1 	bne.w	80015c2 <HAL_PCD_IRQHandler+0x3c6>
        ep_intr >>= 1U;
      }
    }

    /* Handle Resume Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001280:	6820      	ldr	r0, [r4, #0]
 8001282:	f002 fc55 	bl	8003b30 <USB_ReadInterrupts>
 8001286:	2800      	cmp	r0, #0
 8001288:	da15      	bge.n	80012b6 <HAL_PCD_IRQHandler+0xba>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800128a:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 800128e:	f023 0301 	bic.w	r3, r3, #1
 8001292:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804

      if(hpcd->LPM_State == LPM_L1)
 8001296:	f894 33f0 	ldrb.w	r3, [r4, #1008]	; 0x3f0
 800129a:	2b01      	cmp	r3, #1
 800129c:	f040 8227 	bne.w	80016ee <HAL_PCD_IRQHandler+0x4f2>
      {
        hpcd->LPM_State = LPM_L0;
 80012a0:	2100      	movs	r1, #0
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80012a2:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L0;
 80012a4:	f884 13f0 	strb.w	r1, [r4, #1008]	; 0x3f0
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80012a8:	f005 f904 	bl	80064b4 <HAL_PCDEx_LPM_Callback>
      else
      {
        HAL_PCD_ResumeCallback(hpcd);
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80012ac:	6822      	ldr	r2, [r4, #0]
 80012ae:	6953      	ldr	r3, [r2, #20]
 80012b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80012b4:	6153      	str	r3, [r2, #20]
    }

    /* Handle Suspend Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80012b6:	6820      	ldr	r0, [r4, #0]
 80012b8:	f002 fc3a 	bl	8003b30 <USB_ReadInterrupts>
 80012bc:	0503      	lsls	r3, r0, #20
 80012be:	d50b      	bpl.n	80012d8 <HAL_PCD_IRQHandler+0xdc>
    {
      if((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80012c0:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 80012c4:	07de      	lsls	r6, r3, #31
 80012c6:	d502      	bpl.n	80012ce <HAL_PCD_IRQHandler+0xd2>
      {

        HAL_PCD_SuspendCallback(hpcd);
 80012c8:	4620      	mov	r0, r4
 80012ca:	f005 f805 	bl	80062d8 <HAL_PCD_SuspendCallback>
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80012ce:	6822      	ldr	r2, [r4, #0]
 80012d0:	6953      	ldr	r3, [r2, #20]
 80012d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012d6:	6153      	str	r3, [r2, #20]
    }

    /* Handle LPM Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80012d8:	6820      	ldr	r0, [r4, #0]
 80012da:	f002 fc29 	bl	8003b30 <USB_ReadInterrupts>
 80012de:	0100      	lsls	r0, r0, #4
 80012e0:	d514      	bpl.n	800130c <HAL_PCD_IRQHandler+0x110>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80012e2:	6823      	ldr	r3, [r4, #0]
 80012e4:	695a      	ldr	r2, [r3, #20]
 80012e6:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80012ea:	615a      	str	r2, [r3, #20]
      if( hpcd->LPM_State == LPM_L0)
 80012ec:	f894 23f0 	ldrb.w	r2, [r4, #1008]	; 0x3f0
 80012f0:	2a00      	cmp	r2, #0
 80012f2:	f040 8200 	bne.w	80016f6 <HAL_PCD_IRQHandler+0x4fa>
      {
        hpcd->LPM_State = LPM_L1;
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80012f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
        hpcd->LPM_State = LPM_L1;
 80012f8:	2101      	movs	r1, #1
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80012fa:	4620      	mov	r0, r4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80012fc:	f3c3 0383 	ubfx	r3, r3, #2, #4
        hpcd->LPM_State = LPM_L1;
 8001300:	f884 13f0 	strb.w	r1, [r4, #1008]	; 0x3f0
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001304:	f8c4 33f4 	str.w	r3, [r4, #1012]	; 0x3f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001308:	f005 f8d4 	bl	80064b4 <HAL_PCDEx_LPM_Callback>
        HAL_PCD_SuspendCallback(hpcd);
      }
    }

    /* Handle Reset Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800130c:	6820      	ldr	r0, [r4, #0]
 800130e:	f002 fc0f 	bl	8003b30 <USB_ReadInterrupts>
 8001312:	04c1      	lsls	r1, r0, #19
 8001314:	d535      	bpl.n	8001382 <HAL_PCD_IRQHandler+0x186>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001316:	f507 6600 	add.w	r6, r7, #2048	; 0x800
 800131a:	6873      	ldr	r3, [r6, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800131c:	2110      	movs	r1, #16
 800131e:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001320:	f023 0301 	bic.w	r3, r3, #1
 8001324:	6073      	str	r3, [r6, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001326:	f002 f8ab 	bl	8003480 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800132a:	6860      	ldr	r0, [r4, #4]
 800132c:	f507 6310 	add.w	r3, r7, #2304	; 0x900
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001330:	f64f 317f 	movw	r1, #64383	; 0xfb7f
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001334:	9a02      	ldr	r2, [sp, #8]
 8001336:	4282      	cmp	r2, r0
 8001338:	f040 81e1 	bne.w	80016fe <HAL_PCD_IRQHandler+0x502>
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800133c:	69f3      	ldr	r3, [r6, #28]
 800133e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001342:	61f3      	str	r3, [r6, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001344:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001346:	2b00      	cmp	r3, #0
 8001348:	f000 81ed 	beq.w	8001726 <HAL_PCD_IRQHandler+0x52a>
      {
        USBx_DEVICE->DOUTEP1MSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 800134c:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
 8001350:	f043 030b 	orr.w	r3, r3, #11
 8001354:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 8001358:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800135a:	f043 030b 	orr.w	r3, r3, #11
 800135e:	6473      	str	r3, [r6, #68]	; 0x44
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001360:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001364:	f504 7270 	add.w	r2, r4, #960	; 0x3c0
 8001368:	7c21      	ldrb	r1, [r4, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800136a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800136e:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001370:	f8c7 3800 	str.w	r3, [r7, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001374:	f002 fc2a 	bl	8003bcc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001378:	6822      	ldr	r2, [r4, #0]
 800137a:	6953      	ldr	r3, [r2, #20]
 800137c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001380:	6153      	str	r3, [r2, #20]
    }

    /* Handle Enumeration done Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001382:	6820      	ldr	r0, [r4, #0]
 8001384:	f002 fbd4 	bl	8003b30 <USB_ReadInterrupts>
 8001388:	0482      	lsls	r2, r0, #18
 800138a:	d51d      	bpl.n	80013c8 <HAL_PCD_IRQHandler+0x1cc>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800138c:	6820      	ldr	r0, [r4, #0]
 800138e:	f002 fc02 	bl	8003b96 <USB_ActivateSetup>
      hpcd->Instance->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8001392:	6820      	ldr	r0, [r4, #0]
 8001394:	68c3      	ldr	r3, [r0, #12]
 8001396:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 800139a:	60c3      	str	r3, [r0, #12]

      if ( USB_GetDevSpeed(hpcd->Instance) == USB_OTG_SPEED_HIGH)
 800139c:	f002 f952 	bl	8003644 <USB_GetDevSpeed>
 80013a0:	2800      	cmp	r0, #0
 80013a2:	f040 81c9 	bne.w	8001738 <HAL_PCD_IRQHandler+0x53c>
      {
        hpcd->Init.speed            = USB_OTG_SPEED_HIGH;
        hpcd->Init.ep0_mps          = USB_OTG_HS_MAX_PACKET_SIZE;
 80013a6:	f44f 7300 	mov.w	r3, #512	; 0x200
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10U) & USB_OTG_GUSBCFG_TRDT);
 80013aa:	6822      	ldr	r2, [r4, #0]
        hpcd->Init.speed            = USB_OTG_SPEED_HIGH;
 80013ac:	60e0      	str	r0, [r4, #12]
        hpcd->Init.ep0_mps          = USB_OTG_HS_MAX_PACKET_SIZE;
 80013ae:	6163      	str	r3, [r4, #20]
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10U) & USB_OTG_GUSBCFG_TRDT);
 80013b0:	68d3      	ldr	r3, [r2, #12]
 80013b2:	f443 5310 	orr.w	r3, r3, #9216	; 0x2400
 80013b6:	60d3      	str	r3, [r2, #12]
          /* hclk Clock Range between 32-200 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10) & USB_OTG_GUSBCFG_TRDT);
        }
      }

      HAL_PCD_ResetCallback(hpcd);
 80013b8:	4620      	mov	r0, r4
 80013ba:	f004 ff7c 	bl	80062b6 <HAL_PCD_ResetCallback>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80013be:	6822      	ldr	r2, [r4, #0]
 80013c0:	6953      	ldr	r3, [r2, #20]
 80013c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013c6:	6153      	str	r3, [r2, #20]
    }

    /* Handle RxQLevel Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80013c8:	6820      	ldr	r0, [r4, #0]
 80013ca:	f002 fbb1 	bl	8003b30 <USB_ReadInterrupts>
 80013ce:	06c3      	lsls	r3, r0, #27
 80013d0:	d52b      	bpl.n	800142a <HAL_PCD_IRQHandler+0x22e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80013d2:	6822      	ldr	r2, [r4, #0]
 80013d4:	6993      	ldr	r3, [r2, #24]
 80013d6:	f023 0310 	bic.w	r3, r3, #16
 80013da:	6193      	str	r3, [r2, #24]

      temp = USBx->GRXSTSP;
 80013dc:	6a3e      	ldr	r6, [r7, #32]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];

      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80013de:	f3c6 4343 	ubfx	r3, r6, #17, #4
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80013e2:	f006 090f 	and.w	r9, r6, #15
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	f040 821c 	bne.w	8001824 <HAL_PCD_IRQHandler+0x628>
      {
        if((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80013ec:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80013f0:	421e      	tst	r6, r3
 80013f2:	d015      	beq.n	8001420 <HAL_PCD_IRQHandler+0x224>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff, (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80013f4:	f04f 081c 	mov.w	r8, #28
 80013f8:	f3c6 160a 	ubfx	r6, r6, #4, #11
 80013fc:	4638      	mov	r0, r7
 80013fe:	fb08 4809 	mla	r8, r8, r9, r4
 8001402:	4632      	mov	r2, r6
 8001404:	f8d8 1208 	ldr.w	r1, [r8, #520]	; 0x208
 8001408:	f002 fb04 	bl	8003a14 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800140c:	f8d8 3208 	ldr.w	r3, [r8, #520]	; 0x208
 8001410:	4433      	add	r3, r6
 8001412:	f8c8 3208 	str.w	r3, [r8, #520]	; 0x208
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001416:	f8d8 3214 	ldr.w	r3, [r8, #532]	; 0x214
 800141a:	441e      	add	r6, r3
 800141c:	f8c8 6214 	str.w	r6, [r8, #532]	; 0x214
      }
      else
      {
         /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001420:	6822      	ldr	r2, [r4, #0]
 8001422:	6993      	ldr	r3, [r2, #24]
 8001424:	f043 0310 	orr.w	r3, r3, #16
 8001428:	6193      	str	r3, [r2, #24]
    }

    /* Handle SOF Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800142a:	6820      	ldr	r0, [r4, #0]
 800142c:	f002 fb80 	bl	8003b30 <USB_ReadInterrupts>
 8001430:	0707      	lsls	r7, r0, #28
 8001432:	d507      	bpl.n	8001444 <HAL_PCD_IRQHandler+0x248>
    {
      HAL_PCD_SOFCallback(hpcd);
 8001434:	4620      	mov	r0, r4
 8001436:	f004 ff3a 	bl	80062ae <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800143a:	6822      	ldr	r2, [r4, #0]
 800143c:	6953      	ldr	r3, [r2, #20]
 800143e:	f003 0308 	and.w	r3, r3, #8
 8001442:	6153      	str	r3, [r2, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001444:	6820      	ldr	r0, [r4, #0]
 8001446:	f002 fb73 	bl	8003b30 <USB_ReadInterrupts>
 800144a:	02c6      	lsls	r6, r0, #11
 800144c:	d508      	bpl.n	8001460 <HAL_PCD_IRQHandler+0x264>
    {
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800144e:	b2e9      	uxtb	r1, r5
 8001450:	4620      	mov	r0, r4
 8001452:	f004 ff61 	bl	8006318 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001456:	6822      	ldr	r2, [r4, #0]
 8001458:	6953      	ldr	r3, [r2, #20]
 800145a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800145e:	6153      	str	r3, [r2, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001460:	6820      	ldr	r0, [r4, #0]
 8001462:	f002 fb65 	bl	8003b30 <USB_ReadInterrupts>
 8001466:	0280      	lsls	r0, r0, #10
 8001468:	d508      	bpl.n	800147c <HAL_PCD_IRQHandler+0x280>
    {
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800146a:	b2e9      	uxtb	r1, r5
 800146c:	4620      	mov	r0, r4
 800146e:	f004 ff4f 	bl	8006310 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001472:	6822      	ldr	r2, [r4, #0]
 8001474:	6953      	ldr	r3, [r2, #20]
 8001476:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800147a:	6153      	str	r3, [r2, #20]
    }

    /* Handle Connection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800147c:	6820      	ldr	r0, [r4, #0]
 800147e:	f002 fb57 	bl	8003b30 <USB_ReadInterrupts>
 8001482:	0041      	lsls	r1, r0, #1
 8001484:	d507      	bpl.n	8001496 <HAL_PCD_IRQHandler+0x29a>
    {
      HAL_PCD_ConnectCallback(hpcd);
 8001486:	4620      	mov	r0, r4
 8001488:	f004 ff4a 	bl	8006320 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800148c:	6822      	ldr	r2, [r4, #0]
 800148e:	6953      	ldr	r3, [r2, #20]
 8001490:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001494:	6153      	str	r3, [r2, #20]
    }

    /* Handle Disconnection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001496:	6820      	ldr	r0, [r4, #0]
 8001498:	f002 fb4a 	bl	8003b30 <USB_ReadInterrupts>
 800149c:	0742      	lsls	r2, r0, #29
 800149e:	d50a      	bpl.n	80014b6 <HAL_PCD_IRQHandler+0x2ba>
    {
      temp = hpcd->Instance->GOTGINT;
 80014a0:	6823      	ldr	r3, [r4, #0]
 80014a2:	685d      	ldr	r5, [r3, #4]

      if((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80014a4:	076b      	lsls	r3, r5, #29
 80014a6:	d502      	bpl.n	80014ae <HAL_PCD_IRQHandler+0x2b2>
      {
        HAL_PCD_DisconnectCallback(hpcd);
 80014a8:	4620      	mov	r0, r4
 80014aa:	f004 ff3d 	bl	8006328 <HAL_PCD_DisconnectCallback>
      }
      hpcd->Instance->GOTGINT |= temp;
 80014ae:	6823      	ldr	r3, [r4, #0]
 80014b0:	685a      	ldr	r2, [r3, #4]
 80014b2:	4315      	orrs	r5, r2
 80014b4:	605d      	str	r5, [r3, #4]
    }
  }
}
 80014b6:	b007      	add	sp, #28
 80014b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((ep_intr & 0x1U) != 0U)
 80014bc:	9b03      	ldr	r3, [sp, #12]
 80014be:	07d8      	lsls	r0, r3, #31
 80014c0:	d577      	bpl.n	80015b2 <HAL_PCD_IRQHandler+0x3b6>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80014c2:	b2ea      	uxtb	r2, r5
 80014c4:	6820      	ldr	r0, [r4, #0]
 80014c6:	4611      	mov	r1, r2
 80014c8:	9204      	str	r2, [sp, #16]
 80014ca:	f002 fb45 	bl	8003b58 <USB_ReadDevOutEPInterrupt>
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80014ce:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80014d2:	4683      	mov	fp, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80014d4:	d039      	beq.n	800154a <HAL_PCD_IRQHandler+0x34e>
            if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80014d6:	4bb5      	ldr	r3, [pc, #724]	; (80017ac <HAL_PCD_IRQHandler+0x5b0>)
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80014d8:	2101      	movs	r1, #1
            if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80014da:	9a04      	ldr	r2, [sp, #16]
 80014dc:	459a      	cmp	sl, r3
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80014de:	f8c9 1008 	str.w	r1, [r9, #8]
 80014e2:	6921      	ldr	r1, [r4, #16]
            if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80014e4:	d918      	bls.n	8001518 <HAL_PCD_IRQHandler+0x31c>
              if (hpcd->Init.dma_enable == 1U)
 80014e6:	2901      	cmp	r1, #1
 80014e8:	d116      	bne.n	8001518 <HAL_PCD_IRQHandler+0x31c>
                if ((USBx_OUTEP(0U)->DOEPINT & (1U << 15)) != 0U)
 80014ea:	f8d8 1008 	ldr.w	r1, [r8, #8]
 80014ee:	0409      	lsls	r1, r1, #16
 80014f0:	d503      	bpl.n	80014fa <HAL_PCD_IRQHandler+0x2fe>
                  CLEAR_OUT_EP_INTR(epnum, (1U << 15));
 80014f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014f6:	f8c9 1008 	str.w	r1, [r9, #8]
              hpcd->OUT_ep[epnum].xfer_count = hpcd->OUT_ep[epnum].maxpacket- (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80014fa:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80014fe:	f8d6 0204 	ldr.w	r0, [r6, #516]	; 0x204
 8001502:	f3c1 0112 	ubfx	r1, r1, #0, #19
 8001506:	1a41      	subs	r1, r0, r1
 8001508:	f8c6 1214 	str.w	r1, [r6, #532]	; 0x214
              hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800150c:	f8d6 1208 	ldr.w	r1, [r6, #520]	; 0x208
 8001510:	4408      	add	r0, r1
 8001512:	f8c6 0208 	str.w	r0, [r6, #520]	; 0x208
 8001516:	e001      	b.n	800151c <HAL_PCD_IRQHandler+0x320>
            if(hpcd->Init.dma_enable == 1U)
 8001518:	2901      	cmp	r1, #1
 800151a:	d0ee      	beq.n	80014fa <HAL_PCD_IRQHandler+0x2fe>
            if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800151c:	4ba4      	ldr	r3, [pc, #656]	; (80017b0 <HAL_PCD_IRQHandler+0x5b4>)
 800151e:	459a      	cmp	sl, r3
 8001520:	d12d      	bne.n	800157e <HAL_PCD_IRQHandler+0x382>
              if ((USBx_OUTEP(0U)->DOEPINT & (1U << 15)) != 0U)
 8001522:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8001526:	040b      	lsls	r3, r1, #16
 8001528:	d529      	bpl.n	800157e <HAL_PCD_IRQHandler+0x382>
                CLEAR_OUT_EP_INTR(epnum, (1U << 15));
 800152a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800152e:	f8c9 2008 	str.w	r2, [r9, #8]
            if(hpcd->Init.dma_enable == 1U)
 8001532:	6921      	ldr	r1, [r4, #16]
 8001534:	2901      	cmp	r1, #1
 8001536:	d108      	bne.n	800154a <HAL_PCD_IRQHandler+0x34e>
              if((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001538:	b93d      	cbnz	r5, 800154a <HAL_PCD_IRQHandler+0x34e>
 800153a:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
 800153e:	b922      	cbnz	r2, 800154a <HAL_PCD_IRQHandler+0x34e>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001540:	f504 7270 	add.w	r2, r4, #960	; 0x3c0
 8001544:	6820      	ldr	r0, [r4, #0]
 8001546:	f002 fb41 	bl	8003bcc <USB_EP0_OutStart>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800154a:	f01b 0f08 	tst.w	fp, #8
 800154e:	d024      	beq.n	800159a <HAL_PCD_IRQHandler+0x39e>
            if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001550:	4b97      	ldr	r3, [pc, #604]	; (80017b0 <HAL_PCD_IRQHandler+0x5b4>)
 8001552:	459a      	cmp	sl, r3
 8001554:	d118      	bne.n	8001588 <HAL_PCD_IRQHandler+0x38c>
              if ((USBx_OUTEP(0U)->DOEPINT & (1U << 15)) != 0U)
 8001556:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800155a:	0410      	lsls	r0, r2, #16
 800155c:	d503      	bpl.n	8001566 <HAL_PCD_IRQHandler+0x36a>
                CLEAR_OUT_EP_INTR(epnum, (1U << 15));
 800155e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001562:	f8c9 2008 	str.w	r2, [r9, #8]
              if (hpcd->Init.dma_enable == 1U)
 8001566:	6922      	ldr	r2, [r4, #16]
 8001568:	2a01      	cmp	r2, #1
 800156a:	d110      	bne.n	800158e <HAL_PCD_IRQHandler+0x392>
                if ((USBx_OUTEP(0U)->DOEPINT & (1U << 15)) != 0U)
 800156c:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8001570:	0411      	lsls	r1, r2, #16
 8001572:	d50c      	bpl.n	800158e <HAL_PCD_IRQHandler+0x392>
                  CLEAR_OUT_EP_INTR(epnum, (1U << 15));
 8001574:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001578:	f8c9 2008 	str.w	r2, [r9, #8]
 800157c:	e007      	b.n	800158e <HAL_PCD_IRQHandler+0x392>
              HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800157e:	4611      	mov	r1, r2
 8001580:	4620      	mov	r0, r4
 8001582:	f004 fe83 	bl	800628c <HAL_PCD_DataOutStageCallback>
 8001586:	e7d4      	b.n	8001532 <HAL_PCD_IRQHandler+0x336>
            if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8001588:	4b88      	ldr	r3, [pc, #544]	; (80017ac <HAL_PCD_IRQHandler+0x5b0>)
 800158a:	459a      	cmp	sl, r3
 800158c:	d8eb      	bhi.n	8001566 <HAL_PCD_IRQHandler+0x36a>
            HAL_PCD_SetupStageCallback(hpcd);
 800158e:	4620      	mov	r0, r4
 8001590:	f004 fe76 	bl	8006280 <HAL_PCD_SetupStageCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001594:	2208      	movs	r2, #8
 8001596:	f8c9 2008 	str.w	r2, [r9, #8]
          if(( epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800159a:	f01b 0f10 	tst.w	fp, #16
 800159e:	d002      	beq.n	80015a6 <HAL_PCD_IRQHandler+0x3aa>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80015a0:	2210      	movs	r2, #16
 80015a2:	f8c9 2008 	str.w	r2, [r9, #8]
          if(( epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80015a6:	f01b 0f20 	tst.w	fp, #32
 80015aa:	d002      	beq.n	80015b2 <HAL_PCD_IRQHandler+0x3b6>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80015ac:	2320      	movs	r3, #32
 80015ae:	f8c9 3008 	str.w	r3, [r9, #8]
        ep_intr >>= 1U;
 80015b2:	9b03      	ldr	r3, [sp, #12]
        epnum++;
 80015b4:	3501      	adds	r5, #1
 80015b6:	f109 0920 	add.w	r9, r9, #32
 80015ba:	361c      	adds	r6, #28
        ep_intr >>= 1U;
 80015bc:	085b      	lsrs	r3, r3, #1
 80015be:	9303      	str	r3, [sp, #12]
 80015c0:	e649      	b.n	8001256 <HAL_PCD_IRQHandler+0x5a>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80015c2:	f01b 0f01 	tst.w	fp, #1
 80015c6:	d071      	beq.n	80016ac <HAL_PCD_IRQHandler+0x4b0>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80015c8:	b2eb      	uxtb	r3, r5
 80015ca:	6820      	ldr	r0, [r4, #0]
 80015cc:	4619      	mov	r1, r3
 80015ce:	9303      	str	r3, [sp, #12]
 80015d0:	f002 facb 	bl	8003b6a <USB_ReadDevInEPInterrupt>
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80015d4:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80015d8:	4680      	mov	r8, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80015da:	d022      	beq.n	8001622 <HAL_PCD_IRQHandler+0x426>
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & 0xFU));
 80015dc:	2001      	movs	r0, #1
 80015de:	f005 020f 	and.w	r2, r5, #15
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80015e2:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & 0xFU));
 80015e6:	fa00 f202 	lsl.w	r2, r0, r2
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80015ea:	9903      	ldr	r1, [sp, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80015ec:	ea23 0302 	bic.w	r3, r3, r2
 80015f0:	f8c7 3834 	str.w	r3, [r7, #2100]	; 0x834
            if (hpcd->Init.dma_enable == 1U)
 80015f4:	6923      	ldr	r3, [r4, #16]
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80015f6:	f8c9 0008 	str.w	r0, [r9, #8]
            if (hpcd->Init.dma_enable == 1U)
 80015fa:	4283      	cmp	r3, r0
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80015fc:	4620      	mov	r0, r4
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80015fe:	bf01      	itttt	eq
 8001600:	6cb3      	ldreq	r3, [r6, #72]	; 0x48
 8001602:	6c72      	ldreq	r2, [r6, #68]	; 0x44
 8001604:	189b      	addeq	r3, r3, r2
 8001606:	64b3      	streq	r3, [r6, #72]	; 0x48
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001608:	f004 fe49 	bl	800629e <HAL_PCD_DataInStageCallback>
            if (hpcd->Init.dma_enable == 1U)
 800160c:	6921      	ldr	r1, [r4, #16]
 800160e:	2901      	cmp	r1, #1
 8001610:	d107      	bne.n	8001622 <HAL_PCD_IRQHandler+0x426>
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001612:	b935      	cbnz	r5, 8001622 <HAL_PCD_IRQHandler+0x426>
 8001614:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001616:	b923      	cbnz	r3, 8001622 <HAL_PCD_IRQHandler+0x426>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001618:	f504 7270 	add.w	r2, r4, #960	; 0x3c0
 800161c:	6820      	ldr	r0, [r4, #0]
 800161e:	f002 fad5 	bl	8003bcc <USB_EP0_OutStart>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001622:	f018 0f08 	tst.w	r8, #8
 8001626:	d002      	beq.n	800162e <HAL_PCD_IRQHandler+0x432>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001628:	2308      	movs	r3, #8
 800162a:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800162e:	f018 0f10 	tst.w	r8, #16
 8001632:	d002      	beq.n	800163a <HAL_PCD_IRQHandler+0x43e>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001634:	2310      	movs	r3, #16
 8001636:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800163a:	f018 0f40 	tst.w	r8, #64	; 0x40
 800163e:	d002      	beq.n	8001646 <HAL_PCD_IRQHandler+0x44a>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001640:	2340      	movs	r3, #64	; 0x40
 8001642:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001646:	f018 0f02 	tst.w	r8, #2
 800164a:	d002      	beq.n	8001652 <HAL_PCD_IRQHandler+0x456>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800164c:	2302      	movs	r3, #2
 800164e:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001652:	f018 0f80 	tst.w	r8, #128	; 0x80
 8001656:	d029      	beq.n	80016ac <HAL_PCD_IRQHandler+0x4b0>
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001658:	6823      	ldr	r3, [r4, #0]
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
  len = ep->xfer_len - ep->xfer_count;
 800165a:	6d72      	ldr	r2, [r6, #84]	; 0x54
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800165c:	9304      	str	r3, [sp, #16]
  len = ep->xfer_len - ep->xfer_count;
 800165e:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8001660:	eba3 0802 	sub.w	r8, r3, r2
 8001664:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8001666:	4598      	cmp	r8, r3
 8001668:	bf28      	it	cs
 800166a:	4698      	movcs	r8, r3
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;

  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 800166c:	9b04      	ldr	r3, [sp, #16]
  len32b = (len + 3U) / 4U;
 800166e:	f108 0a03 	add.w	sl, r8, #3
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8001672:	f503 6310 	add.w	r3, r3, #2304	; 0x900
  len32b = (len + 3U) / 4U;
 8001676:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 800167a:	eb03 1345 	add.w	r3, r3, r5, lsl #5
 800167e:	9305      	str	r3, [sp, #20]
 8001680:	9b05      	ldr	r3, [sp, #20]
 8001682:	699b      	ldr	r3, [r3, #24]
 8001684:	b29b      	uxth	r3, r3
 8001686:	4553      	cmp	r3, sl
 8001688:	d904      	bls.n	8001694 <HAL_PCD_IRQHandler+0x498>
          (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800168a:	6d72      	ldr	r2, [r6, #84]	; 0x54
 800168c:	6d33      	ldr	r3, [r6, #80]	; 0x50
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 800168e:	4293      	cmp	r3, r2
 8001690:	d900      	bls.n	8001694 <HAL_PCD_IRQHandler+0x498>
          (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001692:	b993      	cbnz	r3, 80016ba <HAL_PCD_IRQHandler+0x4be>

    ep->xfer_buff  += len;
    ep->xfer_count += len;
  }

  if(len <= 0U)
 8001694:	f1b8 0f00 	cmp.w	r8, #0
 8001698:	d108      	bne.n	80016ac <HAL_PCD_IRQHandler+0x4b0>
  {
    fifoemptymsk = (uint32_t)(0x1UL << epnum);
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800169a:	9b04      	ldr	r3, [sp, #16]
    fifoemptymsk = (uint32_t)(0x1UL << epnum);
 800169c:	2101      	movs	r1, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800169e:	f8d3 2834 	ldr.w	r2, [r3, #2100]	; 0x834
    fifoemptymsk = (uint32_t)(0x1UL << epnum);
 80016a2:	40a9      	lsls	r1, r5
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80016a4:	ea22 0201 	bic.w	r2, r2, r1
 80016a8:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
        epnum++;
 80016ac:	3501      	adds	r5, #1
        ep_intr >>= 1U;
 80016ae:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
 80016b2:	361c      	adds	r6, #28
 80016b4:	f109 0920 	add.w	r9, r9, #32
 80016b8:	e5de      	b.n	8001278 <HAL_PCD_IRQHandler+0x7c>
    len = ep->xfer_len - ep->xfer_count;
 80016ba:	eba3 0802 	sub.w	r8, r3, r2
 80016be:	6c73      	ldr	r3, [r6, #68]	; 0x44
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len, (uint8_t)hpcd->Init.dma_enable);
 80016c0:	9a03      	ldr	r2, [sp, #12]
 80016c2:	4598      	cmp	r8, r3
 80016c4:	9804      	ldr	r0, [sp, #16]
 80016c6:	bf28      	it	cs
 80016c8:	4698      	movcs	r8, r3
 80016ca:	7c23      	ldrb	r3, [r4, #16]
 80016cc:	9300      	str	r3, [sp, #0]
 80016ce:	fa1f f388 	uxth.w	r3, r8
 80016d2:	6cb1      	ldr	r1, [r6, #72]	; 0x48
    len32b = (len + 3U) / 4U;
 80016d4:	f108 0a03 	add.w	sl, r8, #3
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len, (uint8_t)hpcd->Init.dma_enable);
 80016d8:	f002 f8b6 	bl	8003848 <USB_WritePacket>
    ep->xfer_buff  += len;
 80016dc:	6cb3      	ldr	r3, [r6, #72]	; 0x48
    len32b = (len + 3U) / 4U;
 80016de:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
    ep->xfer_buff  += len;
 80016e2:	4443      	add	r3, r8
 80016e4:	64b3      	str	r3, [r6, #72]	; 0x48
    ep->xfer_count += len;
 80016e6:	6d73      	ldr	r3, [r6, #84]	; 0x54
 80016e8:	4443      	add	r3, r8
 80016ea:	6573      	str	r3, [r6, #84]	; 0x54
 80016ec:	e7c8      	b.n	8001680 <HAL_PCD_IRQHandler+0x484>
        HAL_PCD_ResumeCallback(hpcd);
 80016ee:	4620      	mov	r0, r4
 80016f0:	f004 fe0a 	bl	8006308 <HAL_PCD_ResumeCallback>
 80016f4:	e5da      	b.n	80012ac <HAL_PCD_IRQHandler+0xb0>
        HAL_PCD_SuspendCallback(hpcd);
 80016f6:	4620      	mov	r0, r4
 80016f8:	f004 fdee 	bl	80062d8 <HAL_PCD_SuspendCallback>
 80016fc:	e606      	b.n	800130c <HAL_PCD_IRQHandler+0x110>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80016fe:	6099      	str	r1, [r3, #8]
 8001700:	3320      	adds	r3, #32
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001702:	f853 2c20 	ldr.w	r2, [r3, #-32]
 8001706:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800170a:	f843 2c20 	str.w	r2, [r3, #-32]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800170e:	f8c3 11e8 	str.w	r1, [r3, #488]	; 0x1e8
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001712:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 8001716:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800171a:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800171e:	9a02      	ldr	r2, [sp, #8]
 8001720:	3201      	adds	r2, #1
 8001722:	9202      	str	r2, [sp, #8]
 8001724:	e606      	b.n	8001334 <HAL_PCD_IRQHandler+0x138>
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM | USB_OTG_DOEPMSK_OTEPSPRM);
 8001726:	6973      	ldr	r3, [r6, #20]
 8001728:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800172c:	6173      	str	r3, [r6, #20]
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 800172e:	6933      	ldr	r3, [r6, #16]
 8001730:	f043 030b 	orr.w	r3, r3, #11
 8001734:	6133      	str	r3, [r6, #16]
 8001736:	e613      	b.n	8001360 <HAL_PCD_IRQHandler+0x164>
        hpcd->Init.speed            = USB_OTG_SPEED_FULL;
 8001738:	2303      	movs	r3, #3
 800173a:	60e3      	str	r3, [r4, #12]
        hpcd->Init.ep0_mps          = USB_OTG_FS_MAX_PACKET_SIZE;
 800173c:	2340      	movs	r3, #64	; 0x40
 800173e:	6163      	str	r3, [r4, #20]
        hclk = HAL_RCC_GetHCLKFreq();
 8001740:	f000 fe1e 	bl	8002380 <HAL_RCC_GetHCLKFreq>
        if((hclk >= 14200000U) && (hclk < 15000000U))
 8001744:	4b1b      	ldr	r3, [pc, #108]	; (80017b4 <HAL_PCD_IRQHandler+0x5b8>)
 8001746:	4a1c      	ldr	r2, [pc, #112]	; (80017b8 <HAL_PCD_IRQHandler+0x5bc>)
 8001748:	4403      	add	r3, r0
 800174a:	4293      	cmp	r3, r2
 800174c:	6823      	ldr	r3, [r4, #0]
 800174e:	d804      	bhi.n	800175a <HAL_PCD_IRQHandler+0x55e>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xFU << 10) & USB_OTG_GUSBCFG_TRDT);
 8001750:	68da      	ldr	r2, [r3, #12]
 8001752:	f442 5270 	orr.w	r2, r2, #15360	; 0x3c00
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10) & USB_OTG_GUSBCFG_TRDT);
 8001756:	60da      	str	r2, [r3, #12]
 8001758:	e62e      	b.n	80013b8 <HAL_PCD_IRQHandler+0x1bc>
        else if((hclk >= 15000000U) && (hclk < 16000000U))
 800175a:	4a18      	ldr	r2, [pc, #96]	; (80017bc <HAL_PCD_IRQHandler+0x5c0>)
 800175c:	4918      	ldr	r1, [pc, #96]	; (80017c0 <HAL_PCD_IRQHandler+0x5c4>)
 800175e:	4402      	add	r2, r0
 8001760:	428a      	cmp	r2, r1
 8001762:	d803      	bhi.n	800176c <HAL_PCD_IRQHandler+0x570>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xEU << 10) & USB_OTG_GUSBCFG_TRDT);
 8001764:	68da      	ldr	r2, [r3, #12]
 8001766:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 800176a:	e7f4      	b.n	8001756 <HAL_PCD_IRQHandler+0x55a>
        else if((hclk >= 16000000U) && (hclk < 17200000U))
 800176c:	f5a0 0274 	sub.w	r2, r0, #15990784	; 0xf40000
 8001770:	4914      	ldr	r1, [pc, #80]	; (80017c4 <HAL_PCD_IRQHandler+0x5c8>)
 8001772:	f5a2 5210 	sub.w	r2, r2, #9216	; 0x2400
 8001776:	428a      	cmp	r2, r1
 8001778:	d803      	bhi.n	8001782 <HAL_PCD_IRQHandler+0x586>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xDU << 10) & USB_OTG_GUSBCFG_TRDT);
 800177a:	68da      	ldr	r2, [r3, #12]
 800177c:	f442 5250 	orr.w	r2, r2, #13312	; 0x3400
 8001780:	e7e9      	b.n	8001756 <HAL_PCD_IRQHandler+0x55a>
        else if((hclk >= 17200000U) && (hclk < 18500000U))
 8001782:	f1a0 7283 	sub.w	r2, r0, #17170432	; 0x1060000
 8001786:	4910      	ldr	r1, [pc, #64]	; (80017c8 <HAL_PCD_IRQHandler+0x5cc>)
 8001788:	f5a2 42e7 	sub.w	r2, r2, #29568	; 0x7380
 800178c:	428a      	cmp	r2, r1
 800178e:	d803      	bhi.n	8001798 <HAL_PCD_IRQHandler+0x59c>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xCU << 10) & USB_OTG_GUSBCFG_TRDT);
 8001790:	68da      	ldr	r2, [r3, #12]
 8001792:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8001796:	e7de      	b.n	8001756 <HAL_PCD_IRQHandler+0x55a>
        else if((hclk >= 18500000U) && (hclk < 20000000U))
 8001798:	4a0c      	ldr	r2, [pc, #48]	; (80017cc <HAL_PCD_IRQHandler+0x5d0>)
 800179a:	490d      	ldr	r1, [pc, #52]	; (80017d0 <HAL_PCD_IRQHandler+0x5d4>)
 800179c:	4402      	add	r2, r0
 800179e:	428a      	cmp	r2, r1
 80017a0:	d818      	bhi.n	80017d4 <HAL_PCD_IRQHandler+0x5d8>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xBU << 10) & USB_OTG_GUSBCFG_TRDT);
 80017a2:	68da      	ldr	r2, [r3, #12]
 80017a4:	f442 5230 	orr.w	r2, r2, #11264	; 0x2c00
 80017a8:	e7d5      	b.n	8001756 <HAL_PCD_IRQHandler+0x55a>
 80017aa:	bf00      	nop
 80017ac:	4f54300a 	.word	0x4f54300a
 80017b0:	4f54310a 	.word	0x4f54310a
 80017b4:	ff275340 	.word	0xff275340
 80017b8:	000c34ff 	.word	0x000c34ff
 80017bc:	ff1b1e40 	.word	0xff1b1e40
 80017c0:	000f423f 	.word	0x000f423f
 80017c4:	00124f7f 	.word	0x00124f7f
 80017c8:	0013d61f 	.word	0x0013d61f
 80017cc:	fee5b660 	.word	0xfee5b660
 80017d0:	0016e35f 	.word	0x0016e35f
        else if((hclk >= 20000000U) && (hclk < 21800000U))
 80017d4:	4a1b      	ldr	r2, [pc, #108]	; (8001844 <HAL_PCD_IRQHandler+0x648>)
 80017d6:	491c      	ldr	r1, [pc, #112]	; (8001848 <HAL_PCD_IRQHandler+0x64c>)
 80017d8:	4402      	add	r2, r0
 80017da:	428a      	cmp	r2, r1
 80017dc:	d803      	bhi.n	80017e6 <HAL_PCD_IRQHandler+0x5ea>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xAU << 10) & USB_OTG_GUSBCFG_TRDT);
 80017de:	68da      	ldr	r2, [r3, #12]
 80017e0:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
 80017e4:	e7b7      	b.n	8001756 <HAL_PCD_IRQHandler+0x55a>
        else if((hclk >= 21800000U) && (hclk < 24000000U))
 80017e6:	4a19      	ldr	r2, [pc, #100]	; (800184c <HAL_PCD_IRQHandler+0x650>)
 80017e8:	4919      	ldr	r1, [pc, #100]	; (8001850 <HAL_PCD_IRQHandler+0x654>)
 80017ea:	4402      	add	r2, r0
 80017ec:	428a      	cmp	r2, r1
 80017ee:	d803      	bhi.n	80017f8 <HAL_PCD_IRQHandler+0x5fc>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x9U << 10) & USB_OTG_GUSBCFG_TRDT);
 80017f0:	68da      	ldr	r2, [r3, #12]
 80017f2:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 80017f6:	e7ae      	b.n	8001756 <HAL_PCD_IRQHandler+0x55a>
        else if((hclk >= 24000000U) && (hclk < 27700000U))
 80017f8:	f1a0 72b7 	sub.w	r2, r0, #23986176	; 0x16e0000
 80017fc:	4915      	ldr	r1, [pc, #84]	; (8001854 <HAL_PCD_IRQHandler+0x658>)
 80017fe:	f5a2 5258 	sub.w	r2, r2, #13824	; 0x3600
 8001802:	428a      	cmp	r2, r1
 8001804:	d803      	bhi.n	800180e <HAL_PCD_IRQHandler+0x612>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x8U << 10) & USB_OTG_GUSBCFG_TRDT);
 8001806:	68da      	ldr	r2, [r3, #12]
 8001808:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800180c:	e7a3      	b.n	8001756 <HAL_PCD_IRQHandler+0x55a>
        else if((hclk >= 27700000U) && (hclk < 32000000U))
 800180e:	4a12      	ldr	r2, [pc, #72]	; (8001858 <HAL_PCD_IRQHandler+0x65c>)
 8001810:	4912      	ldr	r1, [pc, #72]	; (800185c <HAL_PCD_IRQHandler+0x660>)
 8001812:	4402      	add	r2, r0
 8001814:	428a      	cmp	r2, r1
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x7U << 10) & USB_OTG_GUSBCFG_TRDT);
 8001816:	68da      	ldr	r2, [r3, #12]
 8001818:	bf94      	ite	ls
 800181a:	f442 52e0 	orrls.w	r2, r2, #7168	; 0x1c00
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10) & USB_OTG_GUSBCFG_TRDT);
 800181e:	f442 52c0 	orrhi.w	r2, r2, #6144	; 0x1800
 8001822:	e798      	b.n	8001756 <HAL_PCD_IRQHandler+0x55a>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001824:	2b06      	cmp	r3, #6
 8001826:	f47f adfb 	bne.w	8001420 <HAL_PCD_IRQHandler+0x224>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800182a:	f04f 081c 	mov.w	r8, #28
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800182e:	2208      	movs	r2, #8
 8001830:	f504 7170 	add.w	r1, r4, #960	; 0x3c0
 8001834:	4638      	mov	r0, r7
 8001836:	f002 f8ed 	bl	8003a14 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800183a:	fb08 4809 	mla	r8, r8, r9, r4
 800183e:	f3c6 160a 	ubfx	r6, r6, #4, #11
 8001842:	e5e8      	b.n	8001416 <HAL_PCD_IRQHandler+0x21a>
 8001844:	feced300 	.word	0xfeced300
 8001848:	001b773f 	.word	0x001b773f
 800184c:	feb35bc0 	.word	0xfeb35bc0
 8001850:	002191bf 	.word	0x002191bf
 8001854:	0038751f 	.word	0x0038751f
 8001858:	fe5954e0 	.word	0xfe5954e0
 800185c:	00419cdf 	.word	0x00419cdf

08001860 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8001860:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 8001864:	2a01      	cmp	r2, #1
{
 8001866:	b510      	push	{r4, lr}
 8001868:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800186a:	d00b      	beq.n	8001884 <HAL_PCD_SetAddress+0x24>
 800186c:	2201      	movs	r2, #1
 800186e:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001872:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001876:	6800      	ldr	r0, [r0, #0]
 8001878:	f002 f932 	bl	8003ae0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800187c:	2000      	movs	r0, #0
 800187e:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 8001882:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8001884:	2002      	movs	r0, #2
}
 8001886:	bd10      	pop	{r4, pc}

08001888 <HAL_PCD_EP_Open>:
{
 8001888:	b570      	push	{r4, r5, r6, lr}
 800188a:	4604      	mov	r4, r0
 800188c:	f001 000f 	and.w	r0, r1, #15
 8001890:	261c      	movs	r6, #28
  if ((ep_addr & 0x80U) == 0x80U)
 8001892:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001896:	b2c5      	uxtb	r5, r0
  ep->num = ep_addr & 0xFU;
 8001898:	b2c0      	uxtb	r0, r0
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 800189a:	fb06 4105 	mla	r1, r6, r5, r4
    ep->is_in = 1U;
 800189e:	bf1d      	ittte	ne
 80018a0:	fb06 4505 	mlane	r5, r6, r5, r4
 80018a4:	2601      	movne	r6, #1
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 80018a6:	313c      	addne	r1, #60	; 0x3c
    ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 80018a8:	f501 71fe 	addeq.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 80018ac:	bf05      	ittet	eq
 80018ae:	fb06 4505 	mlaeq	r5, r6, r5, r4
 80018b2:	2600      	moveq	r6, #0
    ep->is_in = 1U;
 80018b4:	f885 603d 	strbne.w	r6, [r5, #61]	; 0x3d
    ep->is_in = 0U;
 80018b8:	f885 61fd 	strbeq.w	r6, [r5, #509]	; 0x1fd
  ep->maxpacket = ep_mps;
 80018bc:	608a      	str	r2, [r1, #8]
  if (ep->is_in != 0U)
 80018be:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & 0xFU;
 80018c0:	7008      	strb	r0, [r1, #0]
  ep->type = ep_type;
 80018c2:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 80018c4:	b102      	cbz	r2, 80018c8 <HAL_PCD_EP_Open+0x40>
    ep->tx_fifo_num = ep->num;
 80018c6:	80c8      	strh	r0, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 80018c8:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 80018ca:	bf04      	itt	eq
 80018cc:	2300      	moveq	r3, #0
 80018ce:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 80018d0:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d009      	beq.n	80018ec <HAL_PCD_EP_Open+0x64>
 80018d8:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80018da:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80018dc:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80018e0:	f001 febe 	bl	8003660 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80018e4:	2000      	movs	r0, #0
 80018e6:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return ret;
 80018ea:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 80018ec:	2002      	movs	r0, #2
}
 80018ee:	bd70      	pop	{r4, r5, r6, pc}

080018f0 <HAL_PCD_EP_Close>:
{
 80018f0:	f001 030f 	and.w	r3, r1, #15
  if ((ep_addr & 0x80U) == 0x80U)
 80018f4:	f011 0f80 	tst.w	r1, #128	; 0x80
 80018f8:	b2da      	uxtb	r2, r3
{
 80018fa:	b510      	push	{r4, lr}
 80018fc:	4604      	mov	r4, r0
 80018fe:	f04f 001c 	mov.w	r0, #28
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8001902:	fb00 4102 	mla	r1, r0, r2, r4
    ep->is_in = 1U;
 8001906:	bf1b      	ittet	ne
 8001908:	fb00 4202 	mlane	r2, r0, r2, r4
 800190c:	2001      	movne	r0, #1
    ep->is_in = 0U;
 800190e:	fb00 4202 	mlaeq	r2, r0, r2, r4
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8001912:	313c      	addne	r1, #60	; 0x3c
    ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 8001914:	bf05      	ittet	eq
 8001916:	f501 71fe 	addeq.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 800191a:	2000      	moveq	r0, #0
    ep->is_in = 1U;
 800191c:	f882 003d 	strbne.w	r0, [r2, #61]	; 0x3d
    ep->is_in = 0U;
 8001920:	f882 01fd 	strbeq.w	r0, [r2, #509]	; 0x1fd
  ep->num   = ep_addr & 0xFU;
 8001924:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8001926:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800192a:	2b01      	cmp	r3, #1
 800192c:	d009      	beq.n	8001942 <HAL_PCD_EP_Close+0x52>
 800192e:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance , ep);
 8001930:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8001932:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance , ep);
 8001936:	f001 fed5 	bl	80036e4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800193a:	2000      	movs	r0, #0
 800193c:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 8001940:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8001942:	2002      	movs	r0, #2
}
 8001944:	bd10      	pop	{r4, pc}

08001946 <HAL_PCD_EP_Receive>:
{
 8001946:	b538      	push	{r3, r4, r5, lr}
 8001948:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 800194c:	241c      	movs	r4, #28
 800194e:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;
 8001952:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 8001956:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
  ep->xfer_len = len;
 800195a:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->xfer_count = 0U;
 800195e:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 8001960:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
  ep->xfer_count = 0U;
 8001964:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
  ep->is_in = 0U;
 8001968:	f884 31fd 	strb.w	r3, [r4, #509]	; 0x1fd
  ep->num = ep_addr & 0xFU;
 800196c:	f884 51fc 	strb.w	r5, [r4, #508]	; 0x1fc
  if (hpcd->Init.dma_enable == 1U)
 8001970:	6903      	ldr	r3, [r0, #16]
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001972:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 8001974:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 8001976:	bf08      	it	eq
 8001978:	f8c4 220c 	streq.w	r2, [r4, #524]	; 0x20c
 800197c:	b2da      	uxtb	r2, r3
  if ((ep_addr & 0xFU) == 0U)
 800197e:	b91d      	cbnz	r5, 8001988 <HAL_PCD_EP_Receive+0x42>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001980:	f001 fee2 	bl	8003748 <USB_EP0StartXfer>
}
 8001984:	2000      	movs	r0, #0
 8001986:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001988:	f001 ff72 	bl	8003870 <USB_EPStartXfer>
 800198c:	e7fa      	b.n	8001984 <HAL_PCD_EP_Receive+0x3e>

0800198e <HAL_PCD_EP_GetRxCount>:
  return (uint16_t)hpcd->OUT_ep[ep_addr & 0xFU].xfer_count;
 800198e:	231c      	movs	r3, #28
 8001990:	f001 010f 	and.w	r1, r1, #15
 8001994:	fb03 0101 	mla	r1, r3, r1, r0
}
 8001998:	f8b1 0214 	ldrh.w	r0, [r1, #532]	; 0x214
 800199c:	4770      	bx	lr

0800199e <HAL_PCD_EP_Transmit>:
{
 800199e:	b538      	push	{r3, r4, r5, lr}
 80019a0:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->IN_ep[ep_addr & 0xFU];
 80019a4:	241c      	movs	r4, #28
 80019a6:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;
 80019aa:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->IN_ep[ep_addr & 0xFU];
 80019ae:	313c      	adds	r1, #60	; 0x3c
  ep->xfer_len = len;
 80019b0:	6523      	str	r3, [r4, #80]	; 0x50
  ep->xfer_count = 0U;
 80019b2:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 80019b4:	64a2      	str	r2, [r4, #72]	; 0x48
  ep->xfer_count = 0U;
 80019b6:	6563      	str	r3, [r4, #84]	; 0x54
  ep->is_in = 1U;
 80019b8:	2301      	movs	r3, #1
  ep->num = ep_addr & 0xFU;
 80019ba:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  ep->is_in = 1U;
 80019be:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (hpcd->Init.dma_enable == 1U)
 80019c2:	6903      	ldr	r3, [r0, #16]
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80019c4:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 80019c6:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 80019c8:	bf08      	it	eq
 80019ca:	64e2      	streq	r2, [r4, #76]	; 0x4c
 80019cc:	b2da      	uxtb	r2, r3
  if ((ep_addr & 0xFU) == 0U)
 80019ce:	b91d      	cbnz	r5, 80019d8 <HAL_PCD_EP_Transmit+0x3a>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80019d0:	f001 feba 	bl	8003748 <USB_EP0StartXfer>
}
 80019d4:	2000      	movs	r0, #0
 80019d6:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80019d8:	f001 ff4a 	bl	8003870 <USB_EPStartXfer>
 80019dc:	e7fa      	b.n	80019d4 <HAL_PCD_EP_Transmit+0x36>

080019de <HAL_PCD_EP_SetStall>:
{
 80019de:	b538      	push	{r3, r4, r5, lr}
 80019e0:	f001 050f 	and.w	r5, r1, #15
  if (((uint32_t)ep_addr & 0xFU) > hpcd->Init.dev_endpoints)
 80019e4:	6843      	ldr	r3, [r0, #4]
{
 80019e6:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0xFU) > hpcd->Init.dev_endpoints)
 80019e8:	429d      	cmp	r5, r3
 80019ea:	d82e      	bhi.n	8001a4a <HAL_PCD_EP_SetStall+0x6c>
  if ((0x80U & ep_addr) == 0x80U)
 80019ec:	f011 0f80 	tst.w	r1, #128	; 0x80
 80019f0:	f04f 021c 	mov.w	r2, #28
 80019f4:	d01f      	beq.n	8001a36 <HAL_PCD_EP_SetStall+0x58>
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 80019f6:	fb02 0305 	mla	r3, r2, r5, r0
    ep->is_in = 1U;
 80019fa:	fb02 0105 	mla	r1, r2, r5, r0
 80019fe:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8001a00:	333c      	adds	r3, #60	; 0x3c
    ep->is_in = 1U;
 8001a02:	f881 203d 	strb.w	r2, [r1, #61]	; 0x3d
  ep->is_stall = 1U;
 8001a06:	2201      	movs	r2, #1
  ep->num = ep_addr & 0xFU;
 8001a08:	701d      	strb	r5, [r3, #0]
  ep->is_stall = 1U;
 8001a0a:	709a      	strb	r2, [r3, #2]
  __HAL_LOCK(hpcd);
 8001a0c:	f894 13bc 	ldrb.w	r1, [r4, #956]	; 0x3bc
 8001a10:	4291      	cmp	r1, r2
 8001a12:	d01c      	beq.n	8001a4e <HAL_PCD_EP_SetStall+0x70>
 8001a14:	f884 23bc 	strb.w	r2, [r4, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001a18:	4619      	mov	r1, r3
 8001a1a:	6820      	ldr	r0, [r4, #0]
 8001a1c:	f002 f808 	bl	8003a30 <USB_EPSetStall>
  if((ep_addr & 0xFU) == 0U)
 8001a20:	b92d      	cbnz	r5, 8001a2e <HAL_PCD_EP_SetStall+0x50>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001a22:	f504 7270 	add.w	r2, r4, #960	; 0x3c0
 8001a26:	7c21      	ldrb	r1, [r4, #16]
 8001a28:	6820      	ldr	r0, [r4, #0]
 8001a2a:	f002 f8cf 	bl	8003bcc <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 8001a2e:	2000      	movs	r0, #0
 8001a30:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 8001a34:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 8001a36:	fb02 0301 	mla	r3, r2, r1, r0
    ep->is_in = 0U;
 8001a3a:	fb02 0101 	mla	r1, r2, r1, r0
 8001a3e:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8001a40:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
    ep->is_in = 0U;
 8001a44:	f881 21fd 	strb.w	r2, [r1, #509]	; 0x1fd
 8001a48:	e7dd      	b.n	8001a06 <HAL_PCD_EP_SetStall+0x28>
    return HAL_ERROR;
 8001a4a:	2001      	movs	r0, #1
 8001a4c:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8001a4e:	2002      	movs	r0, #2
}
 8001a50:	bd38      	pop	{r3, r4, r5, pc}

08001a52 <HAL_PCD_EP_ClrStall>:
{
 8001a52:	b538      	push	{r3, r4, r5, lr}
 8001a54:	f001 020f 	and.w	r2, r1, #15
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001a58:	6843      	ldr	r3, [r0, #4]
{
 8001a5a:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d825      	bhi.n	8001aac <HAL_PCD_EP_ClrStall+0x5a>
 8001a60:	231c      	movs	r3, #28
  if ((0x80U & ep_addr) == 0x80U)
 8001a62:	f011 0f80 	tst.w	r1, #128	; 0x80
  ep->is_stall = 0U;
 8001a66:	f04f 0500 	mov.w	r5, #0
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8001a6a:	fb03 0102 	mla	r1, r3, r2, r0
    ep->is_in = 0U;
 8001a6e:	bf0f      	iteee	eq
 8001a70:	2000      	moveq	r0, #0
    ep->is_in = 1U;
 8001a72:	fb03 0302 	mlane	r3, r3, r2, r0
 8001a76:	2001      	movne	r0, #1
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8001a78:	313c      	addne	r1, #60	; 0x3c
    ep = &hpcd->OUT_ep[ep_addr &0xFU];
 8001a7a:	bf05      	ittet	eq
 8001a7c:	f501 71fe 	addeq.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 8001a80:	fb03 4302 	mlaeq	r3, r3, r2, r4
    ep->is_in = 1U;
 8001a84:	f883 003d 	strbne.w	r0, [r3, #61]	; 0x3d
    ep->is_in = 0U;
 8001a88:	f883 01fd 	strbeq.w	r0, [r3, #509]	; 0x1fd
  ep->is_stall = 0U;
 8001a8c:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & 0xFU;
 8001a8e:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8001a90:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d00b      	beq.n	8001ab0 <HAL_PCD_EP_ClrStall+0x5e>
 8001a98:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001a9a:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8001a9c:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001aa0:	f001 fff3 	bl	8003a8a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001aa4:	f884 53bc 	strb.w	r5, [r4, #956]	; 0x3bc
  return HAL_OK;
 8001aa8:	4628      	mov	r0, r5
 8001aaa:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001aac:	2001      	movs	r0, #1
 8001aae:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8001ab0:	2002      	movs	r0, #2
}
 8001ab2:	bd38      	pop	{r3, r4, r5, pc}

08001ab4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8001ab4:	b570      	push	{r4, r5, r6, lr}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8001ab6:	6804      	ldr	r4, [r0, #0]
 8001ab8:	6a63      	ldr	r3, [r4, #36]	; 0x24

  if(fifo == 0U)
 8001aba:	b921      	cbnz	r1, 8001ac6 <HAL_PCDEx_SetTxFiFo+0x12>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8001abc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001ac0:	62a3      	str	r3, [r4, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 8001ac2:	2000      	movs	r0, #0
 8001ac4:	bd70      	pop	{r4, r5, r6, pc}
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8001ac6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 8001ac8:	1e4d      	subs	r5, r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8001aca:	eb03 4310 	add.w	r3, r3, r0, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8001ace:	2000      	movs	r0, #0
 8001ad0:	1c46      	adds	r6, r0, #1
 8001ad2:	b2c0      	uxtb	r0, r0
 8001ad4:	4285      	cmp	r5, r0
 8001ad6:	d806      	bhi.n	8001ae6 <HAL_PCDEx_SetTxFiFo+0x32>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8001ad8:	313f      	adds	r1, #63	; 0x3f
 8001ada:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001ade:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8001ae2:	6063      	str	r3, [r4, #4]
 8001ae4:	e7ed      	b.n	8001ac2 <HAL_PCDEx_SetTxFiFo+0xe>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001ae6:	3040      	adds	r0, #64	; 0x40
 8001ae8:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8001aec:	6840      	ldr	r0, [r0, #4]
 8001aee:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8001af2:	4630      	mov	r0, r6
 8001af4:	e7ec      	b.n	8001ad0 <HAL_PCDEx_SetTxFiFo+0x1c>

08001af6 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8001af6:	6803      	ldr	r3, [r0, #0]

  return HAL_OK;
}
 8001af8:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 8001afa:	6259      	str	r1, [r3, #36]	; 0x24
}
 8001afc:	4770      	bx	lr

08001afe <HAL_PCDEx_ActivateLPM>:
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  hpcd->lpm_active = 1U;
 8001afe:	2101      	movs	r1, #1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001b00:	6802      	ldr	r2, [r0, #0]
{
 8001b02:	4603      	mov	r3, r0
  hpcd->lpm_active = 1U;
 8001b04:	f8c0 13f8 	str.w	r1, [r0, #1016]	; 0x3f8
  hpcd->LPM_State = LPM_L0;
 8001b08:	2000      	movs	r0, #0
 8001b0a:	f883 03f0 	strb.w	r0, [r3, #1008]	; 0x3f0
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001b0e:	6993      	ldr	r3, [r2, #24]
 8001b10:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001b14:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001b16:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8001b18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b1c:	f043 0303 	orr.w	r3, r3, #3
 8001b20:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 8001b22:	4770      	bx	lr

08001b24 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8001b24:	4770      	bx	lr
	...

08001b28 <HAL_PWR_PVD_IRQHandler>:
{
 8001b28:	b510      	push	{r4, lr}
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8001b2a:	4c05      	ldr	r4, [pc, #20]	; (8001b40 <HAL_PWR_PVD_IRQHandler+0x18>)
 8001b2c:	6963      	ldr	r3, [r4, #20]
 8001b2e:	03db      	lsls	r3, r3, #15
 8001b30:	d504      	bpl.n	8001b3c <HAL_PWR_PVD_IRQHandler+0x14>
    HAL_PWR_PVDCallback();
 8001b32:	f7ff fff7 	bl	8001b24 <HAL_PWR_PVDCallback>
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8001b36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b3a:	6163      	str	r3, [r4, #20]
 8001b3c:	bd10      	pop	{r4, pc}
 8001b3e:	bf00      	nop
 8001b40:	40013c00 	.word	0x40013c00

08001b44 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001b44:	4b19      	ldr	r3, [pc, #100]	; (8001bac <HAL_PWREx_EnableOverDrive+0x68>)
{
 8001b46:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001b4a:	4c19      	ldr	r4, [pc, #100]	; (8001bb0 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b4c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001b50:	641a      	str	r2, [r3, #64]	; 0x40
 8001b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b58:	9301      	str	r3, [sp, #4]
 8001b5a:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001b5c:	6823      	ldr	r3, [r4, #0]
 8001b5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b62:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b64:	f7fe fd0c 	bl	8000580 <HAL_GetTick>
 8001b68:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001b6a:	6863      	ldr	r3, [r4, #4]
 8001b6c:	03da      	lsls	r2, r3, #15
 8001b6e:	d50c      	bpl.n	8001b8a <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001b70:	6823      	ldr	r3, [r4, #0]
 8001b72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b76:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b78:	f7fe fd02 	bl	8000580 <HAL_GetTick>

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001b7c:	4c0c      	ldr	r4, [pc, #48]	; (8001bb0 <HAL_PWREx_EnableOverDrive+0x6c>)
  tickstart = HAL_GetTick();
 8001b7e:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001b80:	6863      	ldr	r3, [r4, #4]
 8001b82:	039b      	lsls	r3, r3, #14
 8001b84:	d50a      	bpl.n	8001b9c <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8001b86:	2000      	movs	r0, #0
 8001b88:	e006      	b.n	8001b98 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001b8a:	f7fe fcf9 	bl	8000580 <HAL_GetTick>
 8001b8e:	1b40      	subs	r0, r0, r5
 8001b90:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001b94:	d9e9      	bls.n	8001b6a <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 8001b96:	2003      	movs	r0, #3
}
 8001b98:	b003      	add	sp, #12
 8001b9a:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001b9c:	f7fe fcf0 	bl	8000580 <HAL_GetTick>
 8001ba0:	1b40      	subs	r0, r0, r5
 8001ba2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001ba6:	d9eb      	bls.n	8001b80 <HAL_PWREx_EnableOverDrive+0x3c>
 8001ba8:	e7f5      	b.n	8001b96 <HAL_PWREx_EnableOverDrive+0x52>
 8001baa:	bf00      	nop
 8001bac:	40023800 	.word	0x40023800
 8001bb0:	40007000 	.word	0x40007000

08001bb4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the time out
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag, 
                                                        FlagStatus State, uint32_t tickstart, uint32_t Timeout)
{
 8001bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001bb8:	9d06      	ldr	r5, [sp, #24]
 8001bba:	4604      	mov	r4, r0
 8001bbc:	460f      	mov	r7, r1
 8001bbe:	4616      	mov	r6, r2
 8001bc0:	4698      	mov	r8, r3
  /* Wait until flag is in expected state */    
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8001bc2:	6821      	ldr	r1, [r4, #0]
 8001bc4:	688a      	ldr	r2, [r1, #8]
 8001bc6:	423a      	tst	r2, r7
 8001bc8:	bf14      	ite	ne
 8001bca:	2201      	movne	r2, #1
 8001bcc:	2200      	moveq	r2, #0
 8001bce:	42b2      	cmp	r2, r6
 8001bd0:	d102      	bne.n	8001bd8 <QSPI_WaitFlagStateUntilTimeout+0x24>
        
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8001bd2:	2000      	movs	r0, #0
}
 8001bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001bd8:	1c6b      	adds	r3, r5, #1
 8001bda:	d0f3      	beq.n	8001bc4 <QSPI_WaitFlagStateUntilTimeout+0x10>
      if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 8001bdc:	b94d      	cbnz	r5, 8001bf2 <QSPI_WaitFlagStateUntilTimeout+0x3e>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8001bde:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8001be0:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8001be2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8001be6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001be8:	f043 0301 	orr.w	r3, r3, #1
 8001bec:	6463      	str	r3, [r4, #68]	; 0x44
 8001bee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 8001bf2:	f7fe fcc5 	bl	8000580 <HAL_GetTick>
 8001bf6:	eba0 0008 	sub.w	r0, r0, r8
 8001bfa:	4285      	cmp	r5, r0
 8001bfc:	d2e1      	bcs.n	8001bc2 <QSPI_WaitFlagStateUntilTimeout+0xe>
 8001bfe:	e7ee      	b.n	8001bde <QSPI_WaitFlagStateUntilTimeout+0x2a>

08001c00 <HAL_QSPI_Init>:
{
 8001c00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001c02:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001c04:	f7fe fcbc 	bl	8000580 <HAL_GetTick>
 8001c08:	4605      	mov	r5, r0
  if(hqspi == NULL)
 8001c0a:	2c00      	cmp	r4, #0
 8001c0c:	d04d      	beq.n	8001caa <HAL_QSPI_Init+0xaa>
  __HAL_LOCK(hqspi);
 8001c0e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d04b      	beq.n	8001cae <HAL_QSPI_Init+0xae>
 8001c16:	2301      	movs	r3, #1
 8001c18:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8001c1c:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8001c20:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 8001c24:	b93a      	cbnz	r2, 8001c36 <HAL_QSPI_Init+0x36>
    hqspi->Lock = HAL_UNLOCKED;
 8001c26:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_QSPI_MspInit(hqspi);
 8001c2a:	4620      	mov	r0, r4
 8001c2c:	f003 fd9a 	bl	8005764 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 8001c30:	f241 3388 	movw	r3, #5000	; 0x1388
 8001c34:	64a3      	str	r3, [r4, #72]	; 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1) << 8));
 8001c36:	6820      	ldr	r0, [r4, #0]
 8001c38:	68a1      	ldr	r1, [r4, #8]
 8001c3a:	6802      	ldr	r2, [r0, #0]
 8001c3c:	3901      	subs	r1, #1
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8001c3e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1) << 8));
 8001c40:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 8001c44:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8001c48:	2120      	movs	r1, #32
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1) << 8));
 8001c4a:	6002      	str	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	9300      	str	r3, [sp, #0]
 8001c50:	4620      	mov	r0, r4
 8001c52:	462b      	mov	r3, r5
 8001c54:	f7ff ffae 	bl	8001bb4 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 8001c58:	bb10      	cbnz	r0, 8001ca0 <HAL_QSPI_Init+0xa0>
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 8001c5a:	6822      	ldr	r2, [r4, #0]
 8001c5c:	69e5      	ldr	r5, [r4, #28]
 8001c5e:	68e3      	ldr	r3, [r4, #12]
 8001c60:	6811      	ldr	r1, [r2, #0]
 8001c62:	432b      	orrs	r3, r5
 8001c64:	6a25      	ldr	r5, [r4, #32]
 8001c66:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8001c6a:	432b      	orrs	r3, r5
 8001c6c:	6865      	ldr	r5, [r4, #4]
 8001c6e:	f021 01d0 	bic.w	r1, r1, #208	; 0xd0
 8001c72:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8001c76:	430b      	orrs	r3, r1
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE), 
 8001c78:	69a1      	ldr	r1, [r4, #24]
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 8001c7a:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE), 
 8001c7c:	6963      	ldr	r3, [r4, #20]
 8001c7e:	6855      	ldr	r5, [r2, #4]
 8001c80:	430b      	orrs	r3, r1
 8001c82:	6921      	ldr	r1, [r4, #16]
 8001c84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001c88:	490a      	ldr	r1, [pc, #40]	; (8001cb4 <HAL_QSPI_Init+0xb4>)
 8001c8a:	4029      	ands	r1, r5
 8001c8c:	430b      	orrs	r3, r1
 8001c8e:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 8001c90:	6813      	ldr	r3, [r2, #0]
 8001c92:	f043 0301 	orr.w	r3, r3, #1
 8001c96:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 8001c98:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;  
 8001c9a:	6460      	str	r0, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 8001c9c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8001ca6:	b003      	add	sp, #12
 8001ca8:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8001caa:	2001      	movs	r0, #1
 8001cac:	e7fb      	b.n	8001ca6 <HAL_QSPI_Init+0xa6>
  __HAL_LOCK(hqspi);
 8001cae:	2002      	movs	r0, #2
 8001cb0:	e7f9      	b.n	8001ca6 <HAL_QSPI_Init+0xa6>
 8001cb2:	bf00      	nop
 8001cb4:	ffe0f8fe 	.word	0xffe0f8fe

08001cb8 <HAL_QSPI_ErrorCallback>:
 8001cb8:	4770      	bx	lr

08001cba <QSPI_DMAAbortCplt>:
{
 8001cba:	b508      	push	{r3, lr}
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001cbc:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hqspi->RxXferCount = 0;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	6383      	str	r3, [r0, #56]	; 0x38
  hqspi->TxXferCount = 0;
 8001cc2:	62c3      	str	r3, [r0, #44]	; 0x2c
  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 8001cc4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001cc8:	2b08      	cmp	r3, #8
 8001cca:	d10b      	bne.n	8001ce4 <QSPI_DMAAbortCplt+0x2a>
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8001ccc:	6803      	ldr	r3, [r0, #0]
 8001cce:	2202      	movs	r2, #2
 8001cd0:	60da      	str	r2, [r3, #12]
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001cd8:	601a      	str	r2, [r3, #0]
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	f042 0202 	orr.w	r2, r2, #2
 8001ce0:	601a      	str	r2, [r3, #0]
 8001ce2:	bd08      	pop	{r3, pc}
    hqspi->State = HAL_QSPI_STATE_READY;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 8001cea:	f7ff ffe5 	bl	8001cb8 <HAL_QSPI_ErrorCallback>
 8001cee:	bd08      	pop	{r3, pc}

08001cf0 <HAL_QSPI_AbortCpltCallback>:
 8001cf0:	4770      	bx	lr

08001cf2 <HAL_QSPI_CmdCpltCallback>:
 8001cf2:	4770      	bx	lr

08001cf4 <HAL_QSPI_RxCpltCallback>:
 8001cf4:	4770      	bx	lr

08001cf6 <HAL_QSPI_TxCpltCallback>:
 8001cf6:	4770      	bx	lr

08001cf8 <HAL_QSPI_FifoThresholdCallback>:
 8001cf8:	4770      	bx	lr

08001cfa <HAL_QSPI_StatusMatchCallback>:
 8001cfa:	4770      	bx	lr

08001cfc <HAL_QSPI_TimeOutCallback>:
{
 8001cfc:	4770      	bx	lr
	...

08001d00 <HAL_QSPI_IRQHandler>:
{
 8001d00:	b508      	push	{r3, lr}
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 8001d02:	6803      	ldr	r3, [r0, #0]
 8001d04:	6899      	ldr	r1, [r3, #8]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 8001d06:	681a      	ldr	r2, [r3, #0]
  if(((flag & QSPI_FLAG_FT)!= RESET) && ((itsource & QSPI_IT_FT)!= RESET))
 8001d08:	f011 0f04 	tst.w	r1, #4
 8001d0c:	d032      	beq.n	8001d74 <HAL_QSPI_IRQHandler+0x74>
 8001d0e:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8001d12:	d02f      	beq.n	8001d74 <HAL_QSPI_IRQHandler+0x74>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8001d14:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8001d18:	2a12      	cmp	r2, #18
 8001d1a:	d112      	bne.n	8001d42 <HAL_QSPI_IRQHandler+0x42>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != 0)
 8001d1c:	6802      	ldr	r2, [r0, #0]
 8001d1e:	6891      	ldr	r1, [r2, #8]
 8001d20:	0749      	lsls	r1, r1, #29
 8001d22:	d402      	bmi.n	8001d2a <HAL_QSPI_IRQHandler+0x2a>
    HAL_QSPI_FifoThresholdCallback(hqspi);
 8001d24:	f7ff ffe8 	bl	8001cf8 <HAL_QSPI_FifoThresholdCallback>
 8001d28:	bd08      	pop	{r3, pc}
        if (hqspi->TxXferCount > 0)
 8001d2a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8001d2c:	b1e9      	cbz	r1, 8001d6a <HAL_QSPI_IRQHandler+0x6a>
          *(__IO uint8_t *)data_reg = *hqspi->pTxBuffPtr++;
 8001d2e:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8001d30:	1c51      	adds	r1, r2, #1
 8001d32:	6241      	str	r1, [r0, #36]	; 0x24
 8001d34:	7812      	ldrb	r2, [r2, #0]
 8001d36:	f883 2020 	strb.w	r2, [r3, #32]
          hqspi->TxXferCount--;
 8001d3a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8001d3c:	3a01      	subs	r2, #1
 8001d3e:	62c2      	str	r2, [r0, #44]	; 0x2c
 8001d40:	e7ec      	b.n	8001d1c <HAL_QSPI_IRQHandler+0x1c>
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 8001d42:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8001d46:	2a22      	cmp	r2, #34	; 0x22
 8001d48:	d1ec      	bne.n	8001d24 <HAL_QSPI_IRQHandler+0x24>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != 0)
 8001d4a:	6802      	ldr	r2, [r0, #0]
 8001d4c:	6891      	ldr	r1, [r2, #8]
 8001d4e:	0749      	lsls	r1, r1, #29
 8001d50:	d5e8      	bpl.n	8001d24 <HAL_QSPI_IRQHandler+0x24>
        if (hqspi->RxXferCount > 0)
 8001d52:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8001d54:	b149      	cbz	r1, 8001d6a <HAL_QSPI_IRQHandler+0x6a>
          *hqspi->pRxBuffPtr++ = *(__IO uint8_t *)data_reg;
 8001d56:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8001d58:	1c51      	adds	r1, r2, #1
 8001d5a:	6301      	str	r1, [r0, #48]	; 0x30
 8001d5c:	f893 1020 	ldrb.w	r1, [r3, #32]
 8001d60:	7011      	strb	r1, [r2, #0]
          hqspi->RxXferCount--;
 8001d62:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8001d64:	3a01      	subs	r2, #1
 8001d66:	6382      	str	r2, [r0, #56]	; 0x38
 8001d68:	e7ef      	b.n	8001d4a <HAL_QSPI_IRQHandler+0x4a>
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 8001d6a:	6813      	ldr	r3, [r2, #0]
 8001d6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d70:	6013      	str	r3, [r2, #0]
          break;
 8001d72:	e7d7      	b.n	8001d24 <HAL_QSPI_IRQHandler+0x24>
  else if(((flag & QSPI_FLAG_TC)!= RESET) && ((itsource & QSPI_IT_TC)!= RESET))
 8001d74:	f011 0f02 	tst.w	r1, #2
 8001d78:	d05f      	beq.n	8001e3a <HAL_QSPI_IRQHandler+0x13a>
 8001d7a:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001d7e:	d05c      	beq.n	8001e3a <HAL_QSPI_IRQHandler+0x13a>
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 8001d80:	2202      	movs	r2, #2
 8001d82:	60da      	str	r2, [r3, #12]
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8001d8a:	601a      	str	r2, [r3, #0]
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8001d8c:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8001d90:	2a12      	cmp	r2, #18
 8001d92:	d112      	bne.n	8001dba <HAL_QSPI_IRQHandler+0xba>
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN)!= RESET)
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	0751      	lsls	r1, r2, #29
 8001d98:	d509      	bpl.n	8001dae <HAL_QSPI_IRQHandler+0xae>
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	f022 0204 	bic.w	r2, r2, #4
 8001da0:	601a      	str	r2, [r3, #0]
        __HAL_DMA_DISABLE(hqspi->hdma);
 8001da2:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	6813      	ldr	r3, [r2, #0]
 8001da8:	f023 0301 	bic.w	r3, r3, #1
 8001dac:	6013      	str	r3, [r2, #0]
      hqspi->State = HAL_QSPI_STATE_READY;
 8001dae:	2301      	movs	r3, #1
 8001db0:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_QSPI_TxCpltCallback(hqspi);
 8001db4:	f7ff ff9f 	bl	8001cf6 <HAL_QSPI_TxCpltCallback>
 8001db8:	bd08      	pop	{r3, pc}
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 8001dba:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8001dbe:	2a22      	cmp	r2, #34	; 0x22
 8001dc0:	d124      	bne.n	8001e0c <HAL_QSPI_IRQHandler+0x10c>
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN)!= RESET)
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	0752      	lsls	r2, r2, #29
 8001dc6:	d51b      	bpl.n	8001e00 <HAL_QSPI_IRQHandler+0x100>
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	f022 0204 	bic.w	r2, r2, #4
 8001dce:	601a      	str	r2, [r3, #0]
        __HAL_DMA_DISABLE(hqspi->hdma);
 8001dd0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	6813      	ldr	r3, [r2, #0]
 8001dd6:	f023 0301 	bic.w	r3, r3, #1
 8001dda:	6013      	str	r3, [r2, #0]
      hqspi->State = HAL_QSPI_STATE_READY;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_QSPI_RxCpltCallback(hqspi);
 8001de2:	f7ff ff87 	bl	8001cf4 <HAL_QSPI_RxCpltCallback>
 8001de6:	bd08      	pop	{r3, pc}
          if (hqspi->RxXferCount > 0)
 8001de8:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8001dea:	2a00      	cmp	r2, #0
 8001dec:	d0f6      	beq.n	8001ddc <HAL_QSPI_IRQHandler+0xdc>
            *hqspi->pRxBuffPtr++ = *(__IO uint8_t *)data_reg;
 8001dee:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8001df0:	1c51      	adds	r1, r2, #1
 8001df2:	6301      	str	r1, [r0, #48]	; 0x30
 8001df4:	f893 1020 	ldrb.w	r1, [r3, #32]
 8001df8:	7011      	strb	r1, [r2, #0]
            hqspi->RxXferCount--;
 8001dfa:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8001dfc:	3a01      	subs	r2, #1
 8001dfe:	6382      	str	r2, [r0, #56]	; 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0)
 8001e00:	6802      	ldr	r2, [r0, #0]
 8001e02:	6892      	ldr	r2, [r2, #8]
 8001e04:	f412 5ff8 	tst.w	r2, #7936	; 0x1f00
 8001e08:	d1ee      	bne.n	8001de8 <HAL_QSPI_IRQHandler+0xe8>
 8001e0a:	e7e7      	b.n	8001ddc <HAL_QSPI_IRQHandler+0xdc>
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 8001e0c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d105      	bne.n	8001e20 <HAL_QSPI_IRQHandler+0x120>
      hqspi->State = HAL_QSPI_STATE_READY;
 8001e14:	2301      	movs	r3, #1
 8001e16:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_QSPI_CmdCpltCallback(hqspi);
 8001e1a:	f7ff ff6a 	bl	8001cf2 <HAL_QSPI_CmdCpltCallback>
 8001e1e:	bd08      	pop	{r3, pc}
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 8001e20:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001e24:	2b08      	cmp	r3, #8
 8001e26:	d148      	bne.n	8001eba <HAL_QSPI_IRQHandler+0x1ba>
      hqspi->State = HAL_QSPI_STATE_READY;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 8001e2e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d137      	bne.n	8001ea4 <HAL_QSPI_IRQHandler+0x1a4>
        HAL_QSPI_AbortCpltCallback(hqspi);
 8001e34:	f7ff ff5c 	bl	8001cf0 <HAL_QSPI_AbortCpltCallback>
 8001e38:	bd08      	pop	{r3, pc}
  else if(((flag & QSPI_FLAG_SM)!= RESET) && ((itsource & QSPI_IT_SM)!= RESET))
 8001e3a:	f011 0f08 	tst.w	r1, #8
 8001e3e:	d011      	beq.n	8001e64 <HAL_QSPI_IRQHandler+0x164>
 8001e40:	f412 2f00 	tst.w	r2, #524288	; 0x80000
 8001e44:	d00e      	beq.n	8001e64 <HAL_QSPI_IRQHandler+0x164>
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 8001e46:	2208      	movs	r2, #8
 8001e48:	60da      	str	r2, [r3, #12]
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0)
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	0252      	lsls	r2, r2, #9
 8001e4e:	d506      	bpl.n	8001e5e <HAL_QSPI_IRQHandler+0x15e>
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8001e56:	601a      	str	r2, [r3, #0]
      hqspi->State = HAL_QSPI_STATE_READY;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_QSPI_StatusMatchCallback(hqspi);
 8001e5e:	f7ff ff4c 	bl	8001cfa <HAL_QSPI_StatusMatchCallback>
 8001e62:	bd08      	pop	{r3, pc}
  else if(((flag & QSPI_FLAG_TE)!= RESET) && ((itsource & QSPI_IT_TE)!= RESET))
 8001e64:	f011 0f01 	tst.w	r1, #1
 8001e68:	d01f      	beq.n	8001eaa <HAL_QSPI_IRQHandler+0x1aa>
 8001e6a:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8001e6e:	d01c      	beq.n	8001eaa <HAL_QSPI_IRQHandler+0x1aa>
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 8001e70:	2101      	movs	r1, #1
 8001e72:	60d9      	str	r1, [r3, #12]
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8001e7a:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 8001e7c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8001e7e:	f042 0202 	orr.w	r2, r2, #2
 8001e82:	6442      	str	r2, [r0, #68]	; 0x44
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN)!= RESET)
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	0752      	lsls	r2, r2, #29
 8001e88:	d50a      	bpl.n	8001ea0 <HAL_QSPI_IRQHandler+0x1a0>
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8001e8a:	681a      	ldr	r2, [r3, #0]
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 8001e8c:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8001e8e:	f022 0204 	bic.w	r2, r2, #4
 8001e92:	601a      	str	r2, [r3, #0]
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 8001e94:	4b09      	ldr	r3, [pc, #36]	; (8001ebc <HAL_QSPI_IRQHandler+0x1bc>)
 8001e96:	6503      	str	r3, [r0, #80]	; 0x50
}
 8001e98:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      HAL_DMA_Abort_IT(hqspi->hdma);
 8001e9c:	f7fe bc00 	b.w	80006a0 <HAL_DMA_Abort_IT>
      hqspi->State = HAL_QSPI_STATE_READY;
 8001ea0:	f880 1041 	strb.w	r1, [r0, #65]	; 0x41
      HAL_QSPI_ErrorCallback(hqspi);
 8001ea4:	f7ff ff08 	bl	8001cb8 <HAL_QSPI_ErrorCallback>
 8001ea8:	bd08      	pop	{r3, pc}
  else if(((flag & QSPI_FLAG_TO)!= RESET) && ((itsource & QSPI_IT_TO)!= RESET))
 8001eaa:	06c9      	lsls	r1, r1, #27
 8001eac:	d505      	bpl.n	8001eba <HAL_QSPI_IRQHandler+0x1ba>
 8001eae:	02d2      	lsls	r2, r2, #11
 8001eb0:	d503      	bpl.n	8001eba <HAL_QSPI_IRQHandler+0x1ba>
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 8001eb2:	2210      	movs	r2, #16
 8001eb4:	60da      	str	r2, [r3, #12]
    HAL_QSPI_TimeOutCallback(hqspi);
 8001eb6:	f7ff ff21 	bl	8001cfc <HAL_QSPI_TimeOutCallback>
 8001eba:	bd08      	pop	{r3, pc}
 8001ebc:	08001cbb 	.word	0x08001cbb

08001ec0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ec0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ec4:	4604      	mov	r4, r0
 8001ec6:	b918      	cbnz	r0, 8001ed0 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8001ec8:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8001eca:	b002      	add	sp, #8
 8001ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ed0:	6803      	ldr	r3, [r0, #0]
 8001ed2:	07d8      	lsls	r0, r3, #31
 8001ed4:	d410      	bmi.n	8001ef8 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ed6:	6823      	ldr	r3, [r4, #0]
 8001ed8:	0799      	lsls	r1, r3, #30
 8001eda:	d45e      	bmi.n	8001f9a <HAL_RCC_OscConfig+0xda>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001edc:	6823      	ldr	r3, [r4, #0]
 8001ede:	0719      	lsls	r1, r3, #28
 8001ee0:	f100 80a3 	bmi.w	800202a <HAL_RCC_OscConfig+0x16a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ee4:	6823      	ldr	r3, [r4, #0]
 8001ee6:	075a      	lsls	r2, r3, #29
 8001ee8:	f100 80c4 	bmi.w	8002074 <HAL_RCC_OscConfig+0x1b4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001eec:	69a2      	ldr	r2, [r4, #24]
 8001eee:	2a00      	cmp	r2, #0
 8001ef0:	f040 812e 	bne.w	8002150 <HAL_RCC_OscConfig+0x290>
  return HAL_OK;
 8001ef4:	2000      	movs	r0, #0
 8001ef6:	e7e8      	b.n	8001eca <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ef8:	4b93      	ldr	r3, [pc, #588]	; (8002148 <HAL_RCC_OscConfig+0x288>)
 8001efa:	689a      	ldr	r2, [r3, #8]
 8001efc:	f002 020c 	and.w	r2, r2, #12
 8001f00:	2a04      	cmp	r2, #4
 8001f02:	d007      	beq.n	8001f14 <HAL_RCC_OscConfig+0x54>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f04:	689a      	ldr	r2, [r3, #8]
 8001f06:	f002 020c 	and.w	r2, r2, #12
 8001f0a:	2a08      	cmp	r2, #8
 8001f0c:	d10a      	bne.n	8001f24 <HAL_RCC_OscConfig+0x64>
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	025a      	lsls	r2, r3, #9
 8001f12:	d507      	bpl.n	8001f24 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f14:	4b8c      	ldr	r3, [pc, #560]	; (8002148 <HAL_RCC_OscConfig+0x288>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	039b      	lsls	r3, r3, #14
 8001f1a:	d5dc      	bpl.n	8001ed6 <HAL_RCC_OscConfig+0x16>
 8001f1c:	6863      	ldr	r3, [r4, #4]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d1d9      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x16>
 8001f22:	e7d1      	b.n	8001ec8 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f24:	6863      	ldr	r3, [r4, #4]
 8001f26:	4d88      	ldr	r5, [pc, #544]	; (8002148 <HAL_RCC_OscConfig+0x288>)
 8001f28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f2c:	d111      	bne.n	8001f52 <HAL_RCC_OscConfig+0x92>
 8001f2e:	682b      	ldr	r3, [r5, #0]
 8001f30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f34:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001f36:	f7fe fb23 	bl	8000580 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f3a:	4d83      	ldr	r5, [pc, #524]	; (8002148 <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 8001f3c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f3e:	682b      	ldr	r3, [r5, #0]
 8001f40:	039f      	lsls	r7, r3, #14
 8001f42:	d4c8      	bmi.n	8001ed6 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f44:	f7fe fb1c 	bl	8000580 <HAL_GetTick>
 8001f48:	1b80      	subs	r0, r0, r6
 8001f4a:	2864      	cmp	r0, #100	; 0x64
 8001f4c:	d9f7      	bls.n	8001f3e <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8001f4e:	2003      	movs	r0, #3
 8001f50:	e7bb      	b.n	8001eca <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f52:	b99b      	cbnz	r3, 8001f7c <HAL_RCC_OscConfig+0xbc>
 8001f54:	682b      	ldr	r3, [r5, #0]
 8001f56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f5a:	602b      	str	r3, [r5, #0]
 8001f5c:	682b      	ldr	r3, [r5, #0]
 8001f5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f62:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001f64:	f7fe fb0c 	bl	8000580 <HAL_GetTick>
 8001f68:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f6a:	682b      	ldr	r3, [r5, #0]
 8001f6c:	0398      	lsls	r0, r3, #14
 8001f6e:	d5b2      	bpl.n	8001ed6 <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f70:	f7fe fb06 	bl	8000580 <HAL_GetTick>
 8001f74:	1b80      	subs	r0, r0, r6
 8001f76:	2864      	cmp	r0, #100	; 0x64
 8001f78:	d9f7      	bls.n	8001f6a <HAL_RCC_OscConfig+0xaa>
 8001f7a:	e7e8      	b.n	8001f4e <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f80:	682b      	ldr	r3, [r5, #0]
 8001f82:	d103      	bne.n	8001f8c <HAL_RCC_OscConfig+0xcc>
 8001f84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f88:	602b      	str	r3, [r5, #0]
 8001f8a:	e7d0      	b.n	8001f2e <HAL_RCC_OscConfig+0x6e>
 8001f8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f90:	602b      	str	r3, [r5, #0]
 8001f92:	682b      	ldr	r3, [r5, #0]
 8001f94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f98:	e7cc      	b.n	8001f34 <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f9a:	4b6b      	ldr	r3, [pc, #428]	; (8002148 <HAL_RCC_OscConfig+0x288>)
 8001f9c:	689a      	ldr	r2, [r3, #8]
 8001f9e:	f012 0f0c 	tst.w	r2, #12
 8001fa2:	d007      	beq.n	8001fb4 <HAL_RCC_OscConfig+0xf4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fa4:	689a      	ldr	r2, [r3, #8]
 8001fa6:	f002 020c 	and.w	r2, r2, #12
 8001faa:	2a08      	cmp	r2, #8
 8001fac:	d111      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x112>
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	0259      	lsls	r1, r3, #9
 8001fb2:	d40e      	bmi.n	8001fd2 <HAL_RCC_OscConfig+0x112>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fb4:	4b64      	ldr	r3, [pc, #400]	; (8002148 <HAL_RCC_OscConfig+0x288>)
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	0792      	lsls	r2, r2, #30
 8001fba:	d502      	bpl.n	8001fc2 <HAL_RCC_OscConfig+0x102>
 8001fbc:	68e2      	ldr	r2, [r4, #12]
 8001fbe:	2a01      	cmp	r2, #1
 8001fc0:	d182      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	6921      	ldr	r1, [r4, #16]
 8001fc6:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001fca:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001fce:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fd0:	e784      	b.n	8001edc <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001fd2:	68e3      	ldr	r3, [r4, #12]
 8001fd4:	4d5c      	ldr	r5, [pc, #368]	; (8002148 <HAL_RCC_OscConfig+0x288>)
 8001fd6:	b1bb      	cbz	r3, 8002008 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_ENABLE();
 8001fd8:	682b      	ldr	r3, [r5, #0]
 8001fda:	f043 0301 	orr.w	r3, r3, #1
 8001fde:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001fe0:	f7fe face 	bl	8000580 <HAL_GetTick>
 8001fe4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fe6:	682b      	ldr	r3, [r5, #0]
 8001fe8:	079f      	lsls	r7, r3, #30
 8001fea:	d507      	bpl.n	8001ffc <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fec:	682b      	ldr	r3, [r5, #0]
 8001fee:	6922      	ldr	r2, [r4, #16]
 8001ff0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001ff4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001ff8:	602b      	str	r3, [r5, #0]
 8001ffa:	e76f      	b.n	8001edc <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ffc:	f7fe fac0 	bl	8000580 <HAL_GetTick>
 8002000:	1b80      	subs	r0, r0, r6
 8002002:	2802      	cmp	r0, #2
 8002004:	d9ef      	bls.n	8001fe6 <HAL_RCC_OscConfig+0x126>
 8002006:	e7a2      	b.n	8001f4e <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8002008:	682b      	ldr	r3, [r5, #0]
 800200a:	f023 0301 	bic.w	r3, r3, #1
 800200e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002010:	f7fe fab6 	bl	8000580 <HAL_GetTick>
 8002014:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002016:	682b      	ldr	r3, [r5, #0]
 8002018:	0798      	lsls	r0, r3, #30
 800201a:	f57f af5f 	bpl.w	8001edc <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800201e:	f7fe faaf 	bl	8000580 <HAL_GetTick>
 8002022:	1b80      	subs	r0, r0, r6
 8002024:	2802      	cmp	r0, #2
 8002026:	d9f6      	bls.n	8002016 <HAL_RCC_OscConfig+0x156>
 8002028:	e791      	b.n	8001f4e <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800202a:	6963      	ldr	r3, [r4, #20]
 800202c:	4d46      	ldr	r5, [pc, #280]	; (8002148 <HAL_RCC_OscConfig+0x288>)
 800202e:	b183      	cbz	r3, 8002052 <HAL_RCC_OscConfig+0x192>
      __HAL_RCC_LSI_ENABLE();
 8002030:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002032:	f043 0301 	orr.w	r3, r3, #1
 8002036:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8002038:	f7fe faa2 	bl	8000580 <HAL_GetTick>
 800203c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800203e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002040:	079b      	lsls	r3, r3, #30
 8002042:	f53f af4f 	bmi.w	8001ee4 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002046:	f7fe fa9b 	bl	8000580 <HAL_GetTick>
 800204a:	1b80      	subs	r0, r0, r6
 800204c:	2802      	cmp	r0, #2
 800204e:	d9f6      	bls.n	800203e <HAL_RCC_OscConfig+0x17e>
 8002050:	e77d      	b.n	8001f4e <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8002052:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002054:	f023 0301 	bic.w	r3, r3, #1
 8002058:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800205a:	f7fe fa91 	bl	8000580 <HAL_GetTick>
 800205e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002060:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002062:	079f      	lsls	r7, r3, #30
 8002064:	f57f af3e 	bpl.w	8001ee4 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002068:	f7fe fa8a 	bl	8000580 <HAL_GetTick>
 800206c:	1b80      	subs	r0, r0, r6
 800206e:	2802      	cmp	r0, #2
 8002070:	d9f6      	bls.n	8002060 <HAL_RCC_OscConfig+0x1a0>
 8002072:	e76c      	b.n	8001f4e <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002074:	4b34      	ldr	r3, [pc, #208]	; (8002148 <HAL_RCC_OscConfig+0x288>)
 8002076:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002078:	00d0      	lsls	r0, r2, #3
 800207a:	d427      	bmi.n	80020cc <HAL_RCC_OscConfig+0x20c>
      __HAL_RCC_PWR_CLK_ENABLE();
 800207c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 800207e:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8002080:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002084:	641a      	str	r2, [r3, #64]	; 0x40
 8002086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002088:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800208c:	9301      	str	r3, [sp, #4]
 800208e:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002090:	4d2e      	ldr	r5, [pc, #184]	; (800214c <HAL_RCC_OscConfig+0x28c>)
 8002092:	682b      	ldr	r3, [r5, #0]
 8002094:	05d9      	lsls	r1, r3, #23
 8002096:	d51b      	bpl.n	80020d0 <HAL_RCC_OscConfig+0x210>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002098:	68a3      	ldr	r3, [r4, #8]
 800209a:	4d2b      	ldr	r5, [pc, #172]	; (8002148 <HAL_RCC_OscConfig+0x288>)
 800209c:	2b01      	cmp	r3, #1
 800209e:	d127      	bne.n	80020f0 <HAL_RCC_OscConfig+0x230>
 80020a0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80020a2:	f043 0301 	orr.w	r3, r3, #1
 80020a6:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020a8:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80020ac:	f7fe fa68 	bl	8000580 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020b0:	4f25      	ldr	r7, [pc, #148]	; (8002148 <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 80020b2:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020b6:	079b      	lsls	r3, r3, #30
 80020b8:	d53f      	bpl.n	800213a <HAL_RCC_OscConfig+0x27a>
    if(pwrclkchanged == SET)
 80020ba:	2e00      	cmp	r6, #0
 80020bc:	f43f af16 	beq.w	8001eec <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 80020c0:	4a21      	ldr	r2, [pc, #132]	; (8002148 <HAL_RCC_OscConfig+0x288>)
 80020c2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80020c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020c8:	6413      	str	r3, [r2, #64]	; 0x40
 80020ca:	e70f      	b.n	8001eec <HAL_RCC_OscConfig+0x2c>
  FlagStatus pwrclkchanged = RESET;
 80020cc:	2600      	movs	r6, #0
 80020ce:	e7df      	b.n	8002090 <HAL_RCC_OscConfig+0x1d0>
      PWR->CR1 |= PWR_CR1_DBP;
 80020d0:	682b      	ldr	r3, [r5, #0]
 80020d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020d6:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80020d8:	f7fe fa52 	bl	8000580 <HAL_GetTick>
 80020dc:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020de:	682b      	ldr	r3, [r5, #0]
 80020e0:	05da      	lsls	r2, r3, #23
 80020e2:	d4d9      	bmi.n	8002098 <HAL_RCC_OscConfig+0x1d8>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80020e4:	f7fe fa4c 	bl	8000580 <HAL_GetTick>
 80020e8:	1bc0      	subs	r0, r0, r7
 80020ea:	2864      	cmp	r0, #100	; 0x64
 80020ec:	d9f7      	bls.n	80020de <HAL_RCC_OscConfig+0x21e>
 80020ee:	e72e      	b.n	8001f4e <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020f0:	b9ab      	cbnz	r3, 800211e <HAL_RCC_OscConfig+0x25e>
 80020f2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020f4:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020f8:	f023 0301 	bic.w	r3, r3, #1
 80020fc:	672b      	str	r3, [r5, #112]	; 0x70
 80020fe:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002100:	f023 0304 	bic.w	r3, r3, #4
 8002104:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8002106:	f7fe fa3b 	bl	8000580 <HAL_GetTick>
 800210a:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800210c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800210e:	0798      	lsls	r0, r3, #30
 8002110:	d5d3      	bpl.n	80020ba <HAL_RCC_OscConfig+0x1fa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002112:	f7fe fa35 	bl	8000580 <HAL_GetTick>
 8002116:	1bc0      	subs	r0, r0, r7
 8002118:	4540      	cmp	r0, r8
 800211a:	d9f7      	bls.n	800210c <HAL_RCC_OscConfig+0x24c>
 800211c:	e717      	b.n	8001f4e <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800211e:	2b05      	cmp	r3, #5
 8002120:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002122:	d103      	bne.n	800212c <HAL_RCC_OscConfig+0x26c>
 8002124:	f043 0304 	orr.w	r3, r3, #4
 8002128:	672b      	str	r3, [r5, #112]	; 0x70
 800212a:	e7b9      	b.n	80020a0 <HAL_RCC_OscConfig+0x1e0>
 800212c:	f023 0301 	bic.w	r3, r3, #1
 8002130:	672b      	str	r3, [r5, #112]	; 0x70
 8002132:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002134:	f023 0304 	bic.w	r3, r3, #4
 8002138:	e7b5      	b.n	80020a6 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800213a:	f7fe fa21 	bl	8000580 <HAL_GetTick>
 800213e:	eba0 0008 	sub.w	r0, r0, r8
 8002142:	42a8      	cmp	r0, r5
 8002144:	d9b6      	bls.n	80020b4 <HAL_RCC_OscConfig+0x1f4>
 8002146:	e702      	b.n	8001f4e <HAL_RCC_OscConfig+0x8e>
 8002148:	40023800 	.word	0x40023800
 800214c:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002150:	4d24      	ldr	r5, [pc, #144]	; (80021e4 <HAL_RCC_OscConfig+0x324>)
 8002152:	68ab      	ldr	r3, [r5, #8]
 8002154:	f003 030c 	and.w	r3, r3, #12
 8002158:	2b08      	cmp	r3, #8
 800215a:	f43f aeb5 	beq.w	8001ec8 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 800215e:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002160:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8002162:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002166:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002168:	d12f      	bne.n	80021ca <HAL_RCC_OscConfig+0x30a>
        tickstart = HAL_GetTick();
 800216a:	f7fe fa09 	bl	8000580 <HAL_GetTick>
 800216e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002170:	682b      	ldr	r3, [r5, #0]
 8002172:	0199      	lsls	r1, r3, #6
 8002174:	d423      	bmi.n	80021be <HAL_RCC_OscConfig+0x2fe>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002176:	6a22      	ldr	r2, [r4, #32]
 8002178:	69e3      	ldr	r3, [r4, #28]
 800217a:	4313      	orrs	r3, r2
 800217c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800217e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002182:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002184:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002188:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800218a:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800218e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002190:	4c14      	ldr	r4, [pc, #80]	; (80021e4 <HAL_RCC_OscConfig+0x324>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002192:	0852      	lsrs	r2, r2, #1
 8002194:	3a01      	subs	r2, #1
 8002196:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800219a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800219c:	682b      	ldr	r3, [r5, #0]
 800219e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021a2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80021a4:	f7fe f9ec 	bl	8000580 <HAL_GetTick>
 80021a8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021aa:	6823      	ldr	r3, [r4, #0]
 80021ac:	019a      	lsls	r2, r3, #6
 80021ae:	f53f aea1 	bmi.w	8001ef4 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021b2:	f7fe f9e5 	bl	8000580 <HAL_GetTick>
 80021b6:	1b40      	subs	r0, r0, r5
 80021b8:	2802      	cmp	r0, #2
 80021ba:	d9f6      	bls.n	80021aa <HAL_RCC_OscConfig+0x2ea>
 80021bc:	e6c7      	b.n	8001f4e <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021be:	f7fe f9df 	bl	8000580 <HAL_GetTick>
 80021c2:	1b80      	subs	r0, r0, r6
 80021c4:	2802      	cmp	r0, #2
 80021c6:	d9d3      	bls.n	8002170 <HAL_RCC_OscConfig+0x2b0>
 80021c8:	e6c1      	b.n	8001f4e <HAL_RCC_OscConfig+0x8e>
        tickstart = HAL_GetTick();
 80021ca:	f7fe f9d9 	bl	8000580 <HAL_GetTick>
 80021ce:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021d0:	682b      	ldr	r3, [r5, #0]
 80021d2:	019b      	lsls	r3, r3, #6
 80021d4:	f57f ae8e 	bpl.w	8001ef4 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021d8:	f7fe f9d2 	bl	8000580 <HAL_GetTick>
 80021dc:	1b00      	subs	r0, r0, r4
 80021de:	2802      	cmp	r0, #2
 80021e0:	d9f6      	bls.n	80021d0 <HAL_RCC_OscConfig+0x310>
 80021e2:	e6b4      	b.n	8001f4e <HAL_RCC_OscConfig+0x8e>
 80021e4:	40023800 	.word	0x40023800

080021e8 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021e8:	4913      	ldr	r1, [pc, #76]	; (8002238 <HAL_RCC_GetSysClockFreq+0x50>)
{
 80021ea:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021ec:	688b      	ldr	r3, [r1, #8]
 80021ee:	f003 030c 	and.w	r3, r3, #12
 80021f2:	2b04      	cmp	r3, #4
 80021f4:	d003      	beq.n	80021fe <HAL_RCC_GetSysClockFreq+0x16>
 80021f6:	2b08      	cmp	r3, #8
 80021f8:	d003      	beq.n	8002202 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021fa:	4810      	ldr	r0, [pc, #64]	; (800223c <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80021fc:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 80021fe:	4810      	ldr	r0, [pc, #64]	; (8002240 <HAL_RCC_GetSysClockFreq+0x58>)
 8002200:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002202:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002204:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002206:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002208:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800220c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002210:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002214:	bf1a      	itte	ne
 8002216:	480a      	ldrne	r0, [pc, #40]	; (8002240 <HAL_RCC_GetSysClockFreq+0x58>)
 8002218:	2300      	movne	r3, #0
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800221a:	4808      	ldreq	r0, [pc, #32]	; (800223c <HAL_RCC_GetSysClockFreq+0x54>)
 800221c:	fba1 0100 	umull	r0, r1, r1, r0
 8002220:	f7fe f80e 	bl	8000240 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8002224:	4b04      	ldr	r3, [pc, #16]	; (8002238 <HAL_RCC_GetSysClockFreq+0x50>)
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800222c:	3301      	adds	r3, #1
 800222e:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8002230:	fbb0 f0f3 	udiv	r0, r0, r3
 8002234:	bd08      	pop	{r3, pc}
 8002236:	bf00      	nop
 8002238:	40023800 	.word	0x40023800
 800223c:	00f42400 	.word	0x00f42400
 8002240:	016e3600 	.word	0x016e3600

08002244 <HAL_RCC_ClockConfig>:
{
 8002244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002248:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800224a:	4604      	mov	r4, r0
 800224c:	b910      	cbnz	r0, 8002254 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800224e:	2001      	movs	r0, #1
 8002250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002254:	4a46      	ldr	r2, [pc, #280]	; (8002370 <HAL_RCC_ClockConfig+0x12c>)
 8002256:	6813      	ldr	r3, [r2, #0]
 8002258:	f003 030f 	and.w	r3, r3, #15
 800225c:	428b      	cmp	r3, r1
 800225e:	d328      	bcc.n	80022b2 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002260:	6821      	ldr	r1, [r4, #0]
 8002262:	078f      	lsls	r7, r1, #30
 8002264:	d430      	bmi.n	80022c8 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002266:	07c8      	lsls	r0, r1, #31
 8002268:	d443      	bmi.n	80022f2 <HAL_RCC_ClockConfig+0xae>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800226a:	4a41      	ldr	r2, [pc, #260]	; (8002370 <HAL_RCC_ClockConfig+0x12c>)
 800226c:	6813      	ldr	r3, [r2, #0]
 800226e:	f003 030f 	and.w	r3, r3, #15
 8002272:	429d      	cmp	r5, r3
 8002274:	d367      	bcc.n	8002346 <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002276:	6822      	ldr	r2, [r4, #0]
 8002278:	0751      	lsls	r1, r2, #29
 800227a:	d470      	bmi.n	800235e <HAL_RCC_ClockConfig+0x11a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800227c:	0713      	lsls	r3, r2, #28
 800227e:	d507      	bpl.n	8002290 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002280:	4a3c      	ldr	r2, [pc, #240]	; (8002374 <HAL_RCC_ClockConfig+0x130>)
 8002282:	6921      	ldr	r1, [r4, #16]
 8002284:	6893      	ldr	r3, [r2, #8]
 8002286:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800228a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800228e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002290:	f7ff ffaa 	bl	80021e8 <HAL_RCC_GetSysClockFreq>
 8002294:	4b37      	ldr	r3, [pc, #220]	; (8002374 <HAL_RCC_ClockConfig+0x130>)
 8002296:	4a38      	ldr	r2, [pc, #224]	; (8002378 <HAL_RCC_ClockConfig+0x134>)
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800229e:	5cd3      	ldrb	r3, [r2, r3]
 80022a0:	40d8      	lsrs	r0, r3
 80022a2:	4b36      	ldr	r3, [pc, #216]	; (800237c <HAL_RCC_ClockConfig+0x138>)
 80022a4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80022a6:	2000      	movs	r0, #0
 80022a8:	f003 fd0c 	bl	8005cc4 <HAL_InitTick>
  return HAL_OK;
 80022ac:	2000      	movs	r0, #0
 80022ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022b2:	6813      	ldr	r3, [r2, #0]
 80022b4:	f023 030f 	bic.w	r3, r3, #15
 80022b8:	430b      	orrs	r3, r1
 80022ba:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022bc:	6813      	ldr	r3, [r2, #0]
 80022be:	f003 030f 	and.w	r3, r3, #15
 80022c2:	4299      	cmp	r1, r3
 80022c4:	d1c3      	bne.n	800224e <HAL_RCC_ClockConfig+0xa>
 80022c6:	e7cb      	b.n	8002260 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022c8:	f011 0f04 	tst.w	r1, #4
 80022cc:	4b29      	ldr	r3, [pc, #164]	; (8002374 <HAL_RCC_ClockConfig+0x130>)
 80022ce:	d003      	beq.n	80022d8 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022d0:	689a      	ldr	r2, [r3, #8]
 80022d2:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 80022d6:	609a      	str	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022d8:	070e      	lsls	r6, r1, #28
 80022da:	d503      	bpl.n	80022e4 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022dc:	689a      	ldr	r2, [r3, #8]
 80022de:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 80022e2:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022e4:	689a      	ldr	r2, [r3, #8]
 80022e6:	68a0      	ldr	r0, [r4, #8]
 80022e8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80022ec:	4302      	orrs	r2, r0
 80022ee:	609a      	str	r2, [r3, #8]
 80022f0:	e7b9      	b.n	8002266 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022f2:	6861      	ldr	r1, [r4, #4]
 80022f4:	4b1f      	ldr	r3, [pc, #124]	; (8002374 <HAL_RCC_ClockConfig+0x130>)
 80022f6:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022f8:	681a      	ldr	r2, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022fa:	d11c      	bne.n	8002336 <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022fc:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002300:	d0a5      	beq.n	800224e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002302:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002304:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002308:	4e1a      	ldr	r6, [pc, #104]	; (8002374 <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800230a:	f022 0203 	bic.w	r2, r2, #3
 800230e:	430a      	orrs	r2, r1
 8002310:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8002312:	f7fe f935 	bl	8000580 <HAL_GetTick>
 8002316:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002318:	68b3      	ldr	r3, [r6, #8]
 800231a:	6862      	ldr	r2, [r4, #4]
 800231c:	f003 030c 	and.w	r3, r3, #12
 8002320:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002324:	d0a1      	beq.n	800226a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002326:	f7fe f92b 	bl	8000580 <HAL_GetTick>
 800232a:	1bc0      	subs	r0, r0, r7
 800232c:	4540      	cmp	r0, r8
 800232e:	d9f3      	bls.n	8002318 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8002330:	2003      	movs	r0, #3
}
 8002332:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002336:	2902      	cmp	r1, #2
 8002338:	d102      	bne.n	8002340 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800233a:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800233e:	e7df      	b.n	8002300 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002340:	f012 0f02 	tst.w	r2, #2
 8002344:	e7dc      	b.n	8002300 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002346:	6813      	ldr	r3, [r2, #0]
 8002348:	f023 030f 	bic.w	r3, r3, #15
 800234c:	432b      	orrs	r3, r5
 800234e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002350:	6813      	ldr	r3, [r2, #0]
 8002352:	f003 030f 	and.w	r3, r3, #15
 8002356:	429d      	cmp	r5, r3
 8002358:	f47f af79 	bne.w	800224e <HAL_RCC_ClockConfig+0xa>
 800235c:	e78b      	b.n	8002276 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800235e:	4905      	ldr	r1, [pc, #20]	; (8002374 <HAL_RCC_ClockConfig+0x130>)
 8002360:	68e0      	ldr	r0, [r4, #12]
 8002362:	688b      	ldr	r3, [r1, #8]
 8002364:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002368:	4303      	orrs	r3, r0
 800236a:	608b      	str	r3, [r1, #8]
 800236c:	e786      	b.n	800227c <HAL_RCC_ClockConfig+0x38>
 800236e:	bf00      	nop
 8002370:	40023c00 	.word	0x40023c00
 8002374:	40023800 	.word	0x40023800
 8002378:	0800689c 	.word	0x0800689c
 800237c:	20000118 	.word	0x20000118

08002380 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002380:	4b01      	ldr	r3, [pc, #4]	; (8002388 <HAL_RCC_GetHCLKFreq+0x8>)
 8002382:	6818      	ldr	r0, [r3, #0]
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	20000118 	.word	0x20000118

0800238c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800238c:	4b04      	ldr	r3, [pc, #16]	; (80023a0 <HAL_RCC_GetPCLK1Freq+0x14>)
 800238e:	4a05      	ldr	r2, [pc, #20]	; (80023a4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002396:	5cd3      	ldrb	r3, [r2, r3]
 8002398:	4a03      	ldr	r2, [pc, #12]	; (80023a8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800239a:	6810      	ldr	r0, [r2, #0]
}
 800239c:	40d8      	lsrs	r0, r3
 800239e:	4770      	bx	lr
 80023a0:	40023800 	.word	0x40023800
 80023a4:	080068ac 	.word	0x080068ac
 80023a8:	20000118 	.word	0x20000118

080023ac <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80023ac:	4b04      	ldr	r3, [pc, #16]	; (80023c0 <HAL_RCC_GetPCLK2Freq+0x14>)
 80023ae:	4a05      	ldr	r2, [pc, #20]	; (80023c4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80023b6:	5cd3      	ldrb	r3, [r2, r3]
 80023b8:	4a03      	ldr	r2, [pc, #12]	; (80023c8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80023ba:	6810      	ldr	r0, [r2, #0]
}
 80023bc:	40d8      	lsrs	r0, r3
 80023be:	4770      	bx	lr
 80023c0:	40023800 	.word	0x40023800
 80023c4:	080068ac 	.word	0x080068ac
 80023c8:	20000118 	.word	0x20000118

080023cc <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80023cc:	230f      	movs	r3, #15
 80023ce:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80023d0:	4b0b      	ldr	r3, [pc, #44]	; (8002400 <HAL_RCC_GetClockConfig+0x34>)
 80023d2:	689a      	ldr	r2, [r3, #8]
 80023d4:	f002 0203 	and.w	r2, r2, #3
 80023d8:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80023da:	689a      	ldr	r2, [r3, #8]
 80023dc:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80023e0:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80023e2:	689a      	ldr	r2, [r3, #8]
 80023e4:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 80023e8:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	08db      	lsrs	r3, r3, #3
 80023ee:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80023f2:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80023f4:	4b03      	ldr	r3, [pc, #12]	; (8002404 <HAL_RCC_GetClockConfig+0x38>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 030f 	and.w	r3, r3, #15
 80023fc:	600b      	str	r3, [r1, #0]
 80023fe:	4770      	bx	lr
 8002400:	40023800 	.word	0x40023800
 8002404:	40023c00 	.word	0x40023c00

08002408 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002408:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800240c:	6802      	ldr	r2, [r0, #0]
{
 800240e:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002410:	f012 0601 	ands.w	r6, r2, #1
 8002414:	d00b      	beq.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002416:	4bb8      	ldr	r3, [pc, #736]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002418:	6899      	ldr	r1, [r3, #8]
 800241a:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 800241e:	6099      	str	r1, [r3, #8]
 8002420:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8002422:	6899      	ldr	r1, [r3, #8]
 8002424:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002426:	fab6 f686 	clz	r6, r6
 800242a:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800242c:	6099      	str	r1, [r3, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800242e:	f412 2500 	ands.w	r5, r2, #524288	; 0x80000
 8002432:	d012      	beq.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002434:	49b0      	ldr	r1, [pc, #704]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002436:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8002438:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800243c:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002440:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
    {
      plli2sused = 1;
 8002444:	bf08      	it	eq
 8002446:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002448:	ea43 0305 	orr.w	r3, r3, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800244c:	bf16      	itet	ne
 800244e:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 8002452:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002454:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002456:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800245a:	02d7      	lsls	r7, r2, #11
 800245c:	d510      	bpl.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800245e:	48a6      	ldr	r0, [pc, #664]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002460:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002462:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002466:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800246a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800246e:	ea43 0301 	orr.w	r3, r3, r1
 8002472:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002476:	f000 8189 	beq.w	800278c <HAL_RCCEx_PeriphCLKConfig+0x384>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 800247a:	2900      	cmp	r1, #0
 800247c:	bf08      	it	eq
 800247e:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 8002480:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 8002484:	bf18      	it	ne
 8002486:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002488:	0690      	lsls	r0, r2, #26
 800248a:	d531      	bpl.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800248c:	4b9a      	ldr	r3, [pc, #616]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800248e:	4f9b      	ldr	r7, [pc, #620]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8002490:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002492:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002496:	641a      	str	r2, [r3, #64]	; 0x40
 8002498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800249e:	9301      	str	r3, [sp, #4]
 80024a0:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024a8:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024aa:	f7fe f869 	bl	8000580 <HAL_GetTick>
 80024ae:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	05d9      	lsls	r1, r3, #23
 80024b4:	f140 816c 	bpl.w	8002790 <HAL_RCCEx_PeriphCLKConfig+0x388>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80024b8:	4f8f      	ldr	r7, [pc, #572]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80024ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80024bc:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80024c0:	f040 8171 	bne.w	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024c4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80024c6:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80024ca:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80024ce:	4a8a      	ldr	r2, [pc, #552]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80024d0:	f040 818f 	bne.w	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80024d4:	6891      	ldr	r1, [r2, #8]
 80024d6:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 80024da:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80024de:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 80024e2:	4301      	orrs	r1, r0
 80024e4:	6091      	str	r1, [r2, #8]
 80024e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024ea:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80024ec:	430b      	orrs	r3, r1
 80024ee:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80024f0:	6823      	ldr	r3, [r4, #0]
 80024f2:	06df      	lsls	r7, r3, #27
 80024f4:	d50c      	bpl.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80024f6:	4a80      	ldr	r2, [pc, #512]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80024f8:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 80024fc:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8002500:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8002504:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8002508:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800250a:	4301      	orrs	r1, r0
 800250c:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002510:	0458      	lsls	r0, r3, #17
 8002512:	d508      	bpl.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002514:	4978      	ldr	r1, [pc, #480]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002516:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8002518:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800251c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8002520:	4302      	orrs	r2, r0
 8002522:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002526:	0419      	lsls	r1, r3, #16
 8002528:	d508      	bpl.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800252a:	4973      	ldr	r1, [pc, #460]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800252c:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800252e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002532:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8002536:	4302      	orrs	r2, r0
 8002538:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800253c:	03da      	lsls	r2, r3, #15
 800253e:	d508      	bpl.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002540:	496d      	ldr	r1, [pc, #436]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002542:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8002544:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002548:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800254c:	4302      	orrs	r2, r0
 800254e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002552:	039f      	lsls	r7, r3, #14
 8002554:	d508      	bpl.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002556:	4968      	ldr	r1, [pc, #416]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002558:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800255a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800255e:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8002562:	4302      	orrs	r2, r0
 8002564:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002568:	0658      	lsls	r0, r3, #25
 800256a:	d508      	bpl.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800256c:	4962      	ldr	r1, [pc, #392]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800256e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002570:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002574:	f022 0203 	bic.w	r2, r2, #3
 8002578:	4302      	orrs	r2, r0
 800257a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800257e:	0619      	lsls	r1, r3, #24
 8002580:	d508      	bpl.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002582:	495d      	ldr	r1, [pc, #372]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002584:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8002586:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800258a:	f022 020c 	bic.w	r2, r2, #12
 800258e:	4302      	orrs	r2, r0
 8002590:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002594:	05da      	lsls	r2, r3, #23
 8002596:	d508      	bpl.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002598:	4957      	ldr	r1, [pc, #348]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800259a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800259c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80025a0:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80025a4:	4302      	orrs	r2, r0
 80025a6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80025aa:	059f      	lsls	r7, r3, #22
 80025ac:	d508      	bpl.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80025ae:	4952      	ldr	r1, [pc, #328]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80025b0:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80025b2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80025b6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80025ba:	4302      	orrs	r2, r0
 80025bc:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80025c0:	0558      	lsls	r0, r3, #21
 80025c2:	d508      	bpl.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80025c4:	494c      	ldr	r1, [pc, #304]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80025c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80025c8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80025cc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80025d0:	4302      	orrs	r2, r0
 80025d2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80025d6:	0519      	lsls	r1, r3, #20
 80025d8:	d508      	bpl.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80025da:	4947      	ldr	r1, [pc, #284]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80025dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80025de:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80025e2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80025e6:	4302      	orrs	r2, r0
 80025e8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80025ec:	04da      	lsls	r2, r3, #19
 80025ee:	d508      	bpl.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80025f0:	4941      	ldr	r1, [pc, #260]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80025f2:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80025f4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80025f8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80025fc:	4302      	orrs	r2, r0
 80025fe:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002602:	049f      	lsls	r7, r3, #18
 8002604:	d508      	bpl.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002606:	493c      	ldr	r1, [pc, #240]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002608:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800260a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800260e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002612:	4302      	orrs	r2, r0
 8002614:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002618:	0258      	lsls	r0, r3, #9
 800261a:	d508      	bpl.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800261c:	4936      	ldr	r1, [pc, #216]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800261e:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8002620:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002624:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8002628:	4302      	orrs	r2, r0
 800262a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800262e:	0299      	lsls	r1, r3, #10
 8002630:	d50c      	bpl.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002632:	4831      	ldr	r0, [pc, #196]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002634:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8002636:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 800263a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800263e:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 8002642:	bf08      	it	eq
 8002644:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002646:	430a      	orrs	r2, r1
 8002648:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
    pllsaiused = 1;
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800264c:	035a      	lsls	r2, r3, #13
 800264e:	d508      	bpl.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002650:	4929      	ldr	r1, [pc, #164]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002652:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8002654:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002658:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800265c:	4302      	orrs	r2, r0
 800265e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002662:	021f      	lsls	r7, r3, #8
 8002664:	d509      	bpl.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002666:	4924      	ldr	r1, [pc, #144]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002668:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800266c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002670:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002674:	4302      	orrs	r2, r0
 8002676:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800267a:	0158      	lsls	r0, r3, #5
 800267c:	d509      	bpl.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800267e:	491e      	ldr	r1, [pc, #120]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002680:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8002684:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002688:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800268c:	4302      	orrs	r2, r0
 800268e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002692:	0119      	lsls	r1, r3, #4
 8002694:	d509      	bpl.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002696:	4918      	ldr	r1, [pc, #96]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002698:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 800269c:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 80026a0:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 80026a4:	4302      	orrs	r2, r0
 80026a6:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80026aa:	00da      	lsls	r2, r3, #3
 80026ac:	d509      	bpl.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80026ae:	4912      	ldr	r1, [pc, #72]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80026b0:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 80026b4:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 80026b8:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80026bc:	4302      	orrs	r2, r0
 80026be:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80026c2:	2e01      	cmp	r6, #1
 80026c4:	f000 8099 	beq.w	80027fa <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80026c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80026cc:	f000 8095 	beq.w	80027fa <HAL_RCCEx_PeriphCLKConfig+0x3f2>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80026d0:	2d01      	cmp	r5, #1
 80026d2:	d159      	bne.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x380>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80026d4:	4d08      	ldr	r5, [pc, #32]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80026d6:	682b      	ldr	r3, [r5, #0]
 80026d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026dc:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026de:	f7fd ff4f 	bl	8000580 <HAL_GetTick>
 80026e2:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80026e4:	682b      	ldr	r3, [r5, #0]
 80026e6:	009f      	lsls	r7, r3, #2
 80026e8:	f100 810b 	bmi.w	8002902 <HAL_RCCEx_PeriphCLKConfig+0x4fa>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80026ec:	6821      	ldr	r1, [r4, #0]
 80026ee:	030d      	lsls	r5, r1, #12
 80026f0:	d506      	bpl.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 80026f2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80026f4:	b143      	cbz	r3, 8002708 <HAL_RCCEx_PeriphCLKConfig+0x300>
 80026f6:	e003      	b.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 80026f8:	40023800 	.word	0x40023800
 80026fc:	40007000 	.word	0x40007000
 8002700:	02c8      	lsls	r0, r1, #11
 8002702:	d51d      	bpl.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x338>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002704:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002706:	b9db      	cbnz	r3, 8002740 <HAL_RCCEx_PeriphCLKConfig+0x338>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002708:	4a85      	ldr	r2, [pc, #532]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x518>)
 800270a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800270e:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002712:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002716:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800271a:	4303      	orrs	r3, r0
 800271c:	6960      	ldr	r0, [r4, #20]
 800271e:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002722:	69a0      	ldr	r0, [r4, #24]
 8002724:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8002728:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800272c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002730:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002732:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8002736:	3801      	subs	r0, #1
 8002738:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800273c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002740:	028a      	lsls	r2, r1, #10
 8002742:	d515      	bpl.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8002744:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8002746:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800274a:	d111      	bne.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800274c:	4a74      	ldr	r2, [pc, #464]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x518>)
 800274e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002752:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002756:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800275a:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 800275e:	430b      	orrs	r3, r1
 8002760:	6961      	ldr	r1, [r4, #20]
 8002762:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8002766:	6a21      	ldr	r1, [r4, #32]
 8002768:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800276c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002770:	4c6b      	ldr	r4, [pc, #428]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x518>)
 8002772:	6823      	ldr	r3, [r4, #0]
 8002774:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002778:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800277a:	f7fd ff01 	bl	8000580 <HAL_GetTick>
 800277e:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002780:	6823      	ldr	r3, [r4, #0]
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	f140 80c4 	bpl.w	8002910 <HAL_RCCEx_PeriphCLKConfig+0x508>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002788:	2000      	movs	r0, #0
 800278a:	e009      	b.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x398>
      plli2sused = 1;
 800278c:	2601      	movs	r6, #1
 800278e:	e677      	b.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002790:	f7fd fef6 	bl	8000580 <HAL_GetTick>
 8002794:	eba0 0008 	sub.w	r0, r0, r8
 8002798:	2864      	cmp	r0, #100	; 0x64
 800279a:	f67f ae89 	bls.w	80024b0 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 800279e:	2003      	movs	r0, #3
}
 80027a0:	b003      	add	sp, #12
 80027a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80027a6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80027a8:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80027ac:	4293      	cmp	r3, r2
 80027ae:	f43f ae89 	beq.w	80024c4 <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80027b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 80027b4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80027b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 80027ba:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80027be:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80027c0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80027c2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80027c6:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 80027c8:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80027ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027cc:	07da      	lsls	r2, r3, #31
 80027ce:	f57f ae79 	bpl.w	80024c4 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 80027d2:	f7fd fed5 	bl	8000580 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027d6:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80027da:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027de:	079b      	lsls	r3, r3, #30
 80027e0:	f53f ae70 	bmi.w	80024c4 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027e4:	f7fd fecc 	bl	8000580 <HAL_GetTick>
 80027e8:	eba0 0008 	sub.w	r0, r0, r8
 80027ec:	4548      	cmp	r0, r9
 80027ee:	d9f5      	bls.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x3d4>
 80027f0:	e7d5      	b.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x396>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027f2:	6891      	ldr	r1, [r2, #8]
 80027f4:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80027f8:	e674      	b.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
 80027fa:	4e49      	ldr	r6, [pc, #292]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x518>)
 80027fc:	6833      	ldr	r3, [r6, #0]
 80027fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002802:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8002804:	f7fd febc 	bl	8000580 <HAL_GetTick>
 8002808:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800280a:	6833      	ldr	r3, [r6, #0]
 800280c:	011b      	lsls	r3, r3, #4
 800280e:	d472      	bmi.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002810:	6822      	ldr	r2, [r4, #0]
 8002812:	07d7      	lsls	r7, r2, #31
 8002814:	d512      	bpl.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x434>
 8002816:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002818:	b983      	cbnz	r3, 800283c <HAL_RCCEx_PeriphCLKConfig+0x434>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800281a:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800281e:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002822:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002826:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 800282a:	430b      	orrs	r3, r1
 800282c:	6861      	ldr	r1, [r4, #4]
 800282e:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8002832:	68a1      	ldr	r1, [r4, #8]
 8002834:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8002838:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800283c:	0316      	lsls	r6, r2, #12
 800283e:	d503      	bpl.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8002840:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002842:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002846:	d005      	beq.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x44c>
 8002848:	02d0      	lsls	r0, r2, #11
 800284a:	d51e      	bpl.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x482>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800284c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800284e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002852:	d11a      	bne.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x482>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002854:	4932      	ldr	r1, [pc, #200]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x518>)
 8002856:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800285a:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800285e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002862:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8002866:	4303      	orrs	r3, r0
 8002868:	6860      	ldr	r0, [r4, #4]
 800286a:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800286e:	68e0      	ldr	r0, [r4, #12]
 8002870:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8002874:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002878:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 800287c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800287e:	f020 001f 	bic.w	r0, r0, #31
 8002882:	3b01      	subs	r3, #1
 8002884:	4303      	orrs	r3, r0
 8002886:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800288a:	01d1      	lsls	r1, r2, #7
 800288c:	d511      	bpl.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800288e:	4924      	ldr	r1, [pc, #144]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x518>)
 8002890:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002894:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002898:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800289c:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80028a0:	4303      	orrs	r3, r0
 80028a2:	6860      	ldr	r0, [r4, #4]
 80028a4:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80028a8:	6920      	ldr	r0, [r4, #16]
 80028aa:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80028ae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80028b2:	0192      	lsls	r2, r2, #6
 80028b4:	d50d      	bpl.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80028b6:	6923      	ldr	r3, [r4, #16]
 80028b8:	6862      	ldr	r2, [r4, #4]
 80028ba:	041b      	lsls	r3, r3, #16
 80028bc:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80028c0:	68e2      	ldr	r2, [r4, #12]
 80028c2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80028c6:	68a2      	ldr	r2, [r4, #8]
 80028c8:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80028cc:	4a14      	ldr	r2, [pc, #80]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x518>)
 80028ce:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 80028d2:	4e13      	ldr	r6, [pc, #76]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x518>)
 80028d4:	6833      	ldr	r3, [r6, #0]
 80028d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80028da:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80028dc:	f7fd fe50 	bl	8000580 <HAL_GetTick>
 80028e0:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80028e2:	6833      	ldr	r3, [r6, #0]
 80028e4:	011b      	lsls	r3, r3, #4
 80028e6:	f53f aef3 	bmi.w	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80028ea:	f7fd fe49 	bl	8000580 <HAL_GetTick>
 80028ee:	1bc0      	subs	r0, r0, r7
 80028f0:	2864      	cmp	r0, #100	; 0x64
 80028f2:	d9f6      	bls.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80028f4:	e753      	b.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x396>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80028f6:	f7fd fe43 	bl	8000580 <HAL_GetTick>
 80028fa:	1bc0      	subs	r0, r0, r7
 80028fc:	2864      	cmp	r0, #100	; 0x64
 80028fe:	d984      	bls.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x402>
 8002900:	e74d      	b.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x396>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002902:	f7fd fe3d 	bl	8000580 <HAL_GetTick>
 8002906:	1b80      	subs	r0, r0, r6
 8002908:	2864      	cmp	r0, #100	; 0x64
 800290a:	f67f aeeb 	bls.w	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800290e:	e746      	b.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x396>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002910:	f7fd fe36 	bl	8000580 <HAL_GetTick>
 8002914:	1b40      	subs	r0, r0, r5
 8002916:	2864      	cmp	r0, #100	; 0x64
 8002918:	f67f af32 	bls.w	8002780 <HAL_RCCEx_PeriphCLKConfig+0x378>
 800291c:	e73f      	b.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x396>
 800291e:	bf00      	nop
 8002920:	40023800 	.word	0x40023800

08002924 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002924:	b570      	push	{r4, r5, r6, lr}
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002926:	4604      	mov	r4, r0
 8002928:	2800      	cmp	r0, #0
 800292a:	d04e      	beq.n	80029ca <HAL_SPI_Init+0xa6>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800292c:	2300      	movs	r3, #0
 800292e:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002930:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8002934:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002938:	b91b      	cbnz	r3, 8002942 <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800293a:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800293e:	f003 f85f 	bl	8005a00 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002942:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002944:	6821      	ldr	r1, [r4, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002946:	68e2      	ldr	r2, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8002948:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 800294c:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800294e:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8002952:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002956:	600b      	str	r3, [r1, #0]
 8002958:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800295c:	d932      	bls.n	80029c4 <HAL_SPI_Init+0xa0>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800295e:	4618      	mov	r0, r3
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002960:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002964:	bf18      	it	ne
 8002966:	62a3      	strne	r3, [r4, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002968:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800296a:	b92b      	cbnz	r3, 8002978 <HAL_SPI_Init+0x54>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800296c:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002970:	bf8c      	ite	hi
 8002972:	2302      	movhi	r3, #2
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002974:	2301      	movls	r3, #1
 8002976:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002978:	68a6      	ldr	r6, [r4, #8]
 800297a:	6863      	ldr	r3, [r4, #4]
 800297c:	69a5      	ldr	r5, [r4, #24]
 800297e:	4333      	orrs	r3, r6
 8002980:	6926      	ldr	r6, [r4, #16]
 8002982:	4333      	orrs	r3, r6
 8002984:	6966      	ldr	r6, [r4, #20]
 8002986:	4333      	orrs	r3, r6
 8002988:	69e6      	ldr	r6, [r4, #28]
 800298a:	4333      	orrs	r3, r6
 800298c:	6a26      	ldr	r6, [r4, #32]
 800298e:	4333      	orrs	r3, r6
 8002990:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002992:	4333      	orrs	r3, r6
 8002994:	f405 7600 	and.w	r6, r5, #512	; 0x200
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002998:	0c2d      	lsrs	r5, r5, #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800299a:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800299c:	f005 0504 	and.w	r5, r5, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80029a0:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80029a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80029a4:	431a      	orrs	r2, r3
 80029a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80029a8:	431a      	orrs	r2, r3
 80029aa:	432a      	orrs	r2, r5
 80029ac:	4302      	orrs	r2, r0
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80029ae:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80029b0:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80029b2:	69cb      	ldr	r3, [r1, #28]
 80029b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80029b8:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 80029ba:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80029bc:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80029be:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
 80029c2:	bd70      	pop	{r4, r5, r6, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80029c4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80029c8:	e7cc      	b.n	8002964 <HAL_SPI_Init+0x40>
    return HAL_ERROR;
 80029ca:	2001      	movs	r0, #1
}
 80029cc:	bd70      	pop	{r4, r5, r6, pc}

080029ce <HAL_SPI_ErrorCallback>:
 80029ce:	4770      	bx	lr

080029d0 <HAL_SPI_IRQHandler>:
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
  uint32_t itsource = hspi->Instance->CR2;
 80029d0:	6803      	ldr	r3, [r0, #0]
 80029d2:	6859      	ldr	r1, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 80029d4:	689a      	ldr	r2, [r3, #8]
{
 80029d6:	b530      	push	{r4, r5, lr}

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (((itflag & SPI_FLAG_OVR) == RESET) &&
 80029d8:	f002 0541 	and.w	r5, r2, #65	; 0x41
{
 80029dc:	b085      	sub	sp, #20
 80029de:	4604      	mov	r4, r0
  if (((itflag & SPI_FLAG_OVR) == RESET) &&
 80029e0:	2d01      	cmp	r5, #1
 80029e2:	d105      	bne.n	80029f0 <HAL_SPI_IRQHandler+0x20>
      ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 80029e4:	064d      	lsls	r5, r1, #25
 80029e6:	d503      	bpl.n	80029f0 <HAL_SPI_IRQHandler+0x20>
  {
    hspi->RxISR(hspi);
 80029e8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
  {
    hspi->TxISR(hspi);
 80029ea:	4798      	blx	r3
        HAL_SPI_ErrorCallback(hspi);
      }
    }
    return;
  }
}
 80029ec:	b005      	add	sp, #20
 80029ee:	bd30      	pop	{r4, r5, pc}
  if (((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
 80029f0:	0795      	lsls	r5, r2, #30
 80029f2:	d504      	bpl.n	80029fe <HAL_SPI_IRQHandler+0x2e>
 80029f4:	0608      	lsls	r0, r1, #24
 80029f6:	d502      	bpl.n	80029fe <HAL_SPI_IRQHandler+0x2e>
    hspi->TxISR(hspi);
 80029f8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80029fa:	4620      	mov	r0, r4
 80029fc:	e7f5      	b.n	80029ea <HAL_SPI_IRQHandler+0x1a>
  if (((itflag & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE)) != RESET) && ((itsource & SPI_IT_ERR) != RESET))
 80029fe:	f412 7fb0 	tst.w	r2, #352	; 0x160
 8002a02:	d0f3      	beq.n	80029ec <HAL_SPI_IRQHandler+0x1c>
 8002a04:	068d      	lsls	r5, r1, #26
 8002a06:	d5f1      	bpl.n	80029ec <HAL_SPI_IRQHandler+0x1c>
    if ((itflag & SPI_FLAG_OVR) != RESET)
 8002a08:	0650      	lsls	r0, r2, #25
 8002a0a:	d50e      	bpl.n	8002a2a <HAL_SPI_IRQHandler+0x5a>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002a0c:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8002a10:	2500      	movs	r5, #0
 8002a12:	2803      	cmp	r0, #3
 8002a14:	d041      	beq.n	8002a9a <HAL_SPI_IRQHandler+0xca>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002a16:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8002a18:	f040 0004 	orr.w	r0, r0, #4
 8002a1c:	6620      	str	r0, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a1e:	9500      	str	r5, [sp, #0]
 8002a20:	68d8      	ldr	r0, [r3, #12]
 8002a22:	9000      	str	r0, [sp, #0]
 8002a24:	6898      	ldr	r0, [r3, #8]
 8002a26:	9000      	str	r0, [sp, #0]
 8002a28:	9800      	ldr	r0, [sp, #0]
    if ((itflag & SPI_FLAG_MODF) != RESET)
 8002a2a:	0695      	lsls	r5, r2, #26
 8002a2c:	d50c      	bpl.n	8002a48 <HAL_SPI_IRQHandler+0x78>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002a2e:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8002a30:	f040 0001 	orr.w	r0, r0, #1
 8002a34:	6620      	str	r0, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002a36:	2000      	movs	r0, #0
 8002a38:	9002      	str	r0, [sp, #8]
 8002a3a:	6898      	ldr	r0, [r3, #8]
 8002a3c:	9002      	str	r0, [sp, #8]
 8002a3e:	6818      	ldr	r0, [r3, #0]
 8002a40:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8002a44:	6018      	str	r0, [r3, #0]
 8002a46:	9802      	ldr	r0, [sp, #8]
    if ((itflag & SPI_FLAG_FRE) != RESET)
 8002a48:	05d0      	lsls	r0, r2, #23
 8002a4a:	d508      	bpl.n	8002a5e <HAL_SPI_IRQHandler+0x8e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002a4c:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8002a4e:	f042 0208 	orr.w	r2, r2, #8
 8002a52:	6622      	str	r2, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002a54:	2200      	movs	r2, #0
 8002a56:	9203      	str	r2, [sp, #12]
 8002a58:	689a      	ldr	r2, [r3, #8]
 8002a5a:	9203      	str	r2, [sp, #12]
 8002a5c:	9a03      	ldr	r2, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a5e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8002a60:	2a00      	cmp	r2, #0
 8002a62:	d0c3      	beq.n	80029ec <HAL_SPI_IRQHandler+0x1c>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002a64:	685a      	ldr	r2, [r3, #4]
 8002a66:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002a6a:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002a72:	078a      	lsls	r2, r1, #30
 8002a74:	d018      	beq.n	8002aa8 <HAL_SPI_IRQHandler+0xd8>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002a76:	685a      	ldr	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 8002a78:	6da0      	ldr	r0, [r4, #88]	; 0x58
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002a7a:	f022 0203 	bic.w	r2, r2, #3
 8002a7e:	605a      	str	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 8002a80:	b118      	cbz	r0, 8002a8a <HAL_SPI_IRQHandler+0xba>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002a82:	4b0b      	ldr	r3, [pc, #44]	; (8002ab0 <HAL_SPI_IRQHandler+0xe0>)
 8002a84:	6503      	str	r3, [r0, #80]	; 0x50
          HAL_DMA_Abort_IT(hspi->hdmarx);
 8002a86:	f7fd fe0b 	bl	80006a0 <HAL_DMA_Abort_IT>
        if (hspi->hdmatx != NULL)
 8002a8a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002a8c:	2800      	cmp	r0, #0
 8002a8e:	d0ad      	beq.n	80029ec <HAL_SPI_IRQHandler+0x1c>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002a90:	4b07      	ldr	r3, [pc, #28]	; (8002ab0 <HAL_SPI_IRQHandler+0xe0>)
 8002a92:	6503      	str	r3, [r0, #80]	; 0x50
          HAL_DMA_Abort_IT(hspi->hdmatx);
 8002a94:	f7fd fe04 	bl	80006a0 <HAL_DMA_Abort_IT>
 8002a98:	e7a8      	b.n	80029ec <HAL_SPI_IRQHandler+0x1c>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a9a:	9501      	str	r5, [sp, #4]
 8002a9c:	68da      	ldr	r2, [r3, #12]
 8002a9e:	9201      	str	r2, [sp, #4]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	9301      	str	r3, [sp, #4]
 8002aa4:	9b01      	ldr	r3, [sp, #4]
        return;
 8002aa6:	e7a1      	b.n	80029ec <HAL_SPI_IRQHandler+0x1c>
        HAL_SPI_ErrorCallback(hspi);
 8002aa8:	4620      	mov	r0, r4
 8002aaa:	f7ff ff90 	bl	80029ce <HAL_SPI_ErrorCallback>
 8002aae:	e79d      	b.n	80029ec <HAL_SPI_IRQHandler+0x1c>
 8002ab0:	08002ab5 	.word	0x08002ab5

08002ab4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002ab4:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ab6:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = 0U;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8002abe:	87c3      	strh	r3, [r0, #62]	; 0x3e

  HAL_SPI_ErrorCallback(hspi);
 8002ac0:	f7ff ff85 	bl	80029ce <HAL_SPI_ErrorCallback>
 8002ac4:	bd08      	pop	{r3, pc}

08002ac6 <HAL_TIM_Base_MspInit>:
 8002ac6:	4770      	bx	lr

08002ac8 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ac8:	6803      	ldr	r3, [r0, #0]
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
      
  /* Return function status */
  return HAL_OK;
}
 8002aca:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002acc:	68da      	ldr	r2, [r3, #12]
 8002ace:	f042 0201 	orr.w	r2, r2, #1
 8002ad2:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	f042 0201 	orr.w	r2, r2, #1
 8002ada:	601a      	str	r2, [r3, #0]
}
 8002adc:	4770      	bx	lr

08002ade <HAL_TIM_OC_DelayElapsedCallback>:
 8002ade:	4770      	bx	lr

08002ae0 <HAL_TIM_IC_CaptureCallback>:
 8002ae0:	4770      	bx	lr

08002ae2 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002ae2:	4770      	bx	lr

08002ae4 <HAL_TIM_TriggerCallback>:
 8002ae4:	4770      	bx	lr

08002ae6 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ae6:	6803      	ldr	r3, [r0, #0]
 8002ae8:	691a      	ldr	r2, [r3, #16]
 8002aea:	0791      	lsls	r1, r2, #30
{
 8002aec:	b510      	push	{r4, lr}
 8002aee:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002af0:	d50f      	bpl.n	8002b12 <HAL_TIM_IRQHandler+0x2c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002af2:	68da      	ldr	r2, [r3, #12]
 8002af4:	0792      	lsls	r2, r2, #30
 8002af6:	d50c      	bpl.n	8002b12 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002af8:	f06f 0202 	mvn.w	r2, #2
 8002afc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002afe:	2201      	movs	r2, #1
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8002b00:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b02:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8002b04:	0799      	lsls	r1, r3, #30
 8002b06:	f000 8085 	beq.w	8002c14 <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b0a:	f7ff ffe9 	bl	8002ae0 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b12:	6823      	ldr	r3, [r4, #0]
 8002b14:	691a      	ldr	r2, [r3, #16]
 8002b16:	0752      	lsls	r2, r2, #29
 8002b18:	d510      	bpl.n	8002b3c <HAL_TIM_IRQHandler+0x56>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8002b1a:	68da      	ldr	r2, [r3, #12]
 8002b1c:	0750      	lsls	r0, r2, #29
 8002b1e:	d50d      	bpl.n	8002b3c <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b20:	f06f 0204 	mvn.w	r2, #4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b24:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b28:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8002b2a:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b2c:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8002b2e:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002b32:	d075      	beq.n	8002c20 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002b34:	f7ff ffd4 	bl	8002ae0 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b3c:	6823      	ldr	r3, [r4, #0]
 8002b3e:	691a      	ldr	r2, [r3, #16]
 8002b40:	0711      	lsls	r1, r2, #28
 8002b42:	d50f      	bpl.n	8002b64 <HAL_TIM_IRQHandler+0x7e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8002b44:	68da      	ldr	r2, [r3, #12]
 8002b46:	0712      	lsls	r2, r2, #28
 8002b48:	d50c      	bpl.n	8002b64 <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b4a:	f06f 0208 	mvn.w	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
      {          
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b4e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b52:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8002b54:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b56:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8002b58:	079b      	lsls	r3, r3, #30
 8002b5a:	d067      	beq.n	8002c2c <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8002b5c:	f7ff ffc0 	bl	8002ae0 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b60:	2300      	movs	r3, #0
 8002b62:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b64:	6823      	ldr	r3, [r4, #0]
 8002b66:	691a      	ldr	r2, [r3, #16]
 8002b68:	06d0      	lsls	r0, r2, #27
 8002b6a:	d510      	bpl.n	8002b8e <HAL_TIM_IRQHandler+0xa8>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002b6c:	68da      	ldr	r2, [r3, #12]
 8002b6e:	06d1      	lsls	r1, r2, #27
 8002b70:	d50d      	bpl.n	8002b8e <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b72:	f06f 0210 	mvn.w	r2, #16
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
      {          
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b76:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b7a:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8002b7c:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b7e:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8002b80:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002b84:	d058      	beq.n	8002c38 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8002b86:	f7ff ffab 	bl	8002ae0 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b8e:	6823      	ldr	r3, [r4, #0]
 8002b90:	691a      	ldr	r2, [r3, #16]
 8002b92:	07d2      	lsls	r2, r2, #31
 8002b94:	d508      	bpl.n	8002ba8 <HAL_TIM_IRQHandler+0xc2>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8002b96:	68da      	ldr	r2, [r3, #12]
 8002b98:	07d0      	lsls	r0, r2, #31
 8002b9a:	d505      	bpl.n	8002ba8 <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b9c:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ba0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ba2:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ba4:	f002 fdb4 	bl	8005710 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ba8:	6823      	ldr	r3, [r4, #0]
 8002baa:	691a      	ldr	r2, [r3, #16]
 8002bac:	0611      	lsls	r1, r2, #24
 8002bae:	d508      	bpl.n	8002bc2 <HAL_TIM_IRQHandler+0xdc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002bb0:	68da      	ldr	r2, [r3, #12]
 8002bb2:	0612      	lsls	r2, r2, #24
 8002bb4:	d505      	bpl.n	8002bc2 <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002bb6:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002bba:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002bbc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002bbe:	f000 f8c6 	bl	8002d4e <HAL_TIMEx_BreakCallback>

    }
  }
  
    /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002bc2:	6823      	ldr	r3, [r4, #0]
 8002bc4:	691a      	ldr	r2, [r3, #16]
 8002bc6:	05d0      	lsls	r0, r2, #23
 8002bc8:	d508      	bpl.n	8002bdc <HAL_TIM_IRQHandler+0xf6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002bca:	68da      	ldr	r2, [r3, #12]
 8002bcc:	0611      	lsls	r1, r2, #24
 8002bce:	d505      	bpl.n	8002bdc <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002bd0:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002bd4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002bd6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002bd8:	f000 f8b9 	bl	8002d4e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }

  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002bdc:	6823      	ldr	r3, [r4, #0]
 8002bde:	691a      	ldr	r2, [r3, #16]
 8002be0:	0652      	lsls	r2, r2, #25
 8002be2:	d508      	bpl.n	8002bf6 <HAL_TIM_IRQHandler+0x110>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002be4:	68da      	ldr	r2, [r3, #12]
 8002be6:	0650      	lsls	r0, r2, #25
 8002be8:	d505      	bpl.n	8002bf6 <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002bea:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bee:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002bf0:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002bf2:	f7ff ff77 	bl	8002ae4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002bf6:	6823      	ldr	r3, [r4, #0]
 8002bf8:	691a      	ldr	r2, [r3, #16]
 8002bfa:	0691      	lsls	r1, r2, #26
 8002bfc:	d522      	bpl.n	8002c44 <HAL_TIM_IRQHandler+0x15e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002bfe:	68da      	ldr	r2, [r3, #12]
 8002c00:	0692      	lsls	r2, r2, #26
 8002c02:	d51f      	bpl.n	8002c44 <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c04:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutationCallback(htim);
 8002c08:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c0a:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8002c10:	f000 b89c 	b.w	8002d4c <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c14:	f7ff ff63 	bl	8002ade <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c18:	4620      	mov	r0, r4
 8002c1a:	f7ff ff62 	bl	8002ae2 <HAL_TIM_PWM_PulseFinishedCallback>
 8002c1e:	e776      	b.n	8002b0e <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c20:	f7ff ff5d 	bl	8002ade <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c24:	4620      	mov	r0, r4
 8002c26:	f7ff ff5c 	bl	8002ae2 <HAL_TIM_PWM_PulseFinishedCallback>
 8002c2a:	e785      	b.n	8002b38 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c2c:	f7ff ff57 	bl	8002ade <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c30:	4620      	mov	r0, r4
 8002c32:	f7ff ff56 	bl	8002ae2 <HAL_TIM_PWM_PulseFinishedCallback>
 8002c36:	e793      	b.n	8002b60 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c38:	f7ff ff51 	bl	8002ade <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c3c:	4620      	mov	r0, r4
 8002c3e:	f7ff ff50 	bl	8002ae2 <HAL_TIM_PWM_PulseFinishedCallback>
 8002c42:	e7a2      	b.n	8002b8a <HAL_TIM_IRQHandler+0xa4>
 8002c44:	bd10      	pop	{r4, pc}
	...

08002c48 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8002c48:	4a30      	ldr	r2, [pc, #192]	; (8002d0c <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8002c4a:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8002c4c:	4290      	cmp	r0, r2
 8002c4e:	d012      	beq.n	8002c76 <TIM_Base_SetConfig+0x2e>
 8002c50:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002c54:	d00f      	beq.n	8002c76 <TIM_Base_SetConfig+0x2e>
 8002c56:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002c5a:	4290      	cmp	r0, r2
 8002c5c:	d00b      	beq.n	8002c76 <TIM_Base_SetConfig+0x2e>
 8002c5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c62:	4290      	cmp	r0, r2
 8002c64:	d007      	beq.n	8002c76 <TIM_Base_SetConfig+0x2e>
 8002c66:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c6a:	4290      	cmp	r0, r2
 8002c6c:	d003      	beq.n	8002c76 <TIM_Base_SetConfig+0x2e>
 8002c6e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002c72:	4290      	cmp	r0, r2
 8002c74:	d11d      	bne.n	8002cb2 <TIM_Base_SetConfig+0x6a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8002c76:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002c7c:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8002c7e:	4a23      	ldr	r2, [pc, #140]	; (8002d0c <TIM_Base_SetConfig+0xc4>)
 8002c80:	4290      	cmp	r0, r2
 8002c82:	d104      	bne.n	8002c8e <TIM_Base_SetConfig+0x46>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c88:	68ca      	ldr	r2, [r1, #12]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	e028      	b.n	8002ce0 <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8002c8e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002c92:	d0f7      	beq.n	8002c84 <TIM_Base_SetConfig+0x3c>
 8002c94:	4a1e      	ldr	r2, [pc, #120]	; (8002d10 <TIM_Base_SetConfig+0xc8>)
 8002c96:	4290      	cmp	r0, r2
 8002c98:	d0f4      	beq.n	8002c84 <TIM_Base_SetConfig+0x3c>
 8002c9a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c9e:	4290      	cmp	r0, r2
 8002ca0:	d0f0      	beq.n	8002c84 <TIM_Base_SetConfig+0x3c>
 8002ca2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002ca6:	4290      	cmp	r0, r2
 8002ca8:	d0ec      	beq.n	8002c84 <TIM_Base_SetConfig+0x3c>
 8002caa:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002cae:	4290      	cmp	r0, r2
 8002cb0:	d0e8      	beq.n	8002c84 <TIM_Base_SetConfig+0x3c>
 8002cb2:	4a18      	ldr	r2, [pc, #96]	; (8002d14 <TIM_Base_SetConfig+0xcc>)
 8002cb4:	4290      	cmp	r0, r2
 8002cb6:	d0e5      	beq.n	8002c84 <TIM_Base_SetConfig+0x3c>
 8002cb8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002cbc:	4290      	cmp	r0, r2
 8002cbe:	d0e1      	beq.n	8002c84 <TIM_Base_SetConfig+0x3c>
 8002cc0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002cc4:	4290      	cmp	r0, r2
 8002cc6:	d0dd      	beq.n	8002c84 <TIM_Base_SetConfig+0x3c>
 8002cc8:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8002ccc:	4290      	cmp	r0, r2
 8002cce:	d0d9      	beq.n	8002c84 <TIM_Base_SetConfig+0x3c>
 8002cd0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002cd4:	4290      	cmp	r0, r2
 8002cd6:	d0d5      	beq.n	8002c84 <TIM_Base_SetConfig+0x3c>
 8002cd8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002cdc:	4290      	cmp	r0, r2
 8002cde:	d0d1      	beq.n	8002c84 <TIM_Base_SetConfig+0x3c>
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ce0:	694a      	ldr	r2, [r1, #20]
 8002ce2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ce6:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8002ce8:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cea:	688b      	ldr	r3, [r1, #8]
 8002cec:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002cee:	680b      	ldr	r3, [r1, #0]
 8002cf0:	6283      	str	r3, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8002cf2:	4b06      	ldr	r3, [pc, #24]	; (8002d0c <TIM_Base_SetConfig+0xc4>)
 8002cf4:	4298      	cmp	r0, r3
 8002cf6:	d006      	beq.n	8002d06 <TIM_Base_SetConfig+0xbe>
 8002cf8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002cfc:	4298      	cmp	r0, r3
 8002cfe:	d002      	beq.n	8002d06 <TIM_Base_SetConfig+0xbe>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d00:	2301      	movs	r3, #1
 8002d02:	6143      	str	r3, [r0, #20]
}
 8002d04:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8002d06:	690b      	ldr	r3, [r1, #16]
 8002d08:	6303      	str	r3, [r0, #48]	; 0x30
 8002d0a:	e7f9      	b.n	8002d00 <TIM_Base_SetConfig+0xb8>
 8002d0c:	40010000 	.word	0x40010000
 8002d10:	40000400 	.word	0x40000400
 8002d14:	40014000 	.word	0x40014000

08002d18 <HAL_TIM_Base_Init>:
{ 
 8002d18:	b510      	push	{r4, lr}
  if(htim == NULL)
 8002d1a:	4604      	mov	r4, r0
 8002d1c:	b1a0      	cbz	r0, 8002d48 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002d1e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002d22:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002d26:	b91b      	cbnz	r3, 8002d30 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002d28:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002d2c:	f7ff fecb 	bl	8002ac6 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002d30:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002d32:	6820      	ldr	r0, [r4, #0]
 8002d34:	1d21      	adds	r1, r4, #4
  htim->State= HAL_TIM_STATE_BUSY;
 8002d36:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002d3a:	f7ff ff85 	bl	8002c48 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002d3e:	2301      	movs	r3, #1
  return HAL_OK;
 8002d40:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8002d42:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002d46:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002d48:	2001      	movs	r0, #1
}
 8002d4a:	bd10      	pop	{r4, pc}

08002d4c <HAL_TIMEx_CommutationCallback>:
 8002d4c:	4770      	bx	lr

08002d4e <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d4e:	4770      	bx	lr

08002d50 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d50:	6803      	ldr	r3, [r0, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002d58:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d5a:	689a      	ldr	r2, [r3, #8]
 8002d5c:	f022 0201 	bic.w	r2, r2, #1
 8002d60:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d62:	2320      	movs	r3, #32
 8002d64:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
 8002d68:	4770      	bx	lr

08002d6a <UART_WaitOnFlagUntilTimeout>:
{
 8002d6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d6e:	9d06      	ldr	r5, [sp, #24]
 8002d70:	4604      	mov	r4, r0
 8002d72:	460f      	mov	r7, r1
 8002d74:	4616      	mov	r6, r2
 8002d76:	4698      	mov	r8, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d78:	6821      	ldr	r1, [r4, #0]
 8002d7a:	69ca      	ldr	r2, [r1, #28]
 8002d7c:	ea37 0302 	bics.w	r3, r7, r2
 8002d80:	bf0c      	ite	eq
 8002d82:	2201      	moveq	r2, #1
 8002d84:	2200      	movne	r2, #0
 8002d86:	42b2      	cmp	r2, r6
 8002d88:	d002      	beq.n	8002d90 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8002d8a:	2000      	movs	r0, #0
}
 8002d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8002d90:	1c6b      	adds	r3, r5, #1
 8002d92:	d0f2      	beq.n	8002d7a <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 8002d94:	b99d      	cbnz	r5, 8002dbe <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d96:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8002d98:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002da0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002da2:	689a      	ldr	r2, [r3, #8]
 8002da4:	f022 0201 	bic.w	r2, r2, #1
 8002da8:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8002daa:	2320      	movs	r3, #32
 8002dac:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8002db0:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 8002db4:	2300      	movs	r3, #0
 8002db6:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8002dba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 8002dbe:	f7fd fbdf 	bl	8000580 <HAL_GetTick>
 8002dc2:	eba0 0008 	sub.w	r0, r0, r8
 8002dc6:	4285      	cmp	r5, r0
 8002dc8:	d8d6      	bhi.n	8002d78 <UART_WaitOnFlagUntilTimeout+0xe>
 8002dca:	e7e4      	b.n	8002d96 <UART_WaitOnFlagUntilTimeout+0x2c>

08002dcc <HAL_UART_TxCpltCallback>:
 8002dcc:	4770      	bx	lr

08002dce <HAL_UART_RxCpltCallback>:
 8002dce:	4770      	bx	lr

08002dd0 <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002dd0:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8002dd4:	6802      	ldr	r2, [r0, #0]
 8002dd6:	2b22      	cmp	r3, #34	; 0x22
{
 8002dd8:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002dda:	d12a      	bne.n	8002e32 <UART_Receive_IT+0x62>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ddc:	6883      	ldr	r3, [r0, #8]
  uint16_t uhMask = huart->Mask;
 8002dde:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002de2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002de6:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002de8:	d11d      	bne.n	8002e26 <UART_Receive_IT+0x56>
 8002dea:	6904      	ldr	r4, [r0, #16]
 8002dec:	b9dc      	cbnz	r4, 8002e26 <UART_Receive_IT+0x56>
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8002dee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002df0:	4011      	ands	r1, r2
 8002df2:	f823 1b02 	strh.w	r1, [r3], #2
      huart->pRxBuffPtr +=2;
 8002df6:	6543      	str	r3, [r0, #84]	; 0x54
    if(--huart->RxXferCount == 0)
 8002df8:	f8b0 405a 	ldrh.w	r4, [r0, #90]	; 0x5a
 8002dfc:	3c01      	subs	r4, #1
 8002dfe:	b2a4      	uxth	r4, r4
 8002e00:	f8a0 405a 	strh.w	r4, [r0, #90]	; 0x5a
 8002e04:	b96c      	cbnz	r4, 8002e22 <UART_Receive_IT+0x52>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e06:	6803      	ldr	r3, [r0, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002e0e:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e10:	689a      	ldr	r2, [r3, #8]
 8002e12:	f022 0201 	bic.w	r2, r2, #1
 8002e16:	609a      	str	r2, [r3, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8002e18:	2320      	movs	r3, #32
 8002e1a:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
      HAL_UART_RxCpltCallback(huart);
 8002e1e:	f7ff ffd6 	bl	8002dce <HAL_UART_RxCpltCallback>
    return HAL_OK;
 8002e22:	2000      	movs	r0, #0
}
 8002e24:	bd10      	pop	{r4, pc}
      *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002e26:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e28:	1c5c      	adds	r4, r3, #1
 8002e2a:	4011      	ands	r1, r2
 8002e2c:	6544      	str	r4, [r0, #84]	; 0x54
 8002e2e:	7019      	strb	r1, [r3, #0]
 8002e30:	e7e2      	b.n	8002df8 <UART_Receive_IT+0x28>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002e32:	6993      	ldr	r3, [r2, #24]
    return HAL_BUSY;
 8002e34:	2002      	movs	r0, #2
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002e36:	f043 0308 	orr.w	r3, r3, #8
 8002e3a:	6193      	str	r3, [r2, #24]
    return HAL_BUSY;
 8002e3c:	bd10      	pop	{r4, pc}

08002e3e <HAL_UART_ErrorCallback>:
{
 8002e3e:	4770      	bx	lr

08002e40 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002e40:	6803      	ldr	r3, [r0, #0]
 8002e42:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e44:	6819      	ldr	r1, [r3, #0]
{
 8002e46:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 8002e48:	0716      	lsls	r6, r2, #28
{
 8002e4a:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e4c:	689d      	ldr	r5, [r3, #8]
  if (errorflags == RESET)
 8002e4e:	d107      	bne.n	8002e60 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e50:	0695      	lsls	r5, r2, #26
 8002e52:	d563      	bpl.n	8002f1c <HAL_UART_IRQHandler+0xdc>
 8002e54:	068e      	lsls	r6, r1, #26
 8002e56:	d561      	bpl.n	8002f1c <HAL_UART_IRQHandler+0xdc>
}
 8002e58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8002e5c:	f7ff bfb8 	b.w	8002dd0 <UART_Receive_IT>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 8002e60:	f015 0001 	ands.w	r0, r5, #1
 8002e64:	d102      	bne.n	8002e6c <HAL_UART_IRQHandler+0x2c>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8002e66:	f411 7f90 	tst.w	r1, #288	; 0x120
 8002e6a:	d057      	beq.n	8002f1c <HAL_UART_IRQHandler+0xdc>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002e6c:	07d5      	lsls	r5, r2, #31
 8002e6e:	d507      	bpl.n	8002e80 <HAL_UART_IRQHandler+0x40>
 8002e70:	05ce      	lsls	r6, r1, #23
 8002e72:	d505      	bpl.n	8002e80 <HAL_UART_IRQHandler+0x40>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8002e74:	2501      	movs	r5, #1
 8002e76:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e78:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8002e7a:	f045 0501 	orr.w	r5, r5, #1
 8002e7e:	66e5      	str	r5, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e80:	0795      	lsls	r5, r2, #30
 8002e82:	d506      	bpl.n	8002e92 <HAL_UART_IRQHandler+0x52>
 8002e84:	b128      	cbz	r0, 8002e92 <HAL_UART_IRQHandler+0x52>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8002e86:	2502      	movs	r5, #2
 8002e88:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e8a:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8002e8c:	f045 0504 	orr.w	r5, r5, #4
 8002e90:	66e5      	str	r5, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e92:	0756      	lsls	r6, r2, #29
 8002e94:	d506      	bpl.n	8002ea4 <HAL_UART_IRQHandler+0x64>
 8002e96:	b128      	cbz	r0, 8002ea4 <HAL_UART_IRQHandler+0x64>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8002e98:	2504      	movs	r5, #4
 8002e9a:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e9c:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8002e9e:	f045 0502 	orr.w	r5, r5, #2
 8002ea2:	66e5      	str	r5, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8002ea4:	0715      	lsls	r5, r2, #28
 8002ea6:	d507      	bpl.n	8002eb8 <HAL_UART_IRQHandler+0x78>
 8002ea8:	068e      	lsls	r6, r1, #26
 8002eaa:	d400      	bmi.n	8002eae <HAL_UART_IRQHandler+0x6e>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002eac:	b120      	cbz	r0, 8002eb8 <HAL_UART_IRQHandler+0x78>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8002eae:	2008      	movs	r0, #8
 8002eb0:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002eb2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8002eb4:	4303      	orrs	r3, r0
 8002eb6:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002eb8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d06a      	beq.n	8002f94 <HAL_UART_IRQHandler+0x154>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ebe:	0695      	lsls	r5, r2, #26
 8002ec0:	d504      	bpl.n	8002ecc <HAL_UART_IRQHandler+0x8c>
 8002ec2:	0688      	lsls	r0, r1, #26
 8002ec4:	d502      	bpl.n	8002ecc <HAL_UART_IRQHandler+0x8c>
        UART_Receive_IT(huart);
 8002ec6:	4620      	mov	r0, r4
 8002ec8:	f7ff ff82 	bl	8002dd0 <UART_Receive_IT>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002ecc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
        UART_EndRxTransfer(huart);
 8002ece:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002ed0:	0719      	lsls	r1, r3, #28
 8002ed2:	d404      	bmi.n	8002ede <HAL_UART_IRQHandler+0x9e>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8002ed4:	6823      	ldr	r3, [r4, #0]
 8002ed6:	689d      	ldr	r5, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002ed8:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8002edc:	d01a      	beq.n	8002f14 <HAL_UART_IRQHandler+0xd4>
        UART_EndRxTransfer(huart);
 8002ede:	f7ff ff37 	bl	8002d50 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ee2:	6823      	ldr	r3, [r4, #0]
 8002ee4:	689a      	ldr	r2, [r3, #8]
 8002ee6:	0652      	lsls	r2, r2, #25
 8002ee8:	d510      	bpl.n	8002f0c <HAL_UART_IRQHandler+0xcc>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002eea:	689a      	ldr	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8002eec:	6e60      	ldr	r0, [r4, #100]	; 0x64
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002eee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ef2:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8002ef4:	b150      	cbz	r0, 8002f0c <HAL_UART_IRQHandler+0xcc>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ef6:	4b28      	ldr	r3, [pc, #160]	; (8002f98 <HAL_UART_IRQHandler+0x158>)
 8002ef8:	6503      	str	r3, [r0, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002efa:	f7fd fbd1 	bl	80006a0 <HAL_DMA_Abort_IT>
 8002efe:	2800      	cmp	r0, #0
 8002f00:	d048      	beq.n	8002f94 <HAL_UART_IRQHandler+0x154>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f02:	6e60      	ldr	r0, [r4, #100]	; 0x64
}
 8002f04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f08:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002f0a:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8002f0c:	4620      	mov	r0, r4
 8002f0e:	f7ff ff96 	bl	8002e3e <HAL_UART_ErrorCallback>
 8002f12:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8002f14:	f7ff ff93 	bl	8002e3e <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f18:	66e5      	str	r5, [r4, #108]	; 0x6c
 8002f1a:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002f1c:	0616      	lsls	r6, r2, #24
 8002f1e:	d52b      	bpl.n	8002f78 <HAL_UART_IRQHandler+0x138>
 8002f20:	060d      	lsls	r5, r1, #24
 8002f22:	d529      	bpl.n	8002f78 <HAL_UART_IRQHandler+0x138>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002f24:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
 8002f28:	2a21      	cmp	r2, #33	; 0x21
 8002f2a:	d133      	bne.n	8002f94 <HAL_UART_IRQHandler+0x154>
    if(huart->TxXferCount == 0U)
 8002f2c:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8002f30:	b292      	uxth	r2, r2
 8002f32:	b942      	cbnz	r2, 8002f46 <HAL_UART_IRQHandler+0x106>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f3a:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f42:	601a      	str	r2, [r3, #0]
 8002f44:	bd70      	pop	{r4, r5, r6, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f46:	68a2      	ldr	r2, [r4, #8]
 8002f48:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002f4c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8002f4e:	d10e      	bne.n	8002f6e <HAL_UART_IRQHandler+0x12e>
 8002f50:	6921      	ldr	r1, [r4, #16]
 8002f52:	b961      	cbnz	r1, 8002f6e <HAL_UART_IRQHandler+0x12e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8002f54:	f832 1b02 	ldrh.w	r1, [r2], #2
 8002f58:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8002f5c:	6299      	str	r1, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8002f5e:	64e2      	str	r2, [r4, #76]	; 0x4c
      huart->TxXferCount--;
 8002f60:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8002f64:	3b01      	subs	r3, #1
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8002f6c:	bd70      	pop	{r4, r5, r6, pc}
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 8002f6e:	1c51      	adds	r1, r2, #1
 8002f70:	64e1      	str	r1, [r4, #76]	; 0x4c
 8002f72:	7812      	ldrb	r2, [r2, #0]
 8002f74:	629a      	str	r2, [r3, #40]	; 0x28
 8002f76:	e7f3      	b.n	8002f60 <HAL_UART_IRQHandler+0x120>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002f78:	0650      	lsls	r0, r2, #25
 8002f7a:	d50b      	bpl.n	8002f94 <HAL_UART_IRQHandler+0x154>
 8002f7c:	064a      	lsls	r2, r1, #25
 8002f7e:	d509      	bpl.n	8002f94 <HAL_UART_IRQHandler+0x154>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002f80:	681a      	ldr	r2, [r3, #0]
  HAL_UART_TxCpltCallback(huart);
 8002f82:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002f84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f88:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8002f8a:	2320      	movs	r3, #32
 8002f8c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  HAL_UART_TxCpltCallback(huart);
 8002f90:	f7ff ff1c 	bl	8002dcc <HAL_UART_TxCpltCallback>
 8002f94:	bd70      	pop	{r4, r5, r6, pc}
 8002f96:	bf00      	nop
 8002f98:	08002f9d 	.word	0x08002f9d

08002f9c <UART_DMAAbortOnError>:
{
 8002f9c:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8002f9e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8002fa6:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 8002faa:	f7ff ff48 	bl	8002e3e <HAL_UART_ErrorCallback>
 8002fae:	bd08      	pop	{r3, pc}

08002fb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral
  * @param huart uart handle
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fb0:	b538      	push	{r3, r4, r5, lr}
 8002fb2:	4604      	mov	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002fb4:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002fb6:	69c3      	ldr	r3, [r0, #28]
 8002fb8:	6921      	ldr	r1, [r4, #16]
 8002fba:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002fbc:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002fbe:	430a      	orrs	r2, r1
 8002fc0:	6961      	ldr	r1, [r4, #20]
 8002fc2:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002fc4:	4993      	ldr	r1, [pc, #588]	; (8003214 <UART_SetConfig+0x264>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002fc6:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002fc8:	4001      	ands	r1, r0
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002fca:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002fcc:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fce:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002fd0:	602a      	str	r2, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fd2:	686a      	ldr	r2, [r5, #4]
 8002fd4:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002fd8:	430a      	orrs	r2, r1
 8002fda:	606a      	str	r2, [r5, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002fdc:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002fde:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002fe0:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002fe2:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8002fe6:	430a      	orrs	r2, r1
 8002fe8:	60aa      	str	r2, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002fea:	4a8b      	ldr	r2, [pc, #556]	; (8003218 <UART_SetConfig+0x268>)
 8002fec:	4295      	cmp	r5, r2
 8002fee:	d119      	bne.n	8003024 <UART_SetConfig+0x74>
 8002ff0:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8002ff4:	4989      	ldr	r1, [pc, #548]	; (800321c <UART_SetConfig+0x26c>)
 8002ff6:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8002ffa:	f002 0203 	and.w	r2, r2, #3

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ffe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003002:	5c8a      	ldrb	r2, [r1, r2]
 8003004:	f040 80b3 	bne.w	800316e <UART_SetConfig+0x1be>
  {
    switch (clocksource)
 8003008:	2a08      	cmp	r2, #8
 800300a:	f200 80ad 	bhi.w	8003168 <UART_SetConfig+0x1b8>
 800300e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8003012:	0026      	.short	0x0026
 8003014:	00e9007b 	.word	0x00e9007b
 8003018:	00f500ab 	.word	0x00f500ab
 800301c:	00ab00ab 	.word	0x00ab00ab
 8003020:	00fb00ab 	.word	0x00fb00ab
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003024:	4a7e      	ldr	r2, [pc, #504]	; (8003220 <UART_SetConfig+0x270>)
 8003026:	4295      	cmp	r5, r2
 8003028:	d107      	bne.n	800303a <UART_SetConfig+0x8a>
 800302a:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 800302e:	497d      	ldr	r1, [pc, #500]	; (8003224 <UART_SetConfig+0x274>)
 8003030:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8003034:	f002 020c 	and.w	r2, r2, #12
 8003038:	e7e1      	b.n	8002ffe <UART_SetConfig+0x4e>
 800303a:	4a7b      	ldr	r2, [pc, #492]	; (8003228 <UART_SetConfig+0x278>)
 800303c:	4295      	cmp	r5, r2
 800303e:	d12b      	bne.n	8003098 <UART_SetConfig+0xe8>
 8003040:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
 8003044:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8003048:	f002 0230 	and.w	r2, r2, #48	; 0x30
 800304c:	2a10      	cmp	r2, #16
 800304e:	f000 80d2 	beq.w	80031f6 <UART_SetConfig+0x246>
 8003052:	d816      	bhi.n	8003082 <UART_SetConfig+0xd2>
 8003054:	b9da      	cbnz	r2, 800308e <UART_SetConfig+0xde>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003056:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800305a:	f040 809f 	bne.w	800319c <UART_SetConfig+0x1ec>
    {
    case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800305e:	f7ff f995 	bl	800238c <HAL_RCC_GetPCLK1Freq>
      break;
    case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003062:	6861      	ldr	r1, [r4, #4]
 8003064:	084a      	lsrs	r2, r1, #1
 8003066:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 800306a:	fbb3 f3f1 	udiv	r3, r3, r1
 800306e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003070:	2000      	movs	r0, #0
    default:
        ret = HAL_ERROR;
      break;
    }

    brrtemp = usartdiv & 0xFFF0U;
 8003072:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003076:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 800307a:	6821      	ldr	r1, [r4, #0]
 800307c:	4313      	orrs	r3, r2
 800307e:	60cb      	str	r3, [r1, #12]
 8003080:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003082:	2a20      	cmp	r2, #32
 8003084:	f000 80ab 	beq.w	80031de <UART_SetConfig+0x22e>
 8003088:	2a30      	cmp	r2, #48	; 0x30
 800308a:	f000 80ba 	beq.w	8003202 <UART_SetConfig+0x252>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800308e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003092:	d069      	beq.n	8003168 <UART_SetConfig+0x1b8>
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
      break;
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8003094:	2001      	movs	r0, #1
    }
  }

  return ret;

}
 8003096:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003098:	4a64      	ldr	r2, [pc, #400]	; (800322c <UART_SetConfig+0x27c>)
 800309a:	4295      	cmp	r5, r2
 800309c:	d10e      	bne.n	80030bc <UART_SetConfig+0x10c>
 800309e:	f502 32f6 	add.w	r2, r2, #125952	; 0x1ec00
 80030a2:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 80030a6:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 80030aa:	2a40      	cmp	r2, #64	; 0x40
 80030ac:	f000 80a3 	beq.w	80031f6 <UART_SetConfig+0x246>
 80030b0:	d9d0      	bls.n	8003054 <UART_SetConfig+0xa4>
 80030b2:	2a80      	cmp	r2, #128	; 0x80
 80030b4:	f000 8093 	beq.w	80031de <UART_SetConfig+0x22e>
 80030b8:	2ac0      	cmp	r2, #192	; 0xc0
 80030ba:	e7e6      	b.n	800308a <UART_SetConfig+0xda>
 80030bc:	4a5c      	ldr	r2, [pc, #368]	; (8003230 <UART_SetConfig+0x280>)
 80030be:	4295      	cmp	r5, r2
 80030c0:	d110      	bne.n	80030e4 <UART_SetConfig+0x134>
 80030c2:	f502 32f4 	add.w	r2, r2, #124928	; 0x1e800
 80030c6:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 80030ca:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80030ce:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80030d2:	f000 8090 	beq.w	80031f6 <UART_SetConfig+0x246>
 80030d6:	d9bd      	bls.n	8003054 <UART_SetConfig+0xa4>
 80030d8:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80030dc:	d07f      	beq.n	80031de <UART_SetConfig+0x22e>
 80030de:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80030e2:	e7d2      	b.n	800308a <UART_SetConfig+0xda>
 80030e4:	4a53      	ldr	r2, [pc, #332]	; (8003234 <UART_SetConfig+0x284>)
 80030e6:	4295      	cmp	r5, r2
 80030e8:	d117      	bne.n	800311a <UART_SetConfig+0x16a>
 80030ea:	f502 3292 	add.w	r2, r2, #74752	; 0x12400
 80030ee:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 80030f2:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 80030f6:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80030fa:	d07c      	beq.n	80031f6 <UART_SetConfig+0x246>
 80030fc:	d807      	bhi.n	800310e <UART_SetConfig+0x15e>
 80030fe:	2a00      	cmp	r2, #0
 8003100:	d1c5      	bne.n	800308e <UART_SetConfig+0xde>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003102:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003106:	d154      	bne.n	80031b2 <UART_SetConfig+0x202>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003108:	f7ff f950 	bl	80023ac <HAL_RCC_GetPCLK2Freq>
 800310c:	e7a9      	b.n	8003062 <UART_SetConfig+0xb2>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800310e:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8003112:	d064      	beq.n	80031de <UART_SetConfig+0x22e>
 8003114:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8003118:	e7b7      	b.n	800308a <UART_SetConfig+0xda>
 800311a:	4a47      	ldr	r2, [pc, #284]	; (8003238 <UART_SetConfig+0x288>)
 800311c:	4295      	cmp	r5, r2
 800311e:	d10f      	bne.n	8003140 <UART_SetConfig+0x190>
 8003120:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 8003124:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8003128:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 800312c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8003130:	d061      	beq.n	80031f6 <UART_SetConfig+0x246>
 8003132:	d98f      	bls.n	8003054 <UART_SetConfig+0xa4>
 8003134:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8003138:	d051      	beq.n	80031de <UART_SetConfig+0x22e>
 800313a:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 800313e:	e7a4      	b.n	800308a <UART_SetConfig+0xda>
 8003140:	4a3e      	ldr	r2, [pc, #248]	; (800323c <UART_SetConfig+0x28c>)
 8003142:	4295      	cmp	r5, r2
 8003144:	d1a3      	bne.n	800308e <UART_SetConfig+0xde>
 8003146:	f502 32de 	add.w	r2, r2, #113664	; 0x1bc00
 800314a:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 800314e:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8003152:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8003156:	d04e      	beq.n	80031f6 <UART_SetConfig+0x246>
 8003158:	f67f af7c 	bls.w	8003054 <UART_SetConfig+0xa4>
 800315c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8003160:	d03d      	beq.n	80031de <UART_SetConfig+0x22e>
 8003162:	f5b2 4f40 	cmp.w	r2, #49152	; 0xc000
 8003166:	e790      	b.n	800308a <UART_SetConfig+0xda>
        ret = HAL_ERROR;
 8003168:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 800316a:	2300      	movs	r3, #0
 800316c:	e781      	b.n	8003072 <UART_SetConfig+0xc2>
    switch (clocksource)
 800316e:	2a08      	cmp	r2, #8
 8003170:	d890      	bhi.n	8003094 <UART_SetConfig+0xe4>
 8003172:	a301      	add	r3, pc, #4	; (adr r3, 8003178 <UART_SetConfig+0x1c8>)
 8003174:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8003178:	0800319d 	.word	0x0800319d
 800317c:	080031b3 	.word	0x080031b3
 8003180:	080031b9 	.word	0x080031b9
 8003184:	08003095 	.word	0x08003095
 8003188:	080031cf 	.word	0x080031cf
 800318c:	08003095 	.word	0x08003095
 8003190:	08003095 	.word	0x08003095
 8003194:	08003095 	.word	0x08003095
 8003198:	080031d5 	.word	0x080031d5
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800319c:	f7ff f8f6 	bl	800238c <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80031a0:	6863      	ldr	r3, [r4, #4]
 80031a2:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80031a6:	fbb0 f0f3 	udiv	r0, r0, r3
 80031aa:	b280      	uxth	r0, r0
 80031ac:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80031ae:	2000      	movs	r0, #0
      break;
 80031b0:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80031b2:	f7ff f8fb 	bl	80023ac <HAL_RCC_GetPCLK2Freq>
 80031b6:	e7f3      	b.n	80031a0 <UART_SetConfig+0x1f0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80031b8:	6862      	ldr	r2, [r4, #4]
 80031ba:	0853      	lsrs	r3, r2, #1
 80031bc:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80031c0:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80031c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	60eb      	str	r3, [r5, #12]
 80031cc:	e7ef      	b.n	80031ae <UART_SetConfig+0x1fe>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80031ce:	f7ff f80b 	bl	80021e8 <HAL_RCC_GetSysClockFreq>
 80031d2:	e7e5      	b.n	80031a0 <UART_SetConfig+0x1f0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80031d4:	6862      	ldr	r2, [r4, #4]
 80031d6:	0853      	lsrs	r3, r2, #1
 80031d8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80031dc:	e7f2      	b.n	80031c4 <UART_SetConfig+0x214>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031e2:	d1e9      	bne.n	80031b8 <UART_SetConfig+0x208>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80031e4:	6860      	ldr	r0, [r4, #4]
 80031e6:	0843      	lsrs	r3, r0, #1
 80031e8:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80031ec:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80031f0:	fbb3 f3f0 	udiv	r3, r3, r0
 80031f4:	e73b      	b.n	800306e <UART_SetConfig+0xbe>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031fa:	d1e8      	bne.n	80031ce <UART_SetConfig+0x21e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80031fc:	f7fe fff4 	bl	80021e8 <HAL_RCC_GetSysClockFreq>
 8003200:	e72f      	b.n	8003062 <UART_SetConfig+0xb2>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003202:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003206:	d1e5      	bne.n	80031d4 <UART_SetConfig+0x224>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003208:	6860      	ldr	r0, [r4, #4]
 800320a:	0843      	lsrs	r3, r0, #1
 800320c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8003210:	e7ee      	b.n	80031f0 <UART_SetConfig+0x240>
 8003212:	bf00      	nop
 8003214:	efff69f3 	.word	0xefff69f3
 8003218:	40011000 	.word	0x40011000
 800321c:	08006848 	.word	0x08006848
 8003220:	40004400 	.word	0x40004400
 8003224:	0800684c 	.word	0x0800684c
 8003228:	40004800 	.word	0x40004800
 800322c:	40004c00 	.word	0x40004c00
 8003230:	40005000 	.word	0x40005000
 8003234:	40011400 	.word	0x40011400
 8003238:	40007800 	.word	0x40007800
 800323c:	40007c00 	.word	0x40007c00

08003240 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003240:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003242:	07da      	lsls	r2, r3, #31
{
 8003244:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003246:	d506      	bpl.n	8003256 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003248:	6801      	ldr	r1, [r0, #0]
 800324a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800324c:	684a      	ldr	r2, [r1, #4]
 800324e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8003252:	4322      	orrs	r2, r4
 8003254:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003256:	079c      	lsls	r4, r3, #30
 8003258:	d506      	bpl.n	8003268 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800325a:	6801      	ldr	r1, [r0, #0]
 800325c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800325e:	684a      	ldr	r2, [r1, #4]
 8003260:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003264:	4322      	orrs	r2, r4
 8003266:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003268:	0759      	lsls	r1, r3, #29
 800326a:	d506      	bpl.n	800327a <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800326c:	6801      	ldr	r1, [r0, #0]
 800326e:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8003270:	684a      	ldr	r2, [r1, #4]
 8003272:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003276:	4322      	orrs	r2, r4
 8003278:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800327a:	071a      	lsls	r2, r3, #28
 800327c:	d506      	bpl.n	800328c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800327e:	6801      	ldr	r1, [r0, #0]
 8003280:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8003282:	684a      	ldr	r2, [r1, #4]
 8003284:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003288:	4322      	orrs	r2, r4
 800328a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800328c:	06dc      	lsls	r4, r3, #27
 800328e:	d506      	bpl.n	800329e <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003290:	6801      	ldr	r1, [r0, #0]
 8003292:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8003294:	688a      	ldr	r2, [r1, #8]
 8003296:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800329a:	4322      	orrs	r2, r4
 800329c:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800329e:	0699      	lsls	r1, r3, #26
 80032a0:	d506      	bpl.n	80032b0 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80032a2:	6801      	ldr	r1, [r0, #0]
 80032a4:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80032a6:	688a      	ldr	r2, [r1, #8]
 80032a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032ac:	4322      	orrs	r2, r4
 80032ae:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80032b0:	065a      	lsls	r2, r3, #25
 80032b2:	d510      	bpl.n	80032d6 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80032b4:	6801      	ldr	r1, [r0, #0]
 80032b6:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80032b8:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80032ba:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80032be:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80032c2:	ea42 0204 	orr.w	r2, r2, r4
 80032c6:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80032c8:	d105      	bne.n	80032d6 <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80032ca:	684a      	ldr	r2, [r1, #4]
 80032cc:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80032ce:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80032d2:	4322      	orrs	r2, r4
 80032d4:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80032d6:	061b      	lsls	r3, r3, #24
 80032d8:	d506      	bpl.n	80032e8 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80032da:	6802      	ldr	r2, [r0, #0]
 80032dc:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80032de:	6853      	ldr	r3, [r2, #4]
 80032e0:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80032e4:	430b      	orrs	r3, r1
 80032e6:	6053      	str	r3, [r2, #4]
 80032e8:	bd10      	pop	{r4, pc}

080032ea <UART_CheckIdleState>:
  * @brief Check the UART Idle State
  * @param huart uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80032ea:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032ec:	2500      	movs	r5, #0
{
 80032ee:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032f0:	66c5      	str	r5, [r0, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80032f2:	f7fd f945 	bl	8000580 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80032f6:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 80032f8:	4603      	mov	r3, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80032fa:	6812      	ldr	r2, [r2, #0]
 80032fc:	0712      	lsls	r2, r2, #28
 80032fe:	d409      	bmi.n	8003314 <UART_CheckIdleState+0x2a>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 8003300:	2320      	movs	r3, #32
  huart->RxState= HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003302:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8003304:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8003308:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState= HAL_UART_STATE_READY;
 800330c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

  return HAL_OK;
}
 8003310:	b003      	add	sp, #12
 8003312:	bd30      	pop	{r4, r5, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003314:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8003318:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800331c:	4620      	mov	r0, r4
 800331e:	9200      	str	r2, [sp, #0]
 8003320:	462a      	mov	r2, r5
 8003322:	f7ff fd22 	bl	8002d6a <UART_WaitOnFlagUntilTimeout>
 8003326:	2800      	cmp	r0, #0
 8003328:	d0ea      	beq.n	8003300 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 800332a:	2003      	movs	r0, #3
 800332c:	e7f0      	b.n	8003310 <UART_CheckIdleState+0x26>

0800332e <HAL_UART_Init>:
{
 800332e:	b510      	push	{r4, lr}
  if(huart == NULL)
 8003330:	4604      	mov	r4, r0
 8003332:	b360      	cbz	r0, 800338e <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 8003334:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8003338:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800333c:	b91b      	cbnz	r3, 8003346 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800333e:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8003342:	f002 fe19 	bl	8005f78 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8003346:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003348:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 800334a:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 800334c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8003350:	6813      	ldr	r3, [r2, #0]
 8003352:	f023 0301 	bic.w	r3, r3, #1
 8003356:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003358:	f7ff fe2a 	bl	8002fb0 <UART_SetConfig>
 800335c:	2801      	cmp	r0, #1
 800335e:	d016      	beq.n	800338e <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003360:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003362:	b113      	cbz	r3, 800336a <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8003364:	4620      	mov	r0, r4
 8003366:	f7ff ff6b 	bl	8003240 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800336a:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 800336c:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800336e:	685a      	ldr	r2, [r3, #4]
 8003370:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003374:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003376:	689a      	ldr	r2, [r3, #8]
 8003378:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800337c:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	f042 0201 	orr.w	r2, r2, #1
}
 8003384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8003388:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800338a:	f7ff bfae 	b.w	80032ea <UART_CheckIdleState>
}
 800338e:	2001      	movs	r0, #1
 8003390:	bd10      	pop	{r4, pc}
	...

08003394 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003394:	4b0a      	ldr	r3, [pc, #40]	; (80033c0 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003396:	3b01      	subs	r3, #1
 8003398:	d101      	bne.n	800339e <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 800339a:	2003      	movs	r0, #3
 800339c:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800339e:	6902      	ldr	r2, [r0, #16]
 80033a0:	2a00      	cmp	r2, #0
 80033a2:	daf8      	bge.n	8003396 <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80033a4:	6903      	ldr	r3, [r0, #16]
 80033a6:	4a06      	ldr	r2, [pc, #24]	; (80033c0 <USB_CoreReset+0x2c>)
 80033a8:	f043 0301 	orr.w	r3, r3, #1
 80033ac:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 80033ae:	3a01      	subs	r2, #1
 80033b0:	d0f3      	beq.n	800339a <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80033b2:	6903      	ldr	r3, [r0, #16]
 80033b4:	f013 0301 	ands.w	r3, r3, #1
 80033b8:	d1f9      	bne.n	80033ae <USB_CoreReset+0x1a>

  return HAL_OK;
 80033ba:	4618      	mov	r0, r3
}
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	00030d41 	.word	0x00030d41

080033c4 <USB_CoreInit>:
{
 80033c4:	b084      	sub	sp, #16
 80033c6:	b538      	push	{r3, r4, r5, lr}
 80033c8:	ad05      	add	r5, sp, #20
 80033ca:	4604      	mov	r4, r0
 80033cc:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80033d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d127      	bne.n	8003426 <USB_CoreInit+0x62>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80033d6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80033d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033dc:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80033de:	68c3      	ldr	r3, [r0, #12]
 80033e0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80033e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033e8:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80033ea:	68c3      	ldr	r3, [r0, #12]
 80033ec:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80033f0:	60c3      	str	r3, [r0, #12]
    if(cfg.use_external_vbus == 1U)
 80033f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d103      	bne.n	8003400 <USB_CoreInit+0x3c>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80033f8:	68c3      	ldr	r3, [r0, #12]
 80033fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033fe:	60c3      	str	r3, [r0, #12]
    (void)USB_CoreReset(USBx);
 8003400:	4620      	mov	r0, r4
 8003402:	f7ff ffc7 	bl	8003394 <USB_CoreReset>
  if(cfg.dma_enable == 1U)
 8003406:	9b08      	ldr	r3, [sp, #32]
 8003408:	2b01      	cmp	r3, #1
 800340a:	d107      	bne.n	800341c <USB_CoreInit+0x58>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800340c:	68a3      	ldr	r3, [r4, #8]
 800340e:	f043 0306 	orr.w	r3, r3, #6
 8003412:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003414:	68a3      	ldr	r3, [r4, #8]
 8003416:	f043 0320 	orr.w	r3, r3, #32
 800341a:	60a3      	str	r3, [r4, #8]
}
 800341c:	2000      	movs	r0, #0
 800341e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003422:	b004      	add	sp, #16
 8003424:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003426:	68c3      	ldr	r3, [r0, #12]
 8003428:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800342c:	60c3      	str	r3, [r0, #12]
    (void)USB_CoreReset(USBx);
 800342e:	f7ff ffb1 	bl	8003394 <USB_CoreReset>
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 8003432:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003436:	63a3      	str	r3, [r4, #56]	; 0x38
 8003438:	e7e5      	b.n	8003406 <USB_CoreInit+0x42>

0800343a <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800343a:	6883      	ldr	r3, [r0, #8]
 800343c:	f043 0301 	orr.w	r3, r3, #1
 8003440:	6083      	str	r3, [r0, #8]
}
 8003442:	2000      	movs	r0, #0
 8003444:	4770      	bx	lr

08003446 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003446:	6883      	ldr	r3, [r0, #8]
 8003448:	f023 0301 	bic.w	r3, r3, #1
 800344c:	6083      	str	r3, [r0, #8]
}
 800344e:	2000      	movs	r0, #0
 8003450:	4770      	bx	lr

08003452 <USB_SetCurrentMode>:
{
 8003452:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003454:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8003456:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003458:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800345c:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800345e:	d108      	bne.n	8003472 <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003460:	68c3      	ldr	r3, [r0, #12]
 8003462:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003466:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 8003468:	2032      	movs	r0, #50	; 0x32
 800346a:	f7fd f88f 	bl	800058c <HAL_Delay>
  return HAL_OK;
 800346e:	2000      	movs	r0, #0
 8003470:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 8003472:	b919      	cbnz	r1, 800347c <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003474:	68c3      	ldr	r3, [r0, #12]
 8003476:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800347a:	e7f4      	b.n	8003466 <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 800347c:	2001      	movs	r0, #1
}
 800347e:	bd08      	pop	{r3, pc}

08003480 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003480:	0189      	lsls	r1, r1, #6
 8003482:	4a07      	ldr	r2, [pc, #28]	; (80034a0 <USB_FlushTxFifo+0x20>)
 8003484:	f041 0120 	orr.w	r1, r1, #32
 8003488:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 800348a:	3a01      	subs	r2, #1
 800348c:	d005      	beq.n	800349a <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800348e:	6903      	ldr	r3, [r0, #16]
 8003490:	f013 0320 	ands.w	r3, r3, #32
 8003494:	d1f9      	bne.n	800348a <USB_FlushTxFifo+0xa>
  return HAL_OK;
 8003496:	4618      	mov	r0, r3
 8003498:	4770      	bx	lr
      return HAL_TIMEOUT;
 800349a:	2003      	movs	r0, #3
}
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	00030d41 	.word	0x00030d41

080034a4 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80034a4:	2310      	movs	r3, #16
 80034a6:	4a06      	ldr	r2, [pc, #24]	; (80034c0 <USB_FlushRxFifo+0x1c>)
 80034a8:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 80034aa:	3a01      	subs	r2, #1
 80034ac:	d005      	beq.n	80034ba <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80034ae:	6903      	ldr	r3, [r0, #16]
 80034b0:	f013 0310 	ands.w	r3, r3, #16
 80034b4:	d1f9      	bne.n	80034aa <USB_FlushRxFifo+0x6>
  return HAL_OK;
 80034b6:	4618      	mov	r0, r3
 80034b8:	4770      	bx	lr
      return HAL_TIMEOUT;
 80034ba:	2003      	movs	r0, #3
}
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	00030d41 	.word	0x00030d41

080034c4 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 80034c4:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 80034c8:	4319      	orrs	r1, r3
 80034ca:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 80034ce:	2000      	movs	r0, #0
 80034d0:	4770      	bx	lr
	...

080034d4 <USB_DevInit>:
{
 80034d4:	b084      	sub	sp, #16
 80034d6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80034da:	4604      	mov	r4, r0
 80034dc:	a809      	add	r0, sp, #36	; 0x24
 80034de:	4688      	mov	r8, r1
 80034e0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 80034e4:	2300      	movs	r3, #0
 80034e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80034e8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80034ea:	990e      	ldr	r1, [sp, #56]	; 0x38
    USBx->DIEPTXF[i] = 0U;
 80034ec:	461d      	mov	r5, r3
 80034ee:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80034f0:	f103 0040 	add.w	r0, r3, #64	; 0x40
  for (i = 0U; i < 15U; i++)
 80034f4:	3301      	adds	r3, #1
    USBx->DIEPTXF[i] = 0U;
 80034f6:	eb04 0080 	add.w	r0, r4, r0, lsl #2
  for (i = 0U; i < 15U; i++)
 80034fa:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 80034fc:	6045      	str	r5, [r0, #4]
  for (i = 0U; i < 15U; i++)
 80034fe:	d1f7      	bne.n	80034f0 <USB_DevInit+0x1c>
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003500:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003502:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003506:	63a3      	str	r3, [r4, #56]	; 0x38
  if (cfg.vbus_sensing_enable == 0U)
 8003508:	b95e      	cbnz	r6, 8003522 <USB_DevInit+0x4e>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800350a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800350c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003510:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003512:	6823      	ldr	r3, [r4, #0]
 8003514:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003518:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800351a:	6823      	ldr	r3, [r4, #0]
 800351c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003520:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 8003522:	2300      	movs	r3, #0
  if(cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003524:	2901      	cmp	r1, #1
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003526:	f504 6500 	add.w	r5, r4, #2048	; 0x800
  USBx_PCGCCTL = 0U;
 800352a:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800352e:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8003532:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if(cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003536:	d158      	bne.n	80035ea <USB_DevInit+0x116>
    if(cfg.speed == USB_OTG_SPEED_HIGH)
 8003538:	2a00      	cmp	r2, #0
 800353a:	d154      	bne.n	80035e6 <USB_DevInit+0x112>
      (void)USB_SetDevSpeed (USBx, USB_OTG_SPEED_HIGH);
 800353c:	2100      	movs	r1, #0
    (void)USB_SetDevSpeed (USBx, USB_OTG_SPEED_FULL);
 800353e:	4620      	mov	r0, r4
 8003540:	f7ff ffc0 	bl	80034c4 <USB_SetDevSpeed>
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8003544:	2110      	movs	r1, #16
 8003546:	4620      	mov	r0, r4
 8003548:	f7ff ff9a 	bl	8003480 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800354c:	4620      	mov	r0, r4
 800354e:	f7ff ffa9 	bl	80034a4 <USB_FlushRxFifo>
  USBx_DEVICE->DIEPMSK = 0U;
 8003552:	2300      	movs	r3, #0
 8003554:	f504 6210 	add.w	r2, r4, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003558:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
      USBx_INEP(i)->DIEPCTL = 0U;
 800355c:	4619      	mov	r1, r3
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800355e:	f04f 6e00 	mov.w	lr, #134217728	; 0x8000000
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003562:	f64f 3c7f 	movw	ip, #64383	; 0xfb7f
  USBx_DEVICE->DIEPMSK = 0U;
 8003566:	612b      	str	r3, [r5, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003568:	616b      	str	r3, [r5, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800356a:	61eb      	str	r3, [r5, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800356c:	4543      	cmp	r3, r8
 800356e:	d140      	bne.n	80035f2 <USB_DevInit+0x11e>
 8003570:	2100      	movs	r1, #0
 8003572:	f504 6230 	add.w	r2, r4, #2816	; 0xb00
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003576:	f04f 4e90 	mov.w	lr, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800357a:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800357e:	4608      	mov	r0, r1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003580:	f64f 387f 	movw	r8, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003584:	428b      	cmp	r3, r1
 8003586:	d146      	bne.n	8003616 <USB_DevInit+0x142>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003588:	692b      	ldr	r3, [r5, #16]
  if (cfg.dma_enable == 1U)
 800358a:	2f01      	cmp	r7, #1
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800358c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003590:	612b      	str	r3, [r5, #16]
  if (cfg.dma_enable == 1U)
 8003592:	d107      	bne.n	80035a4 <USB_DevInit+0xd0>
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8003594:	4b29      	ldr	r3, [pc, #164]	; (800363c <USB_DevInit+0x168>)
 8003596:	632b      	str	r3, [r5, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8003598:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800359a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800359e:	f043 0303 	orr.w	r3, r3, #3
 80035a2:	632b      	str	r3, [r5, #48]	; 0x30
  USBx->GINTMSK = 0U;
 80035a4:	2300      	movs	r3, #0
 80035a6:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 80035a8:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 80035ac:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 80035ae:	b91f      	cbnz	r7, 80035b8 <USB_DevInit+0xe4>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80035b0:	69a3      	ldr	r3, [r4, #24]
 80035b2:	f043 0310 	orr.w	r3, r3, #16
 80035b6:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80035b8:	69a2      	ldr	r2, [r4, #24]
 80035ba:	4b21      	ldr	r3, [pc, #132]	; (8003640 <USB_DevInit+0x16c>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	61a3      	str	r3, [r4, #24]
  if(cfg.Sof_enable != 0U)
 80035c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80035c2:	b11b      	cbz	r3, 80035cc <USB_DevInit+0xf8>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80035c4:	69a3      	ldr	r3, [r4, #24]
 80035c6:	f043 0308 	orr.w	r3, r3, #8
 80035ca:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 80035cc:	2e01      	cmp	r6, #1
 80035ce:	d105      	bne.n	80035dc <USB_DevInit+0x108>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80035d0:	69a3      	ldr	r3, [r4, #24]
 80035d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80035d6:	f043 0304 	orr.w	r3, r3, #4
 80035da:	61a3      	str	r3, [r4, #24]
}
 80035dc:	2000      	movs	r0, #0
 80035de:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80035e2:	b004      	add	sp, #16
 80035e4:	4770      	bx	lr
      (void)USB_SetDevSpeed (USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80035e6:	2101      	movs	r1, #1
 80035e8:	e7a9      	b.n	800353e <USB_DevInit+0x6a>
  else if(cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80035ea:	2903      	cmp	r1, #3
 80035ec:	d0a4      	beq.n	8003538 <USB_DevInit+0x64>
    (void)USB_SetDevSpeed (USBx, USB_OTG_SPEED_FULL);
 80035ee:	2103      	movs	r1, #3
 80035f0:	e7a5      	b.n	800353e <USB_DevInit+0x6a>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80035f2:	f8d2 9000 	ldr.w	r9, [r2]
 80035f6:	f1b9 0f00 	cmp.w	r9, #0
 80035fa:	da0a      	bge.n	8003612 <USB_DevInit+0x13e>
      if (i == 0U)
 80035fc:	b93b      	cbnz	r3, 800360e <USB_DevInit+0x13a>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80035fe:	f8c2 e000 	str.w	lr, [r2]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003602:	6111      	str	r1, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003604:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003606:	f8c2 c008 	str.w	ip, [r2, #8]
 800360a:	3220      	adds	r2, #32
 800360c:	e7ae      	b.n	800356c <USB_DevInit+0x98>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800360e:	6010      	str	r0, [r2, #0]
 8003610:	e7f7      	b.n	8003602 <USB_DevInit+0x12e>
      USBx_INEP(i)->DIEPCTL = 0U;
 8003612:	6011      	str	r1, [r2, #0]
 8003614:	e7f5      	b.n	8003602 <USB_DevInit+0x12e>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003616:	f8d2 9000 	ldr.w	r9, [r2]
 800361a:	f1b9 0f00 	cmp.w	r9, #0
 800361e:	da0b      	bge.n	8003638 <USB_DevInit+0x164>
      if (i == 0U)
 8003620:	b939      	cbnz	r1, 8003632 <USB_DevInit+0x15e>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003622:	f8c2 c000 	str.w	ip, [r2]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003626:	6110      	str	r0, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003628:	3101      	adds	r1, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800362a:	f8c2 8008 	str.w	r8, [r2, #8]
 800362e:	3220      	adds	r2, #32
 8003630:	e7a8      	b.n	8003584 <USB_DevInit+0xb0>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003632:	f8c2 e000 	str.w	lr, [r2]
 8003636:	e7f6      	b.n	8003626 <USB_DevInit+0x152>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003638:	6010      	str	r0, [r2, #0]
 800363a:	e7f4      	b.n	8003626 <USB_DevInit+0x152>
 800363c:	00800100 	.word	0x00800100
 8003640:	803c3800 	.word	0x803c3800

08003644 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003644:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if(DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003648:	f013 0006 	ands.w	r0, r3, #6
 800364c:	d007      	beq.n	800365e <USB_GetDevSpeed+0x1a>
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800364e:	079b      	lsls	r3, r3, #30
 8003650:	d404      	bmi.n	800365c <USB_GetDevSpeed+0x18>
  else if (DevEnumSpeed == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8003652:	2804      	cmp	r0, #4
    speed = USB_OTG_SPEED_LOW;
 8003654:	bf14      	ite	ne
 8003656:	2000      	movne	r0, #0
 8003658:	2002      	moveq	r0, #2
 800365a:	4770      	bx	lr
    speed = USB_OTG_SPEED_FULL;
 800365c:	2003      	movs	r0, #3
}
 800365e:	4770      	bx	lr

08003660 <USB_ActivateEndpoint>:
{
 8003660:	b570      	push	{r4, r5, r6, lr}
  if (ep->is_in == 1U)
 8003662:	784a      	ldrb	r2, [r1, #1]
 8003664:	f500 6300 	add.w	r3, r0, #2048	; 0x800
  uint32_t epnum = (uint32_t)ep->num;
 8003668:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 800366a:	2a01      	cmp	r2, #1
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU));
 800366c:	69de      	ldr	r6, [r3, #28]
 800366e:	f004 050f 	and.w	r5, r4, #15
  if (ep->is_in == 1U)
 8003672:	d11b      	bne.n	80036ac <USB_ActivateEndpoint+0x4c>
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU));
 8003674:	40aa      	lsls	r2, r5
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003676:	eb00 1044 	add.w	r0, r0, r4, lsl #5
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU));
 800367a:	4332      	orrs	r2, r6
 800367c:	61da      	str	r2, [r3, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800367e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8003682:	041a      	lsls	r2, r3, #16
 8003684:	d410      	bmi.n	80036a8 <USB_ActivateEndpoint+0x48>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003686:	688b      	ldr	r3, [r1, #8]
                                    ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003688:	78c9      	ldrb	r1, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800368a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800368e:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8003692:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003696:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800369a:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 800369e:	ea43 5384 	orr.w	r3, r3, r4, lsl #22
 80036a2:	4313      	orrs	r3, r2
 80036a4:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 80036a8:	2000      	movs	r0, #0
 80036aa:	bd70      	pop	{r4, r5, r6, pc}
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & 0xFU)) << 16);
 80036ac:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80036b0:	eb00 1044 	add.w	r0, r0, r4, lsl #5
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & 0xFU)) << 16);
 80036b4:	40aa      	lsls	r2, r5
 80036b6:	4332      	orrs	r2, r6
 80036b8:	61da      	str	r2, [r3, #28]
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80036ba:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80036be:	041b      	lsls	r3, r3, #16
 80036c0:	d4f2      	bmi.n	80036a8 <USB_ActivateEndpoint+0x48>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80036c2:	688b      	ldr	r3, [r1, #8]
                                    ((uint32_t)ep->type << 18) |
 80036c4:	78c9      	ldrb	r1, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80036c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036ca:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 80036ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036d6:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 80036da:	4313      	orrs	r3, r2
 80036dc:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 80036e0:	e7e2      	b.n	80036a8 <USB_ActivateEndpoint+0x48>
	...

080036e4 <USB_DeactivateEndpoint>:
{
 80036e4:	b530      	push	{r4, r5, lr}
  if (ep->is_in == 1U)
 80036e6:	784b      	ldrb	r3, [r1, #1]
 80036e8:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  uint32_t epnum = (uint32_t)ep->num;
 80036ec:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 80036ee:	2b01      	cmp	r3, #1
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU)));
 80036f0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80036f2:	f004 050f 	and.w	r5, r4, #15
  if (ep->is_in == 1U)
 80036f6:	d110      	bne.n	800371a <USB_DeactivateEndpoint+0x36>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU)));
 80036f8:	40ab      	lsls	r3, r5
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80036fa:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU)));
 80036fe:	43db      	mvns	r3, r3
 8003700:	4019      	ands	r1, r3
 8003702:	63d1      	str	r1, [r2, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU)));
 8003704:	69d1      	ldr	r1, [r2, #28]
 8003706:	400b      	ands	r3, r1
 8003708:	61d3      	str	r3, [r2, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800370a:	4b0d      	ldr	r3, [pc, #52]	; (8003740 <USB_DeactivateEndpoint+0x5c>)
 800370c:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8003710:	4013      	ands	r3, r2
 8003712:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8003716:	2000      	movs	r0, #0
 8003718:	bd30      	pop	{r4, r5, pc}
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & 0xFU)) << 16));
 800371a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800371e:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & 0xFU)) << 16));
 8003722:	40ab      	lsls	r3, r5
 8003724:	43db      	mvns	r3, r3
 8003726:	4019      	ands	r1, r3
 8003728:	63d1      	str	r1, [r2, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & 0xFU)) << 16));
 800372a:	69d1      	ldr	r1, [r2, #28]
 800372c:	400b      	ands	r3, r1
 800372e:	61d3      	str	r3, [r2, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003730:	4b04      	ldr	r3, [pc, #16]	; (8003744 <USB_DeactivateEndpoint+0x60>)
 8003732:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8003736:	4013      	ands	r3, r2
 8003738:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 800373c:	e7eb      	b.n	8003716 <USB_DeactivateEndpoint+0x32>
 800373e:	bf00      	nop
 8003740:	ec337800 	.word	0xec337800
 8003744:	eff37800 	.word	0xeff37800

08003748 <USB_EP0StartXfer>:
{
 8003748:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (ep->is_in == 1U)
 800374a:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800374c:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 800374e:	2b01      	cmp	r3, #1
 8003750:	694e      	ldr	r6, [r1, #20]
 8003752:	f04f 0320 	mov.w	r3, #32
 8003756:	4f3b      	ldr	r7, [pc, #236]	; (8003844 <USB_EP0StartXfer+0xfc>)
 8003758:	d14f      	bne.n	80037fa <USB_EP0StartXfer+0xb2>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800375a:	fb13 0304 	smlabb	r3, r3, r4, r0
    if (ep->xfer_len == 0U)
 800375e:	bb26      	cbnz	r6, 80037aa <USB_EP0StartXfer+0x62>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003760:	f8d3 5910 	ldr.w	r5, [r3, #2320]	; 0x910
    if (dma == 1U)
 8003764:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003766:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 800376a:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 800376e:	f8c3 5910 	str.w	r5, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003772:	f8d3 5910 	ldr.w	r5, [r3, #2320]	; 0x910
 8003776:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 800377a:	f8c3 5910 	str.w	r5, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800377e:	f8d3 5910 	ldr.w	r5, [r3, #2320]	; 0x910
 8003782:	ea07 0705 	and.w	r7, r7, r5
 8003786:	f8c3 7910 	str.w	r7, [r3, #2320]	; 0x910
    if (dma == 1U)
 800378a:	d104      	bne.n	8003796 <USB_EP0StartXfer+0x4e>
      USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800378c:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 8003790:	690a      	ldr	r2, [r1, #16]
 8003792:	f8c3 2914 	str.w	r2, [r3, #2324]	; 0x914
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003796:	eb00 1044 	add.w	r0, r0, r4, lsl #5
 800379a:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 800379e:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 80037a2:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
}
 80037a6:	2000      	movs	r0, #0
 80037a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80037aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037ae:	691d      	ldr	r5, [r3, #16]
 80037b0:	402f      	ands	r7, r5
 80037b2:	611f      	str	r7, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80037b4:	691d      	ldr	r5, [r3, #16]
 80037b6:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 80037ba:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 80037be:	611d      	str	r5, [r3, #16]
      if(ep->xfer_len > ep->maxpacket)
 80037c0:	688d      	ldr	r5, [r1, #8]
 80037c2:	42ae      	cmp	r6, r5
        ep->xfer_len = ep->maxpacket;
 80037c4:	bf88      	it	hi
 80037c6:	614d      	strhi	r5, [r1, #20]
    if (dma == 1U)
 80037c8:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80037ca:	691d      	ldr	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80037cc:	694e      	ldr	r6, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80037ce:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 80037d2:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80037d4:	f3c6 0512 	ubfx	r5, r6, #0, #19
 80037d8:	691f      	ldr	r7, [r3, #16]
 80037da:	ea45 0507 	orr.w	r5, r5, r7
 80037de:	611d      	str	r5, [r3, #16]
    if (dma == 1U)
 80037e0:	d0d4      	beq.n	800378c <USB_EP0StartXfer+0x44>
      if (ep->xfer_len > 0U)
 80037e2:	2e00      	cmp	r6, #0
 80037e4:	d0d7      	beq.n	8003796 <USB_EP0StartXfer+0x4e>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & 0xFU);
 80037e6:	f004 050f 	and.w	r5, r4, #15
 80037ea:	2301      	movs	r3, #1
 80037ec:	f8d0 1834 	ldr.w	r1, [r0, #2100]	; 0x834
 80037f0:	40ab      	lsls	r3, r5
 80037f2:	430b      	orrs	r3, r1
 80037f4:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 80037f8:	e7cd      	b.n	8003796 <USB_EP0StartXfer+0x4e>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80037fa:	fb13 0004 	smlabb	r0, r3, r4, r0
 80037fe:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8003802:	691c      	ldr	r4, [r3, #16]
 8003804:	4027      	ands	r7, r4
 8003806:	611f      	str	r7, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003808:	691c      	ldr	r4, [r3, #16]
 800380a:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 800380e:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8003812:	611c      	str	r4, [r3, #16]
 8003814:	688c      	ldr	r4, [r1, #8]
    if (ep->xfer_len > 0U)
 8003816:	b106      	cbz	r6, 800381a <USB_EP0StartXfer+0xd2>
      ep->xfer_len = ep->maxpacket;
 8003818:	614c      	str	r4, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800381a:	691d      	ldr	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800381c:	f3c4 0412 	ubfx	r4, r4, #0, #19
    if (dma == 1U)
 8003820:	2a01      	cmp	r2, #1
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003822:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8003826:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8003828:	691d      	ldr	r5, [r3, #16]
 800382a:	ea44 0405 	orr.w	r4, r4, r5
 800382e:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 8003830:	d101      	bne.n	8003836 <USB_EP0StartXfer+0xee>
      USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003832:	68ca      	ldr	r2, [r1, #12]
 8003834:	615a      	str	r2, [r3, #20]
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003836:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800383a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800383e:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8003842:	e7b0      	b.n	80037a6 <USB_EP0StartXfer+0x5e>
 8003844:	fff80000 	.word	0xfff80000

08003848 <USB_WritePacket>:
{
 8003848:	b510      	push	{r4, lr}
 800384a:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
 800384e:	b94c      	cbnz	r4, 8003864 <USB_WritePacket+0x1c>
    count32b =  ((uint32_t)len + 3U) / 4U;
 8003850:	3303      	adds	r3, #3
      USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 8003852:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 8003856:	f023 0303 	bic.w	r3, r3, #3
 800385a:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 800385e:	440b      	add	r3, r1
    for (i = 0U; i < count32b; i++)
 8003860:	4299      	cmp	r1, r3
 8003862:	d101      	bne.n	8003868 <USB_WritePacket+0x20>
}
 8003864:	2000      	movs	r0, #0
 8003866:	bd10      	pop	{r4, pc}
      USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 8003868:	f851 2b04 	ldr.w	r2, [r1], #4
 800386c:	6002      	str	r2, [r0, #0]
 800386e:	e7f7      	b.n	8003860 <USB_WritePacket+0x18>

08003870 <USB_EPStartXfer>:
{
 8003870:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (ep->is_in == 1U)
 8003872:	784b      	ldrb	r3, [r1, #1]
 8003874:	2420      	movs	r4, #32
  uint32_t epnum = (uint32_t)ep->num;
 8003876:	780e      	ldrb	r6, [r1, #0]
  if (ep->is_in == 1U)
 8003878:	2b01      	cmp	r3, #1
 800387a:	4f64      	ldr	r7, [pc, #400]	; (8003a0c <USB_EPStartXfer+0x19c>)
 800387c:	694b      	ldr	r3, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800387e:	fb14 0406 	smlabb	r4, r4, r6, r0
  if (ep->is_in == 1U)
 8003882:	d17b      	bne.n	800397c <USB_EPStartXfer+0x10c>
    if (ep->xfer_len == 0U)
 8003884:	2b00      	cmp	r3, #0
 8003886:	d13e      	bne.n	8003906 <USB_EPStartXfer+0x96>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003888:	f504 6510 	add.w	r5, r4, #2304	; 0x900
 800388c:	f8d4 4910 	ldr.w	r4, [r4, #2320]	; 0x910
 8003890:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8003894:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8003898:	612c      	str	r4, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800389a:	692c      	ldr	r4, [r5, #16]
 800389c:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 80038a0:	612c      	str	r4, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80038a2:	692c      	ldr	r4, [r5, #16]
 80038a4:	4027      	ands	r7, r4
 80038a6:	612f      	str	r7, [r5, #16]
    if (dma == 1U)
 80038a8:	2a01      	cmp	r2, #1
 80038aa:	d156      	bne.n	800395a <USB_EPStartXfer+0xea>
      USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80038ac:	eb00 1446 	add.w	r4, r0, r6, lsl #5
 80038b0:	690d      	ldr	r5, [r1, #16]
 80038b2:	f8c4 5914 	str.w	r5, [r4, #2324]	; 0x914
    if (ep->type == EP_TYPE_ISOC)
 80038b6:	78cf      	ldrb	r7, [r1, #3]
 80038b8:	2f01      	cmp	r7, #1
 80038ba:	d110      	bne.n	80038de <USB_EPStartXfer+0x6e>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80038bc:	f8d0 4808 	ldr.w	r4, [r0, #2056]	; 0x808
 80038c0:	f414 7f80 	tst.w	r4, #256	; 0x100
 80038c4:	f04f 0420 	mov.w	r4, #32
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80038c8:	fb14 0406 	smlabb	r4, r4, r6, r0
 80038cc:	f8d4 5900 	ldr.w	r5, [r4, #2304]	; 0x900
 80038d0:	bf0c      	ite	eq
 80038d2:	f045 5500 	orreq.w	r5, r5, #536870912	; 0x20000000
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80038d6:	f045 5580 	orrne.w	r5, r5, #268435456	; 0x10000000
 80038da:	f8c4 5900 	str.w	r5, [r4, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80038de:	eb00 1446 	add.w	r4, r0, r6, lsl #5
    if (ep->type == EP_TYPE_ISOC)
 80038e2:	2f01      	cmp	r7, #1
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80038e4:	f8d4 5900 	ldr.w	r5, [r4, #2304]	; 0x900
 80038e8:	f045 4504 	orr.w	r5, r5, #2214592512	; 0x84000000
 80038ec:	f8c4 5900 	str.w	r5, [r4, #2304]	; 0x900
    if (ep->type == EP_TYPE_ISOC)
 80038f0:	d106      	bne.n	8003900 <USB_EPStartXfer+0x90>
      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80038f2:	780c      	ldrb	r4, [r1, #0]
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	9200      	str	r2, [sp, #0]
 80038f8:	4622      	mov	r2, r4
 80038fa:	68c9      	ldr	r1, [r1, #12]
 80038fc:	f7ff ffa4 	bl	8003848 <USB_WritePacket>
}
 8003900:	2000      	movs	r0, #0
 8003902:	b003      	add	sp, #12
 8003904:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003906:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 800390a:	f504 6410 	add.w	r4, r4, #2304	; 0x900
 800390e:	402f      	ands	r7, r5
 8003910:	6127      	str	r7, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003912:	6925      	ldr	r5, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003914:	688f      	ldr	r7, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003916:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 800391a:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 800391e:	6125      	str	r5, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003920:	19dd      	adds	r5, r3, r7
 8003922:	f8d4 e010 	ldr.w	lr, [r4, #16]
 8003926:	3d01      	subs	r5, #1
 8003928:	fbb5 f7f7 	udiv	r7, r5, r7
 800392c:	4d38      	ldr	r5, [pc, #224]	; (8003a10 <USB_EPStartXfer+0x1a0>)
 800392e:	ea05 45c7 	and.w	r5, r5, r7, lsl #19
 8003932:	ea45 050e 	orr.w	r5, r5, lr
 8003936:	6125      	str	r5, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003938:	f3c3 0512 	ubfx	r5, r3, #0, #19
 800393c:	6927      	ldr	r7, [r4, #16]
 800393e:	433d      	orrs	r5, r7
 8003940:	6125      	str	r5, [r4, #16]
      if (ep->type == EP_TYPE_ISOC)
 8003942:	78cd      	ldrb	r5, [r1, #3]
 8003944:	2d01      	cmp	r5, #1
 8003946:	d15e      	bne.n	8003a06 <USB_EPStartXfer+0x196>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003948:	6925      	ldr	r5, [r4, #16]
 800394a:	f025 45c0 	bic.w	r5, r5, #1610612736	; 0x60000000
 800394e:	6125      	str	r5, [r4, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003950:	6925      	ldr	r5, [r4, #16]
 8003952:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8003956:	6125      	str	r5, [r4, #16]
 8003958:	e7a6      	b.n	80038a8 <USB_EPStartXfer+0x38>
      if (ep->type != EP_TYPE_ISOC)
 800395a:	78cc      	ldrb	r4, [r1, #3]
 800395c:	2c01      	cmp	r4, #1
 800395e:	d0aa      	beq.n	80038b6 <USB_EPStartXfer+0x46>
        if (ep->xfer_len > 0U)
 8003960:	2b00      	cmp	r3, #0
 8003962:	d0a8      	beq.n	80038b6 <USB_EPStartXfer+0x46>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & 0xFU);
 8003964:	780c      	ldrb	r4, [r1, #0]
 8003966:	f8d0 e834 	ldr.w	lr, [r0, #2100]	; 0x834
 800396a:	f004 050f 	and.w	r5, r4, #15
 800396e:	2401      	movs	r4, #1
 8003970:	40ac      	lsls	r4, r5
 8003972:	ea44 040e 	orr.w	r4, r4, lr
 8003976:	f8c0 4834 	str.w	r4, [r0, #2100]	; 0x834
 800397a:	e79c      	b.n	80038b6 <USB_EPStartXfer+0x46>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800397c:	f504 6630 	add.w	r6, r4, #2816	; 0xb00
 8003980:	6935      	ldr	r5, [r6, #16]
 8003982:	402f      	ands	r7, r5
 8003984:	6137      	str	r7, [r6, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003986:	6935      	ldr	r5, [r6, #16]
 8003988:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 800398c:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8003990:	6135      	str	r5, [r6, #16]
 8003992:	688d      	ldr	r5, [r1, #8]
    if (ep->xfer_len == 0U)
 8003994:	bb1b      	cbnz	r3, 80039de <USB_EPStartXfer+0x16e>
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003996:	6933      	ldr	r3, [r6, #16]
 8003998:	f3c5 0512 	ubfx	r5, r5, #0, #19
 800399c:	431d      	orrs	r5, r3
 800399e:	6135      	str	r5, [r6, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80039a0:	6933      	ldr	r3, [r6, #16]
 80039a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80039a6:	6133      	str	r3, [r6, #16]
    if (dma == 1U)
 80039a8:	2a01      	cmp	r2, #1
 80039aa:	d101      	bne.n	80039b0 <USB_EPStartXfer+0x140>
      USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)ep->xfer_buff;
 80039ac:	68cb      	ldr	r3, [r1, #12]
 80039ae:	6173      	str	r3, [r6, #20]
    if (ep->type == EP_TYPE_ISOC)
 80039b0:	78cb      	ldrb	r3, [r1, #3]
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d10c      	bne.n	80039d0 <USB_EPStartXfer+0x160>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80039b6:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 80039ba:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80039be:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 80039c2:	bf0c      	ite	eq
 80039c4:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80039c8:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 80039cc:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80039d0:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 80039d4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80039d8:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
  return HAL_OK;
 80039dc:	e790      	b.n	8003900 <USB_EPStartXfer+0x90>
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80039de:	442b      	add	r3, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80039e0:	4f0b      	ldr	r7, [pc, #44]	; (8003a10 <USB_EPStartXfer+0x1a0>)
 80039e2:	f8d6 e010 	ldr.w	lr, [r6, #16]
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80039e6:	3b01      	subs	r3, #1
 80039e8:	fbb3 f3f5 	udiv	r3, r3, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80039ec:	ea07 47c3 	and.w	r7, r7, r3, lsl #19
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80039f0:	b29b      	uxth	r3, r3
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80039f2:	ea47 070e 	orr.w	r7, r7, lr
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80039f6:	435d      	muls	r5, r3
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80039f8:	6137      	str	r7, [r6, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80039fa:	f3c5 0512 	ubfx	r5, r5, #0, #19
 80039fe:	6937      	ldr	r7, [r6, #16]
 8003a00:	433d      	orrs	r5, r7
 8003a02:	6135      	str	r5, [r6, #16]
 8003a04:	e7d0      	b.n	80039a8 <USB_EPStartXfer+0x138>
    if (dma == 1U)
 8003a06:	2a01      	cmp	r2, #1
 8003a08:	d1aa      	bne.n	8003960 <USB_EPStartXfer+0xf0>
 8003a0a:	e74f      	b.n	80038ac <USB_EPStartXfer+0x3c>
 8003a0c:	fff80000 	.word	0xfff80000
 8003a10:	1ff80000 	.word	0x1ff80000

08003a14 <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8003a14:	3203      	adds	r2, #3
    *(__packed uint32_t *)pDest = USBx_DFIFO(0U);
 8003a16:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 8003a1a:	f022 0203 	bic.w	r2, r2, #3
 8003a1e:	440a      	add	r2, r1
  for (i = 0U; i < count32b; i++)
 8003a20:	4291      	cmp	r1, r2
 8003a22:	d101      	bne.n	8003a28 <USB_ReadPacket+0x14>
}
 8003a24:	4608      	mov	r0, r1
 8003a26:	4770      	bx	lr
    *(__packed uint32_t *)pDest = USBx_DFIFO(0U);
 8003a28:	6803      	ldr	r3, [r0, #0]
 8003a2a:	f841 3b04 	str.w	r3, [r1], #4
 8003a2e:	e7f7      	b.n	8003a20 <USB_ReadPacket+0xc>

08003a30 <USB_EPSetStall>:
  if (ep->is_in == 1U)
 8003a30:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8003a32:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	f04f 0320 	mov.w	r3, #32
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003a3a:	fb13 0002 	smlabb	r0, r3, r2, r0
  if (ep->is_in == 1U)
 8003a3e:	d112      	bne.n	8003a66 <USB_EPSetStall+0x36>
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003a40:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	db06      	blt.n	8003a56 <USB_EPSetStall+0x26>
 8003a48:	b12a      	cbz	r2, 8003a56 <USB_EPSetStall+0x26>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003a4a:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8003a4e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003a52:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003a56:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8003a5a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003a5e:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8003a62:	2000      	movs	r0, #0
 8003a64:	4770      	bx	lr
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003a66:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	db06      	blt.n	8003a7c <USB_EPSetStall+0x4c>
 8003a6e:	b12a      	cbz	r2, 8003a7c <USB_EPSetStall+0x4c>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003a70:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8003a74:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003a78:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003a7c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8003a80:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003a84:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8003a88:	e7eb      	b.n	8003a62 <USB_EPSetStall+0x32>

08003a8a <USB_EPClearStall>:
  if (ep->is_in == 1U)
 8003a8a:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8003a8c:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	f04f 0320 	mov.w	r3, #32
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003a94:	fb13 0002 	smlabb	r0, r3, r2, r0
  if (ep->is_in == 1U)
 8003a98:	d111      	bne.n	8003abe <USB_EPClearStall+0x34>
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003a9a:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8003a9e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003aa2:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003aa6:	78cb      	ldrb	r3, [r1, #3]
 8003aa8:	3b02      	subs	r3, #2
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d805      	bhi.n	8003aba <USB_EPClearStall+0x30>
       USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003aae:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8003ab2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ab6:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8003aba:	2000      	movs	r0, #0
 8003abc:	4770      	bx	lr
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003abe:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8003ac2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003ac6:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003aca:	78cb      	ldrb	r3, [r1, #3]
 8003acc:	3b02      	subs	r3, #2
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d8f3      	bhi.n	8003aba <USB_EPClearStall+0x30>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003ad2:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8003ad6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ada:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8003ade:	e7ec      	b.n	8003aba <USB_EPClearStall+0x30>

08003ae0 <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~ (USB_OTG_DCFG_DAD);
 8003ae0:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8003ae4:	0109      	lsls	r1, r1, #4
  USBx_DEVICE->DCFG &= ~ (USB_OTG_DCFG_DAD);
 8003ae6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8003aea:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
  USBx_DEVICE->DCFG &= ~ (USB_OTG_DCFG_DAD);
 8003aee:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8003af2:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8003af6:	4319      	orrs	r1, r3
 8003af8:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8003afc:	2000      	movs	r0, #0
 8003afe:	4770      	bx	lr

08003b00 <USB_DevConnect>:
{
 8003b00:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8003b02:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8003b06:	f023 0302 	bic.w	r3, r3, #2
 8003b0a:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 8003b0e:	2003      	movs	r0, #3
 8003b10:	f7fc fd3c 	bl	800058c <HAL_Delay>
}
 8003b14:	2000      	movs	r0, #0
 8003b16:	bd08      	pop	{r3, pc}

08003b18 <USB_DevDisconnect>:
{
 8003b18:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003b1a:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8003b1e:	f043 0302 	orr.w	r3, r3, #2
 8003b22:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 8003b26:	2003      	movs	r0, #3
 8003b28:	f7fc fd30 	bl	800058c <HAL_Delay>
}
 8003b2c:	2000      	movs	r0, #0
 8003b2e:	bd08      	pop	{r3, pc}

08003b30 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8003b30:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8003b32:	6980      	ldr	r0, [r0, #24]
}
 8003b34:	4010      	ands	r0, r2
 8003b36:	4770      	bx	lr

08003b38 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8003b38:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8003b3c:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003b40:	69c0      	ldr	r0, [r0, #28]
 8003b42:	4018      	ands	r0, r3
}
 8003b44:	0c00      	lsrs	r0, r0, #16
 8003b46:	4770      	bx	lr

08003b48 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8003b48:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8003b4c:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003b50:	69c0      	ldr	r0, [r0, #28]
 8003b52:	4018      	ands	r0, r3
}
 8003b54:	b280      	uxth	r0, r0
 8003b56:	4770      	bx	lr

08003b58 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8003b58:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8003b5c:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8003b60:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8003b64:	6940      	ldr	r0, [r0, #20]
}
 8003b66:	4010      	ands	r0, r2
 8003b68:	4770      	bx	lr

08003b6a <USB_ReadDevInEPInterrupt>:
{
 8003b6a:	b510      	push	{r4, lr}
  msk = USBx_DEVICE->DIEPMSK;
 8003b6c:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8003b70:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8003b74:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & 0xFU)) & 0x1U) << 7;
 8003b78:	f001 010f 	and.w	r1, r1, #15
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8003b7c:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  msk |= ((emp >> (epnum & 0xFU)) & 0x1U) << 7;
 8003b80:	40cb      	lsrs	r3, r1
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8003b82:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> (epnum & 0xFU)) & 0x1U) << 7;
 8003b84:	01db      	lsls	r3, r3, #7
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	4323      	orrs	r3, r4
}
 8003b8a:	4018      	ands	r0, r3
 8003b8c:	bd10      	pop	{r4, pc}

08003b8e <USB_GetMode>:
  return ((USBx->GINTSTS ) & 0x1U);
 8003b8e:	6940      	ldr	r0, [r0, #20]
}
 8003b90:	f000 0001 	and.w	r0, r0, #1
 8003b94:	4770      	bx	lr

08003b96 <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8003b96:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8003b9a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003b9e:	f023 0307 	bic.w	r3, r3, #7
 8003ba2:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8003ba6:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 8003baa:	689a      	ldr	r2, [r3, #8]
 8003bac:	f002 0206 	and.w	r2, r2, #6
 8003bb0:	2a04      	cmp	r2, #4
 8003bb2:	d105      	bne.n	8003bc0 <USB_ActivateSetup+0x2a>
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8003bb4:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8003bb8:	f042 0203 	orr.w	r2, r2, #3
 8003bbc:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8003bc0:	685a      	ldr	r2, [r3, #4]
}
 8003bc2:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8003bc4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bc8:	605a      	str	r2, [r3, #4]
}
 8003bca:	4770      	bx	lr

08003bcc <USB_EP0_OutStart>:
{
 8003bcc:	b510      	push	{r4, lr}
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8003bce:	2400      	movs	r4, #0
  if (dma == 1U)
 8003bd0:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8003bd2:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003bd6:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8003bda:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8003bde:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8003be2:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8003be6:	f044 0418 	orr.w	r4, r4, #24
 8003bea:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8003bee:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8003bf2:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
 8003bf6:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  if (dma == 1U)
 8003bfa:	d105      	bne.n	8003c08 <USB_EP0_OutStart+0x3c>
    USBx_OUTEP(0U)->DOEPCTL = 0x80008000U;
 8003bfc:	f04f 2380 	mov.w	r3, #2147516416	; 0x80008000
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8003c00:	f8c0 2b14 	str.w	r2, [r0, #2836]	; 0xb14
    USBx_OUTEP(0U)->DOEPCTL = 0x80008000U;
 8003c04:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8003c08:	2000      	movs	r0, #0
 8003c0a:	bd10      	pop	{r4, pc}

08003c0c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003c0c:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8003c0e:	f000 fbd9 	bl	80043c4 <vTaskStartScheduler>
  
  return osOK;
}
 8003c12:	2000      	movs	r0, #0
 8003c14:	bd08      	pop	{r3, pc}

08003c16 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003c16:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003c18:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
{
 8003c1c:	b085      	sub	sp, #20
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003c1e:	8a02      	ldrh	r2, [r0, #16]
{
 8003c20:	460b      	mov	r3, r1
  if (priority != osPriorityError) {
 8003c22:	2c84      	cmp	r4, #132	; 0x84
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003c24:	e890 0022 	ldmia.w	r0, {r1, r5}
    fpriority += (priority - osPriorityIdle);
 8003c28:	bf14      	ite	ne
 8003c2a:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003c2c:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003c2e:	a803      	add	r0, sp, #12
 8003c30:	9400      	str	r4, [sp, #0]
 8003c32:	9001      	str	r0, [sp, #4]
 8003c34:	4628      	mov	r0, r5
 8003c36:	f000 faf5 	bl	8004224 <xTaskCreate>
 8003c3a:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003c3c:	bf0c      	ite	eq
 8003c3e:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 8003c40:	2000      	movne	r0, #0
}
 8003c42:	b005      	add	sp, #20
 8003c44:	bd30      	pop	{r4, r5, pc}

08003c46 <osDelay>:
osStatus osDelay (uint32_t millisec)
{
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003c46:	2800      	cmp	r0, #0
 8003c48:	bf08      	it	eq
 8003c4a:	2001      	moveq	r0, #1
{
 8003c4c:	b508      	push	{r3, lr}
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003c4e:	f000 fd0f 	bl	8004670 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003c52:	2000      	movs	r0, #0
 8003c54:	bd08      	pop	{r3, pc}

08003c56 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8003c56:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8003c58:	f000 fda6 	bl	80047a8 <xTaskGetSchedulerState>
 8003c5c:	2801      	cmp	r0, #1
 8003c5e:	d003      	beq.n	8003c68 <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8003c60:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8003c64:	f000 ba06 	b.w	8004074 <xPortSysTickHandler>
 8003c68:	bd08      	pop	{r3, pc}
	...

08003c6c <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003c6c:	4b0f      	ldr	r3, [pc, #60]	; (8003cac <prvInsertBlockIntoFreeList+0x40>)
{
 8003c6e:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	4282      	cmp	r2, r0
 8003c74:	d318      	bcc.n	8003ca8 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003c76:	685c      	ldr	r4, [r3, #4]
 8003c78:	1919      	adds	r1, r3, r4
 8003c7a:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003c7c:	bf01      	itttt	eq
 8003c7e:	6841      	ldreq	r1, [r0, #4]
 8003c80:	4618      	moveq	r0, r3
 8003c82:	1909      	addeq	r1, r1, r4
 8003c84:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003c86:	6844      	ldr	r4, [r0, #4]
 8003c88:	1901      	adds	r1, r0, r4
 8003c8a:	428a      	cmp	r2, r1
 8003c8c:	d107      	bne.n	8003c9e <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003c8e:	4908      	ldr	r1, [pc, #32]	; (8003cb0 <prvInsertBlockIntoFreeList+0x44>)
 8003c90:	6809      	ldr	r1, [r1, #0]
 8003c92:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003c94:	bf1f      	itttt	ne
 8003c96:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003c98:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003c9a:	1909      	addne	r1, r1, r4
 8003c9c:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003c9e:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003ca0:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003ca2:	bf18      	it	ne
 8003ca4:	6018      	strne	r0, [r3, #0]
 8003ca6:	bd10      	pop	{r4, pc}
 8003ca8:	4613      	mov	r3, r2
 8003caa:	e7e1      	b.n	8003c70 <prvInsertBlockIntoFreeList+0x4>
 8003cac:	20003e08 	.word	0x20003e08
 8003cb0:	200001f8 	.word	0x200001f8

08003cb4 <pvPortMalloc>:
{
 8003cb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cb8:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8003cba:	f000 fbc3 	bl	8004444 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8003cbe:	4940      	ldr	r1, [pc, #256]	; (8003dc0 <pvPortMalloc+0x10c>)
 8003cc0:	4d40      	ldr	r5, [pc, #256]	; (8003dc4 <pvPortMalloc+0x110>)
 8003cc2:	680b      	ldr	r3, [r1, #0]
 8003cc4:	bb0b      	cbnz	r3, 8003d0a <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 8003cc6:	4a40      	ldr	r2, [pc, #256]	; (8003dc8 <pvPortMalloc+0x114>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003cc8:	0756      	lsls	r6, r2, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003cca:	4e40      	ldr	r6, [pc, #256]	; (8003dcc <pvPortMalloc+0x118>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003ccc:	bf1b      	ittet	ne
 8003cce:	1dd0      	addne	r0, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003cd0:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003cd4:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003cd8:	f020 0007 	bicne.w	r0, r0, #7
 8003cdc:	bf1c      	itt	ne
 8003cde:	4602      	movne	r2, r0
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003ce0:	1a1b      	subne	r3, r3, r0
	xStart.xBlockSize = ( size_t ) 0;
 8003ce2:	2000      	movs	r0, #0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003ce4:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003ce6:	6032      	str	r2, [r6, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003ce8:	6070      	str	r0, [r6, #4]
	uxAddress -= xHeapStructSize;
 8003cea:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003cec:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 8003cf0:	6018      	str	r0, [r3, #0]
	pxEnd->xBlockSize = 0;
 8003cf2:	6058      	str	r0, [r3, #4]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003cf4:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 8003cf6:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003cf8:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003cfa:	4b35      	ldr	r3, [pc, #212]	; (8003dd0 <pvPortMalloc+0x11c>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003cfc:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003cfe:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003d00:	4b34      	ldr	r3, [pc, #208]	; (8003dd4 <pvPortMalloc+0x120>)
 8003d02:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003d04:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003d08:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003d0a:	682f      	ldr	r7, [r5, #0]
 8003d0c:	4227      	tst	r7, r4
 8003d0e:	d116      	bne.n	8003d3e <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 8003d10:	2c00      	cmp	r4, #0
 8003d12:	d042      	beq.n	8003d9a <pvPortMalloc+0xe6>
				xWantedSize += xHeapStructSize;
 8003d14:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003d18:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003d1a:	bf1c      	itt	ne
 8003d1c:	f023 0307 	bicne.w	r3, r3, #7
 8003d20:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003d22:	b163      	cbz	r3, 8003d3e <pvPortMalloc+0x8a>
 8003d24:	4a2b      	ldr	r2, [pc, #172]	; (8003dd4 <pvPortMalloc+0x120>)
 8003d26:	6816      	ldr	r6, [r2, #0]
 8003d28:	4690      	mov	r8, r2
 8003d2a:	42b3      	cmp	r3, r6
 8003d2c:	d807      	bhi.n	8003d3e <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 8003d2e:	4a27      	ldr	r2, [pc, #156]	; (8003dcc <pvPortMalloc+0x118>)
 8003d30:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003d32:	6868      	ldr	r0, [r5, #4]
 8003d34:	4283      	cmp	r3, r0
 8003d36:	d804      	bhi.n	8003d42 <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 8003d38:	6809      	ldr	r1, [r1, #0]
 8003d3a:	428d      	cmp	r5, r1
 8003d3c:	d107      	bne.n	8003d4e <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 8003d3e:	2400      	movs	r4, #0
 8003d40:	e02b      	b.n	8003d9a <pvPortMalloc+0xe6>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003d42:	682c      	ldr	r4, [r5, #0]
 8003d44:	2c00      	cmp	r4, #0
 8003d46:	d0f7      	beq.n	8003d38 <pvPortMalloc+0x84>
 8003d48:	462a      	mov	r2, r5
 8003d4a:	4625      	mov	r5, r4
 8003d4c:	e7f1      	b.n	8003d32 <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003d4e:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003d50:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003d52:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003d54:	1ac2      	subs	r2, r0, r3
 8003d56:	2a10      	cmp	r2, #16
 8003d58:	d911      	bls.n	8003d7e <pvPortMalloc+0xca>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003d5a:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003d5c:	0741      	lsls	r1, r0, #29
 8003d5e:	d00a      	beq.n	8003d76 <pvPortMalloc+0xc2>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d64:	b672      	cpsid	i
 8003d66:	f383 8811 	msr	BASEPRI, r3
 8003d6a:	f3bf 8f6f 	isb	sy
 8003d6e:	f3bf 8f4f 	dsb	sy
 8003d72:	b662      	cpsie	i
 8003d74:	e7fe      	b.n	8003d74 <pvPortMalloc+0xc0>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003d76:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003d78:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003d7a:	f7ff ff77 	bl	8003c6c <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003d7e:	686b      	ldr	r3, [r5, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003d80:	3408      	adds	r4, #8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003d82:	4913      	ldr	r1, [pc, #76]	; (8003dd0 <pvPortMalloc+0x11c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003d84:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003d86:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003d88:	6808      	ldr	r0, [r1, #0]
					pxBlock->pxNextFreeBlock = NULL;
 8003d8a:	2300      	movs	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003d8c:	f8c8 6000 	str.w	r6, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003d90:	4286      	cmp	r6, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003d92:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003d94:	602b      	str	r3, [r5, #0]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003d96:	bf38      	it	cc
 8003d98:	600e      	strcc	r6, [r1, #0]
	( void ) xTaskResumeAll();
 8003d9a:	f000 fbef 	bl	800457c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003d9e:	0763      	lsls	r3, r4, #29
 8003da0:	d00a      	beq.n	8003db8 <pvPortMalloc+0x104>
 8003da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da6:	b672      	cpsid	i
 8003da8:	f383 8811 	msr	BASEPRI, r3
 8003dac:	f3bf 8f6f 	isb	sy
 8003db0:	f3bf 8f4f 	dsb	sy
 8003db4:	b662      	cpsie	i
 8003db6:	e7fe      	b.n	8003db6 <pvPortMalloc+0x102>
}
 8003db8:	4620      	mov	r0, r4
 8003dba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003dbe:	bf00      	nop
 8003dc0:	200001f8 	.word	0x200001f8
 8003dc4:	20003dfc 	.word	0x20003dfc
 8003dc8:	200001fc 	.word	0x200001fc
 8003dcc:	20003e08 	.word	0x20003e08
 8003dd0:	20003e04 	.word	0x20003e04
 8003dd4:	20003e00 	.word	0x20003e00

08003dd8 <vPortFree>:
{
 8003dd8:	b510      	push	{r4, lr}
	if( pv != NULL )
 8003dda:	4604      	mov	r4, r0
 8003ddc:	2800      	cmp	r0, #0
 8003dde:	d032      	beq.n	8003e46 <vPortFree+0x6e>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003de0:	4a19      	ldr	r2, [pc, #100]	; (8003e48 <vPortFree+0x70>)
 8003de2:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8003de6:	6812      	ldr	r2, [r2, #0]
 8003de8:	4213      	tst	r3, r2
 8003dea:	d10a      	bne.n	8003e02 <vPortFree+0x2a>
 8003dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df0:	b672      	cpsid	i
 8003df2:	f383 8811 	msr	BASEPRI, r3
 8003df6:	f3bf 8f6f 	isb	sy
 8003dfa:	f3bf 8f4f 	dsb	sy
 8003dfe:	b662      	cpsie	i
 8003e00:	e7fe      	b.n	8003e00 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003e02:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8003e06:	b151      	cbz	r1, 8003e1e <vPortFree+0x46>
 8003e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e0c:	b672      	cpsid	i
 8003e0e:	f383 8811 	msr	BASEPRI, r3
 8003e12:	f3bf 8f6f 	isb	sy
 8003e16:	f3bf 8f4f 	dsb	sy
 8003e1a:	b662      	cpsie	i
 8003e1c:	e7fe      	b.n	8003e1c <vPortFree+0x44>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003e1e:	ea23 0302 	bic.w	r3, r3, r2
 8003e22:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8003e26:	f000 fb0d 	bl	8004444 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003e2a:	4a08      	ldr	r2, [pc, #32]	; (8003e4c <vPortFree+0x74>)
 8003e2c:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003e30:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003e34:	6811      	ldr	r1, [r2, #0]
 8003e36:	440b      	add	r3, r1
 8003e38:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003e3a:	f7ff ff17 	bl	8003c6c <prvInsertBlockIntoFreeList>
}
 8003e3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8003e42:	f000 bb9b 	b.w	800457c <xTaskResumeAll>
 8003e46:	bd10      	pop	{r4, pc}
 8003e48:	20003dfc 	.word	0x20003dfc
 8003e4c:	20003e00 	.word	0x20003e00

08003e50 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e50:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003e54:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e58:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e5a:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e5c:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003e5e:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003e60:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003e62:	6003      	str	r3, [r0, #0]
 8003e64:	4770      	bx	lr

08003e66 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003e66:	2300      	movs	r3, #0
 8003e68:	6103      	str	r3, [r0, #16]
 8003e6a:	4770      	bx	lr

08003e6c <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8003e6c:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003e6e:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8003e70:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003e72:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003e74:	689a      	ldr	r2, [r3, #8]
 8003e76:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003e78:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8003e7a:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003e7c:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8003e7e:	3301      	adds	r3, #1
 8003e80:	6003      	str	r3, [r0, #0]
 8003e82:	4770      	bx	lr

08003e84 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003e84:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003e86:	1c53      	adds	r3, r2, #1
{
 8003e88:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 8003e8a:	d10a      	bne.n	8003ea2 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003e8c:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003e8e:	685a      	ldr	r2, [r3, #4]
 8003e90:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003e92:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003e94:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8003e96:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8003e98:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003e9a:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8003e9c:	3301      	adds	r3, #1
 8003e9e:	6003      	str	r3, [r0, #0]
 8003ea0:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ea2:	f100 0308 	add.w	r3, r0, #8
 8003ea6:	685c      	ldr	r4, [r3, #4]
 8003ea8:	6825      	ldr	r5, [r4, #0]
 8003eaa:	42aa      	cmp	r2, r5
 8003eac:	d3ef      	bcc.n	8003e8e <vListInsert+0xa>
 8003eae:	4623      	mov	r3, r4
 8003eb0:	e7f9      	b.n	8003ea6 <vListInsert+0x22>

08003eb2 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003eb2:	6841      	ldr	r1, [r0, #4]
 8003eb4:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003eb6:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003eb8:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003eba:	6882      	ldr	r2, [r0, #8]
 8003ebc:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003ebe:	6859      	ldr	r1, [r3, #4]
 8003ec0:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003ec2:	bf08      	it	eq
 8003ec4:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8003eca:	6818      	ldr	r0, [r3, #0]
 8003ecc:	3801      	subs	r0, #1
 8003ece:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8003ed0:	4770      	bx	lr
	...

08003ed4 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003ed4:	4b0c      	ldr	r3, [pc, #48]	; (8003f08 <prvTaskExitError+0x34>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	3301      	adds	r3, #1
 8003eda:	d00a      	beq.n	8003ef2 <prvTaskExitError+0x1e>
 8003edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee0:	b672      	cpsid	i
 8003ee2:	f383 8811 	msr	BASEPRI, r3
 8003ee6:	f3bf 8f6f 	isb	sy
 8003eea:	f3bf 8f4f 	dsb	sy
 8003eee:	b662      	cpsie	i
 8003ef0:	e7fe      	b.n	8003ef0 <prvTaskExitError+0x1c>
 8003ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef6:	b672      	cpsid	i
 8003ef8:	f383 8811 	msr	BASEPRI, r3
 8003efc:	f3bf 8f6f 	isb	sy
 8003f00:	f3bf 8f4f 	dsb	sy
 8003f04:	b662      	cpsie	i
 8003f06:	e7fe      	b.n	8003f06 <prvTaskExitError+0x32>
 8003f08:	20000004 	.word	0x20000004

08003f0c <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003f0c:	4806      	ldr	r0, [pc, #24]	; (8003f28 <prvPortStartFirstTask+0x1c>)
 8003f0e:	6800      	ldr	r0, [r0, #0]
 8003f10:	6800      	ldr	r0, [r0, #0]
 8003f12:	f380 8808 	msr	MSP, r0
 8003f16:	b662      	cpsie	i
 8003f18:	b661      	cpsie	f
 8003f1a:	f3bf 8f4f 	dsb	sy
 8003f1e:	f3bf 8f6f 	isb	sy
 8003f22:	df00      	svc	0
 8003f24:	bf00      	nop
 8003f26:	0000      	.short	0x0000
 8003f28:	e000ed08 	.word	0xe000ed08

08003f2c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003f2c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003f3c <vPortEnableVFP+0x10>
 8003f30:	6801      	ldr	r1, [r0, #0]
 8003f32:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003f36:	6001      	str	r1, [r0, #0]
 8003f38:	4770      	bx	lr
 8003f3a:	0000      	.short	0x0000
 8003f3c:	e000ed88 	.word	0xe000ed88

08003f40 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003f40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003f44:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003f48:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8003f4c:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003f4e:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003f50:	4b03      	ldr	r3, [pc, #12]	; (8003f60 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003f52:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003f54:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8003f56:	f06f 0302 	mvn.w	r3, #2
 8003f5a:	6203      	str	r3, [r0, #32]
}
 8003f5c:	4770      	bx	lr
 8003f5e:	bf00      	nop
 8003f60:	08003ed5 	.word	0x08003ed5
	...

08003f70 <SVC_Handler>:
	__asm volatile (
 8003f70:	4b07      	ldr	r3, [pc, #28]	; (8003f90 <pxCurrentTCBConst2>)
 8003f72:	6819      	ldr	r1, [r3, #0]
 8003f74:	6808      	ldr	r0, [r1, #0]
 8003f76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f7a:	f380 8809 	msr	PSP, r0
 8003f7e:	f3bf 8f6f 	isb	sy
 8003f82:	f04f 0000 	mov.w	r0, #0
 8003f86:	f380 8811 	msr	BASEPRI, r0
 8003f8a:	4770      	bx	lr
 8003f8c:	f3af 8000 	nop.w

08003f90 <pxCurrentTCBConst2>:
 8003f90:	20003e18 	.word	0x20003e18

08003f94 <vPortEnterCritical>:
 8003f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f98:	b672      	cpsid	i
 8003f9a:	f383 8811 	msr	BASEPRI, r3
 8003f9e:	f3bf 8f6f 	isb	sy
 8003fa2:	f3bf 8f4f 	dsb	sy
 8003fa6:	b662      	cpsie	i
	uxCriticalNesting++;
 8003fa8:	4a0b      	ldr	r2, [pc, #44]	; (8003fd8 <vPortEnterCritical+0x44>)
 8003faa:	6813      	ldr	r3, [r2, #0]
 8003fac:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8003fae:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8003fb0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8003fb2:	d10f      	bne.n	8003fd4 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003fb4:	4b09      	ldr	r3, [pc, #36]	; (8003fdc <vPortEnterCritical+0x48>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003fbc:	d00a      	beq.n	8003fd4 <vPortEnterCritical+0x40>
 8003fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc2:	b672      	cpsid	i
 8003fc4:	f383 8811 	msr	BASEPRI, r3
 8003fc8:	f3bf 8f6f 	isb	sy
 8003fcc:	f3bf 8f4f 	dsb	sy
 8003fd0:	b662      	cpsie	i
 8003fd2:	e7fe      	b.n	8003fd2 <vPortEnterCritical+0x3e>
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop
 8003fd8:	20000004 	.word	0x20000004
 8003fdc:	e000ed04 	.word	0xe000ed04

08003fe0 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8003fe0:	4a09      	ldr	r2, [pc, #36]	; (8004008 <vPortExitCritical+0x28>)
 8003fe2:	6813      	ldr	r3, [r2, #0]
 8003fe4:	b953      	cbnz	r3, 8003ffc <vPortExitCritical+0x1c>
 8003fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fea:	b672      	cpsid	i
 8003fec:	f383 8811 	msr	BASEPRI, r3
 8003ff0:	f3bf 8f6f 	isb	sy
 8003ff4:	f3bf 8f4f 	dsb	sy
 8003ff8:	b662      	cpsie	i
 8003ffa:	e7fe      	b.n	8003ffa <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 8003ffc:	3b01      	subs	r3, #1
 8003ffe:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004000:	b90b      	cbnz	r3, 8004006 <vPortExitCritical+0x26>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004002:	f383 8811 	msr	BASEPRI, r3
 8004006:	4770      	bx	lr
 8004008:	20000004 	.word	0x20000004
 800400c:	00000000 	.word	0x00000000

08004010 <PendSV_Handler>:
	__asm volatile
 8004010:	f3ef 8009 	mrs	r0, PSP
 8004014:	f3bf 8f6f 	isb	sy
 8004018:	4b15      	ldr	r3, [pc, #84]	; (8004070 <pxCurrentTCBConst>)
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	f01e 0f10 	tst.w	lr, #16
 8004020:	bf08      	it	eq
 8004022:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004026:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800402a:	6010      	str	r0, [r2, #0]
 800402c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8004030:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004034:	b672      	cpsid	i
 8004036:	f380 8811 	msr	BASEPRI, r0
 800403a:	f3bf 8f4f 	dsb	sy
 800403e:	f3bf 8f6f 	isb	sy
 8004042:	b662      	cpsie	i
 8004044:	f000 fb74 	bl	8004730 <vTaskSwitchContext>
 8004048:	f04f 0000 	mov.w	r0, #0
 800404c:	f380 8811 	msr	BASEPRI, r0
 8004050:	bc08      	pop	{r3}
 8004052:	6819      	ldr	r1, [r3, #0]
 8004054:	6808      	ldr	r0, [r1, #0]
 8004056:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800405a:	f01e 0f10 	tst.w	lr, #16
 800405e:	bf08      	it	eq
 8004060:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004064:	f380 8809 	msr	PSP, r0
 8004068:	f3bf 8f6f 	isb	sy
 800406c:	4770      	bx	lr
 800406e:	bf00      	nop

08004070 <pxCurrentTCBConst>:
 8004070:	20003e18 	.word	0x20003e18

08004074 <xPortSysTickHandler>:
{
 8004074:	b508      	push	{r3, lr}
	__asm volatile
 8004076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800407a:	b672      	cpsid	i
 800407c:	f383 8811 	msr	BASEPRI, r3
 8004080:	f3bf 8f6f 	isb	sy
 8004084:	f3bf 8f4f 	dsb	sy
 8004088:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 800408a:	f000 f9e3 	bl	8004454 <xTaskIncrementTick>
 800408e:	b118      	cbz	r0, 8004098 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004090:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004094:	4b02      	ldr	r3, [pc, #8]	; (80040a0 <xPortSysTickHandler+0x2c>)
 8004096:	601a      	str	r2, [r3, #0]
	__asm volatile
 8004098:	2300      	movs	r3, #0
 800409a:	f383 8811 	msr	BASEPRI, r3
 800409e:	bd08      	pop	{r3, pc}
 80040a0:	e000ed04 	.word	0xe000ed04

080040a4 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80040a4:	4b06      	ldr	r3, [pc, #24]	; (80040c0 <vPortSetupTimerInterrupt+0x1c>)
 80040a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80040b0:	4a04      	ldr	r2, [pc, #16]	; (80040c4 <vPortSetupTimerInterrupt+0x20>)
 80040b2:	3b01      	subs	r3, #1
 80040b4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80040b6:	2207      	movs	r2, #7
 80040b8:	4b03      	ldr	r3, [pc, #12]	; (80040c8 <vPortSetupTimerInterrupt+0x24>)
 80040ba:	601a      	str	r2, [r3, #0]
 80040bc:	4770      	bx	lr
 80040be:	bf00      	nop
 80040c0:	20000118 	.word	0x20000118
 80040c4:	e000e014 	.word	0xe000e014
 80040c8:	e000e010 	.word	0xe000e010

080040cc <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80040cc:	4b23      	ldr	r3, [pc, #140]	; (800415c <xPortStartScheduler+0x90>)
{
 80040ce:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80040d0:	781a      	ldrb	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80040d2:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80040d4:	b2d2      	uxtb	r2, r2
 80040d6:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80040d8:	22ff      	movs	r2, #255	; 0xff
 80040da:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80040dc:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80040de:	4a20      	ldr	r2, [pc, #128]	; (8004160 <xPortStartScheduler+0x94>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80040e6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80040ea:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80040ee:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80040f0:	2207      	movs	r2, #7
 80040f2:	4b1c      	ldr	r3, [pc, #112]	; (8004164 <xPortStartScheduler+0x98>)
 80040f4:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80040f6:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80040fa:	1e54      	subs	r4, r2, #1
 80040fc:	0600      	lsls	r0, r0, #24
 80040fe:	d423      	bmi.n	8004148 <xPortStartScheduler+0x7c>
 8004100:	b101      	cbz	r1, 8004104 <xPortStartScheduler+0x38>
 8004102:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004108:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800410c:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800410e:	9b01      	ldr	r3, [sp, #4]
 8004110:	4a12      	ldr	r2, [pc, #72]	; (800415c <xPortStartScheduler+0x90>)
 8004112:	b2db      	uxtb	r3, r3
 8004114:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004116:	4b14      	ldr	r3, [pc, #80]	; (8004168 <xPortStartScheduler+0x9c>)
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800411e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8004126:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8004128:	f7ff ffbc 	bl	80040a4 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800412c:	2200      	movs	r2, #0
 800412e:	4b0f      	ldr	r3, [pc, #60]	; (800416c <xPortStartScheduler+0xa0>)
 8004130:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 8004132:	f7ff fefb 	bl	8003f2c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004136:	4a0e      	ldr	r2, [pc, #56]	; (8004170 <xPortStartScheduler+0xa4>)
 8004138:	6813      	ldr	r3, [r2, #0]
 800413a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800413e:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8004140:	f7ff fee4 	bl	8003f0c <prvPortStartFirstTask>
	prvTaskExitError();
 8004144:	f7ff fec6 	bl	8003ed4 <prvTaskExitError>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004148:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800414c:	2101      	movs	r1, #1
 800414e:	0052      	lsls	r2, r2, #1
 8004150:	b2d2      	uxtb	r2, r2
 8004152:	f88d 2003 	strb.w	r2, [sp, #3]
 8004156:	4622      	mov	r2, r4
 8004158:	e7cd      	b.n	80040f6 <xPortStartScheduler+0x2a>
 800415a:	bf00      	nop
 800415c:	e000e400 	.word	0xe000e400
 8004160:	20003e10 	.word	0x20003e10
 8004164:	20003e14 	.word	0x20003e14
 8004168:	e000ed20 	.word	0xe000ed20
 800416c:	20000004 	.word	0x20000004
 8004170:	e000ef34 	.word	0xe000ef34

08004174 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004174:	4a06      	ldr	r2, [pc, #24]	; (8004190 <prvResetNextTaskUnblockTime+0x1c>)
 8004176:	6813      	ldr	r3, [r2, #0]
 8004178:	6819      	ldr	r1, [r3, #0]
 800417a:	4b06      	ldr	r3, [pc, #24]	; (8004194 <prvResetNextTaskUnblockTime+0x20>)
 800417c:	b919      	cbnz	r1, 8004186 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800417e:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004182:	601a      	str	r2, [r3, #0]
 8004184:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004186:	6812      	ldr	r2, [r2, #0]
 8004188:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800418a:	68d2      	ldr	r2, [r2, #12]
 800418c:	6852      	ldr	r2, [r2, #4]
 800418e:	e7f8      	b.n	8004182 <prvResetNextTaskUnblockTime+0xe>
 8004190:	20003e1c 	.word	0x20003e1c
 8004194:	20003ef4 	.word	0x20003ef4

08004198 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800419a:	4b1b      	ldr	r3, [pc, #108]	; (8004208 <prvAddCurrentTaskToDelayedList+0x70>)
{
 800419c:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800419e:	4e1b      	ldr	r6, [pc, #108]	; (800420c <prvAddCurrentTaskToDelayedList+0x74>)
{
 80041a0:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 80041a2:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80041a4:	6830      	ldr	r0, [r6, #0]
 80041a6:	3004      	adds	r0, #4
 80041a8:	f7ff fe83 	bl	8003eb2 <uxListRemove>
 80041ac:	4633      	mov	r3, r6
 80041ae:	b940      	cbnz	r0, 80041c2 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80041b0:	6831      	ldr	r1, [r6, #0]
 80041b2:	2001      	movs	r0, #1
 80041b4:	4e16      	ldr	r6, [pc, #88]	; (8004210 <prvAddCurrentTaskToDelayedList+0x78>)
 80041b6:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80041b8:	6832      	ldr	r2, [r6, #0]
 80041ba:	4088      	lsls	r0, r1
 80041bc:	ea22 0200 	bic.w	r2, r2, r0
 80041c0:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80041c2:	1c62      	adds	r2, r4, #1
 80041c4:	d107      	bne.n	80041d6 <prvAddCurrentTaskToDelayedList+0x3e>
 80041c6:	b137      	cbz	r7, 80041d6 <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80041c8:	6819      	ldr	r1, [r3, #0]
 80041ca:	4812      	ldr	r0, [pc, #72]	; (8004214 <prvAddCurrentTaskToDelayedList+0x7c>)
 80041cc:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80041ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80041d2:	f7ff be4b 	b.w	8003e6c <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80041d6:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80041d8:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 80041da:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80041dc:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 80041de:	d907      	bls.n	80041f0 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80041e0:	4a0d      	ldr	r2, [pc, #52]	; (8004218 <prvAddCurrentTaskToDelayedList+0x80>)
 80041e2:	6810      	ldr	r0, [r2, #0]
 80041e4:	6819      	ldr	r1, [r3, #0]
}
 80041e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80041ea:	3104      	adds	r1, #4
 80041ec:	f7ff be4a 	b.w	8003e84 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80041f0:	4a0a      	ldr	r2, [pc, #40]	; (800421c <prvAddCurrentTaskToDelayedList+0x84>)
 80041f2:	6810      	ldr	r0, [r2, #0]
 80041f4:	6819      	ldr	r1, [r3, #0]
 80041f6:	3104      	adds	r1, #4
 80041f8:	f7ff fe44 	bl	8003e84 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80041fc:	4b08      	ldr	r3, [pc, #32]	; (8004220 <prvAddCurrentTaskToDelayedList+0x88>)
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	4294      	cmp	r4, r2
 8004202:	d200      	bcs.n	8004206 <prvAddCurrentTaskToDelayedList+0x6e>
					xNextTaskUnblockTime = xTimeToWake;
 8004204:	601c      	str	r4, [r3, #0]
 8004206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004208:	20003f3c 	.word	0x20003f3c
 800420c:	20003e18 	.word	0x20003e18
 8004210:	20003ec4 	.word	0x20003ec4
 8004214:	20003f14 	.word	0x20003f14
 8004218:	20003e20 	.word	0x20003e20
 800421c:	20003e1c 	.word	0x20003e1c
 8004220:	20003ef4 	.word	0x20003ef4

08004224 <xTaskCreate>:
	{
 8004224:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004228:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 800422c:	4680      	mov	r8, r0
 800422e:	460f      	mov	r7, r1
 8004230:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004232:	4650      	mov	r0, sl
	{
 8004234:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004236:	f7ff fd3d 	bl	8003cb4 <pvPortMalloc>
			if( pxStack != NULL )
 800423a:	4605      	mov	r5, r0
 800423c:	2800      	cmp	r0, #0
 800423e:	f000 8096 	beq.w	800436e <xTaskCreate+0x14a>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004242:	2054      	movs	r0, #84	; 0x54
 8004244:	f7ff fd36 	bl	8003cb4 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8004248:	4604      	mov	r4, r0
 800424a:	2800      	cmp	r0, #0
 800424c:	f000 808c 	beq.w	8004368 <xTaskCreate+0x144>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004250:	f1aa 0a04 	sub.w	sl, sl, #4
					pxNewTCB->pxStack = pxStack;
 8004254:	6305      	str	r5, [r0, #48]	; 0x30
 8004256:	1e7b      	subs	r3, r7, #1
 8004258:	f100 0234 	add.w	r2, r0, #52	; 0x34
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800425c:	4455      	add	r5, sl
 800425e:	370f      	adds	r7, #15
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004260:	f025 0a07 	bic.w	sl, r5, #7
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004264:	7859      	ldrb	r1, [r3, #1]
 8004266:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 800426a:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800426e:	b109      	cbz	r1, 8004274 <xTaskCreate+0x50>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004270:	42bb      	cmp	r3, r7
 8004272:	d1f7      	bne.n	8004264 <xTaskCreate+0x40>
 8004274:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004276:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800427a:	1d27      	adds	r7, r4, #4
 800427c:	2d06      	cmp	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800427e:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004282:	4638      	mov	r0, r7
		pxNewTCB->uxMutexesHeld = 0;
 8004284:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
 8004288:	bf28      	it	cs
 800428a:	2506      	movcs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 800428c:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800428e:	6465      	str	r5, [r4, #68]	; 0x44
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004290:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004294:	f7ff fde7 	bl	8003e66 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004298:	f104 0018 	add.w	r0, r4, #24
 800429c:	f7ff fde3 	bl	8003e66 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 80042a0:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80042a4:	6124      	str	r4, [r4, #16]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80042a6:	464a      	mov	r2, r9
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042a8:	61a5      	str	r5, [r4, #24]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80042aa:	4641      	mov	r1, r8
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80042ac:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80042ae:	4650      	mov	r0, sl
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80042b0:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80042b4:	f7ff fe44 	bl	8003f40 <pxPortInitialiseStack>
 80042b8:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 80042ba:	b106      	cbz	r6, 80042be <xTaskCreate+0x9a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80042bc:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 80042be:	f7ff fe69 	bl	8003f94 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 80042c2:	4b32      	ldr	r3, [pc, #200]	; (800438c <xTaskCreate+0x168>)
		if( pxCurrentTCB == NULL )
 80042c4:	4e32      	ldr	r6, [pc, #200]	; (8004390 <xTaskCreate+0x16c>)
		uxCurrentNumberOfTasks++;
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 80043bc <xTaskCreate+0x198>
 80042cc:	3201      	adds	r2, #1
 80042ce:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80042d0:	6835      	ldr	r5, [r6, #0]
 80042d2:	2d00      	cmp	r5, #0
 80042d4:	d14e      	bne.n	8004374 <xTaskCreate+0x150>
			pxCurrentTCB = pxNewTCB;
 80042d6:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d11d      	bne.n	800431a <xTaskCreate+0xf6>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80042de:	eb08 0005 	add.w	r0, r8, r5
 80042e2:	3514      	adds	r5, #20
 80042e4:	f7ff fdb4 	bl	8003e50 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80042e8:	2d8c      	cmp	r5, #140	; 0x8c
 80042ea:	d1f8      	bne.n	80042de <xTaskCreate+0xba>
	vListInitialise( &xDelayedTaskList1 );
 80042ec:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 80043c0 <xTaskCreate+0x19c>
	vListInitialise( &xDelayedTaskList2 );
 80042f0:	4d28      	ldr	r5, [pc, #160]	; (8004394 <xTaskCreate+0x170>)
	vListInitialise( &xDelayedTaskList1 );
 80042f2:	4648      	mov	r0, r9
 80042f4:	f7ff fdac 	bl	8003e50 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80042f8:	4628      	mov	r0, r5
 80042fa:	f7ff fda9 	bl	8003e50 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80042fe:	4826      	ldr	r0, [pc, #152]	; (8004398 <xTaskCreate+0x174>)
 8004300:	f7ff fda6 	bl	8003e50 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8004304:	4825      	ldr	r0, [pc, #148]	; (800439c <xTaskCreate+0x178>)
 8004306:	f7ff fda3 	bl	8003e50 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800430a:	4825      	ldr	r0, [pc, #148]	; (80043a0 <xTaskCreate+0x17c>)
 800430c:	f7ff fda0 	bl	8003e50 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8004310:	4b24      	ldr	r3, [pc, #144]	; (80043a4 <xTaskCreate+0x180>)
 8004312:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004316:	4b24      	ldr	r3, [pc, #144]	; (80043a8 <xTaskCreate+0x184>)
 8004318:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 800431a:	4a24      	ldr	r2, [pc, #144]	; (80043ac <xTaskCreate+0x188>)
		prvAddTaskToReadyList( pxNewTCB );
 800431c:	2501      	movs	r5, #1
 800431e:	4924      	ldr	r1, [pc, #144]	; (80043b0 <xTaskCreate+0x18c>)
		uxTaskNumber++;
 8004320:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8004322:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8004324:	3301      	adds	r3, #1
 8004326:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8004328:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800432a:	fa05 f302 	lsl.w	r3, r5, r2
 800432e:	4303      	orrs	r3, r0
 8004330:	2014      	movs	r0, #20
 8004332:	600b      	str	r3, [r1, #0]
 8004334:	4639      	mov	r1, r7
 8004336:	fb00 8002 	mla	r0, r0, r2, r8
 800433a:	f7ff fd97 	bl	8003e6c <vListInsertEnd>
	taskEXIT_CRITICAL();
 800433e:	f7ff fe4f 	bl	8003fe0 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8004342:	4b1c      	ldr	r3, [pc, #112]	; (80043b4 <xTaskCreate+0x190>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	b163      	cbz	r3, 8004362 <xTaskCreate+0x13e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004348:	6833      	ldr	r3, [r6, #0]
 800434a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800434c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800434e:	429a      	cmp	r2, r3
 8004350:	d207      	bcs.n	8004362 <xTaskCreate+0x13e>
			taskYIELD_IF_USING_PREEMPTION();
 8004352:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004356:	4b18      	ldr	r3, [pc, #96]	; (80043b8 <xTaskCreate+0x194>)
 8004358:	601a      	str	r2, [r3, #0]
 800435a:	f3bf 8f4f 	dsb	sy
 800435e:	f3bf 8f6f 	isb	sy
	}
 8004362:	4628      	mov	r0, r5
 8004364:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 8004368:	4628      	mov	r0, r5
 800436a:	f7ff fd35 	bl	8003dd8 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800436e:	f04f 35ff 	mov.w	r5, #4294967295
 8004372:	e7f6      	b.n	8004362 <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
 8004374:	4b0f      	ldr	r3, [pc, #60]	; (80043b4 <xTaskCreate+0x190>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d1ce      	bne.n	800431a <xTaskCreate+0xf6>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800437c:	6833      	ldr	r3, [r6, #0]
 800437e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004380:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004382:	429a      	cmp	r2, r3
 8004384:	d8c9      	bhi.n	800431a <xTaskCreate+0xf6>
					pxCurrentTCB = pxNewTCB;
 8004386:	6034      	str	r4, [r6, #0]
 8004388:	e7c7      	b.n	800431a <xTaskCreate+0xf6>
 800438a:	bf00      	nop
 800438c:	20003eb0 	.word	0x20003eb0
 8004390:	20003e18 	.word	0x20003e18
 8004394:	20003edc 	.word	0x20003edc
 8004398:	20003efc 	.word	0x20003efc
 800439c:	20003f28 	.word	0x20003f28
 80043a0:	20003f14 	.word	0x20003f14
 80043a4:	20003e1c 	.word	0x20003e1c
 80043a8:	20003e20 	.word	0x20003e20
 80043ac:	20003ec0 	.word	0x20003ec0
 80043b0:	20003ec4 	.word	0x20003ec4
 80043b4:	20003f10 	.word	0x20003f10
 80043b8:	e000ed04 	.word	0xe000ed04
 80043bc:	20003e24 	.word	0x20003e24
 80043c0:	20003ec8 	.word	0x20003ec8

080043c4 <vTaskStartScheduler>:
{
 80043c4:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 80043c6:	4b19      	ldr	r3, [pc, #100]	; (800442c <vTaskStartScheduler+0x68>)
 80043c8:	2400      	movs	r4, #0
 80043ca:	2280      	movs	r2, #128	; 0x80
 80043cc:	4918      	ldr	r1, [pc, #96]	; (8004430 <vTaskStartScheduler+0x6c>)
 80043ce:	9301      	str	r3, [sp, #4]
 80043d0:	4623      	mov	r3, r4
 80043d2:	9400      	str	r4, [sp, #0]
 80043d4:	4817      	ldr	r0, [pc, #92]	; (8004434 <vTaskStartScheduler+0x70>)
 80043d6:	f7ff ff25 	bl	8004224 <xTaskCreate>
	if( xReturn == pdPASS )
 80043da:	2801      	cmp	r0, #1
 80043dc:	d116      	bne.n	800440c <vTaskStartScheduler+0x48>
	__asm volatile
 80043de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e2:	b672      	cpsid	i
 80043e4:	f383 8811 	msr	BASEPRI, r3
 80043e8:	f3bf 8f6f 	isb	sy
 80043ec:	f3bf 8f4f 	dsb	sy
 80043f0:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 80043f2:	f04f 32ff 	mov.w	r2, #4294967295
 80043f6:	4b10      	ldr	r3, [pc, #64]	; (8004438 <vTaskStartScheduler+0x74>)
 80043f8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80043fa:	4b10      	ldr	r3, [pc, #64]	; (800443c <vTaskStartScheduler+0x78>)
 80043fc:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80043fe:	4b10      	ldr	r3, [pc, #64]	; (8004440 <vTaskStartScheduler+0x7c>)
 8004400:	601c      	str	r4, [r3, #0]
}
 8004402:	b002      	add	sp, #8
 8004404:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8004408:	f7ff be60 	b.w	80040cc <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800440c:	3001      	adds	r0, #1
 800440e:	d10a      	bne.n	8004426 <vTaskStartScheduler+0x62>
 8004410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004414:	b672      	cpsid	i
 8004416:	f383 8811 	msr	BASEPRI, r3
 800441a:	f3bf 8f6f 	isb	sy
 800441e:	f3bf 8f4f 	dsb	sy
 8004422:	b662      	cpsie	i
 8004424:	e7fe      	b.n	8004424 <vTaskStartScheduler+0x60>
}
 8004426:	b002      	add	sp, #8
 8004428:	bd10      	pop	{r4, pc}
 800442a:	bf00      	nop
 800442c:	20003ef0 	.word	0x20003ef0
 8004430:	08006859 	.word	0x08006859
 8004434:	080046bd 	.word	0x080046bd
 8004438:	20003ef4 	.word	0x20003ef4
 800443c:	20003f10 	.word	0x20003f10
 8004440:	20003f3c 	.word	0x20003f3c

08004444 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8004444:	4a02      	ldr	r2, [pc, #8]	; (8004450 <vTaskSuspendAll+0xc>)
 8004446:	6813      	ldr	r3, [r2, #0]
 8004448:	3301      	adds	r3, #1
 800444a:	6013      	str	r3, [r2, #0]
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop
 8004450:	20003ebc 	.word	0x20003ebc

08004454 <xTaskIncrementTick>:
{
 8004454:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004458:	4b3d      	ldr	r3, [pc, #244]	; (8004550 <xTaskIncrementTick+0xfc>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d155      	bne.n	800450c <xTaskIncrementTick+0xb8>
		const TickType_t xConstTickCount = xTickCount + 1;
 8004460:	4b3c      	ldr	r3, [pc, #240]	; (8004554 <xTaskIncrementTick+0x100>)
 8004462:	681c      	ldr	r4, [r3, #0]
 8004464:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8004466:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 8004468:	b9cc      	cbnz	r4, 800449e <xTaskIncrementTick+0x4a>
			taskSWITCH_DELAYED_LISTS();
 800446a:	4b3b      	ldr	r3, [pc, #236]	; (8004558 <xTaskIncrementTick+0x104>)
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	6812      	ldr	r2, [r2, #0]
 8004470:	b152      	cbz	r2, 8004488 <xTaskIncrementTick+0x34>
 8004472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004476:	b672      	cpsid	i
 8004478:	f383 8811 	msr	BASEPRI, r3
 800447c:	f3bf 8f6f 	isb	sy
 8004480:	f3bf 8f4f 	dsb	sy
 8004484:	b662      	cpsie	i
 8004486:	e7fe      	b.n	8004486 <xTaskIncrementTick+0x32>
 8004488:	4a34      	ldr	r2, [pc, #208]	; (800455c <xTaskIncrementTick+0x108>)
 800448a:	6819      	ldr	r1, [r3, #0]
 800448c:	6810      	ldr	r0, [r2, #0]
 800448e:	6018      	str	r0, [r3, #0]
 8004490:	6011      	str	r1, [r2, #0]
 8004492:	4a33      	ldr	r2, [pc, #204]	; (8004560 <xTaskIncrementTick+0x10c>)
 8004494:	6813      	ldr	r3, [r2, #0]
 8004496:	3301      	adds	r3, #1
 8004498:	6013      	str	r3, [r2, #0]
 800449a:	f7ff fe6b 	bl	8004174 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800449e:	4d31      	ldr	r5, [pc, #196]	; (8004564 <xTaskIncrementTick+0x110>)
 80044a0:	f04f 0b00 	mov.w	fp, #0
 80044a4:	4f30      	ldr	r7, [pc, #192]	; (8004568 <xTaskIncrementTick+0x114>)
 80044a6:	682b      	ldr	r3, [r5, #0]
 80044a8:	429c      	cmp	r4, r3
 80044aa:	d33e      	bcc.n	800452a <xTaskIncrementTick+0xd6>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80044ac:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8004558 <xTaskIncrementTick+0x104>
					prvAddTaskToReadyList( pxTCB );
 80044b0:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8004578 <xTaskIncrementTick+0x124>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80044b4:	f8d8 2000 	ldr.w	r2, [r8]
 80044b8:	6812      	ldr	r2, [r2, #0]
 80044ba:	bb72      	cbnz	r2, 800451a <xTaskIncrementTick+0xc6>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044bc:	f04f 32ff 	mov.w	r2, #4294967295
 80044c0:	602a      	str	r2, [r5, #0]
					break;
 80044c2:	e032      	b.n	800452a <xTaskIncrementTick+0xd6>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80044c4:	f106 0a04 	add.w	sl, r6, #4
 80044c8:	4650      	mov	r0, sl
 80044ca:	f7ff fcf2 	bl	8003eb2 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80044ce:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 80044d0:	b119      	cbz	r1, 80044da <xTaskIncrementTick+0x86>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80044d2:	f106 0018 	add.w	r0, r6, #24
 80044d6:	f7ff fcec 	bl	8003eb2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80044da:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 80044dc:	2201      	movs	r2, #1
 80044de:	f8d9 3000 	ldr.w	r3, [r9]
 80044e2:	f04f 0e14 	mov.w	lr, #20
 80044e6:	fa02 f100 	lsl.w	r1, r2, r0
 80044ea:	4319      	orrs	r1, r3
 80044ec:	4b1f      	ldr	r3, [pc, #124]	; (800456c <xTaskIncrementTick+0x118>)
 80044ee:	f8c9 1000 	str.w	r1, [r9]
 80044f2:	4651      	mov	r1, sl
 80044f4:	fb0e 3000 	mla	r0, lr, r0, r3
 80044f8:	f7ff fcb8 	bl	8003e6c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80044fc:	6838      	ldr	r0, [r7, #0]
 80044fe:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8004500:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8004502:	4291      	cmp	r1, r2
 8004504:	bf28      	it	cs
 8004506:	f04f 0b01 	movcs.w	fp, #1
 800450a:	e7d3      	b.n	80044b4 <xTaskIncrementTick+0x60>
		++uxPendedTicks;
 800450c:	4a18      	ldr	r2, [pc, #96]	; (8004570 <xTaskIncrementTick+0x11c>)
BaseType_t xSwitchRequired = pdFALSE;
 800450e:	f04f 0b00 	mov.w	fp, #0
		++uxPendedTicks;
 8004512:	6813      	ldr	r3, [r2, #0]
 8004514:	3301      	adds	r3, #1
 8004516:	6013      	str	r3, [r2, #0]
 8004518:	e011      	b.n	800453e <xTaskIncrementTick+0xea>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800451a:	f8d8 2000 	ldr.w	r2, [r8]
 800451e:	68d2      	ldr	r2, [r2, #12]
 8004520:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004522:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8004524:	428c      	cmp	r4, r1
 8004526:	d2cd      	bcs.n	80044c4 <xTaskIncrementTick+0x70>
						xNextTaskUnblockTime = xItemValue;
 8004528:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800452a:	683a      	ldr	r2, [r7, #0]
 800452c:	4b0f      	ldr	r3, [pc, #60]	; (800456c <xTaskIncrementTick+0x118>)
 800452e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004530:	2214      	movs	r2, #20
 8004532:	434a      	muls	r2, r1
 8004534:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8004536:	2a02      	cmp	r2, #2
 8004538:	bf28      	it	cs
 800453a:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 800453e:	4a0d      	ldr	r2, [pc, #52]	; (8004574 <xTaskIncrementTick+0x120>)
 8004540:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8004542:	2a00      	cmp	r2, #0
 8004544:	bf18      	it	ne
 8004546:	f04f 0b01 	movne.w	fp, #1
}
 800454a:	4658      	mov	r0, fp
 800454c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004550:	20003ebc 	.word	0x20003ebc
 8004554:	20003f3c 	.word	0x20003f3c
 8004558:	20003e1c 	.word	0x20003e1c
 800455c:	20003e20 	.word	0x20003e20
 8004560:	20003ef8 	.word	0x20003ef8
 8004564:	20003ef4 	.word	0x20003ef4
 8004568:	20003e18 	.word	0x20003e18
 800456c:	20003e24 	.word	0x20003e24
 8004570:	20003eb8 	.word	0x20003eb8
 8004574:	20003f40 	.word	0x20003f40
 8004578:	20003ec4 	.word	0x20003ec4

0800457c <xTaskResumeAll>:
{
 800457c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8004580:	4c32      	ldr	r4, [pc, #200]	; (800464c <xTaskResumeAll+0xd0>)
 8004582:	6823      	ldr	r3, [r4, #0]
 8004584:	b953      	cbnz	r3, 800459c <xTaskResumeAll+0x20>
 8004586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800458a:	b672      	cpsid	i
 800458c:	f383 8811 	msr	BASEPRI, r3
 8004590:	f3bf 8f6f 	isb	sy
 8004594:	f3bf 8f4f 	dsb	sy
 8004598:	b662      	cpsie	i
 800459a:	e7fe      	b.n	800459a <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
 800459c:	f7ff fcfa 	bl	8003f94 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80045a0:	6823      	ldr	r3, [r4, #0]
 80045a2:	3b01      	subs	r3, #1
 80045a4:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045a6:	6824      	ldr	r4, [r4, #0]
 80045a8:	b12c      	cbz	r4, 80045b6 <xTaskResumeAll+0x3a>
BaseType_t xAlreadyYielded = pdFALSE;
 80045aa:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80045ac:	f7ff fd18 	bl	8003fe0 <vPortExitCritical>
}
 80045b0:	4620      	mov	r0, r4
 80045b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80045b6:	4b26      	ldr	r3, [pc, #152]	; (8004650 <xTaskResumeAll+0xd4>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d0f5      	beq.n	80045aa <xTaskResumeAll+0x2e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80045be:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8004668 <xTaskResumeAll+0xec>
					prvAddTaskToReadyList( pxTCB );
 80045c2:	4f24      	ldr	r7, [pc, #144]	; (8004654 <xTaskResumeAll+0xd8>)
 80045c4:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 800466c <xTaskResumeAll+0xf0>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80045c8:	f8d9 3000 	ldr.w	r3, [r9]
 80045cc:	b9e3      	cbnz	r3, 8004608 <xTaskResumeAll+0x8c>
				if( pxTCB != NULL )
 80045ce:	b10c      	cbz	r4, 80045d4 <xTaskResumeAll+0x58>
					prvResetNextTaskUnblockTime();
 80045d0:	f7ff fdd0 	bl	8004174 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80045d4:	4d20      	ldr	r5, [pc, #128]	; (8004658 <xTaskResumeAll+0xdc>)
 80045d6:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80045d8:	b144      	cbz	r4, 80045ec <xTaskResumeAll+0x70>
								xYieldPending = pdTRUE;
 80045da:	4e20      	ldr	r6, [pc, #128]	; (800465c <xTaskResumeAll+0xe0>)
 80045dc:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 80045de:	f7ff ff39 	bl	8004454 <xTaskIncrementTick>
 80045e2:	b100      	cbz	r0, 80045e6 <xTaskResumeAll+0x6a>
								xYieldPending = pdTRUE;
 80045e4:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80045e6:	3c01      	subs	r4, #1
 80045e8:	d1f9      	bne.n	80045de <xTaskResumeAll+0x62>
						uxPendedTicks = 0;
 80045ea:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 80045ec:	4b1b      	ldr	r3, [pc, #108]	; (800465c <xTaskResumeAll+0xe0>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d0da      	beq.n	80045aa <xTaskResumeAll+0x2e>
					taskYIELD_IF_USING_PREEMPTION();
 80045f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045f8:	4b19      	ldr	r3, [pc, #100]	; (8004660 <xTaskResumeAll+0xe4>)
 80045fa:	601a      	str	r2, [r3, #0]
 80045fc:	f3bf 8f4f 	dsb	sy
 8004600:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8004604:	2401      	movs	r4, #1
 8004606:	e7d1      	b.n	80045ac <xTaskResumeAll+0x30>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004608:	f8d9 300c 	ldr.w	r3, [r9, #12]
					prvAddTaskToReadyList( pxTCB );
 800460c:	2501      	movs	r5, #1
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800460e:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004610:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004612:	f104 0018 	add.w	r0, r4, #24
 8004616:	f7ff fc4c 	bl	8003eb2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800461a:	4630      	mov	r0, r6
 800461c:	f7ff fc49 	bl	8003eb2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004620:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004622:	6839      	ldr	r1, [r7, #0]
 8004624:	2014      	movs	r0, #20
 8004626:	fa05 f302 	lsl.w	r3, r5, r2
 800462a:	fb00 8002 	mla	r0, r0, r2, r8
 800462e:	430b      	orrs	r3, r1
 8004630:	4631      	mov	r1, r6
 8004632:	603b      	str	r3, [r7, #0]
 8004634:	f7ff fc1a 	bl	8003e6c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004638:	4b0a      	ldr	r3, [pc, #40]	; (8004664 <xTaskResumeAll+0xe8>)
 800463a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004640:	429a      	cmp	r2, r3
 8004642:	d3c1      	bcc.n	80045c8 <xTaskResumeAll+0x4c>
						xYieldPending = pdTRUE;
 8004644:	4b05      	ldr	r3, [pc, #20]	; (800465c <xTaskResumeAll+0xe0>)
 8004646:	601d      	str	r5, [r3, #0]
 8004648:	e7be      	b.n	80045c8 <xTaskResumeAll+0x4c>
 800464a:	bf00      	nop
 800464c:	20003ebc 	.word	0x20003ebc
 8004650:	20003eb0 	.word	0x20003eb0
 8004654:	20003ec4 	.word	0x20003ec4
 8004658:	20003eb8 	.word	0x20003eb8
 800465c:	20003f40 	.word	0x20003f40
 8004660:	e000ed04 	.word	0xe000ed04
 8004664:	20003e18 	.word	0x20003e18
 8004668:	20003efc 	.word	0x20003efc
 800466c:	20003e24 	.word	0x20003e24

08004670 <vTaskDelay>:
	{
 8004670:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004672:	b940      	cbnz	r0, 8004686 <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8004674:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004678:	4b0e      	ldr	r3, [pc, #56]	; (80046b4 <vTaskDelay+0x44>)
 800467a:	601a      	str	r2, [r3, #0]
 800467c:	f3bf 8f4f 	dsb	sy
 8004680:	f3bf 8f6f 	isb	sy
 8004684:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8004686:	4b0c      	ldr	r3, [pc, #48]	; (80046b8 <vTaskDelay+0x48>)
 8004688:	6819      	ldr	r1, [r3, #0]
 800468a:	b151      	cbz	r1, 80046a2 <vTaskDelay+0x32>
 800468c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004690:	b672      	cpsid	i
 8004692:	f383 8811 	msr	BASEPRI, r3
 8004696:	f3bf 8f6f 	isb	sy
 800469a:	f3bf 8f4f 	dsb	sy
 800469e:	b662      	cpsie	i
 80046a0:	e7fe      	b.n	80046a0 <vTaskDelay+0x30>
			vTaskSuspendAll();
 80046a2:	f7ff fecf 	bl	8004444 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80046a6:	f7ff fd77 	bl	8004198 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80046aa:	f7ff ff67 	bl	800457c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80046ae:	2800      	cmp	r0, #0
 80046b0:	d0e0      	beq.n	8004674 <vTaskDelay+0x4>
 80046b2:	bd08      	pop	{r3, pc}
 80046b4:	e000ed04 	.word	0xe000ed04
 80046b8:	20003ebc 	.word	0x20003ebc

080046bc <prvIdleTask>:
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 80046bc:	4e17      	ldr	r6, [pc, #92]	; (800471c <prvIdleTask+0x60>)
{
 80046be:	b508      	push	{r3, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80046c0:	4c17      	ldr	r4, [pc, #92]	; (8004720 <prvIdleTask+0x64>)
 80046c2:	6823      	ldr	r3, [r4, #0]
 80046c4:	b963      	cbnz	r3, 80046e0 <prvIdleTask+0x24>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80046c6:	4b17      	ldr	r3, [pc, #92]	; (8004724 <prvIdleTask+0x68>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d9f8      	bls.n	80046c0 <prvIdleTask+0x4>
				taskYIELD();
 80046ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046d2:	4b15      	ldr	r3, [pc, #84]	; (8004728 <prvIdleTask+0x6c>)
 80046d4:	601a      	str	r2, [r3, #0]
 80046d6:	f3bf 8f4f 	dsb	sy
 80046da:	f3bf 8f6f 	isb	sy
 80046de:	e7ef      	b.n	80046c0 <prvIdleTask+0x4>
			vTaskSuspendAll();
 80046e0:	f7ff feb0 	bl	8004444 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 80046e4:	6835      	ldr	r5, [r6, #0]
			( void ) xTaskResumeAll();
 80046e6:	f7ff ff49 	bl	800457c <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 80046ea:	2d00      	cmp	r5, #0
 80046ec:	d0e9      	beq.n	80046c2 <prvIdleTask+0x6>
				taskENTER_CRITICAL();
 80046ee:	f7ff fc51 	bl	8003f94 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80046f2:	68f3      	ldr	r3, [r6, #12]
 80046f4:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046f6:	1d28      	adds	r0, r5, #4
 80046f8:	f7ff fbdb 	bl	8003eb2 <uxListRemove>
					--uxCurrentNumberOfTasks;
 80046fc:	4a0b      	ldr	r2, [pc, #44]	; (800472c <prvIdleTask+0x70>)
 80046fe:	6813      	ldr	r3, [r2, #0]
 8004700:	3b01      	subs	r3, #1
 8004702:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8004704:	6823      	ldr	r3, [r4, #0]
 8004706:	3b01      	subs	r3, #1
 8004708:	6023      	str	r3, [r4, #0]
				taskEXIT_CRITICAL();
 800470a:	f7ff fc69 	bl	8003fe0 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 800470e:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8004710:	f7ff fb62 	bl	8003dd8 <vPortFree>
			vPortFree( pxTCB );
 8004714:	4628      	mov	r0, r5
 8004716:	f7ff fb5f 	bl	8003dd8 <vPortFree>
 800471a:	e7d2      	b.n	80046c2 <prvIdleTask+0x6>
 800471c:	20003f28 	.word	0x20003f28
 8004720:	20003eb4 	.word	0x20003eb4
 8004724:	20003e24 	.word	0x20003e24
 8004728:	e000ed04 	.word	0xe000ed04
 800472c:	20003eb0 	.word	0x20003eb0

08004730 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004730:	4b18      	ldr	r3, [pc, #96]	; (8004794 <vTaskSwitchContext+0x64>)
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	4b18      	ldr	r3, [pc, #96]	; (8004798 <vTaskSwitchContext+0x68>)
{
 8004736:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004738:	b112      	cbz	r2, 8004740 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800473a:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800473c:	601a      	str	r2, [r3, #0]
 800473e:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8004740:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004742:	4b16      	ldr	r3, [pc, #88]	; (800479c <vTaskSwitchContext+0x6c>)
 8004744:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8004746:	fab3 f383 	clz	r3, r3
 800474a:	b2db      	uxtb	r3, r3
 800474c:	2214      	movs	r2, #20
 800474e:	4914      	ldr	r1, [pc, #80]	; (80047a0 <vTaskSwitchContext+0x70>)
 8004750:	f1c3 031f 	rsb	r3, r3, #31
 8004754:	435a      	muls	r2, r3
 8004756:	588c      	ldr	r4, [r1, r2]
 8004758:	1888      	adds	r0, r1, r2
 800475a:	b954      	cbnz	r4, 8004772 <vTaskSwitchContext+0x42>
	__asm volatile
 800475c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004760:	b672      	cpsid	i
 8004762:	f383 8811 	msr	BASEPRI, r3
 8004766:	f3bf 8f6f 	isb	sy
 800476a:	f3bf 8f4f 	dsb	sy
 800476e:	b662      	cpsie	i
 8004770:	e7fe      	b.n	8004770 <vTaskSwitchContext+0x40>
 8004772:	6844      	ldr	r4, [r0, #4]
 8004774:	3208      	adds	r2, #8
 8004776:	6864      	ldr	r4, [r4, #4]
 8004778:	440a      	add	r2, r1
 800477a:	4294      	cmp	r4, r2
 800477c:	6044      	str	r4, [r0, #4]
 800477e:	bf04      	itt	eq
 8004780:	6862      	ldreq	r2, [r4, #4]
 8004782:	6042      	streq	r2, [r0, #4]
 8004784:	2214      	movs	r2, #20
 8004786:	fb02 1303 	mla	r3, r2, r3, r1
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	68da      	ldr	r2, [r3, #12]
 800478e:	4b05      	ldr	r3, [pc, #20]	; (80047a4 <vTaskSwitchContext+0x74>)
 8004790:	e7d4      	b.n	800473c <vTaskSwitchContext+0xc>
 8004792:	bf00      	nop
 8004794:	20003ebc 	.word	0x20003ebc
 8004798:	20003f40 	.word	0x20003f40
 800479c:	20003ec4 	.word	0x20003ec4
 80047a0:	20003e24 	.word	0x20003e24
 80047a4:	20003e18 	.word	0x20003e18

080047a8 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80047a8:	4b05      	ldr	r3, [pc, #20]	; (80047c0 <xTaskGetSchedulerState+0x18>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	b133      	cbz	r3, 80047bc <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047ae:	4b05      	ldr	r3, [pc, #20]	; (80047c4 <xTaskGetSchedulerState+0x1c>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 80047b4:	bf0c      	ite	eq
 80047b6:	2002      	moveq	r0, #2
 80047b8:	2000      	movne	r0, #0
 80047ba:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80047bc:	2001      	movs	r0, #1
	}
 80047be:	4770      	bx	lr
 80047c0:	20003f10 	.word	0x20003f10
 80047c4:	20003ebc 	.word	0x20003ebc

080047c8 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80047c8:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
{
 80047cc:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80047ce:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80047d2:	b15b      	cbz	r3, 80047ec <USBD_CDC_EP0_RxReady+0x24>
 80047d4:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 80047d8:	28ff      	cmp	r0, #255	; 0xff
 80047da:	d007      	beq.n	80047ec <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	4621      	mov	r1, r4
 80047e0:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 80047e4:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFFU;
 80047e6:	23ff      	movs	r3, #255	; 0xff
 80047e8:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 80047ec:	2000      	movs	r0, #0
 80047ee:	bd10      	pop	{r4, pc}

080047f0 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 80047f0:	2343      	movs	r3, #67	; 0x43
 80047f2:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 80047f4:	4800      	ldr	r0, [pc, #0]	; (80047f8 <USBD_CDC_GetFSCfgDesc+0x8>)
 80047f6:	4770      	bx	lr
 80047f8:	20000040 	.word	0x20000040

080047fc <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 80047fc:	2343      	movs	r3, #67	; 0x43
 80047fe:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8004800:	4800      	ldr	r0, [pc, #0]	; (8004804 <USBD_CDC_GetHSCfgDesc+0x8>)
 8004802:	4770      	bx	lr
 8004804:	20000084 	.word	0x20000084

08004808 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8004808:	2343      	movs	r3, #67	; 0x43
 800480a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 800480c:	4800      	ldr	r0, [pc, #0]	; (8004810 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 800480e:	4770      	bx	lr
 8004810:	200000d4 	.word	0x200000d4

08004814 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8004814:	230a      	movs	r3, #10
 8004816:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8004818:	4800      	ldr	r0, [pc, #0]	; (800481c <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 800481a:	4770      	bx	lr
 800481c:	200000c8 	.word	0x200000c8

08004820 <USBD_CDC_DataOut>:
{
 8004820:	b538      	push	{r3, r4, r5, lr}
 8004822:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004824:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8004828:	f001 fe3e 	bl	80064a8 <USBD_LL_GetRxDataSize>
  if(pdev->pClassData != NULL)
 800482c:	f8d5 3290 	ldr.w	r3, [r5, #656]	; 0x290
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8004830:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  if(pdev->pClassData != NULL)
 8004834:	b14b      	cbz	r3, 800484a <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004836:	f8d5 3294 	ldr.w	r3, [r5, #660]	; 0x294
 800483a:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 800483e:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	4798      	blx	r3
    return USBD_OK;
 8004846:	2000      	movs	r0, #0
 8004848:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 800484a:	2002      	movs	r0, #2
}
 800484c:	bd38      	pop	{r3, r4, r5, pc}

0800484e <USBD_CDC_DataIn>:
{
 800484e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8004850:	f8d0 6290 	ldr.w	r6, [r0, #656]	; 0x290
  if(pdev->pClassData != NULL)
 8004854:	b1d6      	cbz	r6, 800488c <USBD_CDC_DataIn+0x3e>
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004856:	2314      	movs	r3, #20
 8004858:	fb03 0301 	mla	r3, r3, r1, r0
 800485c:	69dd      	ldr	r5, [r3, #28]
 800485e:	b18d      	cbz	r5, 8004884 <USBD_CDC_DataIn+0x36>
 8004860:	f8d0 4298 	ldr.w	r4, [r0, #664]	; 0x298
 8004864:	271c      	movs	r7, #28
 8004866:	fb07 4201 	mla	r2, r7, r1, r4
 800486a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800486c:	fbb5 f4f2 	udiv	r4, r5, r2
 8004870:	fb02 5414 	mls	r4, r2, r4, r5
 8004874:	b934      	cbnz	r4, 8004884 <USBD_CDC_DataIn+0x36>
      pdev->ep_in[epnum].total_length = 0U;
 8004876:	61dc      	str	r4, [r3, #28]
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8004878:	4622      	mov	r2, r4
 800487a:	4623      	mov	r3, r4
 800487c:	f001 fdf8 	bl	8006470 <USBD_LL_Transmit>
    return USBD_OK;
 8004880:	4620      	mov	r0, r4
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8004882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 0U;
 8004884:	2000      	movs	r0, #0
 8004886:	f8c6 0214 	str.w	r0, [r6, #532]	; 0x214
 800488a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return USBD_FAIL;
 800488c:	2002      	movs	r0, #2
}
 800488e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004890 <USBD_CDC_Setup>:
{
 8004890:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004894:	780a      	ldrb	r2, [r1, #0]
  uint8_t ifalt = 0U;
 8004896:	f04f 0800 	mov.w	r8, #0
{
 800489a:	4605      	mov	r5, r0
 800489c:	460e      	mov	r6, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800489e:	f012 0460 	ands.w	r4, r2, #96	; 0x60
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80048a2:	f8d0 7290 	ldr.w	r7, [r0, #656]	; 0x290
  uint8_t ifalt = 0U;
 80048a6:	f88d 8005 	strb.w	r8, [sp, #5]
  uint16_t status_info = 0U;
 80048aa:	f8ad 8006 	strh.w	r8, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80048ae:	d028      	beq.n	8004902 <USBD_CDC_Setup+0x72>
 80048b0:	2c20      	cmp	r4, #32
 80048b2:	d147      	bne.n	8004944 <USBD_CDC_Setup+0xb4>
    if (req->wLength)
 80048b4:	88cc      	ldrh	r4, [r1, #6]
 80048b6:	784b      	ldrb	r3, [r1, #1]
 80048b8:	b1e4      	cbz	r4, 80048f4 <USBD_CDC_Setup+0x64>
      if (req->bmRequest & 0x80U)
 80048ba:	0612      	lsls	r2, r2, #24
 80048bc:	d511      	bpl.n	80048e2 <USBD_CDC_Setup+0x52>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80048be:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 80048c2:	4639      	mov	r1, r7
 80048c4:	4618      	mov	r0, r3
 80048c6:	f8d2 9008 	ldr.w	r9, [r2, #8]
 80048ca:	4622      	mov	r2, r4
 80048cc:	47c8      	blx	r9
          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80048ce:	88f2      	ldrh	r2, [r6, #6]
 80048d0:	4639      	mov	r1, r7
 80048d2:	4628      	mov	r0, r5
 80048d4:	f000 fc52 	bl	800517c <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 80048d8:	4644      	mov	r4, r8
}
 80048da:	4620      	mov	r0, r4
 80048dc:	b003      	add	sp, #12
 80048de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        hcdc->CmdOpCode = req->bRequest;
 80048e2:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80048e6:	4622      	mov	r2, r4
        hcdc->CmdLength = (uint8_t)req->wLength;
 80048e8:	f887 4201 	strb.w	r4, [r7, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80048ec:	4639      	mov	r1, r7
 80048ee:	f000 fc5a 	bl	80051a6 <USBD_CtlPrepareRx>
 80048f2:	e7f1      	b.n	80048d8 <USBD_CDC_Setup+0x48>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80048f4:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 80048f8:	4618      	mov	r0, r3
 80048fa:	6895      	ldr	r5, [r2, #8]
 80048fc:	4622      	mov	r2, r4
 80048fe:	47a8      	blx	r5
 8004900:	e7eb      	b.n	80048da <USBD_CDC_Setup+0x4a>
    switch (req->bRequest)
 8004902:	784f      	ldrb	r7, [r1, #1]
 8004904:	2f0a      	cmp	r7, #10
 8004906:	d00d      	beq.n	8004924 <USBD_CDC_Setup+0x94>
 8004908:	2f0b      	cmp	r7, #11
 800490a:	d015      	beq.n	8004938 <USBD_CDC_Setup+0xa8>
 800490c:	b9d7      	cbnz	r7, 8004944 <USBD_CDC_Setup+0xb4>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800490e:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8004912:	2b03      	cmp	r3, #3
 8004914:	d114      	bne.n	8004940 <USBD_CDC_Setup+0xb0>
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8004916:	2202      	movs	r2, #2
 8004918:	f10d 0106 	add.w	r1, sp, #6
 800491c:	f000 fc2e 	bl	800517c <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8004920:	463c      	mov	r4, r7
 8004922:	e7da      	b.n	80048da <USBD_CDC_Setup+0x4a>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004924:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8004928:	2b03      	cmp	r3, #3
 800492a:	d109      	bne.n	8004940 <USBD_CDC_Setup+0xb0>
        USBD_CtlSendData (pdev, &ifalt, 1U);
 800492c:	2201      	movs	r2, #1
 800492e:	f10d 0105 	add.w	r1, sp, #5
 8004932:	f000 fc23 	bl	800517c <USBD_CtlSendData>
 8004936:	e7d0      	b.n	80048da <USBD_CDC_Setup+0x4a>
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004938:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800493c:	2b03      	cmp	r3, #3
 800493e:	d0cc      	beq.n	80048da <USBD_CDC_Setup+0x4a>
        USBD_CtlError (pdev, req);
 8004940:	4631      	mov	r1, r6
 8004942:	4628      	mov	r0, r5
    USBD_CtlError (pdev, req);
 8004944:	f000 fbf3 	bl	800512e <USBD_CtlError>
    ret = USBD_FAIL;
 8004948:	2402      	movs	r4, #2
    break;
 800494a:	e7c6      	b.n	80048da <USBD_CDC_Setup+0x4a>

0800494c <USBD_CDC_DeInit>:
{
 800494c:	b538      	push	{r3, r4, r5, lr}
 800494e:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004950:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004952:	2181      	movs	r1, #129	; 0x81
 8004954:	f001 fd40 	bl	80063d8 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004958:	2101      	movs	r1, #1
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800495a:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800495c:	4620      	mov	r0, r4
 800495e:	f001 fd3b 	bl	80063d8 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004962:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004966:	2182      	movs	r1, #130	; 0x82
 8004968:	4620      	mov	r0, r4
 800496a:	f001 fd35 	bl	80063d8 <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 800496e:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004972:	6425      	str	r5, [r4, #64]	; 0x40
  if(pdev->pClassData != NULL)
 8004974:	b14b      	cbz	r3, 800498a <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004976:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800497e:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
 8004982:	f001 fe77 	bl	8006674 <free>
    pdev->pClassData = NULL;
 8004986:	f8c4 5290 	str.w	r5, [r4, #656]	; 0x290
}
 800498a:	2000      	movs	r0, #0
 800498c:	bd38      	pop	{r3, r4, r5, pc}

0800498e <USBD_CDC_Init>:
  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800498e:	7c03      	ldrb	r3, [r0, #16]
{
 8004990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004994:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8004996:	bbcb      	cbnz	r3, 8004a0c <USBD_CDC_Init+0x7e>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004998:	f44f 7300 	mov.w	r3, #512	; 0x200
 800499c:	2202      	movs	r2, #2
 800499e:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80049a0:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80049a2:	f001 fd09 	bl	80063b8 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80049a6:	f44f 7300 	mov.w	r3, #512	; 0x200
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80049aa:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80049ac:	4629      	mov	r1, r5
 80049ae:	2202      	movs	r2, #2
 80049b0:	4620      	mov	r0, r4
 80049b2:	f001 fd01 	bl	80063b8 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80049b6:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80049ba:	2501      	movs	r5, #1
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80049bc:	2308      	movs	r3, #8
 80049be:	2203      	movs	r2, #3
 80049c0:	2182      	movs	r1, #130	; 0x82
 80049c2:	4620      	mov	r0, r4
 80049c4:	f001 fcf8 	bl	80063b8 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80049c8:	6425      	str	r5, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 80049ca:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80049ce:	f001 fe49 	bl	8006664 <malloc>
 80049d2:	4606      	mov	r6, r0
 80049d4:	f8c4 0290 	str.w	r0, [r4, #656]	; 0x290
  if(pdev->pClassData == NULL)
 80049d8:	b358      	cbz	r0, 8004a32 <USBD_CDC_Init+0xa4>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80049da:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
    hcdc->TxState = 0U;
 80049de:	2700      	movs	r7, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4798      	blx	r3
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 80049e4:	f894 8010 	ldrb.w	r8, [r4, #16]
    hcdc->TxState = 0U;
 80049e8:	f8c6 7214 	str.w	r7, [r6, #532]	; 0x214
    hcdc->RxState = 0U;
 80049ec:	f8c6 7218 	str.w	r7, [r6, #536]	; 0x218
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 80049f0:	f1b8 0f00 	cmp.w	r8, #0
 80049f4:	d113      	bne.n	8004a1e <USBD_CDC_Init+0x90>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80049f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80049fa:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 80049fe:	4629      	mov	r1, r5
 8004a00:	4620      	mov	r0, r4
 8004a02:	f001 fd43 	bl	800648c <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8004a06:	4640      	mov	r0, r8
 8004a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004a0c:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004a0e:	2340      	movs	r3, #64	; 0x40
 8004a10:	2202      	movs	r2, #2
 8004a12:	2181      	movs	r1, #129	; 0x81
 8004a14:	f001 fcd0 	bl	80063b8 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004a18:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004a1a:	2340      	movs	r3, #64	; 0x40
 8004a1c:	e7c6      	b.n	80049ac <USBD_CDC_Init+0x1e>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004a1e:	2340      	movs	r3, #64	; 0x40
 8004a20:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8004a24:	4629      	mov	r1, r5
 8004a26:	4620      	mov	r0, r4
 8004a28:	f001 fd30 	bl	800648c <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8004a2c:	4638      	mov	r0, r7
 8004a2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = 1U;
 8004a32:	4628      	mov	r0, r5
}
 8004a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004a38 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if(fops != NULL)
 8004a38:	b119      	cbz	r1, 8004a42 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 8004a3a:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
    ret = USBD_OK;
 8004a3e:	2000      	movs	r0, #0
 8004a40:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8004a42:	2002      	movs	r0, #2
  }

  return ret;
}
 8004a44:	4770      	bx	lr

08004a46 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004a46:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 8004a4a:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 8004a4c:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004a50:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 8004a54:	4770      	bx	lr

08004a56 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 8004a56:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290

  return USBD_OK;
}
 8004a5a:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8004a5c:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 8004a60:	4770      	bx	lr

08004a62 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004a62:	f8d0 2290 	ldr.w	r2, [r0, #656]	; 0x290
{
 8004a66:	b510      	push	{r4, lr}

  if(pdev->pClassData != NULL)
 8004a68:	b182      	cbz	r2, 8004a8c <USBD_CDC_TransmitPacket+0x2a>
  {
    if(hcdc->TxState == 0U)
 8004a6a:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 8004a6e:	2301      	movs	r3, #1
 8004a70:	b974      	cbnz	r4, 8004a90 <USBD_CDC_TransmitPacket+0x2e>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8004a72:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8004a76:	2181      	movs	r1, #129	; 0x81
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8004a78:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8004a7c:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8004a80:	6303      	str	r3, [r0, #48]	; 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	f001 fcf4 	bl	8006470 <USBD_LL_Transmit>
                       (uint16_t)hcdc->TxLength);

      return USBD_OK;
 8004a88:	4620      	mov	r0, r4
 8004a8a:	bd10      	pop	{r4, pc}
      return USBD_BUSY;
    }
  }
  else
  {
    return USBD_FAIL;
 8004a8c:	2002      	movs	r0, #2
 8004a8e:	bd10      	pop	{r4, pc}
      return USBD_BUSY;
 8004a90:	4618      	mov	r0, r3
  }
}
 8004a92:	bd10      	pop	{r4, pc}

08004a94 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004a94:	f8d0 2290 	ldr.w	r2, [r0, #656]	; 0x290
{
 8004a98:	b510      	push	{r4, lr}

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8004a9a:	b162      	cbz	r2, 8004ab6 <USBD_CDC_ReceivePacket+0x22>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8004a9c:	7c04      	ldrb	r4, [r0, #16]
 8004a9e:	b944      	cbnz	r4, 8004ab2 <USBD_CDC_ReceivePacket+0x1e>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004aa0:	f44f 7300 	mov.w	r3, #512	; 0x200
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004aa4:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8004aa8:	2101      	movs	r1, #1
 8004aaa:	f001 fcef 	bl	800648c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8004aae:	2000      	movs	r0, #0
 8004ab0:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8004ab2:	2340      	movs	r3, #64	; 0x40
 8004ab4:	e7f6      	b.n	8004aa4 <USBD_CDC_ReceivePacket+0x10>
  }
  else
  {
    return USBD_FAIL;
 8004ab6:	2002      	movs	r0, #2
  }
}
 8004ab8:	bd10      	pop	{r4, pc}

08004aba <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004aba:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8004abc:	b180      	cbz	r0, 8004ae0 <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8004abe:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8004ac2:	b113      	cbz	r3, 8004aca <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	f8c0 328c 	str.w	r3, [r0, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8004aca:	b109      	cbz	r1, 8004ad0 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8004acc:	f8c0 1288 	str.w	r1, [r0, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8004ad0:	2301      	movs	r3, #1
  pdev->id = id;
 8004ad2:	7002      	strb	r2, [r0, #0]
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8004ad4:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8004ad8:	f001 fc2a 	bl	8006330 <USBD_LL_Init>

  return USBD_OK;
 8004adc:	2000      	movs	r0, #0
 8004ade:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8004ae0:	2002      	movs	r0, #2
}
 8004ae2:	bd08      	pop	{r3, pc}

08004ae4 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8004ae4:	b119      	cbz	r1, 8004aee <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8004ae6:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
    status = USBD_OK;
 8004aea:	2000      	movs	r0, #0
 8004aec:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8004aee:	2002      	movs	r0, #2
  }

  return status;
}
 8004af0:	4770      	bx	lr

08004af2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8004af2:	b508      	push	{r3, lr}

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8004af4:	f001 fc52 	bl	800639c <USBD_LL_Start>

  return USBD_OK;
}
 8004af8:	2000      	movs	r0, #0
 8004afa:	bd08      	pop	{r3, pc}

08004afc <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004afc:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;

  if(pdev->pClass != NULL)
 8004afe:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8004b02:	b90b      	cbnz	r3, 8004b08 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8004b04:	2002      	movs	r0, #2
 8004b06:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4798      	blx	r3
 8004b0c:	2800      	cmp	r0, #0
 8004b0e:	d1f9      	bne.n	8004b04 <USBD_SetClassConfig+0x8>
      ret = USBD_OK;
    }
  }

  return ret;
}
 8004b10:	bd08      	pop	{r3, pc}

08004b12 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004b12:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8004b14:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	4798      	blx	r3
  return USBD_OK;
}
 8004b1c:	2000      	movs	r0, #0
 8004b1e:	bd08      	pop	{r3, pc}

08004b20 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004b20:	b538      	push	{r3, r4, r5, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004b22:	f500 7520 	add.w	r5, r0, #640	; 0x280
{
 8004b26:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004b28:	4628      	mov	r0, r5
 8004b2a:	f000 faec 	bl	8005106 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004b2e:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8004b30:	f894 1280 	ldrb.w	r1, [r4, #640]	; 0x280
  pdev->ep0_state = USBD_EP0_SETUP;
 8004b34:	f8c4 326c 	str.w	r3, [r4, #620]	; 0x26c
  pdev->ep0_data_len = pdev->request.wLength;
 8004b38:	f8b4 3286 	ldrh.w	r3, [r4, #646]	; 0x286
 8004b3c:	f8c4 3270 	str.w	r3, [r4, #624]	; 0x270
  switch (pdev->request.bmRequest & 0x1FU)
 8004b40:	f001 031f 	and.w	r3, r1, #31
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d00e      	beq.n	8004b66 <USBD_LL_SetupStage+0x46>
 8004b48:	d307      	bcc.n	8004b5a <USBD_LL_SetupStage+0x3a>
 8004b4a:	2b02      	cmp	r3, #2
 8004b4c:	d010      	beq.n	8004b70 <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
    break;

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004b4e:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8004b52:	4620      	mov	r0, r4
 8004b54:	f001 fc4e 	bl	80063f4 <USBD_LL_StallEP>
    break;
 8004b58:	e003      	b.n	8004b62 <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 8004b5a:	4629      	mov	r1, r5
 8004b5c:	4620      	mov	r0, r4
 8004b5e:	f000 f901 	bl	8004d64 <USBD_StdDevReq>
  }

  return USBD_OK;
}
 8004b62:	2000      	movs	r0, #0
 8004b64:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 8004b66:	4629      	mov	r1, r5
 8004b68:	4620      	mov	r0, r4
 8004b6a:	f000 fa1d 	bl	8004fa8 <USBD_StdItfReq>
    break;
 8004b6e:	e7f8      	b.n	8004b62 <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);
 8004b70:	4629      	mov	r1, r5
 8004b72:	4620      	mov	r0, r4
 8004b74:	f000 fa3d 	bl	8004ff2 <USBD_StdEPReq>
    break;
 8004b78:	e7f3      	b.n	8004b62 <USBD_LL_SetupStage+0x42>

08004b7a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004b7a:	b570      	push	{r4, r5, r6, lr}
 8004b7c:	4605      	mov	r5, r0
 8004b7e:	4616      	mov	r6, r2
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8004b80:	bb39      	cbnz	r1, 8004bd2 <USBD_LL_DataOutStage+0x58>
  {
    pep = &pdev->ep_out[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004b82:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 8004b86:	2b03      	cmp	r3, #3
 8004b88:	d11e      	bne.n	8004bc8 <USBD_LL_DataOutStage+0x4e>
    {
      if(pep->rem_length > pep->maxpacket)
 8004b8a:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8004b8e:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d90b      	bls.n	8004bae <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 8004b96:	1a9b      	subs	r3, r3, r2

        USBD_CtlContinueRx (pdev,
 8004b98:	4631      	mov	r1, r6
 8004b9a:	429a      	cmp	r2, r3
        pep->rem_length -=  pep->maxpacket;
 8004b9c:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
        USBD_CtlContinueRx (pdev,
 8004ba0:	bf8c      	ite	hi
 8004ba2:	b29a      	uxthhi	r2, r3
 8004ba4:	b292      	uxthls	r2, r2
 8004ba6:	f000 fb0d 	bl	80051c4 <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8004baa:	2000      	movs	r0, #0
    pdev->pClass->DataOut(pdev, epnum);
 8004bac:	bd70      	pop	{r4, r5, r6, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8004bae:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8004bb2:	691b      	ldr	r3, [r3, #16]
 8004bb4:	b123      	cbz	r3, 8004bc0 <USBD_LL_DataOutStage+0x46>
 8004bb6:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8004bba:	2a03      	cmp	r2, #3
 8004bbc:	d100      	bne.n	8004bc0 <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev);
 8004bbe:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8004bc0:	4628      	mov	r0, r5
 8004bc2:	f000 fb07 	bl	80051d4 <USBD_CtlSendStatus>
 8004bc6:	e7f0      	b.n	8004baa <USBD_LL_DataOutStage+0x30>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8004bc8:	2b05      	cmp	r3, #5
 8004bca:	d1ee      	bne.n	8004baa <USBD_LL_DataOutStage+0x30>
        USBD_LL_StallEP(pdev, 0U);
 8004bcc:	f001 fc12 	bl	80063f4 <USBD_LL_StallEP>
 8004bd0:	e7eb      	b.n	8004baa <USBD_LL_DataOutStage+0x30>
  else if((pdev->pClass->DataOut != NULL) &&
 8004bd2:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8004bd6:	699b      	ldr	r3, [r3, #24]
 8004bd8:	b12b      	cbz	r3, 8004be6 <USBD_LL_DataOutStage+0x6c>
 8004bda:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8004bde:	2a03      	cmp	r2, #3
 8004be0:	d101      	bne.n	8004be6 <USBD_LL_DataOutStage+0x6c>
    pdev->pClass->DataOut(pdev, epnum);
 8004be2:	4798      	blx	r3
 8004be4:	e7e1      	b.n	8004baa <USBD_LL_DataOutStage+0x30>
    return USBD_FAIL;
 8004be6:	2002      	movs	r0, #2
}
 8004be8:	bd70      	pop	{r4, r5, r6, pc}

08004bea <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8004bea:	b570      	push	{r4, r5, r6, lr}
 8004bec:	4613      	mov	r3, r2
 8004bee:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8004bf0:	460e      	mov	r6, r1
 8004bf2:	2900      	cmp	r1, #0
 8004bf4:	d147      	bne.n	8004c86 <USBD_LL_DataInStage+0x9c>
  {
    pep = &pdev->ep_in[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8004bf6:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 8004bfa:	2a02      	cmp	r2, #2
 8004bfc:	d13c      	bne.n	8004c78 <USBD_LL_DataInStage+0x8e>
    {
      if(pep->rem_length > pep->maxpacket)
 8004bfe:	6a05      	ldr	r5, [r0, #32]
 8004c00:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8004c02:	4295      	cmp	r5, r2
 8004c04:	d913      	bls.n	8004c2e <USBD_LL_DataInStage+0x44>
      {
        pep->rem_length -= pep->maxpacket;
 8004c06:	1aaa      	subs	r2, r5, r2

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8004c08:	4619      	mov	r1, r3
        pep->rem_length -= pep->maxpacket;
 8004c0a:	6202      	str	r2, [r0, #32]
        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8004c0c:	b292      	uxth	r2, r2
 8004c0e:	f000 fac2 	bl	8005196 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8004c12:	4633      	mov	r3, r6
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8004c14:	461a      	mov	r2, r3
 8004c16:	4619      	mov	r1, r3
 8004c18:	4620      	mov	r0, r4
 8004c1a:	f001 fc37 	bl	800648c <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 8004c1e:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
 8004c22:	2000      	movs	r0, #0
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d13a      	bne.n	8004c9e <USBD_LL_DataInStage+0xb4>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8004c28:	f884 0278 	strb.w	r0, [r4, #632]	; 0x278
 8004c2c:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0U) &&
 8004c2e:	69c3      	ldr	r3, [r0, #28]
 8004c30:	fbb3 f5f2 	udiv	r5, r3, r2
 8004c34:	fb02 3515 	mls	r5, r2, r5, r3
 8004c38:	b965      	cbnz	r5, 8004c54 <USBD_LL_DataInStage+0x6a>
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d80a      	bhi.n	8004c54 <USBD_LL_DataInStage+0x6a>
           (pep->total_length >= pep->maxpacket) &&
 8004c3e:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d206      	bcs.n	8004c54 <USBD_LL_DataInStage+0x6a>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004c46:	462a      	mov	r2, r5
 8004c48:	f000 faa5 	bl	8005196 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004c4c:	f8c4 5270 	str.w	r5, [r4, #624]	; 0x270
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8004c50:	462b      	mov	r3, r5
 8004c52:	e7df      	b.n	8004c14 <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8004c54:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	b12b      	cbz	r3, 8004c68 <USBD_LL_DataInStage+0x7e>
 8004c5c:	f894 2274 	ldrb.w	r2, [r4, #628]	; 0x274
 8004c60:	2a03      	cmp	r2, #3
 8004c62:	d101      	bne.n	8004c68 <USBD_LL_DataInStage+0x7e>
            pdev->pClass->EP0_TxSent(pdev);
 8004c64:	4620      	mov	r0, r4
 8004c66:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 8004c68:	2180      	movs	r1, #128	; 0x80
 8004c6a:	4620      	mov	r0, r4
 8004c6c:	f001 fbc2 	bl	80063f4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8004c70:	4620      	mov	r0, r4
 8004c72:	f000 faba 	bl	80051ea <USBD_CtlReceiveStatus>
 8004c76:	e7d2      	b.n	8004c1e <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8004c78:	f032 0304 	bics.w	r3, r2, #4
 8004c7c:	d1cf      	bne.n	8004c1e <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 8004c7e:	2180      	movs	r1, #128	; 0x80
 8004c80:	f001 fbb8 	bl	80063f4 <USBD_LL_StallEP>
 8004c84:	e7cb      	b.n	8004c1e <USBD_LL_DataInStage+0x34>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8004c86:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8004c8a:	695b      	ldr	r3, [r3, #20]
 8004c8c:	b133      	cbz	r3, 8004c9c <USBD_LL_DataInStage+0xb2>
 8004c8e:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8004c92:	2a03      	cmp	r2, #3
 8004c94:	d102      	bne.n	8004c9c <USBD_LL_DataInStage+0xb2>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum);
 8004c96:	4798      	blx	r3
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8004c98:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 8004c9a:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 8004c9c:	2002      	movs	r0, #2
}
 8004c9e:	bd70      	pop	{r4, r5, r6, pc}

08004ca0 <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	2340      	movs	r3, #64	; 0x40
{
 8004ca4:	b570      	push	{r4, r5, r6, lr}
 8004ca6:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004ca8:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004caa:	2640      	movs	r6, #64	; 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004cac:	4611      	mov	r1, r2
 8004cae:	f001 fb83 	bl	80063b8 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004cb2:	2180      	movs	r1, #128	; 0x80
 8004cb4:	4633      	mov	r3, r6
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004cb6:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004cba:	f8c4 6150 	str.w	r6, [r4, #336]	; 0x150
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	4620      	mov	r0, r4
 8004cc2:	f001 fb79 	bl	80063b8 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 8004cc6:	2100      	movs	r1, #0
  pdev->dev_config= 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 8004cc8:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004ccc:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004cce:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004cd0:	f884 5274 	strb.w	r5, [r4, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8004cd4:	f8c4 126c 	str.w	r1, [r4, #620]	; 0x26c
  pdev->dev_config= 0U;
 8004cd8:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8004cda:	f8c4 127c 	str.w	r1, [r4, #636]	; 0x27c
  if (pdev->pClassData)
 8004cde:	b123      	cbz	r3, 8004cea <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004ce0:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8004ce4:	4620      	mov	r0, r4
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	4798      	blx	r3
  }

  return USBD_OK;
}
 8004cea:	2000      	movs	r0, #0
 8004cec:	bd70      	pop	{r4, r5, r6, pc}

08004cee <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8004cee:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 8004cf0:	2000      	movs	r0, #0
 8004cf2:	4770      	bx	lr

08004cf4 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8004cf4:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8004cf8:	f880 3275 	strb.w	r3, [r0, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8004cfc:	2304      	movs	r3, #4
 8004cfe:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  return USBD_OK;
}
 8004d02:	2000      	movs	r0, #0
 8004d04:	4770      	bx	lr

08004d06 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;
 8004d06:	f890 3275 	ldrb.w	r3, [r0, #629]	; 0x275
 8004d0a:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  return USBD_OK;
}
 8004d0e:	2000      	movs	r0, #0
 8004d10:	4770      	bx	lr

08004d12 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8004d12:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d14:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8004d18:	2a03      	cmp	r2, #3
 8004d1a:	d104      	bne.n	8004d26 <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 8004d1c:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8004d20:	69db      	ldr	r3, [r3, #28]
 8004d22:	b103      	cbz	r3, 8004d26 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8004d24:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8004d26:	2000      	movs	r0, #0
 8004d28:	bd08      	pop	{r3, pc}

08004d2a <USBD_LL_IsoINIncomplete>:
 8004d2a:	2000      	movs	r0, #0
 8004d2c:	4770      	bx	lr

08004d2e <USBD_LL_IsoOUTIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 8004d2e:	2000      	movs	r0, #0
 8004d30:	4770      	bx	lr

08004d32 <USBD_LL_DevConnected>:
{
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
}
 8004d32:	2000      	movs	r0, #0
 8004d34:	4770      	bx	lr

08004d36 <USBD_LL_DevDisconnected>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004d36:	2201      	movs	r2, #1
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004d38:	7901      	ldrb	r1, [r0, #4]
{
 8004d3a:	b508      	push	{r3, lr}
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004d3c:	f880 2274 	strb.w	r2, [r0, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004d40:	f8d0 228c 	ldr.w	r2, [r0, #652]	; 0x28c
 8004d44:	6852      	ldr	r2, [r2, #4]
 8004d46:	4790      	blx	r2

  return USBD_OK;
}
 8004d48:	2000      	movs	r0, #0
 8004d4a:	bd08      	pop	{r3, pc}

08004d4c <USBD_CtlError.constprop.1>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 8004d4c:	b510      	push	{r4, lr}
 8004d4e:	4604      	mov	r4, r0
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80U);
 8004d50:	2180      	movs	r1, #128	; 0x80
 8004d52:	f001 fb4f 	bl	80063f4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8004d56:	2100      	movs	r1, #0
 8004d58:	4620      	mov	r0, r4
}
 8004d5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0U);
 8004d5e:	f001 bb49 	b.w	80063f4 <USBD_LL_StallEP>
	...

08004d64 <USBD_StdDevReq>:
{
 8004d64:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004d66:	780b      	ldrb	r3, [r1, #0]
{
 8004d68:	4604      	mov	r4, r0
 8004d6a:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004d6c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004d70:	2b20      	cmp	r3, #32
 8004d72:	d014      	beq.n	8004d9e <USBD_StdDevReq+0x3a>
 8004d74:	2b40      	cmp	r3, #64	; 0x40
 8004d76:	d012      	beq.n	8004d9e <USBD_StdDevReq+0x3a>
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	f040 8095 	bne.w	8004ea8 <USBD_StdDevReq+0x144>
    switch (req->bRequest)
 8004d7e:	784b      	ldrb	r3, [r1, #1]
 8004d80:	2b09      	cmp	r3, #9
 8004d82:	f200 8090 	bhi.w	8004ea6 <USBD_StdDevReq+0x142>
 8004d86:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004d8a:	00e7      	.short	0x00e7
 8004d8c:	008e0101 	.word	0x008e0101
 8004d90:	008e00fa 	.word	0x008e00fa
 8004d94:	00130082 	.word	0x00130082
 8004d98:	00d2008e 	.word	0x00d2008e
 8004d9c:	00a0      	.short	0x00a0
    pdev->pClass->Setup(pdev, req);
 8004d9e:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8004da2:	4629      	mov	r1, r5
 8004da4:	4620      	mov	r0, r4
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	4798      	blx	r3
}
 8004daa:	2000      	movs	r0, #0
 8004dac:	b003      	add	sp, #12
 8004dae:	bd30      	pop	{r4, r5, pc}
  switch (req->wValue >> 8)
 8004db0:	884b      	ldrh	r3, [r1, #2]
 8004db2:	0a1a      	lsrs	r2, r3, #8
 8004db4:	3a01      	subs	r2, #1
 8004db6:	2a0e      	cmp	r2, #14
 8004db8:	d875      	bhi.n	8004ea6 <USBD_StdDevReq+0x142>
 8004dba:	e8df f002 	tbb	[pc, r2]
 8004dbe:	2824      	.short	0x2824
 8004dc0:	55747435 	.word	0x55747435
 8004dc4:	7474745e 	.word	0x7474745e
 8004dc8:	74747474 	.word	0x74747474
 8004dcc:	08          	.byte	0x08
 8004dcd:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8004dce:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8004dd2:	69db      	ldr	r3, [r3, #28]
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8004dd4:	f10d 0106 	add.w	r1, sp, #6
 8004dd8:	7c20      	ldrb	r0, [r4, #16]
 8004dda:	4798      	blx	r3
  if((len != 0U) && (req->wLength != 0U))
 8004ddc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8004de0:	b152      	cbz	r2, 8004df8 <USBD_StdDevReq+0x94>
 8004de2:	88eb      	ldrh	r3, [r5, #6]
 8004de4:	b143      	cbz	r3, 8004df8 <USBD_StdDevReq+0x94>
    len = MIN(len, req->wLength);
 8004de6:	429a      	cmp	r2, r3
    USBD_CtlSendData (pdev, pbuf, len);
 8004de8:	4601      	mov	r1, r0
 8004dea:	4620      	mov	r0, r4
    len = MIN(len, req->wLength);
 8004dec:	bf28      	it	cs
 8004dee:	461a      	movcs	r2, r3
 8004df0:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, pbuf, len);
 8004df4:	f000 f9c2 	bl	800517c <USBD_CtlSendData>
  if(req->wLength == 0U)
 8004df8:	88eb      	ldrh	r3, [r5, #6]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d1d5      	bne.n	8004daa <USBD_StdDevReq+0x46>
    USBD_CtlSendStatus(pdev);
 8004dfe:	4620      	mov	r0, r4
 8004e00:	f000 f9e8 	bl	80051d4 <USBD_CtlSendStatus>
 8004e04:	e7d1      	b.n	8004daa <USBD_StdDevReq+0x46>
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8004e06:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	e7e2      	b.n	8004dd4 <USBD_StdDevReq+0x70>
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8004e0e:	7c02      	ldrb	r2, [r0, #16]
 8004e10:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8004e14:	b932      	cbnz	r2, 8004e24 <USBD_StdDevReq+0xc0>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8004e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8004e18:	f10d 0006 	add.w	r0, sp, #6
 8004e1c:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004e1e:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004e20:	7043      	strb	r3, [r0, #1]
 8004e22:	e7db      	b.n	8004ddc <USBD_StdDevReq+0x78>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8004e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e26:	e7f7      	b.n	8004e18 <USBD_StdDevReq+0xb4>
    switch ((uint8_t)(req->wValue))
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	2b05      	cmp	r3, #5
 8004e2c:	d83b      	bhi.n	8004ea6 <USBD_StdDevReq+0x142>
 8004e2e:	e8df f003 	tbb	[pc, r3]
 8004e32:	0703      	.short	0x0703
 8004e34:	17130f0b 	.word	0x17130f0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8004e38:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	e7c9      	b.n	8004dd4 <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8004e40:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	e7c5      	b.n	8004dd4 <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8004e48:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	e7c1      	b.n	8004dd4 <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8004e50:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	e7bd      	b.n	8004dd4 <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8004e58:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8004e5c:	695b      	ldr	r3, [r3, #20]
 8004e5e:	e7b9      	b.n	8004dd4 <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8004e60:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8004e64:	699b      	ldr	r3, [r3, #24]
 8004e66:	e7b5      	b.n	8004dd4 <USBD_StdDevReq+0x70>
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8004e68:	7c03      	ldrb	r3, [r0, #16]
 8004e6a:	b9e3      	cbnz	r3, 8004ea6 <USBD_StdDevReq+0x142>
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8004e6c:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8004e70:	f10d 0006 	add.w	r0, sp, #6
 8004e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e76:	4798      	blx	r3
 8004e78:	e7b0      	b.n	8004ddc <USBD_StdDevReq+0x78>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8004e7a:	7c03      	ldrb	r3, [r0, #16]
 8004e7c:	b99b      	cbnz	r3, 8004ea6 <USBD_StdDevReq+0x142>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8004e7e:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8004e82:	f10d 0006 	add.w	r0, sp, #6
 8004e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e88:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004e8a:	2307      	movs	r3, #7
 8004e8c:	e7c8      	b.n	8004e20 <USBD_StdDevReq+0xbc>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8004e8e:	888b      	ldrh	r3, [r1, #4]
 8004e90:	b94b      	cbnz	r3, 8004ea6 <USBD_StdDevReq+0x142>
 8004e92:	88cb      	ldrh	r3, [r1, #6]
 8004e94:	b93b      	cbnz	r3, 8004ea6 <USBD_StdDevReq+0x142>
 8004e96:	884d      	ldrh	r5, [r1, #2]
 8004e98:	2d7f      	cmp	r5, #127	; 0x7f
 8004e9a:	d804      	bhi.n	8004ea6 <USBD_StdDevReq+0x142>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e9c:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8004ea0:	b2e9      	uxtb	r1, r5
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004ea2:	2b03      	cmp	r3, #3
 8004ea4:	d103      	bne.n	8004eae <USBD_StdDevReq+0x14a>
      USBD_CtlError(pdev, req);
 8004ea6:	4620      	mov	r0, r4
    USBD_CtlError(pdev, req);
 8004ea8:	f7ff ff50 	bl	8004d4c <USBD_CtlError.constprop.1>
    break;
 8004eac:	e77d      	b.n	8004daa <USBD_StdDevReq+0x46>
      pdev->dev_address = dev_addr;
 8004eae:	f880 1276 	strb.w	r1, [r0, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8004eb2:	f001 facf 	bl	8006454 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8004eb6:	4620      	mov	r0, r4
 8004eb8:	f000 f98c 	bl	80051d4 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8004ebc:	b11d      	cbz	r5, 8004ec6 <USBD_StdDevReq+0x162>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004ebe:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 8004ec0:	f884 3274 	strb.w	r3, [r4, #628]	; 0x274
 8004ec4:	e771      	b.n	8004daa <USBD_StdDevReq+0x46>
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e7fa      	b.n	8004ec0 <USBD_StdDevReq+0x15c>
  cfgidx = (uint8_t)(req->wValue);
 8004eca:	7889      	ldrb	r1, [r1, #2]
 8004ecc:	4d35      	ldr	r5, [pc, #212]	; (8004fa4 <USBD_StdDevReq+0x240>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8004ece:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 8004ed0:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8004ed2:	d8e8      	bhi.n	8004ea6 <USBD_StdDevReq+0x142>
    switch (pdev->dev_state)
 8004ed4:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	d008      	beq.n	8004eee <USBD_StdDevReq+0x18a>
 8004edc:	2b03      	cmp	r3, #3
 8004ede:	d014      	beq.n	8004f0a <USBD_StdDevReq+0x1a6>
      USBD_CtlError(pdev, req);
 8004ee0:	f7ff ff34 	bl	8004d4c <USBD_CtlError.constprop.1>
      USBD_ClrClassConfig(pdev, cfgidx);
 8004ee4:	7829      	ldrb	r1, [r5, #0]
 8004ee6:	4620      	mov	r0, r4
 8004ee8:	f7ff fe13 	bl	8004b12 <USBD_ClrClassConfig>
 8004eec:	e75d      	b.n	8004daa <USBD_StdDevReq+0x46>
      if (cfgidx)
 8004eee:	2900      	cmp	r1, #0
 8004ef0:	d085      	beq.n	8004dfe <USBD_StdDevReq+0x9a>
        pdev->dev_config = cfgidx;
 8004ef2:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8004ef4:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 8004ef6:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8004ef8:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8004efc:	4620      	mov	r0, r4
 8004efe:	f7ff fdfd 	bl	8004afc <USBD_SetClassConfig>
 8004f02:	2802      	cmp	r0, #2
 8004f04:	f47f af7b 	bne.w	8004dfe <USBD_StdDevReq+0x9a>
 8004f08:	e7cd      	b.n	8004ea6 <USBD_StdDevReq+0x142>
      if (cfgidx == 0U)
 8004f0a:	b931      	cbnz	r1, 8004f1a <USBD_StdDevReq+0x1b6>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004f0c:	2302      	movs	r3, #2
        pdev->dev_config = cfgidx;
 8004f0e:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004f10:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        USBD_ClrClassConfig(pdev, cfgidx);
 8004f14:	f7ff fdfd 	bl	8004b12 <USBD_ClrClassConfig>
 8004f18:	e771      	b.n	8004dfe <USBD_StdDevReq+0x9a>
      else if (cfgidx != pdev->dev_config)
 8004f1a:	6841      	ldr	r1, [r0, #4]
 8004f1c:	2901      	cmp	r1, #1
 8004f1e:	f43f af6e 	beq.w	8004dfe <USBD_StdDevReq+0x9a>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8004f22:	b2c9      	uxtb	r1, r1
 8004f24:	f7ff fdf5 	bl	8004b12 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8004f28:	7829      	ldrb	r1, [r5, #0]
 8004f2a:	6061      	str	r1, [r4, #4]
 8004f2c:	e7e6      	b.n	8004efc <USBD_StdDevReq+0x198>
  if (req->wLength != 1U)
 8004f2e:	88ca      	ldrh	r2, [r1, #6]
 8004f30:	2a01      	cmp	r2, #1
 8004f32:	d1b8      	bne.n	8004ea6 <USBD_StdDevReq+0x142>
    switch (pdev->dev_state)
 8004f34:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d0b4      	beq.n	8004ea6 <USBD_StdDevReq+0x142>
 8004f3c:	2b02      	cmp	r3, #2
 8004f3e:	d903      	bls.n	8004f48 <USBD_StdDevReq+0x1e4>
 8004f40:	2b03      	cmp	r3, #3
 8004f42:	d1b0      	bne.n	8004ea6 <USBD_StdDevReq+0x142>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8004f44:	1d01      	adds	r1, r0, #4
 8004f46:	e003      	b.n	8004f50 <USBD_StdDevReq+0x1ec>
      pdev->dev_default_config = 0U;
 8004f48:	4601      	mov	r1, r0
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	f841 3f08 	str.w	r3, [r1, #8]!
    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8004f50:	4620      	mov	r0, r4
 8004f52:	f000 f913 	bl	800517c <USBD_CtlSendData>
 8004f56:	e728      	b.n	8004daa <USBD_StdDevReq+0x46>
  switch (pdev->dev_state)
 8004f58:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8004f5c:	3b01      	subs	r3, #1
 8004f5e:	2b02      	cmp	r3, #2
 8004f60:	d8a1      	bhi.n	8004ea6 <USBD_StdDevReq+0x142>
    if(req->wLength != 0x2U)
 8004f62:	88cb      	ldrh	r3, [r1, #6]
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d19e      	bne.n	8004ea6 <USBD_StdDevReq+0x142>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup)
 8004f6c:	f8d0 327c 	ldr.w	r3, [r0, #636]	; 0x27c
 8004f70:	b10b      	cbz	r3, 8004f76 <USBD_StdDevReq+0x212>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8004f72:	2303      	movs	r3, #3
 8004f74:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8004f76:	2202      	movs	r2, #2
 8004f78:	f104 010c 	add.w	r1, r4, #12
 8004f7c:	e7e8      	b.n	8004f50 <USBD_StdDevReq+0x1ec>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004f7e:	884b      	ldrh	r3, [r1, #2]
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	f47f af12 	bne.w	8004daa <USBD_StdDevReq+0x46>
    pdev->dev_remote_wakeup = 1U;
 8004f86:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c
 8004f8a:	e738      	b.n	8004dfe <USBD_StdDevReq+0x9a>
  switch (pdev->dev_state)
 8004f8c:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8004f90:	3b01      	subs	r3, #1
 8004f92:	2b02      	cmp	r3, #2
 8004f94:	d887      	bhi.n	8004ea6 <USBD_StdDevReq+0x142>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004f96:	884b      	ldrh	r3, [r1, #2]
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	f47f af06 	bne.w	8004daa <USBD_StdDevReq+0x46>
      pdev->dev_remote_wakeup = 0U;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	e7f1      	b.n	8004f86 <USBD_StdDevReq+0x222>
 8004fa2:	bf00      	nop
 8004fa4:	20003f44 	.word	0x20003f44

08004fa8 <USBD_StdItfReq>:
{
 8004fa8:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004faa:	780b      	ldrb	r3, [r1, #0]
{
 8004fac:	4604      	mov	r4, r0
 8004fae:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004fb0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004fb4:	2b20      	cmp	r3, #32
 8004fb6:	d002      	beq.n	8004fbe <USBD_StdItfReq+0x16>
 8004fb8:	2b40      	cmp	r3, #64	; 0x40
 8004fba:	d000      	beq.n	8004fbe <USBD_StdItfReq+0x16>
 8004fbc:	b9b3      	cbnz	r3, 8004fec <USBD_StdItfReq+0x44>
    switch (pdev->dev_state)
 8004fbe:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
 8004fc2:	3b01      	subs	r3, #1
 8004fc4:	2b02      	cmp	r3, #2
 8004fc6:	d810      	bhi.n	8004fea <USBD_StdItfReq+0x42>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8004fc8:	792b      	ldrb	r3, [r5, #4]
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d80d      	bhi.n	8004fea <USBD_StdItfReq+0x42>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8004fce:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8004fd2:	4629      	mov	r1, r5
 8004fd4:	4620      	mov	r0, r4
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	4798      	blx	r3
        if ((req->wLength == 0U) && (ret == USBD_OK))
 8004fda:	88eb      	ldrh	r3, [r5, #6]
 8004fdc:	b91b      	cbnz	r3, 8004fe6 <USBD_StdItfReq+0x3e>
 8004fde:	b910      	cbnz	r0, 8004fe6 <USBD_StdItfReq+0x3e>
          USBD_CtlSendStatus(pdev);
 8004fe0:	4620      	mov	r0, r4
 8004fe2:	f000 f8f7 	bl	80051d4 <USBD_CtlSendStatus>
}
 8004fe6:	2000      	movs	r0, #0
 8004fe8:	bd38      	pop	{r3, r4, r5, pc}
      USBD_CtlError(pdev, req);
 8004fea:	4620      	mov	r0, r4
    USBD_CtlError(pdev, req);
 8004fec:	f7ff feae 	bl	8004d4c <USBD_CtlError.constprop.1>
    break;
 8004ff0:	e7f9      	b.n	8004fe6 <USBD_StdItfReq+0x3e>

08004ff2 <USBD_StdEPReq>:
{
 8004ff2:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004ff4:	780a      	ldrb	r2, [r1, #0]
{
 8004ff6:	4604      	mov	r4, r0
 8004ff8:	460b      	mov	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004ffa:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8004ffe:	2a20      	cmp	r2, #32
 8005000:	d013      	beq.n	800502a <USBD_StdEPReq+0x38>
 8005002:	2a40      	cmp	r2, #64	; 0x40
 8005004:	d011      	beq.n	800502a <USBD_StdEPReq+0x38>
 8005006:	b96a      	cbnz	r2, 8005024 <USBD_StdEPReq+0x32>
    switch (req->bRequest)
 8005008:	785d      	ldrb	r5, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 800500a:	888a      	ldrh	r2, [r1, #4]
    switch (req->bRequest)
 800500c:	2d01      	cmp	r5, #1
  ep_addr  = LOBYTE(req->wIndex);
 800500e:	b2d1      	uxtb	r1, r2
    switch (req->bRequest)
 8005010:	d01f      	beq.n	8005052 <USBD_StdEPReq+0x60>
 8005012:	d335      	bcc.n	8005080 <USBD_StdEPReq+0x8e>
 8005014:	2d03      	cmp	r5, #3
 8005016:	d105      	bne.n	8005024 <USBD_StdEPReq+0x32>
      switch (pdev->dev_state)
 8005018:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 800501c:	2a02      	cmp	r2, #2
 800501e:	d026      	beq.n	800506e <USBD_StdEPReq+0x7c>
 8005020:	2a03      	cmp	r2, #3
 8005022:	d00a      	beq.n	800503a <USBD_StdEPReq+0x48>
    USBD_CtlError(pdev, req);
 8005024:	f7ff fe92 	bl	8004d4c <USBD_CtlError.constprop.1>
    break;
 8005028:	e005      	b.n	8005036 <USBD_StdEPReq+0x44>
    pdev->pClass->Setup (pdev, req);
 800502a:	f8d4 228c 	ldr.w	r2, [r4, #652]	; 0x28c
 800502e:	4619      	mov	r1, r3
 8005030:	4620      	mov	r0, r4
 8005032:	6892      	ldr	r2, [r2, #8]
 8005034:	4790      	blx	r2
}
 8005036:	2000      	movs	r0, #0
 8005038:	bd38      	pop	{r3, r4, r5, pc}
        if (req->wValue == USB_FEATURE_EP_HALT)
 800503a:	885a      	ldrh	r2, [r3, #2]
 800503c:	b92a      	cbnz	r2, 800504a <USBD_StdEPReq+0x58>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800503e:	064a      	lsls	r2, r1, #25
 8005040:	d003      	beq.n	800504a <USBD_StdEPReq+0x58>
 8005042:	88db      	ldrh	r3, [r3, #6]
 8005044:	b90b      	cbnz	r3, 800504a <USBD_StdEPReq+0x58>
            USBD_LL_StallEP(pdev, ep_addr);
 8005046:	f001 f9d5 	bl	80063f4 <USBD_LL_StallEP>
        USBD_CtlSendStatus(pdev);
 800504a:	4620      	mov	r0, r4
 800504c:	f000 f8c2 	bl	80051d4 <USBD_CtlSendStatus>
        break;
 8005050:	e7f1      	b.n	8005036 <USBD_StdEPReq+0x44>
      switch (pdev->dev_state)
 8005052:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8005056:	2a02      	cmp	r2, #2
 8005058:	d009      	beq.n	800506e <USBD_StdEPReq+0x7c>
 800505a:	2a03      	cmp	r2, #3
 800505c:	d1e2      	bne.n	8005024 <USBD_StdEPReq+0x32>
        if (req->wValue == USB_FEATURE_EP_HALT)
 800505e:	885b      	ldrh	r3, [r3, #2]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d1e8      	bne.n	8005036 <USBD_StdEPReq+0x44>
          if ((ep_addr & 0x7FU) != 0x00U)
 8005064:	064d      	lsls	r5, r1, #25
 8005066:	d0f0      	beq.n	800504a <USBD_StdEPReq+0x58>
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8005068:	f001 f9d2 	bl	8006410 <USBD_LL_ClearStallEP>
 800506c:	e7ed      	b.n	800504a <USBD_StdEPReq+0x58>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800506e:	064b      	lsls	r3, r1, #25
 8005070:	d017      	beq.n	80050a2 <USBD_StdEPReq+0xb0>
          USBD_LL_StallEP(pdev, ep_addr);
 8005072:	f001 f9bf 	bl	80063f4 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8005076:	2180      	movs	r1, #128	; 0x80
 8005078:	4620      	mov	r0, r4
 800507a:	f001 f9bb 	bl	80063f4 <USBD_LL_StallEP>
 800507e:	e7da      	b.n	8005036 <USBD_StdEPReq+0x44>
      switch (pdev->dev_state)
 8005080:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8005084:	2b02      	cmp	r3, #2
 8005086:	d00e      	beq.n	80050a6 <USBD_StdEPReq+0xb4>
 8005088:	2b03      	cmp	r3, #3
 800508a:	d1cb      	bne.n	8005024 <USBD_StdEPReq+0x32>
        if((ep_addr & 0x80U) == 0x80U)
 800508c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005090:	f04f 0314 	mov.w	r3, #20
 8005094:	f001 020f 	and.w	r2, r1, #15
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005098:	fb03 0202 	mla	r2, r3, r2, r0
        if((ep_addr & 0x80U) == 0x80U)
 800509c:	d014      	beq.n	80050c8 <USBD_StdEPReq+0xd6>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800509e:	6992      	ldr	r2, [r2, #24]
 80050a0:	b9ea      	cbnz	r2, 80050de <USBD_StdEPReq+0xec>
          USBD_CtlError(pdev, req);
 80050a2:	4620      	mov	r0, r4
 80050a4:	e7be      	b.n	8005024 <USBD_StdEPReq+0x32>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80050a6:	0649      	lsls	r1, r1, #25
 80050a8:	d1fb      	bne.n	80050a2 <USBD_StdEPReq+0xb0>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80050aa:	0613      	lsls	r3, r2, #24
          pep->status = 0x0000U;
 80050ac:	f04f 0300 	mov.w	r3, #0
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80050b0:	f04f 0202 	mov.w	r2, #2
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80050b4:	bf4c      	ite	mi
 80050b6:	f100 0114 	addmi.w	r1, r0, #20
 80050ba:	f500 71a0 	addpl.w	r1, r0, #320	; 0x140
          pep->status = 0x0000U;
 80050be:	600b      	str	r3, [r1, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80050c0:	4620      	mov	r0, r4
 80050c2:	f000 f85b 	bl	800517c <USBD_CtlSendData>
          break;
 80050c6:	e7b6      	b.n	8005036 <USBD_StdEPReq+0x44>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80050c8:	f8d2 2144 	ldr.w	r2, [r2, #324]	; 0x144
 80050cc:	2a00      	cmp	r2, #0
 80050ce:	d0e8      	beq.n	80050a2 <USBD_StdEPReq+0xb0>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80050d0:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 80050d4:	fb03 0505 	mla	r5, r3, r5, r0
 80050d8:	f505 75a0 	add.w	r5, r5, #320	; 0x140
 80050dc:	e004      	b.n	80050e8 <USBD_StdEPReq+0xf6>
 80050de:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 80050e2:	fb05 3503 	mla	r5, r5, r3, r3
 80050e6:	4405      	add	r5, r0
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80050e8:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 80050ec:	d103      	bne.n	80050f6 <USBD_StdEPReq+0x104>
            pep->status = 0x0001U;
 80050ee:	602b      	str	r3, [r5, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80050f0:	2202      	movs	r2, #2
 80050f2:	4629      	mov	r1, r5
 80050f4:	e7e4      	b.n	80050c0 <USBD_StdEPReq+0xce>
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 80050f6:	4620      	mov	r0, r4
 80050f8:	f001 f998 	bl	800642c <USBD_LL_IsStallEP>
 80050fc:	b108      	cbz	r0, 8005102 <USBD_StdEPReq+0x110>
            pep->status = 0x0001U;
 80050fe:	2301      	movs	r3, #1
 8005100:	e7f5      	b.n	80050ee <USBD_StdEPReq+0xfc>
            pep->status = 0x0000U;
 8005102:	6028      	str	r0, [r5, #0]
 8005104:	e7f4      	b.n	80050f0 <USBD_StdEPReq+0xfe>

08005106 <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 8005106:	780b      	ldrb	r3, [r1, #0]
 8005108:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800510a:	784b      	ldrb	r3, [r1, #1]
 800510c:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800510e:	78ca      	ldrb	r2, [r1, #3]
 8005110:	788b      	ldrb	r3, [r1, #2]
 8005112:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005116:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8005118:	794a      	ldrb	r2, [r1, #5]
 800511a:	790b      	ldrb	r3, [r1, #4]
 800511c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005120:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8005122:	79ca      	ldrb	r2, [r1, #7]
 8005124:	798b      	ldrb	r3, [r1, #6]
 8005126:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800512a:	80c3      	strh	r3, [r0, #6]
 800512c:	4770      	bx	lr

0800512e <USBD_CtlError>:
{
 800512e:	b510      	push	{r4, lr}
 8005130:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80U);
 8005132:	2180      	movs	r1, #128	; 0x80
 8005134:	f001 f95e 	bl	80063f4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8005138:	2100      	movs	r1, #0
 800513a:	4620      	mov	r0, r4
}
 800513c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0U);
 8005140:	f001 b958 	b.w	80063f4 <USBD_LL_StallEP>

08005144 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005144:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 8005146:	b188      	cbz	r0, 800516c <USBD_GetString+0x28>
 8005148:	4605      	mov	r5, r0
 800514a:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0U;

    while (*buf != '\0')
 800514c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005150:	b2db      	uxtb	r3, r3
 8005152:	2c00      	cmp	r4, #0
 8005154:	d1f9      	bne.n	800514a <USBD_GetString+0x6>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8005156:	3301      	adds	r3, #1
 8005158:	3801      	subs	r0, #1
 800515a:	005b      	lsls	r3, r3, #1
 800515c:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800515e:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8005160:	2303      	movs	r3, #3
 8005162:	704b      	strb	r3, [r1, #1]
 8005164:	2302      	movs	r3, #2
    while (*desc != '\0')
 8005166:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800516a:	b905      	cbnz	r5, 800516e <USBD_GetString+0x2a>
 800516c:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 800516e:	1c5a      	adds	r2, r3, #1
 8005170:	54cd      	strb	r5, [r1, r3]
      unicode[idx++] =  0U;
 8005172:	3302      	adds	r3, #2
      unicode[idx++] = *desc++;
 8005174:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 8005176:	b2db      	uxtb	r3, r3
 8005178:	548c      	strb	r4, [r1, r2]
 800517a:	e7f4      	b.n	8005166 <USBD_GetString+0x22>

0800517c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 800517c:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800517e:	2202      	movs	r2, #2
{
 8005180:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005182:	f8c0 226c 	str.w	r2, [r0, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8005186:	460a      	mov	r2, r1
  pdev->ep_in[0].total_length = len;
 8005188:	61c3      	str	r3, [r0, #28]
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800518a:	2100      	movs	r1, #0
  pdev->ep_in[0].rem_length   = len;
 800518c:	6203      	str	r3, [r0, #32]
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800518e:	f001 f96f 	bl	8006470 <USBD_LL_Transmit>

  return USBD_OK;
}
 8005192:	2000      	movs	r0, #0
 8005194:	bd10      	pop	{r4, pc}

08005196 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8005196:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8005198:	4613      	mov	r3, r2
 800519a:	460a      	mov	r2, r1
 800519c:	2100      	movs	r1, #0
 800519e:	f001 f967 	bl	8006470 <USBD_LL_Transmit>

  return USBD_OK;
}
 80051a2:	2000      	movs	r0, #0
 80051a4:	bd08      	pop	{r3, pc}

080051a6 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 80051a6:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80051a8:	2203      	movs	r2, #3
{
 80051aa:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80051ac:	f8c0 226c 	str.w	r2, [r0, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 80051b0:	460a      	mov	r2, r1
  pdev->ep_out[0].total_length = len;
 80051b2:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 80051b6:	2100      	movs	r1, #0
  pdev->ep_out[0].rem_length   = len;
 80051b8:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 80051bc:	f001 f966 	bl	800648c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80051c0:	2000      	movs	r0, #0
 80051c2:	bd10      	pop	{r4, pc}

080051c4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 80051c4:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80051c6:	4613      	mov	r3, r2
 80051c8:	460a      	mov	r2, r1
 80051ca:	2100      	movs	r1, #0
 80051cc:	f001 f95e 	bl	800648c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80051d0:	2000      	movs	r0, #0
 80051d2:	bd08      	pop	{r3, pc}

080051d4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 80051d4:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80051d6:	2304      	movs	r3, #4
 80051d8:	f8c0 326c 	str.w	r3, [r0, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80051dc:	2300      	movs	r3, #0
 80051de:	461a      	mov	r2, r3
 80051e0:	4619      	mov	r1, r3
 80051e2:	f001 f945 	bl	8006470 <USBD_LL_Transmit>

  return USBD_OK;
}
 80051e6:	2000      	movs	r0, #0
 80051e8:	bd08      	pop	{r3, pc}

080051ea <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 80051ea:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80051ec:	2305      	movs	r3, #5
 80051ee:	f8c0 326c 	str.w	r3, [r0, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80051f2:	2300      	movs	r3, #0
 80051f4:	461a      	mov	r2, r3
 80051f6:	4619      	mov	r1, r3
 80051f8:	f001 f948 	bl	800648c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80051fc:	2000      	movs	r0, #0
 80051fe:	bd08      	pop	{r3, pc}

08005200 <initBuffMan>:

void initBuffMan( buffer_manager_t* pman, uint8_t* pdata, uint32_t len )
{
	pman->pbuff = pdata;
	pman->len = len;
	pman->writeOffset = 0;
 8005200:	2300      	movs	r3, #0
 8005202:	60c3      	str	r3, [r0, #12]
	pman->readOffset = 0;
 8005204:	6083      	str	r3, [r0, #8]
	pman->readOk = false;
 8005206:	7403      	strb	r3, [r0, #16]
	pman->writeOk = true;
 8005208:	2301      	movs	r3, #1
	pman->len = len;
 800520a:	e880 0006 	stmia.w	r0, {r1, r2}
	pman->writeOk = true;
 800520e:	7443      	strb	r3, [r0, #17]
 8005210:	4770      	bx	lr

08005212 <available>:
}

uint32_t available( buffer_manager_t* pman )
{
	if( pman->writeOffset == pman->readOffset )
 8005212:	68c2      	ldr	r2, [r0, #12]
 8005214:	6883      	ldr	r3, [r0, #8]
 8005216:	429a      	cmp	r2, r3
 8005218:	d103      	bne.n	8005222 <available+0x10>
	{
		if(pman->readOk)
 800521a:	7c03      	ldrb	r3, [r0, #16]
 800521c:	b13b      	cbz	r3, 800522e <available+0x1c>
		{
			return pman->len;
 800521e:	6840      	ldr	r0, [r0, #4]
 8005220:	4770      	bx	lr
			return 0;
		}
	}
	else if( pman->writeOffset > pman->readOffset )
	{
		return ((pman->writeOffset) - (pman->readOffset));
 8005222:	bf8f      	iteee	hi
 8005224:	1ad0      	subhi	r0, r2, r3
	}
	else
	{
		return ((pman->len - pman->readOffset) + (pman->writeOffset));
 8005226:	6840      	ldrls	r0, [r0, #4]
 8005228:	1880      	addls	r0, r0, r2
 800522a:	1ac0      	subls	r0, r0, r3
 800522c:	4770      	bx	lr
			return 0;
 800522e:	4618      	mov	r0, r3
	}
}
 8005230:	4770      	bx	lr

08005232 <insert>:

void insert( buffer_manager_t* pman, uint8_t c )
{
	if( pman->writeOk )
 8005232:	7c43      	ldrb	r3, [r0, #17]
 8005234:	b193      	cbz	r3, 800525c <insert+0x2a>
	{
		*(pman->pbuff + pman->writeOffset) = c;
 8005236:	68c3      	ldr	r3, [r0, #12]
 8005238:	6802      	ldr	r2, [r0, #0]
 800523a:	54d1      	strb	r1, [r2, r3]
		pman->writeOffset++;
 800523c:	68c3      	ldr	r3, [r0, #12]
		if(pman->writeOffset >= pman->len)
 800523e:	6842      	ldr	r2, [r0, #4]
		pman->writeOffset++;
 8005240:	3301      	adds	r3, #1
		if(pman->writeOffset >= pman->len)
 8005242:	4293      	cmp	r3, r2
		pman->writeOffset++;
 8005244:	60c3      	str	r3, [r0, #12]
		{
			pman->writeOffset = 0;
 8005246:	bf24      	itt	cs
 8005248:	2300      	movcs	r3, #0
 800524a:	60c3      	strcs	r3, [r0, #12]
		}
		if(pman->writeOffset == pman->readOffset)
 800524c:	6883      	ldr	r3, [r0, #8]
 800524e:	68c2      	ldr	r2, [r0, #12]
 8005250:	429a      	cmp	r2, r3
		{
			pman->writeOk = false;
 8005252:	bf04      	itt	eq
 8005254:	2300      	moveq	r3, #0
 8005256:	7443      	strbeq	r3, [r0, #17]
		}
		pman->readOk = true;
 8005258:	2301      	movs	r3, #1
 800525a:	7403      	strb	r3, [r0, #16]
 800525c:	4770      	bx	lr

0800525e <read>:
	}
}

uint8_t read( buffer_manager_t* pman )
{
 800525e:	4603      	mov	r3, r0
	uint8_t retval = 0x00;
	if(pman->readOk)
 8005260:	7c00      	ldrb	r0, [r0, #16]
 8005262:	b188      	cbz	r0, 8005288 <read+0x2a>
	{
		retval = *(pman->pbuff + pman->readOffset);
 8005264:	689a      	ldr	r2, [r3, #8]
 8005266:	6819      	ldr	r1, [r3, #0]
 8005268:	5c88      	ldrb	r0, [r1, r2]
		pman->readOffset++;
 800526a:	3201      	adds	r2, #1
		if(pman->readOffset >= pman->len)
 800526c:	6859      	ldr	r1, [r3, #4]
		pman->readOffset++;
 800526e:	609a      	str	r2, [r3, #8]
		if(pman->readOffset >= pman->len)
 8005270:	428a      	cmp	r2, r1
		{
			pman->readOffset = 0;
 8005272:	bf24      	itt	cs
 8005274:	2200      	movcs	r2, #0
 8005276:	609a      	strcs	r2, [r3, #8]
		}
		if( pman->readOffset == pman->writeOffset )
 8005278:	68da      	ldr	r2, [r3, #12]
 800527a:	6899      	ldr	r1, [r3, #8]
 800527c:	4291      	cmp	r1, r2
		{
			pman->readOk = false;
 800527e:	bf04      	itt	eq
 8005280:	2200      	moveq	r2, #0
 8005282:	741a      	strbeq	r2, [r3, #16]
		}
		pman->writeOk = true;
 8005284:	2201      	movs	r2, #1
 8005286:	745a      	strb	r2, [r3, #17]
	}
	return retval;
}
 8005288:	4770      	bx	lr

0800528a <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800528a:	b508      	push	{r3, lr}
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800528c:	f000 ff22 	bl	80060d4 <MX_USB_DEVICE_Init>

  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8005290:	2001      	movs	r0, #1
 8005292:	f7fe fcd8 	bl	8003c46 <osDelay>
 8005296:	e7fb      	b.n	8005290 <StartDefaultTask+0x6>

08005298 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8005298:	b530      	push	{r4, r5, lr}
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800529a:	4d07      	ldr	r5, [pc, #28]	; (80052b8 <MX_FREERTOS_Init+0x20>)
void MX_FREERTOS_Init(void) {
 800529c:	b087      	sub	sp, #28
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800529e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80052a0:	ac01      	add	r4, sp, #4
 80052a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80052a4:	682b      	ldr	r3, [r5, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80052a6:	2100      	movs	r1, #0
 80052a8:	a801      	add	r0, sp, #4
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80052aa:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80052ac:	f7fe fcb3 	bl	8003c16 <osThreadCreate>
 80052b0:	4b02      	ldr	r3, [pc, #8]	; (80052bc <MX_FREERTOS_Init+0x24>)
 80052b2:	6018      	str	r0, [r3, #0]
}
 80052b4:	b007      	add	sp, #28
 80052b6:	bd30      	pop	{r4, r5, pc}
 80052b8:	08006834 	.word	0x08006834
 80052bc:	20003f78 	.word	0x20003f78

080052c0 <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80052c0:	4b37      	ldr	r3, [pc, #220]	; (80053a0 <MX_GPIO_Init+0xe0>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_SD_Pin|CS_IMU_Pin|CS_ESP_Pin, GPIO_PIN_SET);
 80052c2:	2138      	movs	r1, #56	; 0x38
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80052c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052c6:	f042 0210 	orr.w	r2, r2, #16
{
 80052ca:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80052cc:	631a      	str	r2, [r3, #48]	; 0x30
{
 80052ce:	b08d      	sub	sp, #52	; 0x34
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80052d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOC, ULED1_Pin|ULED2_Pin, GPIO_PIN_SET);

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = CS_SD_Pin|CS_IMU_Pin|CS_ESP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052d2:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(GPIOE, CS_SD_Pin|CS_IMU_Pin|CS_ESP_Pin, GPIO_PIN_SET);
 80052d4:	4f33      	ldr	r7, [pc, #204]	; (80053a4 <MX_GPIO_Init+0xe4>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80052d6:	2601      	movs	r6, #1
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80052d8:	f002 0210 	and.w	r2, r2, #16
  HAL_GPIO_WritePin(GPIOC, ULED1_Pin|ULED2_Pin, GPIO_PIN_SET);
 80052dc:	4d32      	ldr	r5, [pc, #200]	; (80053a8 <MX_GPIO_Init+0xe8>)
  HAL_GPIO_WritePin(GPIOE, CS_SD_Pin|CS_IMU_Pin|CS_ESP_Pin, GPIO_PIN_SET);
 80052de:	4638      	mov	r0, r7
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80052e0:	9201      	str	r2, [sp, #4]
 80052e2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80052e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052e6:	f042 0204 	orr.w	r2, r2, #4
 80052ea:	631a      	str	r2, [r3, #48]	; 0x30
 80052ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052ee:	f002 0204 	and.w	r2, r2, #4
 80052f2:	9202      	str	r2, [sp, #8]
 80052f4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80052f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052f8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80052fc:	631a      	str	r2, [r3, #48]	; 0x30
 80052fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005300:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8005304:	9203      	str	r2, [sp, #12]
 8005306:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005308:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800530a:	f042 0201 	orr.w	r2, r2, #1
 800530e:	631a      	str	r2, [r3, #48]	; 0x30
 8005310:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005312:	f002 0201 	and.w	r2, r2, #1
 8005316:	9204      	str	r2, [sp, #16]
 8005318:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800531a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800531c:	f042 0202 	orr.w	r2, r2, #2
 8005320:	631a      	str	r2, [r3, #48]	; 0x30
 8005322:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005324:	f002 0202 	and.w	r2, r2, #2
 8005328:	9205      	str	r2, [sp, #20]
 800532a:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800532c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800532e:	f042 0208 	orr.w	r2, r2, #8
 8005332:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOE, CS_SD_Pin|CS_IMU_Pin|CS_ESP_Pin, GPIO_PIN_SET);
 8005334:	2201      	movs	r2, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005338:	f003 0308 	and.w	r3, r3, #8
 800533c:	9306      	str	r3, [sp, #24]
 800533e:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOE, CS_SD_Pin|CS_IMU_Pin|CS_ESP_Pin, GPIO_PIN_SET);
 8005340:	f7fb fb7c 	bl	8000a3c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, ULED1_Pin|ULED2_Pin, GPIO_PIN_SET);
 8005344:	2201      	movs	r2, #1
 8005346:	4628      	mov	r0, r5
 8005348:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800534c:	f7fb fb76 	bl	8000a3c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = CS_SD_Pin|CS_IMU_Pin|CS_ESP_Pin;
 8005350:	2338      	movs	r3, #56	; 0x38
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005352:	a907      	add	r1, sp, #28
 8005354:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = CS_SD_Pin|CS_IMU_Pin|CS_ESP_Pin;
 8005356:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005358:	2303      	movs	r3, #3
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800535a:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800535c:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800535e:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005360:	f7fb fa82 	bl	8000868 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ULED1_Pin|ULED2_Pin;
 8005364:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005368:	a907      	add	r1, sp, #28
 800536a:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800536c:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pin = ULED1_Pin|ULED2_Pin;
 800536e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005370:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005372:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005374:	f7fb fa78 	bl	8000868 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = ESP_DRDY_Pin|SD_CD_Pin|IMU_INT_Pin|IMU_FSYNC_Pin;
 8005378:	f248 03c1 	movw	r3, #32961	; 0x80c1
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800537c:	a907      	add	r1, sp, #28
 800537e:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005380:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pin = ESP_DRDY_Pin|SD_CD_Pin|IMU_INT_Pin|IMU_FSYNC_Pin;
 8005382:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005384:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005386:	f7fb fa6f 	bl	8000868 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin 
                           PDPin PDPin */
  GPIO_InitStruct.Pin = BRK_Pin|LTS_Pin|RTS_Pin|REV_Pin 
 800538a:	233f      	movs	r3, #63	; 0x3f
                          |US1_Pin|US2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800538c:	a907      	add	r1, sp, #28
 800538e:	4807      	ldr	r0, [pc, #28]	; (80053ac <MX_GPIO_Init+0xec>)
  GPIO_InitStruct.Pin = BRK_Pin|LTS_Pin|RTS_Pin|REV_Pin 
 8005390:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005392:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005394:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005396:	f7fb fa67 	bl	8000868 <HAL_GPIO_Init>

}
 800539a:	b00d      	add	sp, #52	; 0x34
 800539c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800539e:	bf00      	nop
 80053a0:	40023800 	.word	0x40023800
 80053a4:	40021000 	.word	0x40021000
 80053a8:	40020800 	.word	0x40020800
 80053ac:	40020c00 	.word	0x40020c00

080053b0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80053b0:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 80053b2:	4816      	ldr	r0, [pc, #88]	; (800540c <MX_I2C1_Init+0x5c>)
  hi2c1.Init.Timing = 0x20404768;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80053b4:	2201      	movs	r2, #1
  hi2c1.Instance = I2C1;
 80053b6:	4b16      	ldr	r3, [pc, #88]	; (8005410 <MX_I2C1_Init+0x60>)
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80053b8:	60c2      	str	r2, [r0, #12]
  hi2c1.Instance = I2C1;
 80053ba:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x20404768;
 80053bc:	f1a3 53fe 	sub.w	r3, r3, #532676608	; 0x1fc00000
 80053c0:	f6a3 4398 	subw	r3, r3, #3224	; 0xc98
 80053c4:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80053c6:	2300      	movs	r3, #0
 80053c8:	6083      	str	r3, [r0, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80053ca:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80053cc:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80053ce:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80053d0:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80053d2:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80053d4:	f7fb fb74 	bl	8000ac0 <HAL_I2C_Init>
 80053d8:	b118      	cbz	r0, 80053e2 <MX_I2C1_Init+0x32>
  {
    _Error_Handler(__FILE__, __LINE__);
 80053da:	214d      	movs	r1, #77	; 0x4d
 80053dc:	480d      	ldr	r0, [pc, #52]	; (8005414 <MX_I2C1_Init+0x64>)
 80053de:	f000 f9a1 	bl	8005724 <_Error_Handler>
  }

    /**Configure Analogue filter 
    */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80053e2:	2100      	movs	r1, #0
 80053e4:	4809      	ldr	r0, [pc, #36]	; (800540c <MX_I2C1_Init+0x5c>)
 80053e6:	f7fb fe35 	bl	8001054 <HAL_I2CEx_ConfigAnalogFilter>
 80053ea:	b118      	cbz	r0, 80053f4 <MX_I2C1_Init+0x44>
  {
    _Error_Handler(__FILE__, __LINE__);
 80053ec:	2154      	movs	r1, #84	; 0x54
 80053ee:	4809      	ldr	r0, [pc, #36]	; (8005414 <MX_I2C1_Init+0x64>)
 80053f0:	f000 f998 	bl	8005724 <_Error_Handler>
  }

    /**Configure Digital filter 
    */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80053f4:	2100      	movs	r1, #0
 80053f6:	4805      	ldr	r0, [pc, #20]	; (800540c <MX_I2C1_Init+0x5c>)
 80053f8:	f7fb fe52 	bl	80010a0 <HAL_I2CEx_ConfigDigitalFilter>
 80053fc:	b128      	cbz	r0, 800540a <MX_I2C1_Init+0x5a>
  {
    _Error_Handler(__FILE__, __LINE__);
 80053fe:	215b      	movs	r1, #91	; 0x5b
 8005400:	4804      	ldr	r0, [pc, #16]	; (8005414 <MX_I2C1_Init+0x64>)
  }

}
 8005402:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8005406:	f000 b98d 	b.w	8005724 <_Error_Handler>
 800540a:	bd08      	pop	{r3, pc}
 800540c:	20003f7c 	.word	0x20003f7c
 8005410:	40005400 	.word	0x40005400
 8005414:	0800686a 	.word	0x0800686a

08005418 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8005418:	b508      	push	{r3, lr}

  hi2c2.Instance = I2C2;
 800541a:	4815      	ldr	r0, [pc, #84]	; (8005470 <MX_I2C2_Init+0x58>)
  hi2c2.Init.Timing = 0x20404768;
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800541c:	2201      	movs	r2, #1
  hi2c2.Init.Timing = 0x20404768;
 800541e:	4b15      	ldr	r3, [pc, #84]	; (8005474 <MX_I2C2_Init+0x5c>)
 8005420:	4915      	ldr	r1, [pc, #84]	; (8005478 <MX_I2C2_Init+0x60>)
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005422:	60c2      	str	r2, [r0, #12]
  hi2c2.Init.Timing = 0x20404768;
 8005424:	e880 000a 	stmia.w	r0, {r1, r3}
  hi2c2.Init.OwnAddress1 = 0;
 8005428:	2300      	movs	r3, #0
 800542a:	6083      	str	r3, [r0, #8]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800542c:	6103      	str	r3, [r0, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800542e:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005430:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005432:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005434:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8005436:	f7fb fb43 	bl	8000ac0 <HAL_I2C_Init>
 800543a:	b118      	cbz	r0, 8005444 <MX_I2C2_Init+0x2c>
  {
    _Error_Handler(__FILE__, __LINE__);
 800543c:	216e      	movs	r1, #110	; 0x6e
 800543e:	480f      	ldr	r0, [pc, #60]	; (800547c <MX_I2C2_Init+0x64>)
 8005440:	f000 f970 	bl	8005724 <_Error_Handler>
  }

    /**Configure Analogue filter 
    */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005444:	2100      	movs	r1, #0
 8005446:	480a      	ldr	r0, [pc, #40]	; (8005470 <MX_I2C2_Init+0x58>)
 8005448:	f7fb fe04 	bl	8001054 <HAL_I2CEx_ConfigAnalogFilter>
 800544c:	b118      	cbz	r0, 8005456 <MX_I2C2_Init+0x3e>
  {
    _Error_Handler(__FILE__, __LINE__);
 800544e:	2175      	movs	r1, #117	; 0x75
 8005450:	480a      	ldr	r0, [pc, #40]	; (800547c <MX_I2C2_Init+0x64>)
 8005452:	f000 f967 	bl	8005724 <_Error_Handler>
  }

    /**Configure Digital filter 
    */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8005456:	2100      	movs	r1, #0
 8005458:	4805      	ldr	r0, [pc, #20]	; (8005470 <MX_I2C2_Init+0x58>)
 800545a:	f7fb fe21 	bl	80010a0 <HAL_I2CEx_ConfigDigitalFilter>
 800545e:	b128      	cbz	r0, 800546c <MX_I2C2_Init+0x54>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005460:	217c      	movs	r1, #124	; 0x7c
 8005462:	4806      	ldr	r0, [pc, #24]	; (800547c <MX_I2C2_Init+0x64>)
  }

}
 8005464:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8005468:	f000 b95c 	b.w	8005724 <_Error_Handler>
 800546c:	bd08      	pop	{r3, pc}
 800546e:	bf00      	nop
 8005470:	20003fc8 	.word	0x20003fc8
 8005474:	20404768 	.word	0x20404768
 8005478:	40005800 	.word	0x40005800
 800547c:	0800686a 	.word	0x0800686a

08005480 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(i2cHandle->Instance==I2C1)
 8005480:	6803      	ldr	r3, [r0, #0]
 8005482:	4a2e      	ldr	r2, [pc, #184]	; (800553c <HAL_I2C_MspInit+0xbc>)
 8005484:	4293      	cmp	r3, r2
{
 8005486:	b500      	push	{lr}
 8005488:	b089      	sub	sp, #36	; 0x24
  if(i2cHandle->Instance==I2C1)
 800548a:	d12b      	bne.n	80054e4 <HAL_I2C_MspInit+0x64>
  
    /**I2C1 GPIO Configuration    
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800548c:	f44f 73c0 	mov.w	r3, #384	; 0x180
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005490:	a903      	add	r1, sp, #12
 8005492:	482b      	ldr	r0, [pc, #172]	; (8005540 <HAL_I2C_MspInit+0xc0>)
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8005494:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005496:	2312      	movs	r3, #18
 8005498:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800549a:	2301      	movs	r3, #1
 800549c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800549e:	2303      	movs	r3, #3
 80054a0:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80054a2:	2304      	movs	r3, #4
 80054a4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054a6:	f7fb f9df 	bl	8000868 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80054aa:	4b26      	ldr	r3, [pc, #152]	; (8005544 <HAL_I2C_MspInit+0xc4>)

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80054ac:	2105      	movs	r1, #5
 80054ae:	201f      	movs	r0, #31
    __HAL_RCC_I2C1_CLK_ENABLE();
 80054b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054b2:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80054b6:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80054b8:	2200      	movs	r2, #0
    __HAL_RCC_I2C1_CLK_ENABLE();
 80054ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054c0:	9301      	str	r3, [sp, #4]
 80054c2:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80054c4:	f7fb f886 	bl	80005d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80054c8:	201f      	movs	r0, #31
 80054ca:	f7fb f8bb 	bl	8000644 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 80054ce:	2020      	movs	r0, #32
 80054d0:	2200      	movs	r2, #0
 80054d2:	2105      	movs	r1, #5
 80054d4:	f7fb f87e 	bl	80005d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80054d8:	2020      	movs	r0, #32

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 5, 0);
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80054da:	f7fb f8b3 	bl	8000644 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80054de:	b009      	add	sp, #36	; 0x24
 80054e0:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(i2cHandle->Instance==I2C2)
 80054e4:	4a18      	ldr	r2, [pc, #96]	; (8005548 <HAL_I2C_MspInit+0xc8>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d1f9      	bne.n	80054de <HAL_I2C_MspInit+0x5e>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80054ea:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054ee:	a903      	add	r1, sp, #12
 80054f0:	4813      	ldr	r0, [pc, #76]	; (8005540 <HAL_I2C_MspInit+0xc0>)
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80054f2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80054f4:	2312      	movs	r3, #18
 80054f6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80054f8:	2301      	movs	r3, #1
 80054fa:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054fc:	2303      	movs	r3, #3
 80054fe:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8005500:	2304      	movs	r3, #4
 8005502:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005504:	f7fb f9b0 	bl	8000868 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005508:	4b0e      	ldr	r3, [pc, #56]	; (8005544 <HAL_I2C_MspInit+0xc4>)
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 800550a:	2105      	movs	r1, #5
 800550c:	2021      	movs	r0, #33	; 0x21
    __HAL_RCC_I2C2_CLK_ENABLE();
 800550e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005510:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8005514:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8005516:	2200      	movs	r2, #0
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800551a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800551e:	9302      	str	r3, [sp, #8]
 8005520:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8005522:	f7fb f857 	bl	80005d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8005526:	2021      	movs	r0, #33	; 0x21
 8005528:	f7fb f88c 	bl	8000644 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 5, 0);
 800552c:	2022      	movs	r0, #34	; 0x22
 800552e:	2200      	movs	r2, #0
 8005530:	2105      	movs	r1, #5
 8005532:	f7fb f84f 	bl	80005d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8005536:	2022      	movs	r0, #34	; 0x22
 8005538:	e7cf      	b.n	80054da <HAL_I2C_MspInit+0x5a>
 800553a:	bf00      	nop
 800553c:	40005400 	.word	0x40005400
 8005540:	40020400 	.word	0x40020400
 8005544:	40023800 	.word	0x40023800
 8005548:	40005800 	.word	0x40005800

0800554c <Buffer_Task>:
/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/

TaskHandle_t Buffer_Task_Handle = NULL;
void Buffer_Task(void* pvParameters )
{
 800554c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	for(;;)
	{
		// Transfer from one buffer to another, and transmit as needed

		while( available(&rxman) != 0 )
 8005550:	4f1e      	ldr	r7, [pc, #120]	; (80055cc <Buffer_Task+0x80>)
{
 8005552:	b0c0      	sub	sp, #256	; 0x100
		{
			uint8_t c = read(&rxman);
			insert(&txman, c);
 8005554:	4d1e      	ldr	r5, [pc, #120]	; (80055d0 <Buffer_Task+0x84>)



				CDC_Transmit_FS(sendbuff, (uint16_t)num2send);

				USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8005556:	f8df 807c 	ldr.w	r8, [pc, #124]	; 80055d4 <Buffer_Task+0x88>
		while( available(&rxman) != 0 )
 800555a:	4638      	mov	r0, r7
 800555c:	f7ff fe59 	bl	8005212 <available>
 8005560:	4606      	mov	r6, r0
 8005562:	bb10      	cbnz	r0, 80055aa <Buffer_Task+0x5e>
		if( available(&txman) != 0)
 8005564:	481a      	ldr	r0, [pc, #104]	; (80055d0 <Buffer_Task+0x84>)
 8005566:	f7ff fe54 	bl	8005212 <available>
 800556a:	2800      	cmp	r0, #0
 800556c:	d0f5      	beq.n	800555a <Buffer_Task+0xe>
			if( txman.writeOffset == txman.readOffset)
 800556e:	68eb      	ldr	r3, [r5, #12]
 8005570:	68a9      	ldr	r1, [r5, #8]
 8005572:	428b      	cmp	r3, r1
 8005574:	d121      	bne.n	80055ba <Buffer_Task+0x6e>
				if(txman.readOk)
 8005576:	7c2a      	ldrb	r2, [r5, #16]
 8005578:	2a00      	cmp	r2, #0
 800557a:	d0ee      	beq.n	800555a <Buffer_Task+0xe>
					num2send = txman.len - txman.readOffset; // Just send all the parts
 800557c:	686c      	ldr	r4, [r5, #4]
 800557e:	1ae4      	subs	r4, r4, r3
			if( num2send != 0)
 8005580:	2c00      	cmp	r4, #0
 8005582:	d0ea      	beq.n	800555a <Buffer_Task+0xe>
					sendbuff[indi] = read(&txman);
 8005584:	4628      	mov	r0, r5
 8005586:	f7ff fe6a 	bl	800525e <read>
 800558a:	f80d 0006 	strb.w	r0, [sp, r6]
				for(uint32_t indi = 0; indi < num2send; indi++)
 800558e:	3601      	adds	r6, #1
 8005590:	42b4      	cmp	r4, r6
 8005592:	d1f7      	bne.n	8005584 <Buffer_Task+0x38>
				CDC_Transmit_FS(sendbuff, (uint16_t)num2send);
 8005594:	b2a1      	uxth	r1, r4
 8005596:	4668      	mov	r0, sp
 8005598:	f000 fe1c 	bl	80061d4 <CDC_Transmit_FS>
				USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800559c:	f8d8 2290 	ldr.w	r2, [r8, #656]	; 0x290
				while(hcdc->TxState != 0 )
 80055a0:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d1fb      	bne.n	80055a0 <Buffer_Task+0x54>
 80055a8:	e7d7      	b.n	800555a <Buffer_Task+0xe>
			uint8_t c = read(&rxman);
 80055aa:	4638      	mov	r0, r7
 80055ac:	f7ff fe57 	bl	800525e <read>
			insert(&txman, c);
 80055b0:	4601      	mov	r1, r0
 80055b2:	4628      	mov	r0, r5
 80055b4:	f7ff fe3d 	bl	8005232 <insert>
 80055b8:	e7cf      	b.n	800555a <Buffer_Task+0xe>
			else if( txman.writeOffset > txman.readOffset )
 80055ba:	d904      	bls.n	80055c6 <Buffer_Task+0x7a>
				num2send = available(&txman);
 80055bc:	4628      	mov	r0, r5
 80055be:	f7ff fe28 	bl	8005212 <available>
 80055c2:	4604      	mov	r4, r0
 80055c4:	e7dc      	b.n	8005580 <Buffer_Task+0x34>
				num2send = txman.len - txman.readOffset;
 80055c6:	686c      	ldr	r4, [r5, #4]
 80055c8:	1a64      	subs	r4, r4, r1
 80055ca:	e7d9      	b.n	8005580 <Buffer_Task+0x34>
 80055cc:	20004014 	.word	0x20004014
 80055d0:	20004228 	.word	0x20004228
 80055d4:	2000467c 	.word	0x2000467c

080055d8 <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 80055d8:	4b30      	ldr	r3, [pc, #192]	; (800569c <SystemClock_Config+0xc4>)
 80055da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055dc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
{
 80055e0:	b530      	push	{r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 80055e2:	641a      	str	r2, [r3, #64]	; 0x40
{
 80055e4:	b0b9      	sub	sp, #228	; 0xe4
  __HAL_RCC_PWR_CLK_ENABLE();
 80055e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80055e8:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 12;
  RCC_OscInitStruct.PLL.PLLN = 216;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80055ea:	a807      	add	r0, sp, #28
  __HAL_RCC_PWR_CLK_ENABLE();
 80055ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055f0:	9300      	str	r3, [sp, #0]
 80055f2:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80055f4:	4b2a      	ldr	r3, [pc, #168]	; (80056a0 <SystemClock_Config+0xc8>)
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80055fc:	601a      	str	r2, [r3, #0]
 80055fe:	681b      	ldr	r3, [r3, #0]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005600:	940d      	str	r4, [sp, #52]	; 0x34
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005602:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005606:	9411      	str	r4, [sp, #68]	; 0x44
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005608:	9301      	str	r3, [sp, #4]
 800560a:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800560c:	2301      	movs	r3, #1
 800560e:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005610:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005614:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005616:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800561a:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 12;
 800561c:	230c      	movs	r3, #12
 800561e:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8005620:	23d8      	movs	r3, #216	; 0xd8
 8005622:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8005624:	2309      	movs	r3, #9
 8005626:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005628:	f7fc fc4a 	bl	8001ec0 <HAL_RCC_OscConfig>
 800562c:	b100      	cbz	r0, 8005630 <SystemClock_Config+0x58>
 800562e:	e7fe      	b.n	800562e <SystemClock_Config+0x56>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Activate the Over-Drive mode 
    */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8005630:	f7fc fa88 	bl	8001b44 <HAL_PWREx_EnableOverDrive>
 8005634:	b100      	cbz	r0, 8005638 <SystemClock_Config+0x60>
 8005636:	e7fe      	b.n	8005636 <SystemClock_Config+0x5e>
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005638:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800563c:	250f      	movs	r5, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800563e:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8005640:	2107      	movs	r1, #7
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005642:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005644:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8005648:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800564a:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800564c:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800564e:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8005650:	f7fc fdf8 	bl	8002244 <HAL_RCC_ClockConfig>
 8005654:	b100      	cbz	r0, 8005658 <SystemClock_Config+0x80>
 8005656:	e7fe      	b.n	8005656 <SystemClock_Config+0x7e>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_UART4
 8005658:	4b12      	ldr	r3, [pc, #72]	; (80056a4 <SystemClock_Config+0xcc>)
                              |RCC_PERIPHCLK_UART5|RCC_PERIPHCLK_UART8
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800565a:	9025      	str	r0, [sp, #148]	; 0x94
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800565c:	9028      	str	r0, [sp, #160]	; 0xa0
  PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 800565e:	9029      	str	r0, [sp, #164]	; 0xa4
  PeriphClkInitStruct.Uart8ClockSelection = RCC_UART8CLKSOURCE_PCLK1;
 8005660:	902c      	str	r0, [sp, #176]	; 0xb0
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8005662:	902d      	str	r0, [sp, #180]	; 0xb4
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8005664:	902e      	str	r0, [sp, #184]	; 0xb8
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8005666:	9033      	str	r0, [sp, #204]	; 0xcc
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005668:	a814      	add	r0, sp, #80	; 0x50
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_UART4
 800566a:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800566c:	f7fc fecc 	bl	8002408 <HAL_RCCEx_PeriphCLKConfig>
 8005670:	4604      	mov	r4, r0
 8005672:	b100      	cbz	r0, 8005676 <SystemClock_Config+0x9e>
 8005674:	e7fe      	b.n	8005674 <SystemClock_Config+0x9c>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8005676:	f7fc fe83 	bl	8002380 <HAL_RCC_GetHCLKFreq>
 800567a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800567e:	fbb0 f0f3 	udiv	r0, r0, r3
 8005682:	f7fa ffeb 	bl	800065c <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8005686:	2004      	movs	r0, #4
 8005688:	f7fa fffe 	bl	8000688 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 800568c:	4622      	mov	r2, r4
 800568e:	4629      	mov	r1, r5
 8005690:	f04f 30ff 	mov.w	r0, #4294967295
 8005694:	f7fa ff9e 	bl	80005d4 <HAL_NVIC_SetPriority>
}
 8005698:	b039      	add	sp, #228	; 0xe4
 800569a:	bd30      	pop	{r4, r5, pc}
 800569c:	40023800 	.word	0x40023800
 80056a0:	40007000 	.word	0x40007000
 80056a4:	0020e640 	.word	0x0020e640

080056a8 <main>:
{
 80056a8:	b507      	push	{r0, r1, r2, lr}
  HAL_Init();
 80056aa:	f7fa ff51 	bl	8000550 <HAL_Init>
  SystemClock_Config();
 80056ae:	f7ff ff93 	bl	80055d8 <SystemClock_Config>
  MX_GPIO_Init();
 80056b2:	f7ff fe05 	bl	80052c0 <MX_GPIO_Init>
  MX_UART4_Init();
 80056b6:	f000 fbd7 	bl	8005e68 <MX_UART4_Init>
  MX_UART5_Init();
 80056ba:	f000 fbf7 	bl	8005eac <MX_UART5_Init>
  MX_UART8_Init();
 80056be:	f000 fc17 	bl	8005ef0 <MX_UART8_Init>
  MX_SPI1_Init();
 80056c2:	f000 f8c3 	bl	800584c <MX_SPI1_Init>
  MX_SPI6_Init();
 80056c6:	f000 f96f 	bl	80059a8 <MX_SPI6_Init>
  MX_SPI3_Init();
 80056ca:	f000 f915 	bl	80058f8 <MX_SPI3_Init>
  MX_SPI4_Init();
 80056ce:	f000 f93f 	bl	8005950 <MX_SPI4_Init>
  MX_QUADSPI_Init();
 80056d2:	f000 f829 	bl	8005728 <MX_QUADSPI_Init>
  MX_I2C1_Init();
 80056d6:	f7ff fe6b 	bl	80053b0 <MX_I2C1_Init>
  MX_I2C2_Init();
 80056da:	f7ff fe9d 	bl	8005418 <MX_I2C2_Init>
  MX_SPI2_Init();
 80056de:	f000 f8e1 	bl	80058a4 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80056e2:	f000 fc27 	bl	8005f34 <MX_USART1_UART_Init>
  xTaskCreate(Buffer_Task,
 80056e6:	4b07      	ldr	r3, [pc, #28]	; (8005704 <main+0x5c>)
 80056e8:	2280      	movs	r2, #128	; 0x80
 80056ea:	4907      	ldr	r1, [pc, #28]	; (8005708 <main+0x60>)
 80056ec:	9301      	str	r3, [sp, #4]
 80056ee:	2303      	movs	r3, #3
 80056f0:	4806      	ldr	r0, [pc, #24]	; (800570c <main+0x64>)
 80056f2:	9300      	str	r3, [sp, #0]
 80056f4:	2300      	movs	r3, #0
 80056f6:	f7fe fd95 	bl	8004224 <xTaskCreate>
  MX_FREERTOS_Init();
 80056fa:	f7ff fdcd 	bl	8005298 <MX_FREERTOS_Init>
  osKernelStart();
 80056fe:	f7fe fa85 	bl	8003c0c <osKernelStart>
 8005702:	e7fe      	b.n	8005702 <main+0x5a>
 8005704:	20003f48 	.word	0x20003f48
 8005708:	08006877 	.word	0x08006877
 800570c:	0800554d 	.word	0x0800554d

08005710 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8005710:	6802      	ldr	r2, [r0, #0]
 8005712:	4b03      	ldr	r3, [pc, #12]	; (8005720 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8005714:	429a      	cmp	r2, r3
 8005716:	d101      	bne.n	800571c <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8005718:	f7fa bf26 	b.w	8000568 <HAL_IncTick>
 800571c:	4770      	bx	lr
 800571e:	bf00      	nop
 8005720:	40001400 	.word	0x40001400

08005724 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8005724:	e7fe      	b.n	8005724 <_Error_Handler>
	...

08005728 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8005728:	b508      	push	{r3, lr}

  hqspi.Instance = QUADSPI;
 800572a:	480b      	ldr	r0, [pc, #44]	; (8005758 <MX_QUADSPI_Init+0x30>)
  hqspi.Init.ClockPrescaler = 64;
 800572c:	2240      	movs	r2, #64	; 0x40
  hqspi.Instance = QUADSPI;
 800572e:	4b0b      	ldr	r3, [pc, #44]	; (800575c <MX_QUADSPI_Init+0x34>)
  hqspi.Init.FifoThreshold = 1;
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8005730:	2100      	movs	r1, #0
  hqspi.Init.ClockPrescaler = 64;
 8005732:	6042      	str	r2, [r0, #4]
  hqspi.Instance = QUADSPI;
 8005734:	6003      	str	r3, [r0, #0]
  hqspi.Init.FifoThreshold = 1;
 8005736:	2301      	movs	r3, #1
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8005738:	60c1      	str	r1, [r0, #12]
  hqspi.Init.FifoThreshold = 1;
 800573a:	6083      	str	r3, [r0, #8]
  hqspi.Init.FlashSize = 1;
 800573c:	6103      	str	r3, [r0, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800573e:	6141      	str	r1, [r0, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_3;
 8005740:	6183      	str	r3, [r0, #24]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_ENABLE;
 8005742:	6202      	str	r2, [r0, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8005744:	f7fc fa5c 	bl	8001c00 <HAL_QSPI_Init>
 8005748:	b128      	cbz	r0, 8005756 <MX_QUADSPI_Init+0x2e>
  {
    _Error_Handler(__FILE__, __LINE__);
 800574a:	214b      	movs	r1, #75	; 0x4b
 800574c:	4804      	ldr	r0, [pc, #16]	; (8005760 <MX_QUADSPI_Init+0x38>)
  }

}
 800574e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8005752:	f7ff bfe7 	b.w	8005724 <_Error_Handler>
 8005756:	bd08      	pop	{r3, pc}
 8005758:	2000423c 	.word	0x2000423c
 800575c:	a0001000 	.word	0xa0001000
 8005760:	0800687e 	.word	0x0800687e

08005764 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(qspiHandle->Instance==QUADSPI)
 8005764:	6802      	ldr	r2, [r0, #0]
 8005766:	4b33      	ldr	r3, [pc, #204]	; (8005834 <HAL_QSPI_MspInit+0xd0>)
 8005768:	429a      	cmp	r2, r3
{
 800576a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800576e:	b086      	sub	sp, #24
  if(qspiHandle->Instance==QUADSPI)
 8005770:	d15c      	bne.n	800582c <HAL_QSPI_MspInit+0xc8>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8005772:	4b31      	ldr	r3, [pc, #196]	; (8005838 <HAL_QSPI_MspInit+0xd4>)
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PC11     ------> QUADSPI_BK2_NCS
    PB6     ------> QUADSPI_BK1_NCS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005774:	f04f 0804 	mov.w	r8, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005778:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800577a:	2602      	movs	r6, #2
    __HAL_RCC_QSPI_CLK_ENABLE();
 800577c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800577e:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8005780:	2709      	movs	r7, #9
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005782:	eb0d 0108 	add.w	r1, sp, r8
    __HAL_RCC_QSPI_CLK_ENABLE();
 8005786:	f042 0202 	orr.w	r2, r2, #2
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800578a:	482c      	ldr	r0, [pc, #176]	; (800583c <HAL_QSPI_MspInit+0xd8>)
    __HAL_RCC_QSPI_CLK_ENABLE();
 800578c:	639a      	str	r2, [r3, #56]	; 0x38
 800578e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005790:	f8cd 8004 	str.w	r8, [sp, #4]
    __HAL_RCC_QSPI_CLK_ENABLE();
 8005794:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005798:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800579a:	9403      	str	r4, [sp, #12]
    __HAL_RCC_QSPI_CLK_ENABLE();
 800579c:	9300      	str	r3, [sp, #0]
 800579e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057a0:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80057a2:	9705      	str	r7, [sp, #20]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80057a4:	f7fb f860 	bl	8000868 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80057a8:	eb0d 0108 	add.w	r1, sp, r8
 80057ac:	4824      	ldr	r0, [pc, #144]	; (8005840 <HAL_QSPI_MspInit+0xdc>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80057ae:	f8cd 8004 	str.w	r8, [sp, #4]

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80057b2:	f04f 080a 	mov.w	r8, #10
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057b6:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057b8:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057ba:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80057bc:	9705      	str	r7, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80057be:	f7fb f853 	bl	8000868 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80057c2:	f44f 63f0 	mov.w	r3, #1920	; 0x780
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80057c6:	a901      	add	r1, sp, #4
 80057c8:	481c      	ldr	r0, [pc, #112]	; (800583c <HAL_QSPI_MspInit+0xd8>)
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80057ca:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057cc:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057ce:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057d0:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80057d2:	f8cd 8014 	str.w	r8, [sp, #20]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80057d6:	f7fb f847 	bl	8000868 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80057da:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80057de:	a901      	add	r1, sp, #4
 80057e0:	4818      	ldr	r0, [pc, #96]	; (8005844 <HAL_QSPI_MspInit+0xe0>)
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80057e2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057e4:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057e6:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057e8:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80057ea:	9705      	str	r7, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80057ec:	f7fb f83c 	bl	8000868 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80057f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80057f4:	a901      	add	r1, sp, #4
 80057f6:	4814      	ldr	r0, [pc, #80]	; (8005848 <HAL_QSPI_MspInit+0xe4>)
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80057f8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057fa:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057fc:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057fe:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8005800:	9705      	str	r7, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005802:	f7fb f831 	bl	8000868 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005806:	2340      	movs	r3, #64	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005808:	a901      	add	r1, sp, #4
 800580a:	480d      	ldr	r0, [pc, #52]	; (8005840 <HAL_QSPI_MspInit+0xdc>)
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800580c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800580e:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005810:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005812:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8005814:	f8cd 8014 	str.w	r8, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005818:	f7fb f826 	bl	8000868 <HAL_GPIO_Init>

    /* QUADSPI interrupt Init */
    HAL_NVIC_SetPriority(QUADSPI_IRQn, 5, 0);
 800581c:	205c      	movs	r0, #92	; 0x5c
 800581e:	4622      	mov	r2, r4
 8005820:	2105      	movs	r1, #5
 8005822:	f7fa fed7 	bl	80005d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8005826:	205c      	movs	r0, #92	; 0x5c
 8005828:	f7fa ff0c 	bl	8000644 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 800582c:	b006      	add	sp, #24
 800582e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005832:	bf00      	nop
 8005834:	a0001000 	.word	0xa0001000
 8005838:	40023800 	.word	0x40023800
 800583c:	40021000 	.word	0x40021000
 8005840:	40020400 	.word	0x40020400
 8005844:	40020c00 	.word	0x40020c00
 8005848:	40020800 	.word	0x40020800

0800584c <MX_SPI1_Init>:

/* SPI1 init function */
void MX_SPI1_Init(void)
{

  hspi1.Instance = SPI1;
 800584c:	4812      	ldr	r0, [pc, #72]	; (8005898 <MX_SPI1_Init+0x4c>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800584e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005852:	4912      	ldr	r1, [pc, #72]	; (800589c <MX_SPI1_Init+0x50>)
{
 8005854:	b508      	push	{r3, lr}
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005856:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8005858:	2202      	movs	r2, #2
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800585a:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800585e:	6102      	str	r2, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8005860:	2201      	movs	r2, #1
 8005862:	6142      	str	r2, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005864:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005868:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800586a:	2210      	movs	r2, #16
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800586c:	e880 000a 	stmia.w	r0, {r1, r3}
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8005870:	61c2      	str	r2, [r0, #28]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005872:	2300      	movs	r3, #0
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
 8005874:	2207      	movs	r2, #7
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005876:	6083      	str	r3, [r0, #8]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005878:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800587a:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800587c:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800587e:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005880:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8005882:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005884:	f7fd f84e 	bl	8002924 <HAL_SPI_Init>
 8005888:	b128      	cbz	r0, 8005896 <MX_SPI1_Init+0x4a>
  {
    _Error_Handler(__FILE__, __LINE__);
 800588a:	2155      	movs	r1, #85	; 0x55
 800588c:	4804      	ldr	r0, [pc, #16]	; (80058a0 <MX_SPI1_Init+0x54>)
  }

}
 800588e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8005892:	f7ff bf47 	b.w	8005724 <_Error_Handler>
 8005896:	bd08      	pop	{r3, pc}
 8005898:	20004418 	.word	0x20004418
 800589c:	40013000 	.word	0x40013000
 80058a0:	0800688f 	.word	0x0800688f

080058a4 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80058a4:	b508      	push	{r3, lr}

  hspi2.Instance = SPI2;
 80058a6:	4811      	ldr	r0, [pc, #68]	; (80058ec <MX_SPI2_Init+0x48>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80058a8:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80058ac:	f44f 7240 	mov.w	r2, #768	; 0x300
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80058b0:	490f      	ldr	r1, [pc, #60]	; (80058f0 <MX_SPI2_Init+0x4c>)
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80058b2:	60c2      	str	r2, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80058b4:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80058b8:	e880 000a 	stmia.w	r0, {r1, r3}
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80058bc:	2300      	movs	r3, #0
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80058be:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi2.Init.CRCPolynomial = 7;
 80058c0:	2207      	movs	r2, #7
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80058c2:	6083      	str	r3, [r0, #8]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80058c4:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80058c6:	6143      	str	r3, [r0, #20]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80058c8:	61c3      	str	r3, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80058ca:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80058cc:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058ce:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80058d0:	6303      	str	r3, [r0, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80058d2:	2308      	movs	r3, #8
  hspi2.Init.CRCPolynomial = 7;
 80058d4:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80058d6:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80058d8:	f7fd f824 	bl	8002924 <HAL_SPI_Init>
 80058dc:	b128      	cbz	r0, 80058ea <MX_SPI2_Init+0x46>
  {
    _Error_Handler(__FILE__, __LINE__);
 80058de:	216d      	movs	r1, #109	; 0x6d
 80058e0:	4804      	ldr	r0, [pc, #16]	; (80058f4 <MX_SPI2_Init+0x50>)
  }

}
 80058e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 80058e6:	f7ff bf1d 	b.w	8005724 <_Error_Handler>
 80058ea:	bd08      	pop	{r3, pc}
 80058ec:	20004288 	.word	0x20004288
 80058f0:	40003800 	.word	0x40003800
 80058f4:	0800688f 	.word	0x0800688f

080058f8 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{

  hspi3.Instance = SPI3;
 80058f8:	4812      	ldr	r0, [pc, #72]	; (8005944 <MX_SPI3_Init+0x4c>)
  hspi3.Init.Mode = SPI_MODE_MASTER;
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80058fa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80058fe:	4912      	ldr	r1, [pc, #72]	; (8005948 <MX_SPI3_Init+0x50>)
{
 8005900:	b508      	push	{r3, lr}
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8005902:	60c2      	str	r2, [r0, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8005904:	2202      	movs	r2, #2
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8005906:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800590a:	6102      	str	r2, [r0, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800590c:	2201      	movs	r2, #1
 800590e:	6142      	str	r2, [r0, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8005910:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005914:	6182      	str	r2, [r0, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8005916:	2210      	movs	r2, #16
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8005918:	e880 000a 	stmia.w	r0, {r1, r3}
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800591c:	61c2      	str	r2, [r0, #28]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800591e:	2300      	movs	r3, #0
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi3.Init.CRCPolynomial = 7;
 8005920:	2207      	movs	r2, #7
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8005922:	6083      	str	r3, [r0, #8]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005924:	6203      	str	r3, [r0, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8005926:	6243      	str	r3, [r0, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005928:	6283      	str	r3, [r0, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800592a:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800592c:	6303      	str	r3, [r0, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800592e:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8005930:	f7fc fff8 	bl	8002924 <HAL_SPI_Init>
 8005934:	b128      	cbz	r0, 8005942 <MX_SPI3_Init+0x4a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005936:	2185      	movs	r1, #133	; 0x85
 8005938:	4804      	ldr	r0, [pc, #16]	; (800594c <MX_SPI3_Init+0x54>)
  }

}
 800593a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 800593e:	f7ff bef1 	b.w	8005724 <_Error_Handler>
 8005942:	bd08      	pop	{r3, pc}
 8005944:	20004350 	.word	0x20004350
 8005948:	40003c00 	.word	0x40003c00
 800594c:	0800688f 	.word	0x0800688f

08005950 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{

  hspi4.Instance = SPI4;
 8005950:	4812      	ldr	r0, [pc, #72]	; (800599c <MX_SPI4_Init+0x4c>)
  hspi4.Init.Mode = SPI_MODE_MASTER;
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8005952:	f44f 62e0 	mov.w	r2, #1792	; 0x700
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8005956:	4912      	ldr	r1, [pc, #72]	; (80059a0 <MX_SPI4_Init+0x50>)
{
 8005958:	b508      	push	{r3, lr}
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 800595a:	60c2      	str	r2, [r0, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800595c:	2202      	movs	r2, #2
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800595e:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8005962:	6102      	str	r2, [r0, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8005964:	2201      	movs	r2, #1
 8005966:	6142      	str	r2, [r0, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8005968:	f44f 7200 	mov.w	r2, #512	; 0x200
 800596c:	6182      	str	r2, [r0, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800596e:	2218      	movs	r2, #24
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8005970:	e880 000a 	stmia.w	r0, {r1, r3}
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8005974:	61c2      	str	r2, [r0, #28]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8005976:	2300      	movs	r3, #0
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi4.Init.CRCPolynomial = 7;
 8005978:	2207      	movs	r2, #7
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800597a:	6083      	str	r3, [r0, #8]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800597c:	6203      	str	r3, [r0, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800597e:	6243      	str	r3, [r0, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005980:	6283      	str	r3, [r0, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8005982:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005984:	6303      	str	r3, [r0, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8005986:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8005988:	f7fc ffcc 	bl	8002924 <HAL_SPI_Init>
 800598c:	b128      	cbz	r0, 800599a <MX_SPI4_Init+0x4a>
  {
    _Error_Handler(__FILE__, __LINE__);
 800598e:	219d      	movs	r1, #157	; 0x9d
 8005990:	4804      	ldr	r0, [pc, #16]	; (80059a4 <MX_SPI4_Init+0x54>)
  }

}
 8005992:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8005996:	f7ff bec5 	b.w	8005724 <_Error_Handler>
 800599a:	bd08      	pop	{r3, pc}
 800599c:	200043b4 	.word	0x200043b4
 80059a0:	40013400 	.word	0x40013400
 80059a4:	0800688f 	.word	0x0800688f

080059a8 <MX_SPI6_Init>:
/* SPI6 init function */
void MX_SPI6_Init(void)
{

  hspi6.Instance = SPI6;
 80059a8:	4812      	ldr	r0, [pc, #72]	; (80059f4 <MX_SPI6_Init+0x4c>)
  hspi6.Init.Mode = SPI_MODE_MASTER;
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
  hspi6.Init.DataSize = SPI_DATASIZE_8BIT;
 80059aa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
  hspi6.Init.Mode = SPI_MODE_MASTER;
 80059ae:	4912      	ldr	r1, [pc, #72]	; (80059f8 <MX_SPI6_Init+0x50>)
{
 80059b0:	b508      	push	{r3, lr}
  hspi6.Init.DataSize = SPI_DATASIZE_8BIT;
 80059b2:	60c2      	str	r2, [r0, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80059b4:	2202      	movs	r2, #2
  hspi6.Init.Mode = SPI_MODE_MASTER;
 80059b6:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi6.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80059ba:	6102      	str	r2, [r0, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_2EDGE;
 80059bc:	2201      	movs	r2, #1
 80059be:	6142      	str	r2, [r0, #20]
  hspi6.Init.NSS = SPI_NSS_SOFT;
 80059c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059c4:	6182      	str	r2, [r0, #24]
  hspi6.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80059c6:	2218      	movs	r2, #24
  hspi6.Init.Mode = SPI_MODE_MASTER;
 80059c8:	e880 000a 	stmia.w	r0, {r1, r3}
  hspi6.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80059cc:	61c2      	str	r2, [r0, #28]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
 80059ce:	2300      	movs	r3, #0
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi6.Init.CRCPolynomial = 7;
 80059d0:	2207      	movs	r2, #7
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
 80059d2:	6083      	str	r3, [r0, #8]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80059d4:	6203      	str	r3, [r0, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 80059d6:	6243      	str	r3, [r0, #36]	; 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059d8:	6283      	str	r3, [r0, #40]	; 0x28
  hspi6.Init.CRCPolynomial = 7;
 80059da:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi6.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80059dc:	6303      	str	r3, [r0, #48]	; 0x30
  hspi6.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80059de:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
 80059e0:	f7fc ffa0 	bl	8002924 <HAL_SPI_Init>
 80059e4:	b128      	cbz	r0, 80059f2 <MX_SPI6_Init+0x4a>
  {
    _Error_Handler(__FILE__, __LINE__);
 80059e6:	21b5      	movs	r1, #181	; 0xb5
 80059e8:	4804      	ldr	r0, [pc, #16]	; (80059fc <MX_SPI6_Init+0x54>)
  }

}
 80059ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 80059ee:	f7ff be99 	b.w	8005724 <_Error_Handler>
 80059f2:	bd08      	pop	{r3, pc}
 80059f4:	200042ec 	.word	0x200042ec
 80059f8:	40015400 	.word	0x40015400
 80059fc:	0800688f 	.word	0x0800688f

08005a00 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(spiHandle->Instance==SPI1)
 8005a00:	6803      	ldr	r3, [r0, #0]
 8005a02:	4a72      	ldr	r2, [pc, #456]	; (8005bcc <HAL_SPI_MspInit+0x1cc>)
 8005a04:	4293      	cmp	r3, r2
{
 8005a06:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a08:	b08b      	sub	sp, #44	; 0x2c
  if(spiHandle->Instance==SPI1)
 8005a0a:	d135      	bne.n	8005a78 <HAL_SPI_MspInit+0x78>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005a0c:	4b70      	ldr	r3, [pc, #448]	; (8005bd0 <HAL_SPI_MspInit+0x1d0>)
    PD7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a0e:	2500      	movs	r5, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005a10:	2405      	movs	r4, #5
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a12:	2702      	movs	r7, #2
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005a14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a16:	2603      	movs	r6, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a18:	a905      	add	r1, sp, #20
 8005a1a:	486e      	ldr	r0, [pc, #440]	; (8005bd4 <HAL_SPI_MspInit+0x1d4>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005a1c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005a20:	645a      	str	r2, [r3, #68]	; 0x44
 8005a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a24:	9706      	str	r7, [sp, #24]
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005a26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a2a:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a2c:	9608      	str	r6, [sp, #32]
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005a2e:	9300      	str	r3, [sp, #0]
 8005a30:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005a32:	2340      	movs	r3, #64	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005a34:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005a36:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a38:	f7fa ff16 	bl	8000868 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8005a3c:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005a3e:	a905      	add	r1, sp, #20
 8005a40:	4865      	ldr	r0, [pc, #404]	; (8005bd8 <HAL_SPI_MspInit+0x1d8>)
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8005a42:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a44:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a46:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a48:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005a4a:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005a4c:	f7fa ff0c 	bl	8000868 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005a50:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a52:	a905      	add	r1, sp, #20
 8005a54:	4861      	ldr	r0, [pc, #388]	; (8005bdc <HAL_SPI_MspInit+0x1dc>)
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005a56:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a58:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a5a:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a5c:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005a5e:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a60:	f7fa ff02 	bl	8000868 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8005a64:	2023      	movs	r0, #35	; 0x23
 8005a66:	462a      	mov	r2, r5
 8005a68:	4621      	mov	r1, r4
 8005a6a:	f7fa fdb3 	bl	80005d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8005a6e:	2023      	movs	r0, #35	; 0x23
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    /* SPI6 interrupt Init */
    HAL_NVIC_SetPriority(SPI6_IRQn, 5, 0);
    HAL_NVIC_EnableIRQ(SPI6_IRQn);
 8005a70:	f7fa fde8 	bl	8000644 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }
}
 8005a74:	b00b      	add	sp, #44	; 0x2c
 8005a76:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(spiHandle->Instance==SPI2)
 8005a78:	4a59      	ldr	r2, [pc, #356]	; (8005be0 <HAL_SPI_MspInit+0x1e0>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d128      	bne.n	8005ad0 <HAL_SPI_MspInit+0xd0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005a7e:	4b54      	ldr	r3, [pc, #336]	; (8005bd0 <HAL_SPI_MspInit+0x1d0>)
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8005a80:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a82:	2500      	movs	r5, #0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005a84:	2405      	movs	r4, #5
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005a86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a88:	2703      	movs	r7, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005a8a:	a905      	add	r1, sp, #20
 8005a8c:	4855      	ldr	r0, [pc, #340]	; (8005be4 <HAL_SPI_MspInit+0x1e4>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005a8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a92:	641a      	str	r2, [r3, #64]	; 0x40
 8005a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8005a96:	9605      	str	r6, [sp, #20]
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005a98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a9c:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a9e:	9507      	str	r5, [sp, #28]
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005aa0:	9301      	str	r3, [sp, #4]
 8005aa2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005aa4:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005aa6:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005aa8:	f7fa fede 	bl	8000868 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005aac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ab0:	a905      	add	r1, sp, #20
 8005ab2:	484a      	ldr	r0, [pc, #296]	; (8005bdc <HAL_SPI_MspInit+0x1dc>)
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005ab4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ab6:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ab8:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005aba:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005abc:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005abe:	f7fa fed3 	bl	8000868 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8005ac2:	2024      	movs	r0, #36	; 0x24
 8005ac4:	462a      	mov	r2, r5
 8005ac6:	4621      	mov	r1, r4
 8005ac8:	f7fa fd84 	bl	80005d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8005acc:	2024      	movs	r0, #36	; 0x24
 8005ace:	e7cf      	b.n	8005a70 <HAL_SPI_MspInit+0x70>
  else if(spiHandle->Instance==SPI3)
 8005ad0:	4a45      	ldr	r2, [pc, #276]	; (8005be8 <HAL_SPI_MspInit+0x1e8>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d12a      	bne.n	8005b2c <HAL_SPI_MspInit+0x12c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8005ad6:	4b3e      	ldr	r3, [pc, #248]	; (8005bd0 <HAL_SPI_MspInit+0x1d0>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ad8:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ada:	2503      	movs	r5, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005adc:	2602      	movs	r6, #2
    __HAL_RCC_SPI3_CLK_ENABLE();
 8005ade:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005ae0:	a905      	add	r1, sp, #20
 8005ae2:	4840      	ldr	r0, [pc, #256]	; (8005be4 <HAL_SPI_MspInit+0x1e4>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 8005ae4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ae8:	641a      	str	r2, [r3, #64]	; 0x40
 8005aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005aec:	9508      	str	r5, [sp, #32]
    __HAL_RCC_SPI3_CLK_ENABLE();
 8005aee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005af2:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005af4:	9407      	str	r4, [sp, #28]
    __HAL_RCC_SPI3_CLK_ENABLE();
 8005af6:	9302      	str	r3, [sp, #8]
 8005af8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005afa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005afe:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005b00:	2306      	movs	r3, #6
 8005b02:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005b04:	f7fa feb0 	bl	8000868 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005b08:	2340      	movs	r3, #64	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b0a:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI3;
 8005b0c:	2505      	movs	r5, #5
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005b0e:	a905      	add	r1, sp, #20
 8005b10:	4831      	ldr	r0, [pc, #196]	; (8005bd8 <HAL_SPI_MspInit+0x1d8>)
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005b12:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b14:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b16:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI3;
 8005b18:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005b1a:	f7fa fea5 	bl	8000868 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 8005b1e:	2033      	movs	r0, #51	; 0x33
 8005b20:	4622      	mov	r2, r4
 8005b22:	4629      	mov	r1, r5
 8005b24:	f7fa fd56 	bl	80005d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8005b28:	2033      	movs	r0, #51	; 0x33
 8005b2a:	e7a1      	b.n	8005a70 <HAL_SPI_MspInit+0x70>
  else if(spiHandle->Instance==SPI4)
 8005b2c:	4a2f      	ldr	r2, [pc, #188]	; (8005bec <HAL_SPI_MspInit+0x1ec>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d11f      	bne.n	8005b72 <HAL_SPI_MspInit+0x172>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8005b32:	4b27      	ldr	r3, [pc, #156]	; (8005bd0 <HAL_SPI_MspInit+0x1d0>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b34:	2500      	movs	r5, #0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8005b36:	2405      	movs	r4, #5
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005b38:	a905      	add	r1, sp, #20
    __HAL_RCC_SPI4_CLK_ENABLE();
 8005b3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005b3c:	482c      	ldr	r0, [pc, #176]	; (8005bf0 <HAL_SPI_MspInit+0x1f0>)
    __HAL_RCC_SPI4_CLK_ENABLE();
 8005b3e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b42:	645a      	str	r2, [r3, #68]	; 0x44
 8005b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b46:	9507      	str	r5, [sp, #28]
    __HAL_RCC_SPI4_CLK_ENABLE();
 8005b48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8005b4c:	9409      	str	r4, [sp, #36]	; 0x24
    __HAL_RCC_SPI4_CLK_ENABLE();
 8005b4e:	9303      	str	r3, [sp, #12]
 8005b50:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_12;
 8005b52:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 8005b56:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b58:	2302      	movs	r3, #2
 8005b5a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b5c:	2303      	movs	r3, #3
 8005b5e:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005b60:	f7fa fe82 	bl	8000868 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI4_IRQn, 5, 0);
 8005b64:	2054      	movs	r0, #84	; 0x54
 8005b66:	462a      	mov	r2, r5
 8005b68:	4621      	mov	r1, r4
 8005b6a:	f7fa fd33 	bl	80005d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8005b6e:	2054      	movs	r0, #84	; 0x54
 8005b70:	e77e      	b.n	8005a70 <HAL_SPI_MspInit+0x70>
  else if(spiHandle->Instance==SPI6)
 8005b72:	4a20      	ldr	r2, [pc, #128]	; (8005bf4 <HAL_SPI_MspInit+0x1f4>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	f47f af7d 	bne.w	8005a74 <HAL_SPI_MspInit+0x74>
    __HAL_RCC_SPI6_CLK_ENABLE();
 8005b7a:	4b15      	ldr	r3, [pc, #84]	; (8005bd0 <HAL_SPI_MspInit+0x1d0>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b7c:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b7e:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b80:	2603      	movs	r6, #3
    __HAL_RCC_SPI6_CLK_ENABLE();
 8005b82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
 8005b84:	2508      	movs	r5, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b86:	a905      	add	r1, sp, #20
 8005b88:	4812      	ldr	r0, [pc, #72]	; (8005bd4 <HAL_SPI_MspInit+0x1d4>)
    __HAL_RCC_SPI6_CLK_ENABLE();
 8005b8a:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8005b8e:	645a      	str	r2, [r3, #68]	; 0x44
 8005b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b92:	9706      	str	r7, [sp, #24]
    __HAL_RCC_SPI6_CLK_ENABLE();
 8005b94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b98:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b9a:	9608      	str	r6, [sp, #32]
    __HAL_RCC_SPI6_CLK_ENABLE();
 8005b9c:	9304      	str	r3, [sp, #16]
 8005b9e:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8005ba0:	23a0      	movs	r3, #160	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
 8005ba2:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8005ba4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ba6:	f7fa fe5f 	bl	8000868 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8005baa:	2310      	movs	r3, #16
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005bac:	a905      	add	r1, sp, #20
 8005bae:	480b      	ldr	r0, [pc, #44]	; (8005bdc <HAL_SPI_MspInit+0x1dc>)
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8005bb0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bb2:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bb4:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005bb6:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
 8005bb8:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005bba:	f7fa fe55 	bl	8000868 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI6_IRQn, 5, 0);
 8005bbe:	2056      	movs	r0, #86	; 0x56
 8005bc0:	4622      	mov	r2, r4
 8005bc2:	2105      	movs	r1, #5
 8005bc4:	f7fa fd06 	bl	80005d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI6_IRQn);
 8005bc8:	2056      	movs	r0, #86	; 0x56
 8005bca:	e751      	b.n	8005a70 <HAL_SPI_MspInit+0x70>
 8005bcc:	40013000 	.word	0x40013000
 8005bd0:	40023800 	.word	0x40023800
 8005bd4:	40020000 	.word	0x40020000
 8005bd8:	40020c00 	.word	0x40020c00
 8005bdc:	40020400 	.word	0x40020400
 8005be0:	40003800 	.word	0x40003800
 8005be4:	40020800 	.word	0x40020800
 8005be8:	40003c00 	.word	0x40003c00
 8005bec:	40013400 	.word	0x40013400
 8005bf0:	40021000 	.word	0x40021000
 8005bf4:	40015400 	.word	0x40015400

08005bf8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8005bf8:	4b31      	ldr	r3, [pc, #196]	; (8005cc0 <HAL_MspInit+0xc8>)
{
 8005bfa:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8005bfc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  __HAL_RCC_SYSCFG_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005bfe:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 8005c00:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005c04:	641a      	str	r2, [r3, #64]	; 0x40
 8005c06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c08:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8005c0c:	9200      	str	r2, [sp, #0]
 8005c0e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c16:	645a      	str	r2, [r3, #68]	; 0x44
 8005c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c1e:	9301      	str	r3, [sp, #4]
 8005c20:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005c22:	f7fa fcc5 	bl	80005b0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8005c26:	2200      	movs	r2, #0
 8005c28:	f06f 000b 	mvn.w	r0, #11
 8005c2c:	4611      	mov	r1, r2
 8005c2e:	f7fa fcd1 	bl	80005d4 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8005c32:	2200      	movs	r2, #0
 8005c34:	f06f 000a 	mvn.w	r0, #10
 8005c38:	4611      	mov	r1, r2
 8005c3a:	f7fa fccb 	bl	80005d4 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f06f 0009 	mvn.w	r0, #9
 8005c44:	4611      	mov	r1, r2
 8005c46:	f7fa fcc5 	bl	80005d4 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f06f 0004 	mvn.w	r0, #4
 8005c50:	4611      	mov	r1, r2
 8005c52:	f7fa fcbf 	bl	80005d4 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8005c56:	2200      	movs	r2, #0
 8005c58:	f06f 0003 	mvn.w	r0, #3
 8005c5c:	4611      	mov	r1, r2
 8005c5e:	f7fa fcb9 	bl	80005d4 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005c62:	2200      	movs	r2, #0
 8005c64:	210f      	movs	r1, #15
 8005c66:	f06f 0001 	mvn.w	r0, #1
 8005c6a:	f7fa fcb3 	bl	80005d4 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8005c6e:	2200      	movs	r2, #0
 8005c70:	210f      	movs	r1, #15
 8005c72:	f04f 30ff 	mov.w	r0, #4294967295
 8005c76:	f7fa fcad 	bl	80005d4 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 5, 0);
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	2105      	movs	r1, #5
 8005c7e:	2001      	movs	r0, #1
 8005c80:	f7fa fca8 	bl	80005d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8005c84:	2001      	movs	r0, #1
 8005c86:	f7fa fcdd 	bl	8000644 <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 5, 0);
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	2105      	movs	r1, #5
 8005c8e:	2004      	movs	r0, #4
 8005c90:	f7fa fca0 	bl	80005d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8005c94:	2004      	movs	r0, #4
 8005c96:	f7fa fcd5 	bl	8000644 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8005c9a:	2105      	movs	r1, #5
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	4608      	mov	r0, r1
 8005ca0:	f7fa fc98 	bl	80005d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8005ca4:	2005      	movs	r0, #5
 8005ca6:	f7fa fccd 	bl	8000644 <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 5, 0);
 8005caa:	2200      	movs	r2, #0
 8005cac:	2105      	movs	r1, #5
 8005cae:	2051      	movs	r0, #81	; 0x51
 8005cb0:	f7fa fc90 	bl	80005d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8005cb4:	2051      	movs	r0, #81	; 0x51
 8005cb6:	f7fa fcc5 	bl	8000644 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005cba:	b003      	add	sp, #12
 8005cbc:	f85d fb04 	ldr.w	pc, [sp], #4
 8005cc0:	40023800 	.word	0x40023800

08005cc4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005cc4:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0); 
 8005cc6:	4601      	mov	r1, r0
{
 8005cc8:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0); 
 8005cca:	2200      	movs	r2, #0
 8005ccc:	2037      	movs	r0, #55	; 0x37
 8005cce:	f7fa fc81 	bl	80005d4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn); 
 8005cd2:	2037      	movs	r0, #55	; 0x37
 8005cd4:	f7fa fcb6 	bl	8000644 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8005cd8:	4b14      	ldr	r3, [pc, #80]	; (8005d2c <HAL_InitTick+0x68>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005cda:	a901      	add	r1, sp, #4
 8005cdc:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM7_CLK_ENABLE();
 8005cde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8005ce0:	4c13      	ldr	r4, [pc, #76]	; (8005d30 <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM7_CLK_ENABLE();
 8005ce2:	f042 0220 	orr.w	r2, r2, #32
 8005ce6:	641a      	str	r2, [r3, #64]	; 0x40
 8005ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cea:	f003 0320 	and.w	r3, r3, #32
 8005cee:	9302      	str	r3, [sp, #8]
 8005cf0:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005cf2:	f7fc fb6b 	bl	80023cc <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8005cf6:	f7fc fb49 	bl	800238c <HAL_RCC_GetPCLK1Freq>
  htim7.Instance = TIM7;
 8005cfa:	4b0e      	ldr	r3, [pc, #56]	; (8005d34 <HAL_InitTick+0x70>)
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8005cfc:	0040      	lsls	r0, r0, #1
  htim7.Instance = TIM7;
 8005cfe:	6023      	str	r3, [r4, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000 / 1000) - 1;
 8005d00:	f240 33e7 	movw	r3, #999	; 0x3e7
 8005d04:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8005d06:	4b0c      	ldr	r3, [pc, #48]	; (8005d38 <HAL_InitTick+0x74>)
 8005d08:	fbb0 f0f3 	udiv	r0, r0, r3
 8005d0c:	3801      	subs	r0, #1
  htim7.Init.Prescaler = uwPrescalerValue;
  htim7.Init.ClockDivision = 0;
 8005d0e:	2300      	movs	r3, #0
  htim7.Init.Prescaler = uwPrescalerValue;
 8005d10:	6060      	str	r0, [r4, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8005d12:	4620      	mov	r0, r4
  htim7.Init.ClockDivision = 0;
 8005d14:	6123      	str	r3, [r4, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d16:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8005d18:	f7fc fffe 	bl	8002d18 <HAL_TIM_Base_Init>
 8005d1c:	b920      	cbnz	r0, 8005d28 <HAL_InitTick+0x64>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8005d1e:	4620      	mov	r0, r4
 8005d20:	f7fc fed2 	bl	8002ac8 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8005d24:	b008      	add	sp, #32
 8005d26:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 8005d28:	2001      	movs	r0, #1
 8005d2a:	e7fb      	b.n	8005d24 <HAL_InitTick+0x60>
 8005d2c:	40023800 	.word	0x40023800
 8005d30:	2000447c 	.word	0x2000447c
 8005d34:	40001400 	.word	0x40001400
 8005d38:	000f4240 	.word	0x000f4240

08005d3c <NMI_Handler>:
 8005d3c:	4770      	bx	lr

08005d3e <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8005d3e:	e7fe      	b.n	8005d3e <HardFault_Handler>

08005d40 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8005d40:	e7fe      	b.n	8005d40 <MemManage_Handler>

08005d42 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8005d42:	e7fe      	b.n	8005d42 <BusFault_Handler>

08005d44 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8005d44:	e7fe      	b.n	8005d44 <UsageFault_Handler>

08005d46 <DebugMon_Handler>:
 8005d46:	4770      	bx	lr

08005d48 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 8005d48:	f7fd bf85 	b.w	8003c56 <osSystickHandler>

08005d4c <PVD_IRQHandler>:
void PVD_IRQHandler(void)
{
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8005d4c:	f7fb beec 	b.w	8001b28 <HAL_PWR_PVD_IRQHandler>

08005d50 <FLASH_IRQHandler>:
void FLASH_IRQHandler(void)
{
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8005d50:	f7fa bcec 	b.w	800072c <HAL_FLASH_IRQHandler>

08005d54 <RCC_IRQHandler>:
 8005d54:	4770      	bx	lr
	...

08005d58 <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8005d58:	4801      	ldr	r0, [pc, #4]	; (8005d60 <I2C1_EV_IRQHandler+0x8>)
 8005d5a:	f7fa bf02 	b.w	8000b62 <HAL_I2C_EV_IRQHandler>
 8005d5e:	bf00      	nop
 8005d60:	20003f7c 	.word	0x20003f7c

08005d64 <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8005d64:	4801      	ldr	r0, [pc, #4]	; (8005d6c <I2C1_ER_IRQHandler+0x8>)
 8005d66:	f7fb b92b 	b.w	8000fc0 <HAL_I2C_ER_IRQHandler>
 8005d6a:	bf00      	nop
 8005d6c:	20003f7c 	.word	0x20003f7c

08005d70 <I2C2_EV_IRQHandler>:
void I2C2_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8005d70:	4801      	ldr	r0, [pc, #4]	; (8005d78 <I2C2_EV_IRQHandler+0x8>)
 8005d72:	f7fa bef6 	b.w	8000b62 <HAL_I2C_EV_IRQHandler>
 8005d76:	bf00      	nop
 8005d78:	20003fc8 	.word	0x20003fc8

08005d7c <I2C2_ER_IRQHandler>:
void I2C2_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8005d7c:	4801      	ldr	r0, [pc, #4]	; (8005d84 <I2C2_ER_IRQHandler+0x8>)
 8005d7e:	f7fb b91f 	b.w	8000fc0 <HAL_I2C_ER_IRQHandler>
 8005d82:	bf00      	nop
 8005d84:	20003fc8 	.word	0x20003fc8

08005d88 <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8005d88:	4801      	ldr	r0, [pc, #4]	; (8005d90 <SPI1_IRQHandler+0x8>)
 8005d8a:	f7fc be21 	b.w	80029d0 <HAL_SPI_IRQHandler>
 8005d8e:	bf00      	nop
 8005d90:	20004418 	.word	0x20004418

08005d94 <SPI2_IRQHandler>:
void SPI2_IRQHandler(void)
{
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8005d94:	4801      	ldr	r0, [pc, #4]	; (8005d9c <SPI2_IRQHandler+0x8>)
 8005d96:	f7fc be1b 	b.w	80029d0 <HAL_SPI_IRQHandler>
 8005d9a:	bf00      	nop
 8005d9c:	20004288 	.word	0x20004288

08005da0 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005da0:	4801      	ldr	r0, [pc, #4]	; (8005da8 <USART1_IRQHandler+0x8>)
 8005da2:	f7fd b84d 	b.w	8002e40 <HAL_UART_IRQHandler>
 8005da6:	bf00      	nop
 8005da8:	2000452c 	.word	0x2000452c

08005dac <SPI3_IRQHandler>:
void SPI3_IRQHandler(void)
{
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8005dac:	4801      	ldr	r0, [pc, #4]	; (8005db4 <SPI3_IRQHandler+0x8>)
 8005dae:	f7fc be0f 	b.w	80029d0 <HAL_SPI_IRQHandler>
 8005db2:	bf00      	nop
 8005db4:	20004350 	.word	0x20004350

08005db8 <UART4_IRQHandler>:
void UART4_IRQHandler(void)
{
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8005db8:	4801      	ldr	r0, [pc, #4]	; (8005dc0 <UART4_IRQHandler+0x8>)
 8005dba:	f7fd b841 	b.w	8002e40 <HAL_UART_IRQHandler>
 8005dbe:	bf00      	nop
 8005dc0:	2000460c 	.word	0x2000460c

08005dc4 <UART5_IRQHandler>:
void UART5_IRQHandler(void)
{
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8005dc4:	4801      	ldr	r0, [pc, #4]	; (8005dcc <UART5_IRQHandler+0x8>)
 8005dc6:	f7fd b83b 	b.w	8002e40 <HAL_UART_IRQHandler>
 8005dca:	bf00      	nop
 8005dcc:	200044bc 	.word	0x200044bc

08005dd0 <TIM7_IRQHandler>:
void TIM7_IRQHandler(void)
{
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8005dd0:	4801      	ldr	r0, [pc, #4]	; (8005dd8 <TIM7_IRQHandler+0x8>)
 8005dd2:	f7fc be88 	b.w	8002ae6 <HAL_TIM_IRQHandler>
 8005dd6:	bf00      	nop
 8005dd8:	2000447c 	.word	0x2000447c

08005ddc <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8005ddc:	4801      	ldr	r0, [pc, #4]	; (8005de4 <OTG_FS_IRQHandler+0x8>)
 8005dde:	f7fb ba0d 	b.w	80011fc <HAL_PCD_IRQHandler>
 8005de2:	bf00      	nop
 8005de4:	20005918 	.word	0x20005918

08005de8 <FPU_IRQHandler>:

/**
* @brief This function handles FPU global interrupt.
*/
void FPU_IRQHandler(void)
{
 8005de8:	4770      	bx	lr
	...

08005dec <UART8_IRQHandler>:
void UART8_IRQHandler(void)
{
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8005dec:	4801      	ldr	r0, [pc, #4]	; (8005df4 <UART8_IRQHandler+0x8>)
 8005dee:	f7fd b827 	b.w	8002e40 <HAL_UART_IRQHandler>
 8005df2:	bf00      	nop
 8005df4:	2000459c 	.word	0x2000459c

08005df8 <SPI4_IRQHandler>:
void SPI4_IRQHandler(void)
{
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8005df8:	4801      	ldr	r0, [pc, #4]	; (8005e00 <SPI4_IRQHandler+0x8>)
 8005dfa:	f7fc bde9 	b.w	80029d0 <HAL_SPI_IRQHandler>
 8005dfe:	bf00      	nop
 8005e00:	200043b4 	.word	0x200043b4

08005e04 <SPI6_IRQHandler>:
void SPI6_IRQHandler(void)
{
  /* USER CODE BEGIN SPI6_IRQn 0 */

  /* USER CODE END SPI6_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi6);
 8005e04:	4801      	ldr	r0, [pc, #4]	; (8005e0c <SPI6_IRQHandler+0x8>)
 8005e06:	f7fc bde3 	b.w	80029d0 <HAL_SPI_IRQHandler>
 8005e0a:	bf00      	nop
 8005e0c:	200042ec 	.word	0x200042ec

08005e10 <QUADSPI_IRQHandler>:
void QUADSPI_IRQHandler(void)
{
  /* USER CODE BEGIN QUADSPI_IRQn 0 */

  /* USER CODE END QUADSPI_IRQn 0 */
  HAL_QSPI_IRQHandler(&hqspi);
 8005e10:	4801      	ldr	r0, [pc, #4]	; (8005e18 <QUADSPI_IRQHandler+0x8>)
 8005e12:	f7fb bf75 	b.w	8001d00 <HAL_QSPI_IRQHandler>
 8005e16:	bf00      	nop
 8005e18:	2000423c 	.word	0x2000423c

08005e1c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005e1c:	490f      	ldr	r1, [pc, #60]	; (8005e5c <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005e1e:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005e20:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8005e24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005e28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8005e2c:	4b0c      	ldr	r3, [pc, #48]	; (8005e60 <SystemInit+0x44>)
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	f042 0201 	orr.w	r2, r2, #1
 8005e34:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8005e36:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8005e3e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005e42:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8005e44:	4a07      	ldr	r2, [pc, #28]	; (8005e64 <SystemInit+0x48>)
 8005e46:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005e4e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8005e50:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005e52:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005e56:	608b      	str	r3, [r1, #8]
 8005e58:	4770      	bx	lr
 8005e5a:	bf00      	nop
 8005e5c:	e000ed00 	.word	0xe000ed00
 8005e60:	40023800 	.word	0x40023800
 8005e64:	24003010 	.word	0x24003010

08005e68 <MX_UART4_Init>:
UART_HandleTypeDef huart8;
UART_HandleTypeDef huart1;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8005e68:	b508      	push	{r3, lr}

  huart4.Instance = UART4;
 8005e6a:	480d      	ldr	r0, [pc, #52]	; (8005ea0 <MX_UART4_Init+0x38>)
  huart4.Init.BaudRate = 115200;
 8005e6c:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8005e70:	4b0c      	ldr	r3, [pc, #48]	; (8005ea4 <MX_UART4_Init+0x3c>)
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
  huart4.Init.StopBits = UART_STOPBITS_1;
  huart4.Init.Parity = UART_PARITY_NONE;
  huart4.Init.Mode = UART_MODE_TX_RX;
 8005e72:	220c      	movs	r2, #12
  huart4.Init.BaudRate = 115200;
 8005e74:	e880 4008 	stmia.w	r0, {r3, lr}
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8005e78:	2300      	movs	r3, #0
  huart4.Init.Mode = UART_MODE_TX_RX;
 8005e7a:	6142      	str	r2, [r0, #20]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8005e7c:	6083      	str	r3, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8005e7e:	60c3      	str	r3, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8005e80:	6103      	str	r3, [r0, #16]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005e82:	6183      	str	r3, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8005e84:	61c3      	str	r3, [r0, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005e86:	6203      	str	r3, [r0, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005e88:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8005e8a:	f7fd fa50 	bl	800332e <HAL_UART_Init>
 8005e8e:	b128      	cbz	r0, 8005e9c <MX_UART4_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005e90:	2150      	movs	r1, #80	; 0x50
 8005e92:	4805      	ldr	r0, [pc, #20]	; (8005ea8 <MX_UART4_Init+0x40>)
  }

}
 8005e94:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8005e98:	f7ff bc44 	b.w	8005724 <_Error_Handler>
 8005e9c:	bd08      	pop	{r3, pc}
 8005e9e:	bf00      	nop
 8005ea0:	2000460c 	.word	0x2000460c
 8005ea4:	40004c00 	.word	0x40004c00
 8005ea8:	080068b4 	.word	0x080068b4

08005eac <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8005eac:	b508      	push	{r3, lr}

  huart5.Instance = UART5;
 8005eae:	480d      	ldr	r0, [pc, #52]	; (8005ee4 <MX_UART5_Init+0x38>)
  huart5.Init.BaudRate = 115200;
 8005eb0:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8005eb4:	4b0c      	ldr	r3, [pc, #48]	; (8005ee8 <MX_UART5_Init+0x3c>)
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
  huart5.Init.StopBits = UART_STOPBITS_1;
  huart5.Init.Parity = UART_PARITY_NONE;
  huart5.Init.Mode = UART_MODE_TX_RX;
 8005eb6:	220c      	movs	r2, #12
  huart5.Init.BaudRate = 115200;
 8005eb8:	e880 4008 	stmia.w	r0, {r3, lr}
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8005ebc:	2300      	movs	r3, #0
  huart5.Init.Mode = UART_MODE_TX_RX;
 8005ebe:	6142      	str	r2, [r0, #20]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8005ec0:	6083      	str	r3, [r0, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8005ec2:	60c3      	str	r3, [r0, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8005ec4:	6103      	str	r3, [r0, #16]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005ec6:	6183      	str	r3, [r0, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8005ec8:	61c3      	str	r3, [r0, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005eca:	6203      	str	r3, [r0, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005ecc:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8005ece:	f7fd fa2e 	bl	800332e <HAL_UART_Init>
 8005ed2:	b128      	cbz	r0, 8005ee0 <MX_UART5_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005ed4:	2164      	movs	r1, #100	; 0x64
 8005ed6:	4805      	ldr	r0, [pc, #20]	; (8005eec <MX_UART5_Init+0x40>)
  }

}
 8005ed8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8005edc:	f7ff bc22 	b.w	8005724 <_Error_Handler>
 8005ee0:	bd08      	pop	{r3, pc}
 8005ee2:	bf00      	nop
 8005ee4:	200044bc 	.word	0x200044bc
 8005ee8:	40005000 	.word	0x40005000
 8005eec:	080068b4 	.word	0x080068b4

08005ef0 <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 8005ef0:	b508      	push	{r3, lr}

  huart8.Instance = UART8;
 8005ef2:	480d      	ldr	r0, [pc, #52]	; (8005f28 <MX_UART8_Init+0x38>)
  huart8.Init.BaudRate = 115200;
 8005ef4:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8005ef8:	4b0c      	ldr	r3, [pc, #48]	; (8005f2c <MX_UART8_Init+0x3c>)
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
  huart8.Init.StopBits = UART_STOPBITS_1;
  huart8.Init.Parity = UART_PARITY_NONE;
  huart8.Init.Mode = UART_MODE_TX_RX;
 8005efa:	220c      	movs	r2, #12
  huart8.Init.BaudRate = 115200;
 8005efc:	e880 4008 	stmia.w	r0, {r3, lr}
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8005f00:	2300      	movs	r3, #0
  huart8.Init.Mode = UART_MODE_TX_RX;
 8005f02:	6142      	str	r2, [r0, #20]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8005f04:	6083      	str	r3, [r0, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8005f06:	60c3      	str	r3, [r0, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8005f08:	6103      	str	r3, [r0, #16]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005f0a:	6183      	str	r3, [r0, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8005f0c:	61c3      	str	r3, [r0, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005f0e:	6203      	str	r3, [r0, #32]
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005f10:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8005f12:	f7fd fa0c 	bl	800332e <HAL_UART_Init>
 8005f16:	b128      	cbz	r0, 8005f24 <MX_UART8_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005f18:	2178      	movs	r1, #120	; 0x78
 8005f1a:	4805      	ldr	r0, [pc, #20]	; (8005f30 <MX_UART8_Init+0x40>)
  }

}
 8005f1c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8005f20:	f7ff bc00 	b.w	8005724 <_Error_Handler>
 8005f24:	bd08      	pop	{r3, pc}
 8005f26:	bf00      	nop
 8005f28:	2000459c 	.word	0x2000459c
 8005f2c:	40007c00 	.word	0x40007c00
 8005f30:	080068b4 	.word	0x080068b4

08005f34 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005f34:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
 8005f36:	480d      	ldr	r0, [pc, #52]	; (8005f6c <MX_USART1_UART_Init+0x38>)
  huart1.Init.BaudRate = 115200;
 8005f38:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8005f3c:	4b0c      	ldr	r3, [pc, #48]	; (8005f70 <MX_USART1_UART_Init+0x3c>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005f3e:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 115200;
 8005f40:	e880 4008 	stmia.w	r0, {r3, lr}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005f44:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005f46:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005f48:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005f4a:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005f4c:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005f4e:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005f50:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005f52:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005f54:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005f56:	f7fd f9ea 	bl	800332e <HAL_UART_Init>
 8005f5a:	b128      	cbz	r0, 8005f68 <MX_USART1_UART_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005f5c:	218d      	movs	r1, #141	; 0x8d
 8005f5e:	4805      	ldr	r0, [pc, #20]	; (8005f74 <MX_USART1_UART_Init+0x40>)
  }

}
 8005f60:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8005f64:	f7ff bbde 	b.w	8005724 <_Error_Handler>
 8005f68:	bd08      	pop	{r3, pc}
 8005f6a:	bf00      	nop
 8005f6c:	2000452c 	.word	0x2000452c
 8005f70:	40011000 	.word	0x40011000
 8005f74:	080068b4 	.word	0x080068b4

08005f78 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==UART4)
 8005f78:	6803      	ldr	r3, [r0, #0]
 8005f7a:	4a4d      	ldr	r2, [pc, #308]	; (80060b0 <HAL_UART_MspInit+0x138>)
 8005f7c:	4293      	cmp	r3, r2
{
 8005f7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f82:	b08a      	sub	sp, #40	; 0x28
  if(uartHandle->Instance==UART4)
 8005f84:	d121      	bne.n	8005fca <HAL_UART_MspInit+0x52>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8005f86:	4b4b      	ldr	r3, [pc, #300]	; (80060b4 <HAL_UART_MspInit+0x13c>)
    PA0/WKUP     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f88:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f8a:	a905      	add	r1, sp, #20
 8005f8c:	484a      	ldr	r0, [pc, #296]	; (80060b8 <HAL_UART_MspInit+0x140>)
    __HAL_RCC_UART4_CLK_ENABLE();
 8005f8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f90:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8005f94:	641a      	str	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f96:	2202      	movs	r2, #2
    __HAL_RCC_UART4_CLK_ENABLE();
 8005f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f9a:	9206      	str	r2, [sp, #24]
    __HAL_RCC_UART4_CLK_ENABLE();
 8005f9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fa0:	9407      	str	r4, [sp, #28]
    __HAL_RCC_UART4_CLK_ENABLE();
 8005fa2:	9301      	str	r3, [sp, #4]
 8005fa4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005fa6:	2303      	movs	r3, #3
 8005fa8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005faa:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8005fac:	2308      	movs	r3, #8
 8005fae:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005fb0:	f7fa fc5a 	bl	8000868 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8005fb4:	2034      	movs	r0, #52	; 0x34
 8005fb6:	4622      	mov	r2, r4
 8005fb8:	2105      	movs	r1, #5
 8005fba:	f7fa fb0b 	bl	80005d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8005fbe:	2034      	movs	r0, #52	; 0x34
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005fc0:	f7fa fb40 	bl	8000644 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8005fc4:	b00a      	add	sp, #40	; 0x28
 8005fc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if(uartHandle->Instance==UART5)
 8005fca:	4a3c      	ldr	r2, [pc, #240]	; (80060bc <HAL_UART_MspInit+0x144>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d12a      	bne.n	8006026 <HAL_UART_MspInit+0xae>
    __HAL_RCC_UART5_CLK_ENABLE();
 8005fd0:	4b38      	ldr	r3, [pc, #224]	; (80060b4 <HAL_UART_MspInit+0x13c>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fd2:	2400      	movs	r4, #0
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8005fd4:	f44f 5880 	mov.w	r8, #4096	; 0x1000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fd8:	2702      	movs	r7, #2
    __HAL_RCC_UART5_CLK_ENABLE();
 8005fda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005fdc:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8005fde:	2508      	movs	r5, #8
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005fe0:	a905      	add	r1, sp, #20
    __HAL_RCC_UART5_CLK_ENABLE();
 8005fe2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005fe6:	4836      	ldr	r0, [pc, #216]	; (80060c0 <HAL_UART_MspInit+0x148>)
    __HAL_RCC_UART5_CLK_ENABLE();
 8005fe8:	641a      	str	r2, [r3, #64]	; 0x40
 8005fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8005fec:	f8cd 8014 	str.w	r8, [sp, #20]
    __HAL_RCC_UART5_CLK_ENABLE();
 8005ff0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ff4:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ff6:	9407      	str	r4, [sp, #28]
    __HAL_RCC_UART5_CLK_ENABLE();
 8005ff8:	9302      	str	r3, [sp, #8]
 8005ffa:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ffc:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8005ffe:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006000:	f7fa fc32 	bl	8000868 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006004:	a905      	add	r1, sp, #20
 8006006:	482f      	ldr	r0, [pc, #188]	; (80060c4 <HAL_UART_MspInit+0x14c>)
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8006008:	f8cd 8014 	str.w	r8, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800600c:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800600e:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006010:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8006012:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006014:	f7fa fc28 	bl	8000868 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8006018:	2035      	movs	r0, #53	; 0x35
 800601a:	4622      	mov	r2, r4
 800601c:	2105      	movs	r1, #5
 800601e:	f7fa fad9 	bl	80005d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8006022:	2035      	movs	r0, #53	; 0x35
 8006024:	e7cc      	b.n	8005fc0 <HAL_UART_MspInit+0x48>
  else if(uartHandle->Instance==UART8)
 8006026:	4a28      	ldr	r2, [pc, #160]	; (80060c8 <HAL_UART_MspInit+0x150>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d11d      	bne.n	8006068 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_UART8_CLK_ENABLE();
 800602c:	4b21      	ldr	r3, [pc, #132]	; (80060b4 <HAL_UART_MspInit+0x13c>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800602e:	2400      	movs	r4, #0
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006030:	a905      	add	r1, sp, #20
 8006032:	4826      	ldr	r0, [pc, #152]	; (80060cc <HAL_UART_MspInit+0x154>)
    __HAL_RCC_UART8_CLK_ENABLE();
 8006034:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006036:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800603a:	641a      	str	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800603c:	2202      	movs	r2, #2
    __HAL_RCC_UART8_CLK_ENABLE();
 800603e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006040:	9206      	str	r2, [sp, #24]
    __HAL_RCC_UART8_CLK_ENABLE();
 8006042:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006046:	9407      	str	r4, [sp, #28]
    __HAL_RCC_UART8_CLK_ENABLE();
 8006048:	9303      	str	r3, [sp, #12]
 800604a:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800604c:	2303      	movs	r3, #3
 800604e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006050:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8006052:	2308      	movs	r3, #8
 8006054:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006056:	f7fa fc07 	bl	8000868 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART8_IRQn, 5, 0);
 800605a:	2053      	movs	r0, #83	; 0x53
 800605c:	4622      	mov	r2, r4
 800605e:	2105      	movs	r1, #5
 8006060:	f7fa fab8 	bl	80005d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8006064:	2053      	movs	r0, #83	; 0x53
 8006066:	e7ab      	b.n	8005fc0 <HAL_UART_MspInit+0x48>
  else if(uartHandle->Instance==USART1)
 8006068:	4a19      	ldr	r2, [pc, #100]	; (80060d0 <HAL_UART_MspInit+0x158>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d1aa      	bne.n	8005fc4 <HAL_UART_MspInit+0x4c>
    __HAL_RCC_USART1_CLK_ENABLE();
 800606e:	4b11      	ldr	r3, [pc, #68]	; (80060b4 <HAL_UART_MspInit+0x13c>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006070:	2400      	movs	r4, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006072:	a905      	add	r1, sp, #20
 8006074:	4812      	ldr	r0, [pc, #72]	; (80060c0 <HAL_UART_MspInit+0x148>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8006076:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006078:	f042 0210 	orr.w	r2, r2, #16
 800607c:	645a      	str	r2, [r3, #68]	; 0x44
 800607e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006080:	9407      	str	r4, [sp, #28]
    __HAL_RCC_USART1_CLK_ENABLE();
 8006082:	f003 0310 	and.w	r3, r3, #16
 8006086:	9304      	str	r3, [sp, #16]
 8006088:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800608a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800608e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006090:	2302      	movs	r3, #2
 8006092:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006094:	2303      	movs	r3, #3
 8006096:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8006098:	2304      	movs	r3, #4
 800609a:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800609c:	f7fa fbe4 	bl	8000868 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80060a0:	2025      	movs	r0, #37	; 0x25
 80060a2:	4622      	mov	r2, r4
 80060a4:	2105      	movs	r1, #5
 80060a6:	f7fa fa95 	bl	80005d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80060aa:	2025      	movs	r0, #37	; 0x25
 80060ac:	e788      	b.n	8005fc0 <HAL_UART_MspInit+0x48>
 80060ae:	bf00      	nop
 80060b0:	40004c00 	.word	0x40004c00
 80060b4:	40023800 	.word	0x40023800
 80060b8:	40020000 	.word	0x40020000
 80060bc:	40005000 	.word	0x40005000
 80060c0:	40020400 	.word	0x40020400
 80060c4:	40020800 	.word	0x40020800
 80060c8:	40007c00 	.word	0x40007c00
 80060cc:	40021000 	.word	0x40021000
 80060d0:	40011000 	.word	0x40011000

080060d4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80060d4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 80060d6:	4c09      	ldr	r4, [pc, #36]	; (80060fc <MX_USB_DEVICE_Init+0x28>)
 80060d8:	2200      	movs	r2, #0
 80060da:	4909      	ldr	r1, [pc, #36]	; (8006100 <MX_USB_DEVICE_Init+0x2c>)
 80060dc:	4620      	mov	r0, r4
 80060de:	f7fe fcec 	bl	8004aba <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC);
 80060e2:	4908      	ldr	r1, [pc, #32]	; (8006104 <MX_USB_DEVICE_Init+0x30>)
 80060e4:	4620      	mov	r0, r4
 80060e6:	f7fe fcfd 	bl	8004ae4 <USBD_RegisterClass>

  USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 80060ea:	4620      	mov	r0, r4
 80060ec:	4906      	ldr	r1, [pc, #24]	; (8006108 <MX_USB_DEVICE_Init+0x34>)
 80060ee:	f7fe fca3 	bl	8004a38 <USBD_CDC_RegisterInterface>

  USBD_Start(&hUsbDeviceFS);
 80060f2:	4620      	mov	r0, r4

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80060f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_Start(&hUsbDeviceFS);
 80060f8:	f7fe bcfb 	b.w	8004af2 <USBD_Start>
 80060fc:	2000467c 	.word	0x2000467c
 8006100:	20000134 	.word	0x20000134
 8006104:	20000008 	.word	0x20000008
 8006108:	2000011c 	.word	0x2000011c

0800610c <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 800610c:	2000      	movs	r0, #0
 800610e:	4770      	bx	lr

08006110 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006112:	4604      	mov	r4, r0
 8006114:	460e      	mov	r6, r1
  /* USER CODE BEGIN 6 */

	for(uint32_t indi = 0; indi < *Len; indi++)
 8006116:	4605      	mov	r5, r0
	{
		insert( &rxman, *(Buf + indi) );
 8006118:	4f09      	ldr	r7, [pc, #36]	; (8006140 <CDC_Receive_FS+0x30>)
	for(uint32_t indi = 0; indi < *Len; indi++)
 800611a:	1b2b      	subs	r3, r5, r4
 800611c:	6832      	ldr	r2, [r6, #0]
 800611e:	429a      	cmp	r2, r3
 8006120:	d808      	bhi.n	8006134 <CDC_Receive_FS+0x24>
	}

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006122:	4621      	mov	r1, r4
 8006124:	4807      	ldr	r0, [pc, #28]	; (8006144 <CDC_Receive_FS+0x34>)
 8006126:	f7fe fc96 	bl	8004a56 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800612a:	4806      	ldr	r0, [pc, #24]	; (8006144 <CDC_Receive_FS+0x34>)
 800612c:	f7fe fcb2 	bl	8004a94 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8006130:	2000      	movs	r0, #0
 8006132:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		insert( &rxman, *(Buf + indi) );
 8006134:	f815 1b01 	ldrb.w	r1, [r5], #1
 8006138:	4638      	mov	r0, r7
 800613a:	f7ff f87a 	bl	8005232 <insert>
 800613e:	e7ec      	b.n	800611a <CDC_Receive_FS+0xa>
 8006140:	20004014 	.word	0x20004014
 8006144:	2000467c 	.word	0x2000467c

08006148 <CDC_Init_FS>:
{
 8006148:	b510      	push	{r4, lr}
	initBuffMan( &rxman, rxbuff, BUFF_LEN );
 800614a:	f44f 7280 	mov.w	r2, #256	; 0x100
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800614e:	4c0b      	ldr	r4, [pc, #44]	; (800617c <CDC_Init_FS+0x34>)
	initBuffMan( &rxman, rxbuff, BUFF_LEN );
 8006150:	490b      	ldr	r1, [pc, #44]	; (8006180 <CDC_Init_FS+0x38>)
 8006152:	480c      	ldr	r0, [pc, #48]	; (8006184 <CDC_Init_FS+0x3c>)
 8006154:	f7ff f854 	bl	8005200 <initBuffMan>
	initBuffMan( &txman, txbuff, BUFF_LEN );
 8006158:	f44f 7280 	mov.w	r2, #256	; 0x100
 800615c:	490a      	ldr	r1, [pc, #40]	; (8006188 <CDC_Init_FS+0x40>)
 800615e:	480b      	ldr	r0, [pc, #44]	; (800618c <CDC_Init_FS+0x44>)
 8006160:	f7ff f84e 	bl	8005200 <initBuffMan>
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006164:	2200      	movs	r2, #0
 8006166:	490a      	ldr	r1, [pc, #40]	; (8006190 <CDC_Init_FS+0x48>)
 8006168:	4620      	mov	r0, r4
 800616a:	f7fe fc6c 	bl	8004a46 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800616e:	4909      	ldr	r1, [pc, #36]	; (8006194 <CDC_Init_FS+0x4c>)
 8006170:	4620      	mov	r0, r4
 8006172:	f7fe fc70 	bl	8004a56 <USBD_CDC_SetRxBuffer>
}
 8006176:	2000      	movs	r0, #0
 8006178:	bd10      	pop	{r4, pc}
 800617a:	bf00      	nop
 800617c:	2000467c 	.word	0x2000467c
 8006180:	20004128 	.word	0x20004128
 8006184:	20004014 	.word	0x20004014
 8006188:	20004028 	.word	0x20004028
 800618c:	20004228 	.word	0x20004228
 8006190:	20005118 	.word	0x20005118
 8006194:	20004918 	.word	0x20004918

08006198 <CDC_Control_FS>:
  switch(cmd)
 8006198:	2820      	cmp	r0, #32
 800619a:	d003      	beq.n	80061a4 <CDC_Control_FS+0xc>
 800619c:	2821      	cmp	r0, #33	; 0x21
 800619e:	d00b      	beq.n	80061b8 <CDC_Control_FS+0x20>
  return (USBD_OK);
 80061a0:	2000      	movs	r0, #0
 80061a2:	4770      	bx	lr
    	if(length == 7)
 80061a4:	2a07      	cmp	r2, #7
 80061a6:	d111      	bne.n	80061cc <CDC_Control_FS+0x34>
 80061a8:	2300      	movs	r3, #0
				currlinecode[indi] = *(pbuf + indi);
 80061aa:	4a09      	ldr	r2, [pc, #36]	; (80061d0 <CDC_Control_FS+0x38>)
 80061ac:	5cc8      	ldrb	r0, [r1, r3]
 80061ae:	5498      	strb	r0, [r3, r2]
 80061b0:	3301      	adds	r3, #1
			for(uint8_t indi = 0; indi < 7; indi++)
 80061b2:	2b07      	cmp	r3, #7
 80061b4:	d1fa      	bne.n	80061ac <CDC_Control_FS+0x14>
 80061b6:	e7f3      	b.n	80061a0 <CDC_Control_FS+0x8>
    	if(length == 7)
 80061b8:	2a07      	cmp	r2, #7
 80061ba:	d107      	bne.n	80061cc <CDC_Control_FS+0x34>
 80061bc:	2300      	movs	r3, #0
    			*(pbuf + indi) = currlinecode[indi];
 80061be:	4804      	ldr	r0, [pc, #16]	; (80061d0 <CDC_Control_FS+0x38>)
 80061c0:	5c1a      	ldrb	r2, [r3, r0]
 80061c2:	54ca      	strb	r2, [r1, r3]
 80061c4:	3301      	adds	r3, #1
    		for(uint8_t indi = 0; indi < 7; indi++)
 80061c6:	2b07      	cmp	r3, #7
 80061c8:	d1fa      	bne.n	80061c0 <CDC_Control_FS+0x28>
 80061ca:	e7e9      	b.n	80061a0 <CDC_Control_FS+0x8>
    		return (USBD_FAIL);
 80061cc:	2002      	movs	r0, #2
}
 80061ce:	4770      	bx	lr
 80061d0:	2000012c 	.word	0x2000012c

080061d4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80061d4:	b510      	push	{r4, lr}
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80061d6:	4c09      	ldr	r4, [pc, #36]	; (80061fc <CDC_Transmit_FS+0x28>)
{
 80061d8:	460a      	mov	r2, r1
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80061da:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  if (hcdc->TxState != 0){
 80061de:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80061e2:	b943      	cbnz	r3, 80061f6 <CDC_Transmit_FS+0x22>
    return USBD_BUSY;
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80061e4:	4601      	mov	r1, r0
 80061e6:	4620      	mov	r0, r4
 80061e8:	f7fe fc2d 	bl	8004a46 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80061ec:	4620      	mov	r0, r4
  /* USER CODE END 7 */
  return result;
}
 80061ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80061f2:	f7fe bc36 	b.w	8004a62 <USBD_CDC_TransmitPacket>
}
 80061f6:	2001      	movs	r0, #1
 80061f8:	bd10      	pop	{r4, pc}
 80061fa:	bf00      	nop
 80061fc:	2000467c 	.word	0x2000467c

08006200 <HAL_PCD_MspInit>:
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB_OTG_FS)
 8006200:	6803      	ldr	r3, [r0, #0]
 8006202:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 8006206:	b510      	push	{r4, lr}
 8006208:	b088      	sub	sp, #32
  if(pcdHandle->Instance==USB_OTG_FS)
 800620a:	d132      	bne.n	8006272 <HAL_PCD_MspInit+0x72>
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800620c:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006210:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006212:	a903      	add	r1, sp, #12
 8006214:	4818      	ldr	r0, [pc, #96]	; (8006278 <HAL_PCD_MspInit+0x78>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8006216:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006218:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800621a:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800621c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800621e:	2303      	movs	r3, #3
 8006220:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006222:	230a      	movs	r3, #10
 8006224:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006226:	f7fa fb1f 	bl	8000868 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800622a:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800622e:	a903      	add	r1, sp, #12
 8006230:	4811      	ldr	r0, [pc, #68]	; (8006278 <HAL_PCD_MspInit+0x78>)
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006232:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006234:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006236:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006238:	f7fa fb16 	bl	8000868 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800623c:	4b0f      	ldr	r3, [pc, #60]	; (800627c <HAL_PCD_MspInit+0x7c>)

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800623e:	2043      	movs	r0, #67	; 0x43
 8006240:	2105      	movs	r1, #5
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006242:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006244:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006248:	635a      	str	r2, [r3, #52]	; 0x34
 800624a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800624c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8006250:	9201      	str	r2, [sp, #4]
 8006252:	9a01      	ldr	r2, [sp, #4]
 8006254:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006256:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800625a:	645a      	str	r2, [r3, #68]	; 0x44
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800625c:	4622      	mov	r2, r4
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800625e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006260:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006264:	9302      	str	r3, [sp, #8]
 8006266:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8006268:	f7fa f9b4 	bl	80005d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800626c:	2043      	movs	r0, #67	; 0x43
 800626e:	f7fa f9e9 	bl	8000644 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006272:	b008      	add	sp, #32
 8006274:	bd10      	pop	{r4, pc}
 8006276:	bf00      	nop
 8006278:	40020000 	.word	0x40020000
 800627c:	40023800 	.word	0x40023800

08006280 <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006280:	f500 7170 	add.w	r1, r0, #960	; 0x3c0
 8006284:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 8006288:	f7fe bc4a 	b.w	8004b20 <USBD_LL_SetupStage>

0800628c <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800628c:	231c      	movs	r3, #28
 800628e:	fb03 0301 	mla	r3, r3, r1, r0
 8006292:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 8006296:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800629a:	f7fe bc6e 	b.w	8004b7a <USBD_LL_DataOutStage>

0800629e <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800629e:	231c      	movs	r3, #28
 80062a0:	fb03 0301 	mla	r3, r3, r1, r0
 80062a4:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 80062a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80062aa:	f7fe bc9e 	b.w	8004bea <USBD_LL_DataInStage>

080062ae <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80062ae:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 80062b2:	f7fe bd2e 	b.w	8004d12 <USBD_LL_SOF>

080062b6 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  /* Set USB current speed. */
  switch (hpcd->Init.speed)
 80062b6:	68c1      	ldr	r1, [r0, #12]
	
  default:
    speed = USBD_SPEED_FULL;
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80062b8:	3100      	adds	r1, #0
{ 
 80062ba:	b510      	push	{r4, lr}
 80062bc:	4604      	mov	r4, r0
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80062be:	bf18      	it	ne
 80062c0:	2101      	movne	r1, #1
 80062c2:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 80062c6:	f7fe fd12 	bl	8004cee <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80062ca:	f8d4 03fc 	ldr.w	r0, [r4, #1020]	; 0x3fc
}
 80062ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80062d2:	f7fe bce5 	b.w	8004ca0 <USBD_LL_Reset>
	...

080062d8 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 80062d8:	b510      	push	{r4, lr}
 80062da:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80062dc:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 80062e0:	f7fe fd08 	bl	8004cf4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80062e4:	6822      	ldr	r2, [r4, #0]
 80062e6:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 80062ea:	f043 0301 	orr.w	r3, r3, #1
 80062ee:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80062f2:	6a23      	ldr	r3, [r4, #32]
 80062f4:	b123      	cbz	r3, 8006300 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80062f6:	4a03      	ldr	r2, [pc, #12]	; (8006304 <HAL_PCD_SuspendCallback+0x2c>)
 80062f8:	6913      	ldr	r3, [r2, #16]
 80062fa:	f043 0306 	orr.w	r3, r3, #6
 80062fe:	6113      	str	r3, [r2, #16]
 8006300:	bd10      	pop	{r4, pc}
 8006302:	bf00      	nop
 8006304:	e000ed00 	.word	0xe000ed00

08006308 <HAL_PCD_ResumeCallback>:
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006308:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 800630c:	f7fe bcfb 	b.w	8004d06 <USBD_LL_Resume>

08006310 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006310:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 8006314:	f7fe bd0b 	b.w	8004d2e <USBD_LL_IsoOUTIncomplete>

08006318 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006318:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 800631c:	f7fe bd05 	b.w	8004d2a <USBD_LL_IsoINIncomplete>

08006320 <HAL_PCD_ConnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006320:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 8006324:	f7fe bd05 	b.w	8004d32 <USBD_LL_DevConnected>

08006328 <HAL_PCD_DisconnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006328:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 800632c:	f7fe bd03 	b.w	8004d36 <USBD_LL_DevDisconnected>

08006330 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006330:	b508      	push	{r3, lr}
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006332:	7802      	ldrb	r2, [r0, #0]
 8006334:	bb5a      	cbnz	r2, 800638e <USBD_LL_Init+0x5e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006336:	4b17      	ldr	r3, [pc, #92]	; (8006394 <USBD_LL_Init+0x64>)
  pdev->pData = &hpcd_USB_OTG_FS;
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8006338:	2106      	movs	r1, #6
  hpcd_USB_OTG_FS.pData = pdev;
 800633a:	f8c3 03fc 	str.w	r0, [r3, #1020]	; 0x3fc
  pdev->pData = &hpcd_USB_OTG_FS;
 800633e:	f8c0 3298 	str.w	r3, [r0, #664]	; 0x298
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8006342:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006346:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 8006348:	615a      	str	r2, [r3, #20]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800634a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800634c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800634e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8006350:	e883 0003 	stmia.w	r3, {r0, r1}
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006354:	2102      	movs	r1, #2
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006356:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006358:	60d9      	str	r1, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800635a:	6199      	str	r1, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800635c:	2101      	movs	r1, #1
 800635e:	61d9      	str	r1, [r3, #28]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8006360:	62d9      	str	r1, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006362:	f7fa fec2 	bl	80010ea <HAL_PCD_Init>
 8006366:	b120      	cbz	r0, 8006372 <USBD_LL_Init+0x42>
  {
    _Error_Handler(__FILE__, __LINE__);
 8006368:	f240 1153 	movw	r1, #339	; 0x153
 800636c:	480a      	ldr	r0, [pc, #40]	; (8006398 <USBD_LL_Init+0x68>)
 800636e:	f7ff f9d9 	bl	8005724 <_Error_Handler>
  }

  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006372:	2180      	movs	r1, #128	; 0x80
 8006374:	4807      	ldr	r0, [pc, #28]	; (8006394 <USBD_LL_Init+0x64>)
 8006376:	f7fb fbbe 	bl	8001af6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800637a:	2240      	movs	r2, #64	; 0x40
 800637c:	2100      	movs	r1, #0
 800637e:	4805      	ldr	r0, [pc, #20]	; (8006394 <USBD_LL_Init+0x64>)
 8006380:	f7fb fb98 	bl	8001ab4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006384:	2280      	movs	r2, #128	; 0x80
 8006386:	2101      	movs	r1, #1
 8006388:	4802      	ldr	r0, [pc, #8]	; (8006394 <USBD_LL_Init+0x64>)
 800638a:	f7fb fb93 	bl	8001ab4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
}
 800638e:	2000      	movs	r0, #0
 8006390:	bd08      	pop	{r3, pc}
 8006392:	bf00      	nop
 8006394:	20005918 	.word	0x20005918
 8006398:	080068c7 	.word	0x080068c7

0800639c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800639c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800639e:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 80063a2:	f7fa ff16 	bl	80011d2 <HAL_PCD_Start>
 80063a6:	2803      	cmp	r0, #3
 80063a8:	bf9a      	itte	ls
 80063aa:	4b02      	ldrls	r3, [pc, #8]	; (80063b4 <USBD_LL_Start+0x18>)
 80063ac:	5c18      	ldrbls	r0, [r3, r0]
 80063ae:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 80063b0:	bd08      	pop	{r3, pc}
 80063b2:	bf00      	nop
 80063b4:	080068c3 	.word	0x080068c3

080063b8 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80063b8:	b510      	push	{r4, lr}
 80063ba:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80063bc:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 80063c0:	4613      	mov	r3, r2
 80063c2:	4622      	mov	r2, r4
 80063c4:	f7fb fa60 	bl	8001888 <HAL_PCD_EP_Open>
 80063c8:	2803      	cmp	r0, #3
 80063ca:	bf9a      	itte	ls
 80063cc:	4b01      	ldrls	r3, [pc, #4]	; (80063d4 <USBD_LL_OpenEP+0x1c>)
 80063ce:	5c18      	ldrbls	r0, [r3, r0]
 80063d0:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 80063d2:	bd10      	pop	{r4, pc}
 80063d4:	080068c3 	.word	0x080068c3

080063d8 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80063d8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80063da:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 80063de:	f7fb fa87 	bl	80018f0 <HAL_PCD_EP_Close>
 80063e2:	2803      	cmp	r0, #3
 80063e4:	bf9a      	itte	ls
 80063e6:	4b02      	ldrls	r3, [pc, #8]	; (80063f0 <USBD_LL_CloseEP+0x18>)
 80063e8:	5c18      	ldrbls	r0, [r3, r0]
 80063ea:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 80063ec:	bd08      	pop	{r3, pc}
 80063ee:	bf00      	nop
 80063f0:	080068c3 	.word	0x080068c3

080063f4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80063f4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80063f6:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 80063fa:	f7fb faf0 	bl	80019de <HAL_PCD_EP_SetStall>
 80063fe:	2803      	cmp	r0, #3
 8006400:	bf9a      	itte	ls
 8006402:	4b02      	ldrls	r3, [pc, #8]	; (800640c <USBD_LL_StallEP+0x18>)
 8006404:	5c18      	ldrbls	r0, [r3, r0]
 8006406:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8006408:	bd08      	pop	{r3, pc}
 800640a:	bf00      	nop
 800640c:	080068c3 	.word	0x080068c3

08006410 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006410:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8006412:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8006416:	f7fb fb1c 	bl	8001a52 <HAL_PCD_EP_ClrStall>
 800641a:	2803      	cmp	r0, #3
 800641c:	bf9a      	itte	ls
 800641e:	4b02      	ldrls	r3, [pc, #8]	; (8006428 <USBD_LL_ClearStallEP+0x18>)
 8006420:	5c18      	ldrbls	r0, [r3, r0]
 8006422:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8006424:	bd08      	pop	{r3, pc}
 8006426:	bf00      	nop
 8006428:	080068c3 	.word	0x080068c3

0800642c <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 800642c:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006430:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 8006434:	f04f 021c 	mov.w	r2, #28
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8006438:	bf17      	itett	ne
 800643a:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800643e:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8006442:	fb02 3101 	mlane	r1, r2, r1, r3
 8006446:	f891 003e 	ldrbne.w	r0, [r1, #62]	; 0x3e
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800644a:	bf08      	it	eq
 800644c:	f891 01fe 	ldrbeq.w	r0, [r1, #510]	; 0x1fe
  }
}
 8006450:	4770      	bx	lr
	...

08006454 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006454:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006456:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800645a:	f7fb fa01 	bl	8001860 <HAL_PCD_SetAddress>
 800645e:	2803      	cmp	r0, #3
 8006460:	bf9a      	itte	ls
 8006462:	4b02      	ldrls	r3, [pc, #8]	; (800646c <USBD_LL_SetUSBAddress+0x18>)
 8006464:	5c18      	ldrbls	r0, [r3, r0]
 8006466:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8006468:	bd08      	pop	{r3, pc}
 800646a:	bf00      	nop
 800646c:	080068c3 	.word	0x080068c3

08006470 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006470:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006472:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8006476:	f7fb fa92 	bl	800199e <HAL_PCD_EP_Transmit>
 800647a:	2803      	cmp	r0, #3
 800647c:	bf9a      	itte	ls
 800647e:	4b02      	ldrls	r3, [pc, #8]	; (8006488 <USBD_LL_Transmit+0x18>)
 8006480:	5c18      	ldrbls	r0, [r3, r0]
 8006482:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;    
}
 8006484:	bd08      	pop	{r3, pc}
 8006486:	bf00      	nop
 8006488:	080068c3 	.word	0x080068c3

0800648c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800648c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800648e:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8006492:	f7fb fa58 	bl	8001946 <HAL_PCD_EP_Receive>
 8006496:	2803      	cmp	r0, #3
 8006498:	bf9a      	itte	ls
 800649a:	4b02      	ldrls	r3, [pc, #8]	; (80064a4 <USBD_LL_PrepareReceive+0x18>)
 800649c:	5c18      	ldrbls	r0, [r3, r0]
 800649e:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 80064a0:	bd08      	pop	{r3, pc}
 80064a2:	bf00      	nop
 80064a4:	080068c3 	.word	0x080068c3

080064a8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80064a8:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80064aa:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 80064ae:	f7fb fa6e 	bl	800198e <HAL_PCD_EP_GetRxCount>
}
 80064b2:	bd08      	pop	{r3, pc}

080064b4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80064b4:	b510      	push	{r4, lr}
 80064b6:	4604      	mov	r4, r0
  switch (msg)
 80064b8:	b111      	cbz	r1, 80064c0 <HAL_PCDEx_LPM_Callback+0xc>
 80064ba:	2901      	cmp	r1, #1
 80064bc:	d016      	beq.n	80064ec <HAL_PCDEx_LPM_Callback+0x38>
 80064be:	bd10      	pop	{r4, pc}
  {
  case PCD_LPM_L0_ACTIVE:
    if (hpcd->Init.low_power_enable)
 80064c0:	6a03      	ldr	r3, [r0, #32]
 80064c2:	b133      	cbz	r3, 80064d2 <HAL_PCDEx_LPM_Callback+0x1e>
    {
      SystemClock_Config();
 80064c4:	f7ff f888 	bl	80055d8 <SystemClock_Config>
      
      /* Reset SLEEPDEEP bit of Cortex System Control Register. */
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80064c8:	4a12      	ldr	r2, [pc, #72]	; (8006514 <HAL_PCDEx_LPM_Callback+0x60>)
 80064ca:	6913      	ldr	r3, [r2, #16]
 80064cc:	f023 0306 	bic.w	r3, r3, #6
 80064d0:	6113      	str	r3, [r2, #16]
    }
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80064d2:	6822      	ldr	r2, [r4, #0]
    USBD_LL_Resume(hpcd->pData);
 80064d4:	f8d4 03fc 	ldr.w	r0, [r4, #1020]	; 0x3fc
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80064d8:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 80064dc:	f023 0301 	bic.w	r3, r3, #1
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 80064e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80064e4:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    USBD_LL_Resume(hpcd->pData);
 80064e8:	f7fe bc0d 	b.w	8004d06 <USBD_LL_Resume>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80064ec:	6802      	ldr	r2, [r0, #0]
    USBD_LL_Suspend(hpcd->pData);
 80064ee:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80064f2:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 80064f6:	f043 0301 	orr.w	r3, r3, #1
 80064fa:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    USBD_LL_Suspend(hpcd->pData);
 80064fe:	f7fe fbf9 	bl	8004cf4 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8006502:	6a23      	ldr	r3, [r4, #32]
 8006504:	b123      	cbz	r3, 8006510 <HAL_PCDEx_LPM_Callback+0x5c>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006506:	4a03      	ldr	r2, [pc, #12]	; (8006514 <HAL_PCDEx_LPM_Callback+0x60>)
 8006508:	6913      	ldr	r3, [r2, #16]
 800650a:	f043 0306 	orr.w	r3, r3, #6
 800650e:	6113      	str	r3, [r2, #16]
 8006510:	bd10      	pop	{r4, pc}
 8006512:	bf00      	nop
 8006514:	e000ed00 	.word	0xe000ed00

08006518 <USBD_FS_DeviceDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 8006518:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 800651a:	4801      	ldr	r0, [pc, #4]	; (8006520 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 800651c:	800b      	strh	r3, [r1, #0]
}
 800651e:	4770      	bx	lr
 8006520:	20000160 	.word	0x20000160

08006524 <USBD_FS_LangIDStrDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);
 8006524:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8006526:	4801      	ldr	r0, [pc, #4]	; (800652c <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8006528:	800b      	strh	r3, [r1, #0]
}
 800652a:	4770      	bx	lr
 800652c:	20000174 	.word	0x20000174

08006530 <USBD_FS_USR_BOSDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_BOSDesc);
 8006530:	230c      	movs	r3, #12
  return (uint8_t*)USBD_FS_BOSDesc;
}
 8006532:	4801      	ldr	r0, [pc, #4]	; (8006538 <USBD_FS_USR_BOSDescriptor+0x8>)
  *length = sizeof(USBD_FS_BOSDesc);
 8006534:	800b      	strh	r3, [r1, #0]
}
 8006536:	4770      	bx	lr
 8006538:	20000154 	.word	0x20000154

0800653c <USBD_FS_ManufacturerStrDescriptor>:
{
 800653c:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800653e:	4c04      	ldr	r4, [pc, #16]	; (8006550 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8006540:	460a      	mov	r2, r1
 8006542:	4804      	ldr	r0, [pc, #16]	; (8006554 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8006544:	4621      	mov	r1, r4
 8006546:	f7fe fdfd 	bl	8005144 <USBD_GetString>
}
 800654a:	4620      	mov	r0, r4
 800654c:	bd10      	pop	{r4, pc}
 800654e:	bf00      	nop
 8006550:	20005d18 	.word	0x20005d18
 8006554:	080068f3 	.word	0x080068f3

08006558 <USBD_FS_ProductStrDescriptor>:
{
 8006558:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800655a:	4c04      	ldr	r4, [pc, #16]	; (800656c <USBD_FS_ProductStrDescriptor+0x14>)
 800655c:	460a      	mov	r2, r1
 800655e:	4804      	ldr	r0, [pc, #16]	; (8006570 <USBD_FS_ProductStrDescriptor+0x18>)
 8006560:	4621      	mov	r1, r4
 8006562:	f7fe fdef 	bl	8005144 <USBD_GetString>
}
 8006566:	4620      	mov	r0, r4
 8006568:	bd10      	pop	{r4, pc}
 800656a:	bf00      	nop
 800656c:	20005d18 	.word	0x20005d18
 8006570:	08006906 	.word	0x08006906

08006574 <USBD_FS_SerialStrDescriptor>:
{
 8006574:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8006576:	4c04      	ldr	r4, [pc, #16]	; (8006588 <USBD_FS_SerialStrDescriptor+0x14>)
 8006578:	460a      	mov	r2, r1
 800657a:	4804      	ldr	r0, [pc, #16]	; (800658c <USBD_FS_SerialStrDescriptor+0x18>)
 800657c:	4621      	mov	r1, r4
 800657e:	f7fe fde1 	bl	8005144 <USBD_GetString>
}
 8006582:	4620      	mov	r0, r4
 8006584:	bd10      	pop	{r4, pc}
 8006586:	bf00      	nop
 8006588:	20005d18 	.word	0x20005d18
 800658c:	0800691c 	.word	0x0800691c

08006590 <USBD_FS_ConfigStrDescriptor>:
{
 8006590:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006592:	4c04      	ldr	r4, [pc, #16]	; (80065a4 <USBD_FS_ConfigStrDescriptor+0x14>)
 8006594:	460a      	mov	r2, r1
 8006596:	4804      	ldr	r0, [pc, #16]	; (80065a8 <USBD_FS_ConfigStrDescriptor+0x18>)
 8006598:	4621      	mov	r1, r4
 800659a:	f7fe fdd3 	bl	8005144 <USBD_GetString>
}
 800659e:	4620      	mov	r0, r4
 80065a0:	bd10      	pop	{r4, pc}
 80065a2:	bf00      	nop
 80065a4:	20005d18 	.word	0x20005d18
 80065a8:	080068da 	.word	0x080068da

080065ac <USBD_FS_InterfaceStrDescriptor>:
{
 80065ac:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80065ae:	4c04      	ldr	r4, [pc, #16]	; (80065c0 <USBD_FS_InterfaceStrDescriptor+0x14>)
 80065b0:	460a      	mov	r2, r1
 80065b2:	4804      	ldr	r0, [pc, #16]	; (80065c4 <USBD_FS_InterfaceStrDescriptor+0x18>)
 80065b4:	4621      	mov	r1, r4
 80065b6:	f7fe fdc5 	bl	8005144 <USBD_GetString>
}
 80065ba:	4620      	mov	r0, r4
 80065bc:	bd10      	pop	{r4, pc}
 80065be:	bf00      	nop
 80065c0:	20005d18 	.word	0x20005d18
 80065c4:	080068e5 	.word	0x080068e5

080065c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80065c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006600 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80065cc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80065ce:	e003      	b.n	80065d8 <LoopCopyDataInit>

080065d0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80065d0:	4b0c      	ldr	r3, [pc, #48]	; (8006604 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80065d2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80065d4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80065d6:	3104      	adds	r1, #4

080065d8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80065d8:	480b      	ldr	r0, [pc, #44]	; (8006608 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80065da:	4b0c      	ldr	r3, [pc, #48]	; (800660c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80065dc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80065de:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80065e0:	d3f6      	bcc.n	80065d0 <CopyDataInit>
  ldr  r2, =_sbss
 80065e2:	4a0b      	ldr	r2, [pc, #44]	; (8006610 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80065e4:	e002      	b.n	80065ec <LoopFillZerobss>

080065e6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80065e6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80065e8:	f842 3b04 	str.w	r3, [r2], #4

080065ec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80065ec:	4b09      	ldr	r3, [pc, #36]	; (8006614 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80065ee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80065f0:	d3f9      	bcc.n	80065e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80065f2:	f7ff fc13 	bl	8005e1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80065f6:	f000 f811 	bl	800661c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80065fa:	f7ff f855 	bl	80056a8 <main>
  bx  lr    
 80065fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006600:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8006604:	0800693c 	.word	0x0800693c
  ldr  r0, =_sdata
 8006608:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800660c:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8006610:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8006614:	20005f1c 	.word	0x20005f1c

08006618 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006618:	e7fe      	b.n	8006618 <ADC_IRQHandler>
	...

0800661c <__libc_init_array>:
 800661c:	b570      	push	{r4, r5, r6, lr}
 800661e:	4e0d      	ldr	r6, [pc, #52]	; (8006654 <__libc_init_array+0x38>)
 8006620:	4c0d      	ldr	r4, [pc, #52]	; (8006658 <__libc_init_array+0x3c>)
 8006622:	1ba4      	subs	r4, r4, r6
 8006624:	10a4      	asrs	r4, r4, #2
 8006626:	2500      	movs	r5, #0
 8006628:	42a5      	cmp	r5, r4
 800662a:	d109      	bne.n	8006640 <__libc_init_array+0x24>
 800662c:	4e0b      	ldr	r6, [pc, #44]	; (800665c <__libc_init_array+0x40>)
 800662e:	4c0c      	ldr	r4, [pc, #48]	; (8006660 <__libc_init_array+0x44>)
 8006630:	f000 f8f4 	bl	800681c <_init>
 8006634:	1ba4      	subs	r4, r4, r6
 8006636:	10a4      	asrs	r4, r4, #2
 8006638:	2500      	movs	r5, #0
 800663a:	42a5      	cmp	r5, r4
 800663c:	d105      	bne.n	800664a <__libc_init_array+0x2e>
 800663e:	bd70      	pop	{r4, r5, r6, pc}
 8006640:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006644:	4798      	blx	r3
 8006646:	3501      	adds	r5, #1
 8006648:	e7ee      	b.n	8006628 <__libc_init_array+0xc>
 800664a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800664e:	4798      	blx	r3
 8006650:	3501      	adds	r5, #1
 8006652:	e7f2      	b.n	800663a <__libc_init_array+0x1e>
 8006654:	08006934 	.word	0x08006934
 8006658:	08006934 	.word	0x08006934
 800665c:	08006934 	.word	0x08006934
 8006660:	08006938 	.word	0x08006938

08006664 <malloc>:
 8006664:	4b02      	ldr	r3, [pc, #8]	; (8006670 <malloc+0xc>)
 8006666:	4601      	mov	r1, r0
 8006668:	6818      	ldr	r0, [r3, #0]
 800666a:	f000 b859 	b.w	8006720 <_malloc_r>
 800666e:	bf00      	nop
 8006670:	20000178 	.word	0x20000178

08006674 <free>:
 8006674:	4b02      	ldr	r3, [pc, #8]	; (8006680 <free+0xc>)
 8006676:	4601      	mov	r1, r0
 8006678:	6818      	ldr	r0, [r3, #0]
 800667a:	f000 b803 	b.w	8006684 <_free_r>
 800667e:	bf00      	nop
 8006680:	20000178 	.word	0x20000178

08006684 <_free_r>:
 8006684:	b538      	push	{r3, r4, r5, lr}
 8006686:	4605      	mov	r5, r0
 8006688:	2900      	cmp	r1, #0
 800668a:	d045      	beq.n	8006718 <_free_r+0x94>
 800668c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006690:	1f0c      	subs	r4, r1, #4
 8006692:	2b00      	cmp	r3, #0
 8006694:	bfb8      	it	lt
 8006696:	18e4      	addlt	r4, r4, r3
 8006698:	f000 f8b0 	bl	80067fc <__malloc_lock>
 800669c:	4a1f      	ldr	r2, [pc, #124]	; (800671c <_free_r+0x98>)
 800669e:	6813      	ldr	r3, [r2, #0]
 80066a0:	4610      	mov	r0, r2
 80066a2:	b933      	cbnz	r3, 80066b2 <_free_r+0x2e>
 80066a4:	6063      	str	r3, [r4, #4]
 80066a6:	6014      	str	r4, [r2, #0]
 80066a8:	4628      	mov	r0, r5
 80066aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80066ae:	f000 b8a6 	b.w	80067fe <__malloc_unlock>
 80066b2:	42a3      	cmp	r3, r4
 80066b4:	d90c      	bls.n	80066d0 <_free_r+0x4c>
 80066b6:	6821      	ldr	r1, [r4, #0]
 80066b8:	1862      	adds	r2, r4, r1
 80066ba:	4293      	cmp	r3, r2
 80066bc:	bf04      	itt	eq
 80066be:	681a      	ldreq	r2, [r3, #0]
 80066c0:	685b      	ldreq	r3, [r3, #4]
 80066c2:	6063      	str	r3, [r4, #4]
 80066c4:	bf04      	itt	eq
 80066c6:	1852      	addeq	r2, r2, r1
 80066c8:	6022      	streq	r2, [r4, #0]
 80066ca:	6004      	str	r4, [r0, #0]
 80066cc:	e7ec      	b.n	80066a8 <_free_r+0x24>
 80066ce:	4613      	mov	r3, r2
 80066d0:	685a      	ldr	r2, [r3, #4]
 80066d2:	b10a      	cbz	r2, 80066d8 <_free_r+0x54>
 80066d4:	42a2      	cmp	r2, r4
 80066d6:	d9fa      	bls.n	80066ce <_free_r+0x4a>
 80066d8:	6819      	ldr	r1, [r3, #0]
 80066da:	1858      	adds	r0, r3, r1
 80066dc:	42a0      	cmp	r0, r4
 80066de:	d10b      	bne.n	80066f8 <_free_r+0x74>
 80066e0:	6820      	ldr	r0, [r4, #0]
 80066e2:	4401      	add	r1, r0
 80066e4:	1858      	adds	r0, r3, r1
 80066e6:	4282      	cmp	r2, r0
 80066e8:	6019      	str	r1, [r3, #0]
 80066ea:	d1dd      	bne.n	80066a8 <_free_r+0x24>
 80066ec:	6810      	ldr	r0, [r2, #0]
 80066ee:	6852      	ldr	r2, [r2, #4]
 80066f0:	605a      	str	r2, [r3, #4]
 80066f2:	4401      	add	r1, r0
 80066f4:	6019      	str	r1, [r3, #0]
 80066f6:	e7d7      	b.n	80066a8 <_free_r+0x24>
 80066f8:	d902      	bls.n	8006700 <_free_r+0x7c>
 80066fa:	230c      	movs	r3, #12
 80066fc:	602b      	str	r3, [r5, #0]
 80066fe:	e7d3      	b.n	80066a8 <_free_r+0x24>
 8006700:	6820      	ldr	r0, [r4, #0]
 8006702:	1821      	adds	r1, r4, r0
 8006704:	428a      	cmp	r2, r1
 8006706:	bf04      	itt	eq
 8006708:	6811      	ldreq	r1, [r2, #0]
 800670a:	6852      	ldreq	r2, [r2, #4]
 800670c:	6062      	str	r2, [r4, #4]
 800670e:	bf04      	itt	eq
 8006710:	1809      	addeq	r1, r1, r0
 8006712:	6021      	streq	r1, [r4, #0]
 8006714:	605c      	str	r4, [r3, #4]
 8006716:	e7c7      	b.n	80066a8 <_free_r+0x24>
 8006718:	bd38      	pop	{r3, r4, r5, pc}
 800671a:	bf00      	nop
 800671c:	20003f4c 	.word	0x20003f4c

08006720 <_malloc_r>:
 8006720:	b570      	push	{r4, r5, r6, lr}
 8006722:	1ccd      	adds	r5, r1, #3
 8006724:	f025 0503 	bic.w	r5, r5, #3
 8006728:	3508      	adds	r5, #8
 800672a:	2d0c      	cmp	r5, #12
 800672c:	bf38      	it	cc
 800672e:	250c      	movcc	r5, #12
 8006730:	2d00      	cmp	r5, #0
 8006732:	4606      	mov	r6, r0
 8006734:	db01      	blt.n	800673a <_malloc_r+0x1a>
 8006736:	42a9      	cmp	r1, r5
 8006738:	d903      	bls.n	8006742 <_malloc_r+0x22>
 800673a:	230c      	movs	r3, #12
 800673c:	6033      	str	r3, [r6, #0]
 800673e:	2000      	movs	r0, #0
 8006740:	bd70      	pop	{r4, r5, r6, pc}
 8006742:	f000 f85b 	bl	80067fc <__malloc_lock>
 8006746:	4a23      	ldr	r2, [pc, #140]	; (80067d4 <_malloc_r+0xb4>)
 8006748:	6814      	ldr	r4, [r2, #0]
 800674a:	4621      	mov	r1, r4
 800674c:	b991      	cbnz	r1, 8006774 <_malloc_r+0x54>
 800674e:	4c22      	ldr	r4, [pc, #136]	; (80067d8 <_malloc_r+0xb8>)
 8006750:	6823      	ldr	r3, [r4, #0]
 8006752:	b91b      	cbnz	r3, 800675c <_malloc_r+0x3c>
 8006754:	4630      	mov	r0, r6
 8006756:	f000 f841 	bl	80067dc <_sbrk_r>
 800675a:	6020      	str	r0, [r4, #0]
 800675c:	4629      	mov	r1, r5
 800675e:	4630      	mov	r0, r6
 8006760:	f000 f83c 	bl	80067dc <_sbrk_r>
 8006764:	1c43      	adds	r3, r0, #1
 8006766:	d126      	bne.n	80067b6 <_malloc_r+0x96>
 8006768:	230c      	movs	r3, #12
 800676a:	6033      	str	r3, [r6, #0]
 800676c:	4630      	mov	r0, r6
 800676e:	f000 f846 	bl	80067fe <__malloc_unlock>
 8006772:	e7e4      	b.n	800673e <_malloc_r+0x1e>
 8006774:	680b      	ldr	r3, [r1, #0]
 8006776:	1b5b      	subs	r3, r3, r5
 8006778:	d41a      	bmi.n	80067b0 <_malloc_r+0x90>
 800677a:	2b0b      	cmp	r3, #11
 800677c:	d90f      	bls.n	800679e <_malloc_r+0x7e>
 800677e:	600b      	str	r3, [r1, #0]
 8006780:	50cd      	str	r5, [r1, r3]
 8006782:	18cc      	adds	r4, r1, r3
 8006784:	4630      	mov	r0, r6
 8006786:	f000 f83a 	bl	80067fe <__malloc_unlock>
 800678a:	f104 000b 	add.w	r0, r4, #11
 800678e:	1d23      	adds	r3, r4, #4
 8006790:	f020 0007 	bic.w	r0, r0, #7
 8006794:	1ac3      	subs	r3, r0, r3
 8006796:	d01b      	beq.n	80067d0 <_malloc_r+0xb0>
 8006798:	425a      	negs	r2, r3
 800679a:	50e2      	str	r2, [r4, r3]
 800679c:	bd70      	pop	{r4, r5, r6, pc}
 800679e:	428c      	cmp	r4, r1
 80067a0:	bf0d      	iteet	eq
 80067a2:	6863      	ldreq	r3, [r4, #4]
 80067a4:	684b      	ldrne	r3, [r1, #4]
 80067a6:	6063      	strne	r3, [r4, #4]
 80067a8:	6013      	streq	r3, [r2, #0]
 80067aa:	bf18      	it	ne
 80067ac:	460c      	movne	r4, r1
 80067ae:	e7e9      	b.n	8006784 <_malloc_r+0x64>
 80067b0:	460c      	mov	r4, r1
 80067b2:	6849      	ldr	r1, [r1, #4]
 80067b4:	e7ca      	b.n	800674c <_malloc_r+0x2c>
 80067b6:	1cc4      	adds	r4, r0, #3
 80067b8:	f024 0403 	bic.w	r4, r4, #3
 80067bc:	42a0      	cmp	r0, r4
 80067be:	d005      	beq.n	80067cc <_malloc_r+0xac>
 80067c0:	1a21      	subs	r1, r4, r0
 80067c2:	4630      	mov	r0, r6
 80067c4:	f000 f80a 	bl	80067dc <_sbrk_r>
 80067c8:	3001      	adds	r0, #1
 80067ca:	d0cd      	beq.n	8006768 <_malloc_r+0x48>
 80067cc:	6025      	str	r5, [r4, #0]
 80067ce:	e7d9      	b.n	8006784 <_malloc_r+0x64>
 80067d0:	bd70      	pop	{r4, r5, r6, pc}
 80067d2:	bf00      	nop
 80067d4:	20003f4c 	.word	0x20003f4c
 80067d8:	20003f50 	.word	0x20003f50

080067dc <_sbrk_r>:
 80067dc:	b538      	push	{r3, r4, r5, lr}
 80067de:	4c06      	ldr	r4, [pc, #24]	; (80067f8 <_sbrk_r+0x1c>)
 80067e0:	2300      	movs	r3, #0
 80067e2:	4605      	mov	r5, r0
 80067e4:	4608      	mov	r0, r1
 80067e6:	6023      	str	r3, [r4, #0]
 80067e8:	f000 f80a 	bl	8006800 <_sbrk>
 80067ec:	1c43      	adds	r3, r0, #1
 80067ee:	d102      	bne.n	80067f6 <_sbrk_r+0x1a>
 80067f0:	6823      	ldr	r3, [r4, #0]
 80067f2:	b103      	cbz	r3, 80067f6 <_sbrk_r+0x1a>
 80067f4:	602b      	str	r3, [r5, #0]
 80067f6:	bd38      	pop	{r3, r4, r5, pc}
 80067f8:	20005f18 	.word	0x20005f18

080067fc <__malloc_lock>:
 80067fc:	4770      	bx	lr

080067fe <__malloc_unlock>:
 80067fe:	4770      	bx	lr

08006800 <_sbrk>:
 8006800:	4b04      	ldr	r3, [pc, #16]	; (8006814 <_sbrk+0x14>)
 8006802:	6819      	ldr	r1, [r3, #0]
 8006804:	4602      	mov	r2, r0
 8006806:	b909      	cbnz	r1, 800680c <_sbrk+0xc>
 8006808:	4903      	ldr	r1, [pc, #12]	; (8006818 <_sbrk+0x18>)
 800680a:	6019      	str	r1, [r3, #0]
 800680c:	6818      	ldr	r0, [r3, #0]
 800680e:	4402      	add	r2, r0
 8006810:	601a      	str	r2, [r3, #0]
 8006812:	4770      	bx	lr
 8006814:	20003f54 	.word	0x20003f54
 8006818:	20005f1c 	.word	0x20005f1c

0800681c <_init>:
 800681c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800681e:	bf00      	nop
 8006820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006822:	bc08      	pop	{r3}
 8006824:	469e      	mov	lr, r3
 8006826:	4770      	bx	lr

08006828 <_fini>:
 8006828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800682a:	bf00      	nop
 800682c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800682e:	bc08      	pop	{r3}
 8006830:	469e      	mov	lr, r3
 8006832:	4770      	bx	lr
