
USB_Cube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072f0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  080074f0  080074f0  000174f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800766c  0800766c  0001766c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007674  08007674  00017674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007678  08007678  00017678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000017c  20000000  0800767c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000053dc  2000017c  080077f8  0002017c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20005558  080077f8  00025558  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000464c4  00000000  00000000  000201aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000085a2  00000000  00000000  0006666e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0001a1df  00000000  00000000  0006ec10  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001cb0  00000000  00000000  00088df0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00002a08  00000000  00000000  0008aaa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000126df  00000000  00000000  0008d4a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000a07c  00000000  00000000  0009fb87  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000a9c03  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005398  00000000  00000000  000a9c80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000017c 	.word	0x2000017c
 800021c:	00000000 	.word	0x00000000
 8000220:	080074d8 	.word	0x080074d8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000180 	.word	0x20000180
 800023c:	080074d8 	.word	0x080074d8

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b97a 	b.w	800054c <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	468c      	mov	ip, r1
 8000276:	460d      	mov	r5, r1
 8000278:	4604      	mov	r4, r0
 800027a:	9e08      	ldr	r6, [sp, #32]
 800027c:	2b00      	cmp	r3, #0
 800027e:	d151      	bne.n	8000324 <__udivmoddi4+0xb4>
 8000280:	428a      	cmp	r2, r1
 8000282:	4617      	mov	r7, r2
 8000284:	d96d      	bls.n	8000362 <__udivmoddi4+0xf2>
 8000286:	fab2 fe82 	clz	lr, r2
 800028a:	f1be 0f00 	cmp.w	lr, #0
 800028e:	d00b      	beq.n	80002a8 <__udivmoddi4+0x38>
 8000290:	f1ce 0c20 	rsb	ip, lr, #32
 8000294:	fa01 f50e 	lsl.w	r5, r1, lr
 8000298:	fa20 fc0c 	lsr.w	ip, r0, ip
 800029c:	fa02 f70e 	lsl.w	r7, r2, lr
 80002a0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002a4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002a8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002ac:	0c25      	lsrs	r5, r4, #16
 80002ae:	fbbc f8fa 	udiv	r8, ip, sl
 80002b2:	fa1f f987 	uxth.w	r9, r7
 80002b6:	fb0a cc18 	mls	ip, sl, r8, ip
 80002ba:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002be:	fb08 f309 	mul.w	r3, r8, r9
 80002c2:	42ab      	cmp	r3, r5
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x6c>
 80002c6:	19ed      	adds	r5, r5, r7
 80002c8:	f108 32ff 	add.w	r2, r8, #4294967295
 80002cc:	f080 8123 	bcs.w	8000516 <__udivmoddi4+0x2a6>
 80002d0:	42ab      	cmp	r3, r5
 80002d2:	f240 8120 	bls.w	8000516 <__udivmoddi4+0x2a6>
 80002d6:	f1a8 0802 	sub.w	r8, r8, #2
 80002da:	443d      	add	r5, r7
 80002dc:	1aed      	subs	r5, r5, r3
 80002de:	b2a4      	uxth	r4, r4
 80002e0:	fbb5 f0fa 	udiv	r0, r5, sl
 80002e4:	fb0a 5510 	mls	r5, sl, r0, r5
 80002e8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002ec:	fb00 f909 	mul.w	r9, r0, r9
 80002f0:	45a1      	cmp	r9, r4
 80002f2:	d909      	bls.n	8000308 <__udivmoddi4+0x98>
 80002f4:	19e4      	adds	r4, r4, r7
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	f080 810a 	bcs.w	8000512 <__udivmoddi4+0x2a2>
 80002fe:	45a1      	cmp	r9, r4
 8000300:	f240 8107 	bls.w	8000512 <__udivmoddi4+0x2a2>
 8000304:	3802      	subs	r0, #2
 8000306:	443c      	add	r4, r7
 8000308:	eba4 0409 	sub.w	r4, r4, r9
 800030c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000310:	2100      	movs	r1, #0
 8000312:	2e00      	cmp	r6, #0
 8000314:	d061      	beq.n	80003da <__udivmoddi4+0x16a>
 8000316:	fa24 f40e 	lsr.w	r4, r4, lr
 800031a:	2300      	movs	r3, #0
 800031c:	6034      	str	r4, [r6, #0]
 800031e:	6073      	str	r3, [r6, #4]
 8000320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000324:	428b      	cmp	r3, r1
 8000326:	d907      	bls.n	8000338 <__udivmoddi4+0xc8>
 8000328:	2e00      	cmp	r6, #0
 800032a:	d054      	beq.n	80003d6 <__udivmoddi4+0x166>
 800032c:	2100      	movs	r1, #0
 800032e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000332:	4608      	mov	r0, r1
 8000334:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000338:	fab3 f183 	clz	r1, r3
 800033c:	2900      	cmp	r1, #0
 800033e:	f040 808e 	bne.w	800045e <__udivmoddi4+0x1ee>
 8000342:	42ab      	cmp	r3, r5
 8000344:	d302      	bcc.n	800034c <__udivmoddi4+0xdc>
 8000346:	4282      	cmp	r2, r0
 8000348:	f200 80fa 	bhi.w	8000540 <__udivmoddi4+0x2d0>
 800034c:	1a84      	subs	r4, r0, r2
 800034e:	eb65 0503 	sbc.w	r5, r5, r3
 8000352:	2001      	movs	r0, #1
 8000354:	46ac      	mov	ip, r5
 8000356:	2e00      	cmp	r6, #0
 8000358:	d03f      	beq.n	80003da <__udivmoddi4+0x16a>
 800035a:	e886 1010 	stmia.w	r6, {r4, ip}
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	b912      	cbnz	r2, 800036a <__udivmoddi4+0xfa>
 8000364:	2701      	movs	r7, #1
 8000366:	fbb7 f7f2 	udiv	r7, r7, r2
 800036a:	fab7 fe87 	clz	lr, r7
 800036e:	f1be 0f00 	cmp.w	lr, #0
 8000372:	d134      	bne.n	80003de <__udivmoddi4+0x16e>
 8000374:	1beb      	subs	r3, r5, r7
 8000376:	0c3a      	lsrs	r2, r7, #16
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	2101      	movs	r1, #1
 800037e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000382:	0c25      	lsrs	r5, r4, #16
 8000384:	fb02 3318 	mls	r3, r2, r8, r3
 8000388:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800038c:	fb0c f308 	mul.w	r3, ip, r8
 8000390:	42ab      	cmp	r3, r5
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0x134>
 8000394:	19ed      	adds	r5, r5, r7
 8000396:	f108 30ff 	add.w	r0, r8, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0x132>
 800039c:	42ab      	cmp	r3, r5
 800039e:	f200 80d1 	bhi.w	8000544 <__udivmoddi4+0x2d4>
 80003a2:	4680      	mov	r8, r0
 80003a4:	1aed      	subs	r5, r5, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003ac:	fb02 5510 	mls	r5, r2, r0, r5
 80003b0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003b4:	fb0c fc00 	mul.w	ip, ip, r0
 80003b8:	45a4      	cmp	ip, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x15c>
 80003bc:	19e4      	adds	r4, r4, r7
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x15a>
 80003c4:	45a4      	cmp	ip, r4
 80003c6:	f200 80b8 	bhi.w	800053a <__udivmoddi4+0x2ca>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 040c 	sub.w	r4, r4, ip
 80003d0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003d4:	e79d      	b.n	8000312 <__udivmoddi4+0xa2>
 80003d6:	4631      	mov	r1, r6
 80003d8:	4630      	mov	r0, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	f1ce 0420 	rsb	r4, lr, #32
 80003e2:	fa05 f30e 	lsl.w	r3, r5, lr
 80003e6:	fa07 f70e 	lsl.w	r7, r7, lr
 80003ea:	fa20 f804 	lsr.w	r8, r0, r4
 80003ee:	0c3a      	lsrs	r2, r7, #16
 80003f0:	fa25 f404 	lsr.w	r4, r5, r4
 80003f4:	ea48 0803 	orr.w	r8, r8, r3
 80003f8:	fbb4 f1f2 	udiv	r1, r4, r2
 80003fc:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000400:	fb02 4411 	mls	r4, r2, r1, r4
 8000404:	fa1f fc87 	uxth.w	ip, r7
 8000408:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800040c:	fb01 f30c 	mul.w	r3, r1, ip
 8000410:	42ab      	cmp	r3, r5
 8000412:	fa00 f40e 	lsl.w	r4, r0, lr
 8000416:	d909      	bls.n	800042c <__udivmoddi4+0x1bc>
 8000418:	19ed      	adds	r5, r5, r7
 800041a:	f101 30ff 	add.w	r0, r1, #4294967295
 800041e:	f080 808a 	bcs.w	8000536 <__udivmoddi4+0x2c6>
 8000422:	42ab      	cmp	r3, r5
 8000424:	f240 8087 	bls.w	8000536 <__udivmoddi4+0x2c6>
 8000428:	3902      	subs	r1, #2
 800042a:	443d      	add	r5, r7
 800042c:	1aeb      	subs	r3, r5, r3
 800042e:	fa1f f588 	uxth.w	r5, r8
 8000432:	fbb3 f0f2 	udiv	r0, r3, r2
 8000436:	fb02 3310 	mls	r3, r2, r0, r3
 800043a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800043e:	fb00 f30c 	mul.w	r3, r0, ip
 8000442:	42ab      	cmp	r3, r5
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x1e6>
 8000446:	19ed      	adds	r5, r5, r7
 8000448:	f100 38ff 	add.w	r8, r0, #4294967295
 800044c:	d26f      	bcs.n	800052e <__udivmoddi4+0x2be>
 800044e:	42ab      	cmp	r3, r5
 8000450:	d96d      	bls.n	800052e <__udivmoddi4+0x2be>
 8000452:	3802      	subs	r0, #2
 8000454:	443d      	add	r5, r7
 8000456:	1aeb      	subs	r3, r5, r3
 8000458:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800045c:	e78f      	b.n	800037e <__udivmoddi4+0x10e>
 800045e:	f1c1 0720 	rsb	r7, r1, #32
 8000462:	fa22 f807 	lsr.w	r8, r2, r7
 8000466:	408b      	lsls	r3, r1
 8000468:	fa05 f401 	lsl.w	r4, r5, r1
 800046c:	ea48 0303 	orr.w	r3, r8, r3
 8000470:	fa20 fe07 	lsr.w	lr, r0, r7
 8000474:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000478:	40fd      	lsrs	r5, r7
 800047a:	ea4e 0e04 	orr.w	lr, lr, r4
 800047e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000482:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000486:	fb0c 5519 	mls	r5, ip, r9, r5
 800048a:	fa1f f883 	uxth.w	r8, r3
 800048e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000492:	fb09 f408 	mul.w	r4, r9, r8
 8000496:	42ac      	cmp	r4, r5
 8000498:	fa02 f201 	lsl.w	r2, r2, r1
 800049c:	fa00 fa01 	lsl.w	sl, r0, r1
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x244>
 80004a2:	18ed      	adds	r5, r5, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	d243      	bcs.n	8000532 <__udivmoddi4+0x2c2>
 80004aa:	42ac      	cmp	r4, r5
 80004ac:	d941      	bls.n	8000532 <__udivmoddi4+0x2c2>
 80004ae:	f1a9 0902 	sub.w	r9, r9, #2
 80004b2:	441d      	add	r5, r3
 80004b4:	1b2d      	subs	r5, r5, r4
 80004b6:	fa1f fe8e 	uxth.w	lr, lr
 80004ba:	fbb5 f0fc 	udiv	r0, r5, ip
 80004be:	fb0c 5510 	mls	r5, ip, r0, r5
 80004c2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80004c6:	fb00 f808 	mul.w	r8, r0, r8
 80004ca:	45a0      	cmp	r8, r4
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x26e>
 80004ce:	18e4      	adds	r4, r4, r3
 80004d0:	f100 35ff 	add.w	r5, r0, #4294967295
 80004d4:	d229      	bcs.n	800052a <__udivmoddi4+0x2ba>
 80004d6:	45a0      	cmp	r8, r4
 80004d8:	d927      	bls.n	800052a <__udivmoddi4+0x2ba>
 80004da:	3802      	subs	r0, #2
 80004dc:	441c      	add	r4, r3
 80004de:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e2:	eba4 0408 	sub.w	r4, r4, r8
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	454c      	cmp	r4, r9
 80004ec:	46c6      	mov	lr, r8
 80004ee:	464d      	mov	r5, r9
 80004f0:	d315      	bcc.n	800051e <__udivmoddi4+0x2ae>
 80004f2:	d012      	beq.n	800051a <__udivmoddi4+0x2aa>
 80004f4:	b156      	cbz	r6, 800050c <__udivmoddi4+0x29c>
 80004f6:	ebba 030e 	subs.w	r3, sl, lr
 80004fa:	eb64 0405 	sbc.w	r4, r4, r5
 80004fe:	fa04 f707 	lsl.w	r7, r4, r7
 8000502:	40cb      	lsrs	r3, r1
 8000504:	431f      	orrs	r7, r3
 8000506:	40cc      	lsrs	r4, r1
 8000508:	6037      	str	r7, [r6, #0]
 800050a:	6074      	str	r4, [r6, #4]
 800050c:	2100      	movs	r1, #0
 800050e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000512:	4618      	mov	r0, r3
 8000514:	e6f8      	b.n	8000308 <__udivmoddi4+0x98>
 8000516:	4690      	mov	r8, r2
 8000518:	e6e0      	b.n	80002dc <__udivmoddi4+0x6c>
 800051a:	45c2      	cmp	sl, r8
 800051c:	d2ea      	bcs.n	80004f4 <__udivmoddi4+0x284>
 800051e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000522:	eb69 0503 	sbc.w	r5, r9, r3
 8000526:	3801      	subs	r0, #1
 8000528:	e7e4      	b.n	80004f4 <__udivmoddi4+0x284>
 800052a:	4628      	mov	r0, r5
 800052c:	e7d7      	b.n	80004de <__udivmoddi4+0x26e>
 800052e:	4640      	mov	r0, r8
 8000530:	e791      	b.n	8000456 <__udivmoddi4+0x1e6>
 8000532:	4681      	mov	r9, r0
 8000534:	e7be      	b.n	80004b4 <__udivmoddi4+0x244>
 8000536:	4601      	mov	r1, r0
 8000538:	e778      	b.n	800042c <__udivmoddi4+0x1bc>
 800053a:	3802      	subs	r0, #2
 800053c:	443c      	add	r4, r7
 800053e:	e745      	b.n	80003cc <__udivmoddi4+0x15c>
 8000540:	4608      	mov	r0, r1
 8000542:	e708      	b.n	8000356 <__udivmoddi4+0xe6>
 8000544:	f1a8 0802 	sub.w	r8, r8, #2
 8000548:	443d      	add	r5, r7
 800054a:	e72b      	b.n	80003a4 <__udivmoddi4+0x134>

0800054c <__aeabi_idiv0>:
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop

08000550 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000550:	b508      	push	{r3, lr}
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000552:	2003      	movs	r0, #3
 8000554:	f000 f82c 	bl	80005b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000558:	2000      	movs	r0, #0
 800055a:	f006 f9a9 	bl	80068b0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800055e:	f006 f941 	bl	80067e4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 8000562:	2000      	movs	r0, #0
 8000564:	bd08      	pop	{r3, pc}
	...

08000568 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000568:	4a03      	ldr	r2, [pc, #12]	; (8000578 <HAL_IncTick+0x10>)
 800056a:	4b04      	ldr	r3, [pc, #16]	; (800057c <HAL_IncTick+0x14>)
 800056c:	6811      	ldr	r1, [r2, #0]
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	440b      	add	r3, r1
 8000572:	6013      	str	r3, [r2, #0]
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop
 8000578:	20003f10 	.word	0x20003f10
 800057c:	20000000 	.word	0x20000000

08000580 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000580:	4b01      	ldr	r3, [pc, #4]	; (8000588 <HAL_GetTick+0x8>)
 8000582:	6818      	ldr	r0, [r3, #0]
}
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	20003f10 	.word	0x20003f10

0800058c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800058c:	b538      	push	{r3, r4, r5, lr}
 800058e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000590:	f7ff fff6 	bl	8000580 <HAL_GetTick>
 8000594:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000596:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000598:	bf1e      	ittt	ne
 800059a:	4b04      	ldrne	r3, [pc, #16]	; (80005ac <HAL_Delay+0x20>)
 800059c:	781b      	ldrbne	r3, [r3, #0]
 800059e:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80005a0:	f7ff ffee 	bl	8000580 <HAL_GetTick>
 80005a4:	1b40      	subs	r0, r0, r5
 80005a6:	4284      	cmp	r4, r0
 80005a8:	d8fa      	bhi.n	80005a0 <HAL_Delay+0x14>
  {
  }
}
 80005aa:	bd38      	pop	{r3, r4, r5, pc}
 80005ac:	20000000 	.word	0x20000000

080005b0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005b0:	4a07      	ldr	r2, [pc, #28]	; (80005d0 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80005b2:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005b4:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80005b6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005ba:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80005be:	041b      	lsls	r3, r3, #16
 80005c0:	0c1b      	lsrs	r3, r3, #16
 80005c2:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80005ca:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80005cc:	60d3      	str	r3, [r2, #12]
 80005ce:	4770      	bx	lr
 80005d0:	e000ed00 	.word	0xe000ed00

080005d4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005d4:	4b19      	ldr	r3, [pc, #100]	; (800063c <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005d6:	b530      	push	{r4, r5, lr}
 80005d8:	68dc      	ldr	r4, [r3, #12]
 80005da:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005de:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005e2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005e4:	2b04      	cmp	r3, #4
 80005e6:	bf28      	it	cs
 80005e8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005ea:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005ec:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005f0:	bf8c      	ite	hi
 80005f2:	3c03      	subhi	r4, #3
 80005f4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005f6:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) < 0)
 80005fa:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005fc:	f103 33ff 	add.w	r3, r3, #4294967295
 8000600:	ea01 0103 	and.w	r1, r1, r3
 8000604:	fa01 f104 	lsl.w	r1, r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000608:	fa05 f404 	lsl.w	r4, r5, r4
 800060c:	f104 34ff 	add.w	r4, r4, #4294967295
 8000610:	ea02 0204 	and.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000614:	ea42 0201 	orr.w	r2, r2, r1
 8000618:	ea4f 1202 	mov.w	r2, r2, lsl #4
  if ((int32_t)(IRQn) < 0)
 800061c:	da05      	bge.n	800062a <HAL_NVIC_SetPriority+0x56>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800061e:	f000 000f 	and.w	r0, r0, #15
 8000622:	b2d2      	uxtb	r2, r2
 8000624:	4b06      	ldr	r3, [pc, #24]	; (8000640 <HAL_NVIC_SetPriority+0x6c>)
 8000626:	541a      	strb	r2, [r3, r0]
 8000628:	bd30      	pop	{r4, r5, pc}
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800062a:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800062e:	b2d2      	uxtb	r2, r2
 8000630:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000634:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	bf00      	nop
 800063c:	e000ed00 	.word	0xe000ed00
 8000640:	e000ed14 	.word	0xe000ed14

08000644 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000644:	0942      	lsrs	r2, r0, #5
 8000646:	2301      	movs	r3, #1
 8000648:	f000 001f 	and.w	r0, r0, #31
 800064c:	fa03 f000 	lsl.w	r0, r3, r0
 8000650:	4b01      	ldr	r3, [pc, #4]	; (8000658 <HAL_NVIC_EnableIRQ+0x14>)
 8000652:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000656:	4770      	bx	lr
 8000658:	e000e100 	.word	0xe000e100

0800065c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800065c:	3801      	subs	r0, #1
 800065e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000662:	d20a      	bcs.n	800067a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000664:	4b06      	ldr	r3, [pc, #24]	; (8000680 <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000666:	21f0      	movs	r1, #240	; 0xf0
 8000668:	4a06      	ldr	r2, [pc, #24]	; (8000684 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800066a:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800066c:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800066e:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000672:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000674:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800067a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	e000e010 	.word	0xe000e010
 8000684:	e000ed00 	.word	0xe000ed00

08000688 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000688:	4b04      	ldr	r3, [pc, #16]	; (800069c <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800068a:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800068c:	681a      	ldr	r2, [r3, #0]
 800068e:	bf0c      	ite	eq
 8000690:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000694:	f022 0204 	bicne.w	r2, r2, #4
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	4770      	bx	lr
 800069c:	e000e010 	.word	0xe000e010

080006a0 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80006a0:	6803      	ldr	r3, [r0, #0]
 80006a2:	2118      	movs	r1, #24
 80006a4:	b2da      	uxtb	r2, r3
 80006a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80006aa:	3a10      	subs	r2, #16
 80006ac:	f023 0303 	bic.w	r3, r3, #3
 80006b0:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80006b4:	4904      	ldr	r1, [pc, #16]	; (80006c8 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 80006b6:	2a03      	cmp	r2, #3
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80006b8:	5c89      	ldrb	r1, [r1, r2]
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80006ba:	bf88      	it	hi
 80006bc:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80006be:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80006c0:	6583      	str	r3, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 80006c2:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	0800750c 	.word	0x0800750c

080006cc <HAL_DMA_Init>:
{
 80006cc:	b570      	push	{r4, r5, r6, lr}
 80006ce:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80006d0:	f7ff ff56 	bl	8000580 <HAL_GetTick>
 80006d4:	4605      	mov	r5, r0
  if(hdma == NULL)
 80006d6:	2c00      	cmp	r4, #0
 80006d8:	d071      	beq.n	80007be <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 80006da:	2300      	movs	r3, #0
  __HAL_DMA_DISABLE(hdma);
 80006dc:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
 80006de:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 80006e2:	2302      	movs	r3, #2
 80006e4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80006e8:	6813      	ldr	r3, [r2, #0]
 80006ea:	f023 0301 	bic.w	r3, r3, #1
 80006ee:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80006f0:	6821      	ldr	r1, [r4, #0]
 80006f2:	680b      	ldr	r3, [r1, #0]
 80006f4:	07d8      	lsls	r0, r3, #31
 80006f6:	d43c      	bmi.n	8000772 <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 80006f8:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80006fa:	4d32      	ldr	r5, [pc, #200]	; (80007c4 <HAL_DMA_Init+0xf8>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80006fc:	6862      	ldr	r2, [r4, #4]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80006fe:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000700:	68a3      	ldr	r3, [r4, #8]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000702:	69a0      	ldr	r0, [r4, #24]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000704:	4313      	orrs	r3, r2
 8000706:	68e2      	ldr	r2, [r4, #12]
 8000708:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800070a:	6922      	ldr	r2, [r4, #16]
 800070c:	4313      	orrs	r3, r2
 800070e:	6962      	ldr	r2, [r4, #20]
 8000710:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000712:	69e2      	ldr	r2, [r4, #28]
 8000714:	4303      	orrs	r3, r0
 8000716:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8000718:	6a22      	ldr	r2, [r4, #32]
 800071a:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800071c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800071e:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000720:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000724:	bf01      	itttt	eq
 8000726:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 8000728:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 800072a:	4335      	orreq	r5, r6
 800072c:	432b      	orreq	r3, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800072e:	2a04      	cmp	r2, #4
  hdma->Instance->CR = tmp;  
 8000730:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8000732:	694b      	ldr	r3, [r1, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000734:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8000738:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800073c:	d10b      	bne.n	8000756 <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 800073e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000740:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8000742:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000744:	b13d      	cbz	r5, 8000756 <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000746:	b9f8      	cbnz	r0, 8000788 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 8000748:	2a01      	cmp	r2, #1
 800074a:	d02d      	beq.n	80007a8 <HAL_DMA_Init+0xdc>
 800074c:	d301      	bcc.n	8000752 <HAL_DMA_Init+0x86>
 800074e:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000750:	d101      	bne.n	8000756 <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000752:	01ea      	lsls	r2, r5, #7
 8000754:	d42b      	bmi.n	80007ae <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 8000756:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000758:	4620      	mov	r0, r4
 800075a:	f7ff ffa1 	bl	80006a0 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800075e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000760:	233f      	movs	r3, #63	; 0x3f
 8000762:	4093      	lsls	r3, r2
 8000764:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000766:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8000768:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800076a:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800076c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8000770:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000772:	f7ff ff05 	bl	8000580 <HAL_GetTick>
 8000776:	1b40      	subs	r0, r0, r5
 8000778:	2805      	cmp	r0, #5
 800077a:	d9b9      	bls.n	80006f0 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800077c:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800077e:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000780:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8000782:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8000786:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000788:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 800078c:	d113      	bne.n	80007b6 <HAL_DMA_Init+0xea>
    switch (tmp)
 800078e:	2a03      	cmp	r2, #3
 8000790:	d8e1      	bhi.n	8000756 <HAL_DMA_Init+0x8a>
 8000792:	a001      	add	r0, pc, #4	; (adr r0, 8000798 <HAL_DMA_Init+0xcc>)
 8000794:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8000798:	080007af 	.word	0x080007af
 800079c:	08000753 	.word	0x08000753
 80007a0:	080007af 	.word	0x080007af
 80007a4:	080007a9 	.word	0x080007a9
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80007a8:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 80007ac:	d1d3      	bne.n	8000756 <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80007ae:	2340      	movs	r3, #64	; 0x40
        hdma->State = HAL_DMA_STATE_READY;
 80007b0:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80007b2:	6563      	str	r3, [r4, #84]	; 0x54
 80007b4:	e7e5      	b.n	8000782 <HAL_DMA_Init+0xb6>
    switch (tmp)
 80007b6:	2a02      	cmp	r2, #2
 80007b8:	d9f9      	bls.n	80007ae <HAL_DMA_Init+0xe2>
 80007ba:	2a03      	cmp	r2, #3
 80007bc:	e7c8      	b.n	8000750 <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 80007be:	2001      	movs	r0, #1
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
 80007c2:	bf00      	nop
 80007c4:	e010803f 	.word	0xe010803f

080007c8 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80007c8:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80007cc:	2b02      	cmp	r3, #2
 80007ce:	d003      	beq.n	80007d8 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80007d0:	2380      	movs	r3, #128	; 0x80
 80007d2:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80007d4:	2001      	movs	r0, #1
 80007d6:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 80007d8:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 80007da:	2305      	movs	r3, #5
 80007dc:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  return HAL_OK;
 80007e0:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 80007e2:	6813      	ldr	r3, [r2, #0]
 80007e4:	f023 0301 	bic.w	r3, r3, #1
 80007e8:	6013      	str	r3, [r2, #0]
}
 80007ea:	4770      	bx	lr

080007ec <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80007ec:	4b16      	ldr	r3, [pc, #88]	; (8000848 <FLASH_SetErrorCode+0x5c>)
 80007ee:	68da      	ldr	r2, [r3, #12]
 80007f0:	0792      	lsls	r2, r2, #30
 80007f2:	d504      	bpl.n	80007fe <FLASH_SetErrorCode+0x12>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80007f4:	4915      	ldr	r1, [pc, #84]	; (800084c <FLASH_SetErrorCode+0x60>)
 80007f6:	698a      	ldr	r2, [r1, #24]
 80007f8:	f042 0220 	orr.w	r2, r2, #32
 80007fc:	618a      	str	r2, [r1, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80007fe:	68db      	ldr	r3, [r3, #12]
 8000800:	06db      	lsls	r3, r3, #27
 8000802:	d504      	bpl.n	800080e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000804:	4a11      	ldr	r2, [pc, #68]	; (800084c <FLASH_SetErrorCode+0x60>)
 8000806:	6993      	ldr	r3, [r2, #24]
 8000808:	f043 0310 	orr.w	r3, r3, #16
 800080c:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800080e:	4b0e      	ldr	r3, [pc, #56]	; (8000848 <FLASH_SetErrorCode+0x5c>)
 8000810:	68da      	ldr	r2, [r3, #12]
 8000812:	0690      	lsls	r0, r2, #26
 8000814:	d504      	bpl.n	8000820 <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8000816:	490d      	ldr	r1, [pc, #52]	; (800084c <FLASH_SetErrorCode+0x60>)
 8000818:	698a      	ldr	r2, [r1, #24]
 800081a:	f042 0208 	orr.w	r2, r2, #8
 800081e:	618a      	str	r2, [r1, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8000820:	68db      	ldr	r3, [r3, #12]
 8000822:	0659      	lsls	r1, r3, #25
 8000824:	d504      	bpl.n	8000830 <FLASH_SetErrorCode+0x44>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8000826:	4a09      	ldr	r2, [pc, #36]	; (800084c <FLASH_SetErrorCode+0x60>)
 8000828:	6993      	ldr	r3, [r2, #24]
 800082a:	f043 0304 	orr.w	r3, r3, #4
 800082e:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 8000830:	4b05      	ldr	r3, [pc, #20]	; (8000848 <FLASH_SetErrorCode+0x5c>)
 8000832:	68da      	ldr	r2, [r3, #12]
 8000834:	0612      	lsls	r2, r2, #24
 8000836:	d504      	bpl.n	8000842 <FLASH_SetErrorCode+0x56>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 8000838:	4904      	ldr	r1, [pc, #16]	; (800084c <FLASH_SetErrorCode+0x60>)
 800083a:	698a      	ldr	r2, [r1, #24]
 800083c:	f042 0202 	orr.w	r2, r2, #2
 8000840:	618a      	str	r2, [r1, #24]
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8000842:	22f2      	movs	r2, #242	; 0xf2
 8000844:	60da      	str	r2, [r3, #12]
 8000846:	4770      	bx	lr
 8000848:	40023c00 	.word	0x40023c00
 800084c:	20003f14 	.word	0x20003f14

08000850 <HAL_FLASH_EndOfOperationCallback>:
 8000850:	4770      	bx	lr

08000852 <HAL_FLASH_OperationErrorCallback>:
{
 8000852:	4770      	bx	lr

08000854 <HAL_FLASH_IRQHandler>:
  FLASH->CR &= (~FLASH_CR_PG);
 8000854:	4b37      	ldr	r3, [pc, #220]	; (8000934 <HAL_FLASH_IRQHandler+0xe0>)
 8000856:	691a      	ldr	r2, [r3, #16]
 8000858:	f022 0201 	bic.w	r2, r2, #1
{
 800085c:	b570      	push	{r4, r5, r6, lr}
  FLASH->CR &= (~FLASH_CR_PG);
 800085e:	611a      	str	r2, [r3, #16]
  FLASH->CR &= (~FLASH_CR_SER);
 8000860:	691a      	ldr	r2, [r3, #16]
 8000862:	4d35      	ldr	r5, [pc, #212]	; (8000938 <HAL_FLASH_IRQHandler+0xe4>)
 8000864:	f022 0202 	bic.w	r2, r2, #2
 8000868:	611a      	str	r2, [r3, #16]
  FLASH->CR &= SECTOR_MASK; 
 800086a:	691a      	ldr	r2, [r3, #16]
 800086c:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000870:	611a      	str	r2, [r3, #16]
  FLASH->CR &= (~FLASH_MER_BIT);
 8000872:	691a      	ldr	r2, [r3, #16]
 8000874:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000878:	f022 0204 	bic.w	r2, r2, #4
 800087c:	611a      	str	r2, [r3, #16]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800087e:	68dc      	ldr	r4, [r3, #12]
 8000880:	f014 0401 	ands.w	r4, r4, #1
 8000884:	d018      	beq.n	80008b8 <HAL_FLASH_IRQHandler+0x64>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000886:	2201      	movs	r2, #1
 8000888:	60da      	str	r2, [r3, #12]
    switch (pFlash.ProcedureOnGoing)
 800088a:	782b      	ldrb	r3, [r5, #0]
 800088c:	b2db      	uxtb	r3, r3
 800088e:	2b02      	cmp	r3, #2
 8000890:	d02c      	beq.n	80008ec <HAL_FLASH_IRQHandler+0x98>
 8000892:	2b03      	cmp	r3, #3
 8000894:	d030      	beq.n	80008f8 <HAL_FLASH_IRQHandler+0xa4>
 8000896:	4293      	cmp	r3, r2
 8000898:	d130      	bne.n	80008fc <HAL_FLASH_IRQHandler+0xa8>
        pFlash.NbSectorsToErase--;
 800089a:	686b      	ldr	r3, [r5, #4]
 800089c:	3b01      	subs	r3, #1
 800089e:	606b      	str	r3, [r5, #4]
        if(pFlash.NbSectorsToErase != 0)
 80008a0:	686e      	ldr	r6, [r5, #4]
 80008a2:	b1de      	cbz	r6, 80008dc <HAL_FLASH_IRQHandler+0x88>
          temp = pFlash.Sector;
 80008a4:	68e8      	ldr	r0, [r5, #12]
          HAL_FLASH_EndOfOperationCallback(temp);
 80008a6:	f7ff ffd3 	bl	8000850 <HAL_FLASH_EndOfOperationCallback>
          temp = ++pFlash.Sector;
 80008aa:	68ec      	ldr	r4, [r5, #12]
 80008ac:	3401      	adds	r4, #1
 80008ae:	60ec      	str	r4, [r5, #12]
          FLASH_Erase_Sector(temp, pFlash.VoltageForErase);
 80008b0:	4620      	mov	r0, r4
 80008b2:	7a29      	ldrb	r1, [r5, #8]
 80008b4:	f000 f842 	bl	800093c <FLASH_Erase_Sector>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 80008b8:	4b1e      	ldr	r3, [pc, #120]	; (8000934 <HAL_FLASH_IRQHandler+0xe0>)
 80008ba:	68db      	ldr	r3, [r3, #12]
 80008bc:	f013 0ff2 	tst.w	r3, #242	; 0xf2
 80008c0:	d026      	beq.n	8000910 <HAL_FLASH_IRQHandler+0xbc>
    switch (pFlash.ProcedureOnGoing)
 80008c2:	782b      	ldrb	r3, [r5, #0]
 80008c4:	b2db      	uxtb	r3, r3
 80008c6:	2b02      	cmp	r3, #2
 80008c8:	d01a      	beq.n	8000900 <HAL_FLASH_IRQHandler+0xac>
 80008ca:	2b03      	cmp	r3, #3
 80008cc:	d02f      	beq.n	800092e <HAL_FLASH_IRQHandler+0xda>
 80008ce:	2b01      	cmp	r3, #1
 80008d0:	d117      	bne.n	8000902 <HAL_FLASH_IRQHandler+0xae>
        pFlash.Sector = 0xFFFFFFFFU;
 80008d2:	f04f 33ff 	mov.w	r3, #4294967295
        temp = pFlash.Sector;
 80008d6:	68ec      	ldr	r4, [r5, #12]
        pFlash.Sector = 0xFFFFFFFFU;
 80008d8:	60eb      	str	r3, [r5, #12]
        break;
 80008da:	e012      	b.n	8000902 <HAL_FLASH_IRQHandler+0xae>
          pFlash.Sector = temp = 0xFFFFFFFFU;
 80008dc:	f04f 34ff 	mov.w	r4, #4294967295
          HAL_FLASH_EndOfOperationCallback(temp);
 80008e0:	4620      	mov	r0, r4
          pFlash.Sector = temp = 0xFFFFFFFFU;
 80008e2:	60ec      	str	r4, [r5, #12]
          HAL_FLASH_EndOfOperationCallback(temp);
 80008e4:	f7ff ffb4 	bl	8000850 <HAL_FLASH_EndOfOperationCallback>
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80008e8:	702e      	strb	r6, [r5, #0]
 80008ea:	e7e5      	b.n	80008b8 <HAL_FLASH_IRQHandler+0x64>
        HAL_FLASH_EndOfOperationCallback(0);
 80008ec:	2000      	movs	r0, #0
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80008ee:	2400      	movs	r4, #0
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 80008f0:	f7ff ffae 	bl	8000850 <HAL_FLASH_EndOfOperationCallback>
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80008f4:	702c      	strb	r4, [r5, #0]
        break;
 80008f6:	e7df      	b.n	80008b8 <HAL_FLASH_IRQHandler+0x64>
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 80008f8:	6928      	ldr	r0, [r5, #16]
 80008fa:	e7f8      	b.n	80008ee <HAL_FLASH_IRQHandler+0x9a>
  uint32_t temp = 0;
 80008fc:	2400      	movs	r4, #0
 80008fe:	e7db      	b.n	80008b8 <HAL_FLASH_IRQHandler+0x64>
        temp = 0;
 8000900:	2400      	movs	r4, #0
    FLASH_SetErrorCode();
 8000902:	f7ff ff73 	bl	80007ec <FLASH_SetErrorCode>
    HAL_FLASH_OperationErrorCallback(temp);
 8000906:	4620      	mov	r0, r4
 8000908:	f7ff ffa3 	bl	8000852 <HAL_FLASH_OperationErrorCallback>
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800090c:	2300      	movs	r3, #0
 800090e:	702b      	strb	r3, [r5, #0]
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8000910:	782b      	ldrb	r3, [r5, #0]
 8000912:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 8000916:	b94b      	cbnz	r3, 800092c <HAL_FLASH_IRQHandler+0xd8>
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 8000918:	4b06      	ldr	r3, [pc, #24]	; (8000934 <HAL_FLASH_IRQHandler+0xe0>)
 800091a:	691a      	ldr	r2, [r3, #16]
 800091c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8000920:	611a      	str	r2, [r3, #16]
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 8000922:	691a      	ldr	r2, [r3, #16]
 8000924:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8000928:	611a      	str	r2, [r3, #16]
    __HAL_UNLOCK(&pFlash);
 800092a:	7529      	strb	r1, [r5, #20]
 800092c:	bd70      	pop	{r4, r5, r6, pc}
        temp = pFlash.Address;
 800092e:	692c      	ldr	r4, [r5, #16]
        break;
 8000930:	e7e7      	b.n	8000902 <HAL_FLASH_IRQHandler+0xae>
 8000932:	bf00      	nop
 8000934:	40023c00 	.word	0x40023c00
 8000938:	20003f14 	.word	0x20003f14

0800093c <FLASH_Erase_Sector>:

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800093c:	b139      	cbz	r1, 800094e <FLASH_Erase_Sector+0x12>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800093e:	2901      	cmp	r1, #1
 8000940:	d021      	beq.n	8000986 <FLASH_Erase_Sector+0x4a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8000942:	2902      	cmp	r1, #2
  {
    tmp_psize = FLASH_PSIZE_WORD;
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8000944:	bf0c      	ite	eq
 8000946:	f44f 7100 	moveq.w	r1, #512	; 0x200
 800094a:	f44f 7140 	movne.w	r1, #768	; 0x300
  {
    Sector += 4;
  }  

  /* If the previous operation is completed, proceed to erase the sector */
  FLASH->CR &= CR_PSIZE_MASK;
 800094e:	4b0f      	ldr	r3, [pc, #60]	; (800098c <FLASH_Erase_Sector+0x50>)
  if(Sector > FLASH_SECTOR_11) 
 8000950:	280b      	cmp	r0, #11
  FLASH->CR &= CR_PSIZE_MASK;
 8000952:	691a      	ldr	r2, [r3, #16]
    Sector += 4;
 8000954:	bf88      	it	hi
 8000956:	3004      	addhi	r0, #4
  FLASH->CR &= CR_PSIZE_MASK;
 8000958:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800095c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= tmp_psize;
 800095e:	691a      	ldr	r2, [r3, #16]
 8000960:	4311      	orrs	r1, r2
 8000962:	6119      	str	r1, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8000964:	691a      	ldr	r2, [r3, #16]
 8000966:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800096a:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800096c:	691a      	ldr	r2, [r3, #16]
 800096e:	f042 0202 	orr.w	r2, r2, #2
 8000972:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 8000976:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8000978:	691a      	ldr	r2, [r3, #16]
 800097a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800097e:	611a      	str	r2, [r3, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000980:	f3bf 8f4f 	dsb	sy
 8000984:	4770      	bx	lr
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8000986:	f44f 7180 	mov.w	r1, #256	; 0x100
 800098a:	e7e0      	b.n	800094e <FLASH_Erase_Sector+0x12>
 800098c:	40023c00 	.word	0x40023c00

08000990 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000994:	680b      	ldr	r3, [r1, #0]
{
 8000996:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000998:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8000b5c <HAL_GPIO_Init+0x1cc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800099c:	9301      	str	r3, [sp, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 800099e:	2300      	movs	r3, #0
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80009a0:	4a6c      	ldr	r2, [pc, #432]	; (8000b54 <HAL_GPIO_Init+0x1c4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80009a2:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 8000b60 <HAL_GPIO_Init+0x1d0>
    ioposition = ((uint32_t)0x01) << position;
 80009a6:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009aa:	9c01      	ldr	r4, [sp, #4]
    ioposition = ((uint32_t)0x01) << position;
 80009ac:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009b0:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 80009b4:	45b6      	cmp	lr, r6
 80009b6:	f040 80b3 	bne.w	8000b20 <HAL_GPIO_Init+0x190>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009ba:	684c      	ldr	r4, [r1, #4]
 80009bc:	f024 0710 	bic.w	r7, r4, #16
 80009c0:	2f02      	cmp	r7, #2
 80009c2:	d116      	bne.n	80009f2 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 80009c4:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80009c8:	f003 0b07 	and.w	fp, r3, #7
 80009cc:	f04f 0c0f 	mov.w	ip, #15
 80009d0:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 80009d4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 80009d8:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80009dc:	fa0c fc0b 	lsl.w	ip, ip, fp
 80009e0:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80009e4:	690d      	ldr	r5, [r1, #16]
 80009e6:	fa05 f50b 	lsl.w	r5, r5, fp
 80009ea:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 80009ee:	f8ca 5020 	str.w	r5, [sl, #32]
 80009f2:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80009f6:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80009f8:	f8d0 b000 	ldr.w	fp, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80009fc:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000a00:	fa05 f50a 	lsl.w	r5, r5, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a04:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000a06:	fa0c fc0a 	lsl.w	ip, ip, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000a0a:	43ed      	mvns	r5, r5
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a0c:	2f01      	cmp	r7, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000a0e:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000a12:	ea4c 0c0b 	orr.w	ip, ip, fp
      GPIOx->MODER = temp;
 8000a16:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a1a:	d811      	bhi.n	8000a40 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000a1c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000a1e:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 8000a22:	68cf      	ldr	r7, [r1, #12]
 8000a24:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000a28:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000a2c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000a2e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a30:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000a34:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000a38:	409f      	lsls	r7, r3
 8000a3a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000a3e:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000a40:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000a42:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000a44:	688f      	ldr	r7, [r1, #8]
 8000a46:	fa07 f70a 	lsl.w	r7, r7, sl
 8000a4a:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000a4c:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a4e:	00e5      	lsls	r5, r4, #3
 8000a50:	d566      	bpl.n	8000b20 <HAL_GPIO_Init+0x190>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a52:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 8000a56:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000a5a:	f003 0e03 	and.w	lr, r3, #3
 8000a5e:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a62:	f445 4580 	orr.w	r5, r5, #16384	; 0x4000
 8000a66:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000a6a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a6e:	f8c8 5044 	str.w	r5, [r8, #68]	; 0x44
 8000a72:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8000a76:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 8000a7a:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 8000a7e:	9503      	str	r5, [sp, #12]
 8000a80:	9d03      	ldr	r5, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000a82:	fa0c f50e 	lsl.w	r5, ip, lr
        temp = SYSCFG->EXTICR[position >> 2];
 8000a86:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000a8a:	ea2a 0c05 	bic.w	ip, sl, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000a8e:	4d32      	ldr	r5, [pc, #200]	; (8000b58 <HAL_GPIO_Init+0x1c8>)
 8000a90:	42a8      	cmp	r0, r5
 8000a92:	d04c      	beq.n	8000b2e <HAL_GPIO_Init+0x19e>
 8000a94:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000a98:	42a8      	cmp	r0, r5
 8000a9a:	d04a      	beq.n	8000b32 <HAL_GPIO_Init+0x1a2>
 8000a9c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000aa0:	42a8      	cmp	r0, r5
 8000aa2:	d048      	beq.n	8000b36 <HAL_GPIO_Init+0x1a6>
 8000aa4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000aa8:	42a8      	cmp	r0, r5
 8000aaa:	d046      	beq.n	8000b3a <HAL_GPIO_Init+0x1aa>
 8000aac:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000ab0:	42a8      	cmp	r0, r5
 8000ab2:	d044      	beq.n	8000b3e <HAL_GPIO_Init+0x1ae>
 8000ab4:	4548      	cmp	r0, r9
 8000ab6:	d044      	beq.n	8000b42 <HAL_GPIO_Init+0x1b2>
 8000ab8:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000abc:	42a8      	cmp	r0, r5
 8000abe:	d042      	beq.n	8000b46 <HAL_GPIO_Init+0x1b6>
 8000ac0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000ac4:	42a8      	cmp	r0, r5
 8000ac6:	d040      	beq.n	8000b4a <HAL_GPIO_Init+0x1ba>
 8000ac8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000acc:	42a8      	cmp	r0, r5
 8000ace:	d03e      	beq.n	8000b4e <HAL_GPIO_Init+0x1be>
 8000ad0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000ad4:	42a8      	cmp	r0, r5
 8000ad6:	bf14      	ite	ne
 8000ad8:	250a      	movne	r5, #10
 8000ada:	2509      	moveq	r5, #9
 8000adc:	fa05 f50e 	lsl.w	r5, r5, lr
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ae0:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000ae4:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8000ae8:	60bd      	str	r5, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 8000aea:	ea6f 0706 	mvn.w	r7, r6
        temp = EXTI->IMR;
 8000aee:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000af0:	bf0c      	ite	eq
 8000af2:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000af4:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000af6:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
 8000afa:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8000afc:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8000afe:	bf0c      	ite	eq
 8000b00:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000b02:	4335      	orrne	r5, r6
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b04:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
 8000b08:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8000b0a:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000b0c:	bf0c      	ite	eq
 8000b0e:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000b10:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b12:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 8000b14:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000b16:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8000b18:	bf54      	ite	pl
 8000b1a:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000b1c:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000b1e:	60d5      	str	r5, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000b20:	3301      	adds	r3, #1
 8000b22:	2b10      	cmp	r3, #16
 8000b24:	f47f af3f 	bne.w	80009a6 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000b28:	b005      	add	sp, #20
 8000b2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000b2e:	2500      	movs	r5, #0
 8000b30:	e7d4      	b.n	8000adc <HAL_GPIO_Init+0x14c>
 8000b32:	2501      	movs	r5, #1
 8000b34:	e7d2      	b.n	8000adc <HAL_GPIO_Init+0x14c>
 8000b36:	2502      	movs	r5, #2
 8000b38:	e7d0      	b.n	8000adc <HAL_GPIO_Init+0x14c>
 8000b3a:	2503      	movs	r5, #3
 8000b3c:	e7ce      	b.n	8000adc <HAL_GPIO_Init+0x14c>
 8000b3e:	2504      	movs	r5, #4
 8000b40:	e7cc      	b.n	8000adc <HAL_GPIO_Init+0x14c>
 8000b42:	2505      	movs	r5, #5
 8000b44:	e7ca      	b.n	8000adc <HAL_GPIO_Init+0x14c>
 8000b46:	2506      	movs	r5, #6
 8000b48:	e7c8      	b.n	8000adc <HAL_GPIO_Init+0x14c>
 8000b4a:	2507      	movs	r5, #7
 8000b4c:	e7c6      	b.n	8000adc <HAL_GPIO_Init+0x14c>
 8000b4e:	2508      	movs	r5, #8
 8000b50:	e7c4      	b.n	8000adc <HAL_GPIO_Init+0x14c>
 8000b52:	bf00      	nop
 8000b54:	40013c00 	.word	0x40013c00
 8000b58:	40020000 	.word	0x40020000
 8000b5c:	40023800 	.word	0x40023800
 8000b60:	40021400 	.word	0x40021400

08000b64 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b64:	b10a      	cbz	r2, 8000b6a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000b66:	6181      	str	r1, [r0, #24]
 8000b68:	4770      	bx	lr
 8000b6a:	0409      	lsls	r1, r1, #16
 8000b6c:	e7fb      	b.n	8000b66 <HAL_GPIO_WritePin+0x2>

08000b6e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000b6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t i;

  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8000b72:	4604      	mov	r4, r0
{
 8000b74:	b08a      	sub	sp, #40	; 0x28
  if(hpcd == NULL)
 8000b76:	2800      	cmp	r0, #0
 8000b78:	d06b      	beq.n	8000c52 <HAL_PCD_Init+0xe4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 8000b7a:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
 8000b7e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000b82:	b91b      	cbnz	r3, 8000b8c <HAL_PCD_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000b84:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000b88:	f005 ff82 	bl	8006a90 <HAL_PCD_MspInit>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000b8c:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000b8e:	2303      	movs	r3, #3

  /*Init the Core (common init.) */
  (void)USB_CoreInit(hpcd->Instance, hpcd->Init);
 8000b90:	466e      	mov	r6, sp
 8000b92:	f104 0804 	add.w	r8, r4, #4
  __HAL_PCD_DISABLE(hpcd);
 8000b96:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000b9a:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  __HAL_PCD_DISABLE(hpcd);
 8000b9e:	f002 fab0 	bl	8003102 <USB_DisableGlobalInt>
  (void)USB_CoreInit(hpcd->Instance, hpcd->Init);
 8000ba2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ba4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000ba6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ba8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000baa:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000bae:	f104 0510 	add.w	r5, r4, #16
 8000bb2:	e886 0003 	stmia.w	r6, {r0, r1}
 8000bb6:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8000bba:	6820      	ldr	r0, [r4, #0]

  /* Init endpoints structures */
  for (i = 0U; i < 15U; i++)
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000bbc:	2601      	movs	r6, #1
  (void)USB_CoreInit(hpcd->Instance, hpcd->Init);
 8000bbe:	f002 fa5f 	bl	8003080 <USB_CoreInit>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	6820      	ldr	r0, [r4, #0]
 8000bc6:	f002 faa2 	bl	800310e <USB_SetCurrentMode>
 8000bca:	2100      	movs	r1, #0
 8000bcc:	4622      	mov	r2, r4
 8000bce:	4623      	mov	r3, r4
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000bd0:	4608      	mov	r0, r1
    hpcd->IN_ep[i].num = i;
 8000bd2:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
 8000bd6:	331c      	adds	r3, #28
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000bd8:	84d9      	strh	r1, [r3, #38]	; 0x26
 8000bda:	3101      	adds	r1, #1
    hpcd->IN_ep[i].is_in = 1U;
 8000bdc:	f883 6021 	strb.w	r6, [r3, #33]	; 0x21
  for (i = 0U; i < 15U; i++)
 8000be0:	290f      	cmp	r1, #15
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000be2:	f883 0023 	strb.w	r0, [r3, #35]	; 0x23
    hpcd->IN_ep[i].maxpacket = 0U;
 8000be6:	6298      	str	r0, [r3, #40]	; 0x28
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000be8:	62d8      	str	r0, [r3, #44]	; 0x2c
    hpcd->IN_ep[i].xfer_len = 0U;
 8000bea:	6358      	str	r0, [r3, #52]	; 0x34
  for (i = 0U; i < 15U; i++)
 8000bec:	d1f1      	bne.n	8000bd2 <HAL_PCD_Init+0x64>
 8000bee:	2300      	movs	r3, #0
  }

  for (i = 0U; i < 15U; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000bf0:	461f      	mov	r7, r3
    hpcd->OUT_ep[i].num = i;
 8000bf2:	f882 31fc 	strb.w	r3, [r2, #508]	; 0x1fc
 8000bf6:	3301      	adds	r3, #1
    hpcd->OUT_ep[i].is_in = 0U;
 8000bf8:	f882 71fd 	strb.w	r7, [r2, #509]	; 0x1fd
 8000bfc:	321c      	adds	r2, #28
  for (i = 0U; i < 15U; i++)
 8000bfe:	2b0f      	cmp	r3, #15
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000c00:	f882 71e3 	strb.w	r7, [r2, #483]	; 0x1e3
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000c04:	f8c2 71e8 	str.w	r7, [r2, #488]	; 0x1e8
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000c08:	f8c2 71ec 	str.w	r7, [r2, #492]	; 0x1ec
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000c0c:	f8c2 71f4 	str.w	r7, [r2, #500]	; 0x1f4
  for (i = 0U; i < 15U; i++)
 8000c10:	d1ef      	bne.n	8000bf2 <HAL_PCD_Init+0x84>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8000c12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c14:	466e      	mov	r6, sp
 8000c16:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000c18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c1a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000c1c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000c20:	e886 0003 	stmia.w	r6, {r0, r1}
 8000c24:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8000c28:	6820      	ldr	r0, [r4, #0]
 8000c2a:	f002 fab1 	bl	8003190 <USB_DevInit>

  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
 8000c2e:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 8000c30:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8000c34:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000c38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000c3a:	2b01      	cmp	r3, #1
 8000c3c:	d102      	bne.n	8000c44 <HAL_PCD_Init+0xd6>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000c3e:	4620      	mov	r0, r4
 8000c40:	f000 fcb9 	bl	80015b6 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect (hpcd->Instance);
 8000c44:	6820      	ldr	r0, [r4, #0]
 8000c46:	f002 fdc5 	bl	80037d4 <USB_DevDisconnect>

  return HAL_OK;
 8000c4a:	2000      	movs	r0, #0
}
 8000c4c:	b00a      	add	sp, #40	; 0x28
 8000c4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8000c52:	2001      	movs	r0, #1
 8000c54:	e7fa      	b.n	8000c4c <HAL_PCD_Init+0xde>

08000c56 <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 8000c56:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8000c5a:	2b01      	cmp	r3, #1
{
 8000c5c:	b510      	push	{r4, lr}
 8000c5e:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000c60:	d00c      	beq.n	8000c7c <HAL_PCD_Start+0x26>
 8000c62:	2301      	movs	r3, #1
 8000c64:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  (void)USB_DevConnect (hpcd->Instance);
 8000c68:	6800      	ldr	r0, [r0, #0]
 8000c6a:	f002 fda7 	bl	80037bc <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8000c6e:	6820      	ldr	r0, [r4, #0]
 8000c70:	f002 fa41 	bl	80030f6 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8000c74:	2000      	movs	r0, #0
 8000c76:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 8000c7a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000c7c:	2002      	movs	r0, #2
}
 8000c7e:	bd10      	pop	{r4, pc}

08000c80 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000c84:	6807      	ldr	r7, [r0, #0]
{
 8000c86:	b087      	sub	sp, #28
 8000c88:	4604      	mov	r4, r0
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;
  uint32_t hclk;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8000c8a:	4638      	mov	r0, r7
  uint32_t gSNPSiD = *(uint32_t *) TempReg;
 8000c8c:	f8d7 a040 	ldr.w	sl, [r7, #64]	; 0x40
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8000c90:	f002 fddb 	bl	800384a <USB_GetMode>
 8000c94:	9002      	str	r0, [sp, #8]
 8000c96:	2800      	cmp	r0, #0
 8000c98:	f040 814f 	bne.w	8000f3a <HAL_PCD_IRQHandler+0x2ba>
  {
    /* avoid spurious interrupt */
    if(__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8000c9c:	6820      	ldr	r0, [r4, #0]
 8000c9e:	f002 fda5 	bl	80037ec <USB_ReadInterrupts>
 8000ca2:	2800      	cmp	r0, #0
 8000ca4:	f000 8149 	beq.w	8000f3a <HAL_PCD_IRQHandler+0x2ba>
    {
      return;
    }

    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8000ca8:	6820      	ldr	r0, [r4, #0]
 8000caa:	f002 fd9f 	bl	80037ec <USB_ReadInterrupts>
 8000cae:	0785      	lsls	r5, r0, #30
 8000cb0:	d504      	bpl.n	8000cbc <HAL_PCD_IRQHandler+0x3c>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8000cb2:	6822      	ldr	r2, [r4, #0]
 8000cb4:	6953      	ldr	r3, [r2, #20]
 8000cb6:	f003 0302 	and.w	r3, r3, #2
 8000cba:	6153      	str	r3, [r2, #20]
    }

    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8000cbc:	6820      	ldr	r0, [r4, #0]
 8000cbe:	f002 fd95 	bl	80037ec <USB_ReadInterrupts>
 8000cc2:	f410 2500 	ands.w	r5, r0, #524288	; 0x80000
 8000cc6:	d00c      	beq.n	8000ce2 <HAL_PCD_IRQHandler+0x62>
 8000cc8:	f507 6830 	add.w	r8, r7, #2816	; 0xb00
 8000ccc:	4626      	mov	r6, r4
    {
      epnum = 0U;
 8000cce:	2500      	movs	r5, #0

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8000cd0:	6820      	ldr	r0, [r4, #0]

      while (ep_intr != 0U)
 8000cd2:	46c1      	mov	r9, r8
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8000cd4:	f002 fd8e 	bl	80037f4 <USB_ReadDevAllOutEpInterrupt>
 8000cd8:	9003      	str	r0, [sp, #12]
      while (ep_intr != 0U)
 8000cda:	9b03      	ldr	r3, [sp, #12]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	f040 812f 	bne.w	8000f40 <HAL_PCD_IRQHandler+0x2c0>
        epnum++;
        ep_intr >>= 1U;
      }
    }

    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8000ce2:	6820      	ldr	r0, [r4, #0]
 8000ce4:	f002 fd82 	bl	80037ec <USB_ReadInterrupts>
 8000ce8:	0342      	lsls	r2, r0, #13
 8000cea:	d50b      	bpl.n	8000d04 <HAL_PCD_IRQHandler+0x84>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8000cec:	6820      	ldr	r0, [r4, #0]
 8000cee:	4626      	mov	r6, r4
 8000cf0:	f002 fd88 	bl	8003804 <USB_ReadDevAllInEpInterrupt>
 8000cf4:	f507 6910 	add.w	r9, r7, #2304	; 0x900
 8000cf8:	4683      	mov	fp, r0

      epnum = 0U;
 8000cfa:	2500      	movs	r5, #0

      while (ep_intr != 0U)
 8000cfc:	f1bb 0f00 	cmp.w	fp, #0
 8000d00:	f040 81a1 	bne.w	8001046 <HAL_PCD_IRQHandler+0x3c6>
        ep_intr >>= 1U;
      }
    }

    /* Handle Resume Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8000d04:	6820      	ldr	r0, [r4, #0]
 8000d06:	f002 fd71 	bl	80037ec <USB_ReadInterrupts>
 8000d0a:	2800      	cmp	r0, #0
 8000d0c:	da15      	bge.n	8000d3a <HAL_PCD_IRQHandler+0xba>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8000d0e:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8000d12:	f023 0301 	bic.w	r3, r3, #1
 8000d16:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804

      if(hpcd->LPM_State == LPM_L1)
 8000d1a:	f894 33f0 	ldrb.w	r3, [r4, #1008]	; 0x3f0
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	f040 8227 	bne.w	8001172 <HAL_PCD_IRQHandler+0x4f2>
      {
        hpcd->LPM_State = LPM_L0;
 8000d24:	2100      	movs	r1, #0
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8000d26:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L0;
 8000d28:	f884 13f0 	strb.w	r1, [r4, #1008]	; 0x3f0
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8000d2c:	f006 f80c 	bl	8006d48 <HAL_PCDEx_LPM_Callback>
      else
      {
        HAL_PCD_ResumeCallback(hpcd);
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8000d30:	6822      	ldr	r2, [r4, #0]
 8000d32:	6953      	ldr	r3, [r2, #20]
 8000d34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000d38:	6153      	str	r3, [r2, #20]
    }

    /* Handle Suspend Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8000d3a:	6820      	ldr	r0, [r4, #0]
 8000d3c:	f002 fd56 	bl	80037ec <USB_ReadInterrupts>
 8000d40:	0503      	lsls	r3, r0, #20
 8000d42:	d50b      	bpl.n	8000d5c <HAL_PCD_IRQHandler+0xdc>
    {
      if((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8000d44:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8000d48:	07de      	lsls	r6, r3, #31
 8000d4a:	d502      	bpl.n	8000d52 <HAL_PCD_IRQHandler+0xd2>
      {

        HAL_PCD_SuspendCallback(hpcd);
 8000d4c:	4620      	mov	r0, r4
 8000d4e:	f005 ff01 	bl	8006b54 <HAL_PCD_SuspendCallback>
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8000d52:	6822      	ldr	r2, [r4, #0]
 8000d54:	6953      	ldr	r3, [r2, #20]
 8000d56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d5a:	6153      	str	r3, [r2, #20]
    }

    /* Handle LPM Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8000d5c:	6820      	ldr	r0, [r4, #0]
 8000d5e:	f002 fd45 	bl	80037ec <USB_ReadInterrupts>
 8000d62:	0100      	lsls	r0, r0, #4
 8000d64:	d514      	bpl.n	8000d90 <HAL_PCD_IRQHandler+0x110>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8000d66:	6823      	ldr	r3, [r4, #0]
 8000d68:	695a      	ldr	r2, [r3, #20]
 8000d6a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8000d6e:	615a      	str	r2, [r3, #20]
      if( hpcd->LPM_State == LPM_L0)
 8000d70:	f894 23f0 	ldrb.w	r2, [r4, #1008]	; 0x3f0
 8000d74:	2a00      	cmp	r2, #0
 8000d76:	f040 8200 	bne.w	800117a <HAL_PCD_IRQHandler+0x4fa>
      {
        hpcd->LPM_State = LPM_L1;
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8000d7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
        hpcd->LPM_State = LPM_L1;
 8000d7c:	2101      	movs	r1, #1
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8000d7e:	4620      	mov	r0, r4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8000d80:	f3c3 0383 	ubfx	r3, r3, #2, #4
        hpcd->LPM_State = LPM_L1;
 8000d84:	f884 13f0 	strb.w	r1, [r4, #1008]	; 0x3f0
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8000d88:	f8c4 33f4 	str.w	r3, [r4, #1012]	; 0x3f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8000d8c:	f005 ffdc 	bl	8006d48 <HAL_PCDEx_LPM_Callback>
        HAL_PCD_SuspendCallback(hpcd);
      }
    }

    /* Handle Reset Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8000d90:	6820      	ldr	r0, [r4, #0]
 8000d92:	f002 fd2b 	bl	80037ec <USB_ReadInterrupts>
 8000d96:	04c1      	lsls	r1, r0, #19
 8000d98:	d535      	bpl.n	8000e06 <HAL_PCD_IRQHandler+0x186>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8000d9a:	f507 6600 	add.w	r6, r7, #2048	; 0x800
 8000d9e:	6873      	ldr	r3, [r6, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8000da0:	2110      	movs	r1, #16
 8000da2:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8000da4:	f023 0301 	bic.w	r3, r3, #1
 8000da8:	6073      	str	r3, [r6, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8000daa:	f002 f9c7 	bl	800313c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000dae:	6860      	ldr	r0, [r4, #4]
 8000db0:	f507 6310 	add.w	r3, r7, #2304	; 0x900
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8000db4:	f64f 317f 	movw	r1, #64383	; 0xfb7f
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000db8:	9a02      	ldr	r2, [sp, #8]
 8000dba:	4282      	cmp	r2, r0
 8000dbc:	f040 81e1 	bne.w	8001182 <HAL_PCD_IRQHandler+0x502>
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8000dc0:	69f3      	ldr	r3, [r6, #28]
 8000dc2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8000dc6:	61f3      	str	r3, [r6, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8000dc8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	f000 81ed 	beq.w	80011aa <HAL_PCD_IRQHandler+0x52a>
      {
        USBx_DEVICE->DOUTEP1MSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 8000dd0:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
 8000dd4:	f043 030b 	orr.w	r3, r3, #11
 8000dd8:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 8000ddc:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8000dde:	f043 030b 	orr.w	r3, r3, #11
 8000de2:	6473      	str	r3, [r6, #68]	; 0x44
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8000de4:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8000de8:	f504 7270 	add.w	r2, r4, #960	; 0x3c0
 8000dec:	7c21      	ldrb	r1, [r4, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8000dee:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8000df2:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8000df4:	f8c7 3800 	str.w	r3, [r7, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8000df8:	f002 fd46 	bl	8003888 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8000dfc:	6822      	ldr	r2, [r4, #0]
 8000dfe:	6953      	ldr	r3, [r2, #20]
 8000e00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e04:	6153      	str	r3, [r2, #20]
    }

    /* Handle Enumeration done Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8000e06:	6820      	ldr	r0, [r4, #0]
 8000e08:	f002 fcf0 	bl	80037ec <USB_ReadInterrupts>
 8000e0c:	0482      	lsls	r2, r0, #18
 8000e0e:	d51d      	bpl.n	8000e4c <HAL_PCD_IRQHandler+0x1cc>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8000e10:	6820      	ldr	r0, [r4, #0]
 8000e12:	f002 fd1e 	bl	8003852 <USB_ActivateSetup>
      hpcd->Instance->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8000e16:	6820      	ldr	r0, [r4, #0]
 8000e18:	68c3      	ldr	r3, [r0, #12]
 8000e1a:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8000e1e:	60c3      	str	r3, [r0, #12]

      if ( USB_GetDevSpeed(hpcd->Instance) == USB_OTG_SPEED_HIGH)
 8000e20:	f002 fa6e 	bl	8003300 <USB_GetDevSpeed>
 8000e24:	2800      	cmp	r0, #0
 8000e26:	f040 81c9 	bne.w	80011bc <HAL_PCD_IRQHandler+0x53c>
      {
        hpcd->Init.speed            = USB_OTG_SPEED_HIGH;
        hpcd->Init.ep0_mps          = USB_OTG_HS_MAX_PACKET_SIZE;
 8000e2a:	f44f 7300 	mov.w	r3, #512	; 0x200
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000e2e:	6822      	ldr	r2, [r4, #0]
        hpcd->Init.speed            = USB_OTG_SPEED_HIGH;
 8000e30:	60e0      	str	r0, [r4, #12]
        hpcd->Init.ep0_mps          = USB_OTG_HS_MAX_PACKET_SIZE;
 8000e32:	6163      	str	r3, [r4, #20]
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000e34:	68d3      	ldr	r3, [r2, #12]
 8000e36:	f443 5310 	orr.w	r3, r3, #9216	; 0x2400
 8000e3a:	60d3      	str	r3, [r2, #12]
          /* hclk Clock Range between 32-200 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10) & USB_OTG_GUSBCFG_TRDT);
        }
      }

      HAL_PCD_ResetCallback(hpcd);
 8000e3c:	4620      	mov	r0, r4
 8000e3e:	f005 fe78 	bl	8006b32 <HAL_PCD_ResetCallback>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8000e42:	6822      	ldr	r2, [r4, #0]
 8000e44:	6953      	ldr	r3, [r2, #20]
 8000e46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e4a:	6153      	str	r3, [r2, #20]
    }

    /* Handle RxQLevel Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8000e4c:	6820      	ldr	r0, [r4, #0]
 8000e4e:	f002 fccd 	bl	80037ec <USB_ReadInterrupts>
 8000e52:	06c3      	lsls	r3, r0, #27
 8000e54:	d52b      	bpl.n	8000eae <HAL_PCD_IRQHandler+0x22e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000e56:	6822      	ldr	r2, [r4, #0]
 8000e58:	6993      	ldr	r3, [r2, #24]
 8000e5a:	f023 0310 	bic.w	r3, r3, #16
 8000e5e:	6193      	str	r3, [r2, #24]

      temp = USBx->GRXSTSP;
 8000e60:	6a3e      	ldr	r6, [r7, #32]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];

      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8000e62:	f3c6 4343 	ubfx	r3, r6, #17, #4
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8000e66:	f006 090f 	and.w	r9, r6, #15
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8000e6a:	2b02      	cmp	r3, #2
 8000e6c:	f040 821c 	bne.w	80012a8 <HAL_PCD_IRQHandler+0x628>
      {
        if((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8000e70:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8000e74:	421e      	tst	r6, r3
 8000e76:	d015      	beq.n	8000ea4 <HAL_PCD_IRQHandler+0x224>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff, (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8000e78:	f04f 081c 	mov.w	r8, #28
 8000e7c:	f3c6 160a 	ubfx	r6, r6, #4, #11
 8000e80:	4638      	mov	r0, r7
 8000e82:	fb08 4809 	mla	r8, r8, r9, r4
 8000e86:	4632      	mov	r2, r6
 8000e88:	f8d8 1208 	ldr.w	r1, [r8, #520]	; 0x208
 8000e8c:	f002 fc20 	bl	80036d0 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000e90:	f8d8 3208 	ldr.w	r3, [r8, #520]	; 0x208
 8000e94:	4433      	add	r3, r6
 8000e96:	f8c8 3208 	str.w	r3, [r8, #520]	; 0x208
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000e9a:	f8d8 3214 	ldr.w	r3, [r8, #532]	; 0x214
 8000e9e:	441e      	add	r6, r3
 8000ea0:	f8c8 6214 	str.w	r6, [r8, #532]	; 0x214
      }
      else
      {
         /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000ea4:	6822      	ldr	r2, [r4, #0]
 8000ea6:	6993      	ldr	r3, [r2, #24]
 8000ea8:	f043 0310 	orr.w	r3, r3, #16
 8000eac:	6193      	str	r3, [r2, #24]
    }

    /* Handle SOF Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8000eae:	6820      	ldr	r0, [r4, #0]
 8000eb0:	f002 fc9c 	bl	80037ec <USB_ReadInterrupts>
 8000eb4:	0707      	lsls	r7, r0, #28
 8000eb6:	d507      	bpl.n	8000ec8 <HAL_PCD_IRQHandler+0x248>
    {
      HAL_PCD_SOFCallback(hpcd);
 8000eb8:	4620      	mov	r0, r4
 8000eba:	f005 fe36 	bl	8006b2a <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8000ebe:	6822      	ldr	r2, [r4, #0]
 8000ec0:	6953      	ldr	r3, [r2, #20]
 8000ec2:	f003 0308 	and.w	r3, r3, #8
 8000ec6:	6153      	str	r3, [r2, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8000ec8:	6820      	ldr	r0, [r4, #0]
 8000eca:	f002 fc8f 	bl	80037ec <USB_ReadInterrupts>
 8000ece:	02c6      	lsls	r6, r0, #11
 8000ed0:	d508      	bpl.n	8000ee4 <HAL_PCD_IRQHandler+0x264>
    {
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8000ed2:	b2e9      	uxtb	r1, r5
 8000ed4:	4620      	mov	r0, r4
 8000ed6:	f005 fe5d 	bl	8006b94 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8000eda:	6822      	ldr	r2, [r4, #0]
 8000edc:	6953      	ldr	r3, [r2, #20]
 8000ede:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ee2:	6153      	str	r3, [r2, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8000ee4:	6820      	ldr	r0, [r4, #0]
 8000ee6:	f002 fc81 	bl	80037ec <USB_ReadInterrupts>
 8000eea:	0280      	lsls	r0, r0, #10
 8000eec:	d508      	bpl.n	8000f00 <HAL_PCD_IRQHandler+0x280>
    {
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8000eee:	b2e9      	uxtb	r1, r5
 8000ef0:	4620      	mov	r0, r4
 8000ef2:	f005 fe4b 	bl	8006b8c <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8000ef6:	6822      	ldr	r2, [r4, #0]
 8000ef8:	6953      	ldr	r3, [r2, #20]
 8000efa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000efe:	6153      	str	r3, [r2, #20]
    }

    /* Handle Connection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8000f00:	6820      	ldr	r0, [r4, #0]
 8000f02:	f002 fc73 	bl	80037ec <USB_ReadInterrupts>
 8000f06:	0041      	lsls	r1, r0, #1
 8000f08:	d507      	bpl.n	8000f1a <HAL_PCD_IRQHandler+0x29a>
    {
      HAL_PCD_ConnectCallback(hpcd);
 8000f0a:	4620      	mov	r0, r4
 8000f0c:	f005 fe46 	bl	8006b9c <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8000f10:	6822      	ldr	r2, [r4, #0]
 8000f12:	6953      	ldr	r3, [r2, #20]
 8000f14:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000f18:	6153      	str	r3, [r2, #20]
    }

    /* Handle Disconnection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8000f1a:	6820      	ldr	r0, [r4, #0]
 8000f1c:	f002 fc66 	bl	80037ec <USB_ReadInterrupts>
 8000f20:	0742      	lsls	r2, r0, #29
 8000f22:	d50a      	bpl.n	8000f3a <HAL_PCD_IRQHandler+0x2ba>
    {
      temp = hpcd->Instance->GOTGINT;
 8000f24:	6823      	ldr	r3, [r4, #0]
 8000f26:	685d      	ldr	r5, [r3, #4]

      if((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8000f28:	076b      	lsls	r3, r5, #29
 8000f2a:	d502      	bpl.n	8000f32 <HAL_PCD_IRQHandler+0x2b2>
      {
        HAL_PCD_DisconnectCallback(hpcd);
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	f005 fe39 	bl	8006ba4 <HAL_PCD_DisconnectCallback>
      }
      hpcd->Instance->GOTGINT |= temp;
 8000f32:	6823      	ldr	r3, [r4, #0]
 8000f34:	685a      	ldr	r2, [r3, #4]
 8000f36:	4315      	orrs	r5, r2
 8000f38:	605d      	str	r5, [r3, #4]
    }
  }
}
 8000f3a:	b007      	add	sp, #28
 8000f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((ep_intr & 0x1U) != 0U)
 8000f40:	9b03      	ldr	r3, [sp, #12]
 8000f42:	07d8      	lsls	r0, r3, #31
 8000f44:	d577      	bpl.n	8001036 <HAL_PCD_IRQHandler+0x3b6>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8000f46:	b2ea      	uxtb	r2, r5
 8000f48:	6820      	ldr	r0, [r4, #0]
 8000f4a:	4611      	mov	r1, r2
 8000f4c:	9204      	str	r2, [sp, #16]
 8000f4e:	f002 fc61 	bl	8003814 <USB_ReadDevOutEPInterrupt>
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8000f52:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8000f56:	4683      	mov	fp, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8000f58:	d039      	beq.n	8000fce <HAL_PCD_IRQHandler+0x34e>
            if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8000f5a:	4bb5      	ldr	r3, [pc, #724]	; (8001230 <HAL_PCD_IRQHandler+0x5b0>)
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8000f5c:	2101      	movs	r1, #1
            if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8000f5e:	9a04      	ldr	r2, [sp, #16]
 8000f60:	459a      	cmp	sl, r3
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8000f62:	f8c9 1008 	str.w	r1, [r9, #8]
 8000f66:	6921      	ldr	r1, [r4, #16]
            if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8000f68:	d918      	bls.n	8000f9c <HAL_PCD_IRQHandler+0x31c>
              if (hpcd->Init.dma_enable == 1U)
 8000f6a:	2901      	cmp	r1, #1
 8000f6c:	d116      	bne.n	8000f9c <HAL_PCD_IRQHandler+0x31c>
                if ((USBx_OUTEP(0U)->DOEPINT & (1U << 15)) != 0U)
 8000f6e:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8000f72:	0409      	lsls	r1, r1, #16
 8000f74:	d503      	bpl.n	8000f7e <HAL_PCD_IRQHandler+0x2fe>
                  CLEAR_OUT_EP_INTR(epnum, (1U << 15));
 8000f76:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f7a:	f8c9 1008 	str.w	r1, [r9, #8]
              hpcd->OUT_ep[epnum].xfer_count = hpcd->OUT_ep[epnum].maxpacket- (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8000f7e:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8000f82:	f8d6 0204 	ldr.w	r0, [r6, #516]	; 0x204
 8000f86:	f3c1 0112 	ubfx	r1, r1, #0, #19
 8000f8a:	1a41      	subs	r1, r0, r1
 8000f8c:	f8c6 1214 	str.w	r1, [r6, #532]	; 0x214
              hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8000f90:	f8d6 1208 	ldr.w	r1, [r6, #520]	; 0x208
 8000f94:	4408      	add	r0, r1
 8000f96:	f8c6 0208 	str.w	r0, [r6, #520]	; 0x208
 8000f9a:	e001      	b.n	8000fa0 <HAL_PCD_IRQHandler+0x320>
            if(hpcd->Init.dma_enable == 1U)
 8000f9c:	2901      	cmp	r1, #1
 8000f9e:	d0ee      	beq.n	8000f7e <HAL_PCD_IRQHandler+0x2fe>
            if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8000fa0:	4ba4      	ldr	r3, [pc, #656]	; (8001234 <HAL_PCD_IRQHandler+0x5b4>)
 8000fa2:	459a      	cmp	sl, r3
 8000fa4:	d12d      	bne.n	8001002 <HAL_PCD_IRQHandler+0x382>
              if ((USBx_OUTEP(0U)->DOEPINT & (1U << 15)) != 0U)
 8000fa6:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8000faa:	040b      	lsls	r3, r1, #16
 8000fac:	d529      	bpl.n	8001002 <HAL_PCD_IRQHandler+0x382>
                CLEAR_OUT_EP_INTR(epnum, (1U << 15));
 8000fae:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000fb2:	f8c9 2008 	str.w	r2, [r9, #8]
            if(hpcd->Init.dma_enable == 1U)
 8000fb6:	6921      	ldr	r1, [r4, #16]
 8000fb8:	2901      	cmp	r1, #1
 8000fba:	d108      	bne.n	8000fce <HAL_PCD_IRQHandler+0x34e>
              if((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8000fbc:	b93d      	cbnz	r5, 8000fce <HAL_PCD_IRQHandler+0x34e>
 8000fbe:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
 8000fc2:	b922      	cbnz	r2, 8000fce <HAL_PCD_IRQHandler+0x34e>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8000fc4:	f504 7270 	add.w	r2, r4, #960	; 0x3c0
 8000fc8:	6820      	ldr	r0, [r4, #0]
 8000fca:	f002 fc5d 	bl	8003888 <USB_EP0_OutStart>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8000fce:	f01b 0f08 	tst.w	fp, #8
 8000fd2:	d024      	beq.n	800101e <HAL_PCD_IRQHandler+0x39e>
            if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8000fd4:	4b97      	ldr	r3, [pc, #604]	; (8001234 <HAL_PCD_IRQHandler+0x5b4>)
 8000fd6:	459a      	cmp	sl, r3
 8000fd8:	d118      	bne.n	800100c <HAL_PCD_IRQHandler+0x38c>
              if ((USBx_OUTEP(0U)->DOEPINT & (1U << 15)) != 0U)
 8000fda:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8000fde:	0410      	lsls	r0, r2, #16
 8000fe0:	d503      	bpl.n	8000fea <HAL_PCD_IRQHandler+0x36a>
                CLEAR_OUT_EP_INTR(epnum, (1U << 15));
 8000fe2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000fe6:	f8c9 2008 	str.w	r2, [r9, #8]
              if (hpcd->Init.dma_enable == 1U)
 8000fea:	6922      	ldr	r2, [r4, #16]
 8000fec:	2a01      	cmp	r2, #1
 8000fee:	d110      	bne.n	8001012 <HAL_PCD_IRQHandler+0x392>
                if ((USBx_OUTEP(0U)->DOEPINT & (1U << 15)) != 0U)
 8000ff0:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8000ff4:	0411      	lsls	r1, r2, #16
 8000ff6:	d50c      	bpl.n	8001012 <HAL_PCD_IRQHandler+0x392>
                  CLEAR_OUT_EP_INTR(epnum, (1U << 15));
 8000ff8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000ffc:	f8c9 2008 	str.w	r2, [r9, #8]
 8001000:	e007      	b.n	8001012 <HAL_PCD_IRQHandler+0x392>
              HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001002:	4611      	mov	r1, r2
 8001004:	4620      	mov	r0, r4
 8001006:	f005 fd7f 	bl	8006b08 <HAL_PCD_DataOutStageCallback>
 800100a:	e7d4      	b.n	8000fb6 <HAL_PCD_IRQHandler+0x336>
            if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800100c:	4b88      	ldr	r3, [pc, #544]	; (8001230 <HAL_PCD_IRQHandler+0x5b0>)
 800100e:	459a      	cmp	sl, r3
 8001010:	d8eb      	bhi.n	8000fea <HAL_PCD_IRQHandler+0x36a>
            HAL_PCD_SetupStageCallback(hpcd);
 8001012:	4620      	mov	r0, r4
 8001014:	f005 fd72 	bl	8006afc <HAL_PCD_SetupStageCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001018:	2208      	movs	r2, #8
 800101a:	f8c9 2008 	str.w	r2, [r9, #8]
          if(( epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800101e:	f01b 0f10 	tst.w	fp, #16
 8001022:	d002      	beq.n	800102a <HAL_PCD_IRQHandler+0x3aa>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001024:	2210      	movs	r2, #16
 8001026:	f8c9 2008 	str.w	r2, [r9, #8]
          if(( epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800102a:	f01b 0f20 	tst.w	fp, #32
 800102e:	d002      	beq.n	8001036 <HAL_PCD_IRQHandler+0x3b6>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001030:	2320      	movs	r3, #32
 8001032:	f8c9 3008 	str.w	r3, [r9, #8]
        ep_intr >>= 1U;
 8001036:	9b03      	ldr	r3, [sp, #12]
        epnum++;
 8001038:	3501      	adds	r5, #1
 800103a:	f109 0920 	add.w	r9, r9, #32
 800103e:	361c      	adds	r6, #28
        ep_intr >>= 1U;
 8001040:	085b      	lsrs	r3, r3, #1
 8001042:	9303      	str	r3, [sp, #12]
 8001044:	e649      	b.n	8000cda <HAL_PCD_IRQHandler+0x5a>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001046:	f01b 0f01 	tst.w	fp, #1
 800104a:	d071      	beq.n	8001130 <HAL_PCD_IRQHandler+0x4b0>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800104c:	b2eb      	uxtb	r3, r5
 800104e:	6820      	ldr	r0, [r4, #0]
 8001050:	4619      	mov	r1, r3
 8001052:	9303      	str	r3, [sp, #12]
 8001054:	f002 fbe7 	bl	8003826 <USB_ReadDevInEPInterrupt>
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001058:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800105c:	4680      	mov	r8, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800105e:	d022      	beq.n	80010a6 <HAL_PCD_IRQHandler+0x426>
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & 0xFU));
 8001060:	2001      	movs	r0, #1
 8001062:	f005 020f 	and.w	r2, r5, #15
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001066:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & 0xFU));
 800106a:	fa00 f202 	lsl.w	r2, r0, r2
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800106e:	9903      	ldr	r1, [sp, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001070:	ea23 0302 	bic.w	r3, r3, r2
 8001074:	f8c7 3834 	str.w	r3, [r7, #2100]	; 0x834
            if (hpcd->Init.dma_enable == 1U)
 8001078:	6923      	ldr	r3, [r4, #16]
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800107a:	f8c9 0008 	str.w	r0, [r9, #8]
            if (hpcd->Init.dma_enable == 1U)
 800107e:	4283      	cmp	r3, r0
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001080:	4620      	mov	r0, r4
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001082:	bf01      	itttt	eq
 8001084:	6cb3      	ldreq	r3, [r6, #72]	; 0x48
 8001086:	6c72      	ldreq	r2, [r6, #68]	; 0x44
 8001088:	189b      	addeq	r3, r3, r2
 800108a:	64b3      	streq	r3, [r6, #72]	; 0x48
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800108c:	f005 fd45 	bl	8006b1a <HAL_PCD_DataInStageCallback>
            if (hpcd->Init.dma_enable == 1U)
 8001090:	6921      	ldr	r1, [r4, #16]
 8001092:	2901      	cmp	r1, #1
 8001094:	d107      	bne.n	80010a6 <HAL_PCD_IRQHandler+0x426>
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001096:	b935      	cbnz	r5, 80010a6 <HAL_PCD_IRQHandler+0x426>
 8001098:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800109a:	b923      	cbnz	r3, 80010a6 <HAL_PCD_IRQHandler+0x426>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800109c:	f504 7270 	add.w	r2, r4, #960	; 0x3c0
 80010a0:	6820      	ldr	r0, [r4, #0]
 80010a2:	f002 fbf1 	bl	8003888 <USB_EP0_OutStart>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80010a6:	f018 0f08 	tst.w	r8, #8
 80010aa:	d002      	beq.n	80010b2 <HAL_PCD_IRQHandler+0x432>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80010ac:	2308      	movs	r3, #8
 80010ae:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80010b2:	f018 0f10 	tst.w	r8, #16
 80010b6:	d002      	beq.n	80010be <HAL_PCD_IRQHandler+0x43e>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80010b8:	2310      	movs	r3, #16
 80010ba:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80010be:	f018 0f40 	tst.w	r8, #64	; 0x40
 80010c2:	d002      	beq.n	80010ca <HAL_PCD_IRQHandler+0x44a>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80010c4:	2340      	movs	r3, #64	; 0x40
 80010c6:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80010ca:	f018 0f02 	tst.w	r8, #2
 80010ce:	d002      	beq.n	80010d6 <HAL_PCD_IRQHandler+0x456>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80010d0:	2302      	movs	r3, #2
 80010d2:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80010d6:	f018 0f80 	tst.w	r8, #128	; 0x80
 80010da:	d029      	beq.n	8001130 <HAL_PCD_IRQHandler+0x4b0>
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80010dc:	6823      	ldr	r3, [r4, #0]
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
  len = ep->xfer_len - ep->xfer_count;
 80010de:	6d72      	ldr	r2, [r6, #84]	; 0x54
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80010e0:	9304      	str	r3, [sp, #16]
  len = ep->xfer_len - ep->xfer_count;
 80010e2:	6d33      	ldr	r3, [r6, #80]	; 0x50
 80010e4:	eba3 0802 	sub.w	r8, r3, r2
 80010e8:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80010ea:	4598      	cmp	r8, r3
 80010ec:	bf28      	it	cs
 80010ee:	4698      	movcs	r8, r3
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;

  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 80010f0:	9b04      	ldr	r3, [sp, #16]
  len32b = (len + 3U) / 4U;
 80010f2:	f108 0a03 	add.w	sl, r8, #3
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 80010f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
  len32b = (len + 3U) / 4U;
 80010fa:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 80010fe:	eb03 1345 	add.w	r3, r3, r5, lsl #5
 8001102:	9305      	str	r3, [sp, #20]
 8001104:	9b05      	ldr	r3, [sp, #20]
 8001106:	699b      	ldr	r3, [r3, #24]
 8001108:	b29b      	uxth	r3, r3
 800110a:	4553      	cmp	r3, sl
 800110c:	d904      	bls.n	8001118 <HAL_PCD_IRQHandler+0x498>
          (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800110e:	6d72      	ldr	r2, [r6, #84]	; 0x54
 8001110:	6d33      	ldr	r3, [r6, #80]	; 0x50
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8001112:	4293      	cmp	r3, r2
 8001114:	d900      	bls.n	8001118 <HAL_PCD_IRQHandler+0x498>
          (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001116:	b993      	cbnz	r3, 800113e <HAL_PCD_IRQHandler+0x4be>

    ep->xfer_buff  += len;
    ep->xfer_count += len;
  }

  if(len <= 0U)
 8001118:	f1b8 0f00 	cmp.w	r8, #0
 800111c:	d108      	bne.n	8001130 <HAL_PCD_IRQHandler+0x4b0>
  {
    fifoemptymsk = (uint32_t)(0x1UL << epnum);
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800111e:	9b04      	ldr	r3, [sp, #16]
    fifoemptymsk = (uint32_t)(0x1UL << epnum);
 8001120:	2101      	movs	r1, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001122:	f8d3 2834 	ldr.w	r2, [r3, #2100]	; 0x834
    fifoemptymsk = (uint32_t)(0x1UL << epnum);
 8001126:	40a9      	lsls	r1, r5
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001128:	ea22 0201 	bic.w	r2, r2, r1
 800112c:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
        epnum++;
 8001130:	3501      	adds	r5, #1
        ep_intr >>= 1U;
 8001132:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
 8001136:	361c      	adds	r6, #28
 8001138:	f109 0920 	add.w	r9, r9, #32
 800113c:	e5de      	b.n	8000cfc <HAL_PCD_IRQHandler+0x7c>
    len = ep->xfer_len - ep->xfer_count;
 800113e:	eba3 0802 	sub.w	r8, r3, r2
 8001142:	6c73      	ldr	r3, [r6, #68]	; 0x44
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len, (uint8_t)hpcd->Init.dma_enable);
 8001144:	9a03      	ldr	r2, [sp, #12]
 8001146:	4598      	cmp	r8, r3
 8001148:	9804      	ldr	r0, [sp, #16]
 800114a:	bf28      	it	cs
 800114c:	4698      	movcs	r8, r3
 800114e:	7c23      	ldrb	r3, [r4, #16]
 8001150:	9300      	str	r3, [sp, #0]
 8001152:	fa1f f388 	uxth.w	r3, r8
 8001156:	6cb1      	ldr	r1, [r6, #72]	; 0x48
    len32b = (len + 3U) / 4U;
 8001158:	f108 0a03 	add.w	sl, r8, #3
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len, (uint8_t)hpcd->Init.dma_enable);
 800115c:	f002 f9d2 	bl	8003504 <USB_WritePacket>
    ep->xfer_buff  += len;
 8001160:	6cb3      	ldr	r3, [r6, #72]	; 0x48
    len32b = (len + 3U) / 4U;
 8001162:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
    ep->xfer_buff  += len;
 8001166:	4443      	add	r3, r8
 8001168:	64b3      	str	r3, [r6, #72]	; 0x48
    ep->xfer_count += len;
 800116a:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800116c:	4443      	add	r3, r8
 800116e:	6573      	str	r3, [r6, #84]	; 0x54
 8001170:	e7c8      	b.n	8001104 <HAL_PCD_IRQHandler+0x484>
        HAL_PCD_ResumeCallback(hpcd);
 8001172:	4620      	mov	r0, r4
 8001174:	f005 fd06 	bl	8006b84 <HAL_PCD_ResumeCallback>
 8001178:	e5da      	b.n	8000d30 <HAL_PCD_IRQHandler+0xb0>
        HAL_PCD_SuspendCallback(hpcd);
 800117a:	4620      	mov	r0, r4
 800117c:	f005 fcea 	bl	8006b54 <HAL_PCD_SuspendCallback>
 8001180:	e606      	b.n	8000d90 <HAL_PCD_IRQHandler+0x110>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001182:	6099      	str	r1, [r3, #8]
 8001184:	3320      	adds	r3, #32
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001186:	f853 2c20 	ldr.w	r2, [r3, #-32]
 800118a:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800118e:	f843 2c20 	str.w	r2, [r3, #-32]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001192:	f8c3 11e8 	str.w	r1, [r3, #488]	; 0x1e8
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001196:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 800119a:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800119e:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011a2:	9a02      	ldr	r2, [sp, #8]
 80011a4:	3201      	adds	r2, #1
 80011a6:	9202      	str	r2, [sp, #8]
 80011a8:	e606      	b.n	8000db8 <HAL_PCD_IRQHandler+0x138>
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM | USB_OTG_DOEPMSK_OTEPSPRM);
 80011aa:	6973      	ldr	r3, [r6, #20]
 80011ac:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80011b0:	6173      	str	r3, [r6, #20]
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 80011b2:	6933      	ldr	r3, [r6, #16]
 80011b4:	f043 030b 	orr.w	r3, r3, #11
 80011b8:	6133      	str	r3, [r6, #16]
 80011ba:	e613      	b.n	8000de4 <HAL_PCD_IRQHandler+0x164>
        hpcd->Init.speed            = USB_OTG_SPEED_FULL;
 80011bc:	2303      	movs	r3, #3
 80011be:	60e3      	str	r3, [r4, #12]
        hpcd->Init.ep0_mps          = USB_OTG_FS_MAX_PACKET_SIZE;
 80011c0:	2340      	movs	r3, #64	; 0x40
 80011c2:	6163      	str	r3, [r4, #20]
        hclk = HAL_RCC_GetHCLKFreq();
 80011c4:	f000 fcb2 	bl	8001b2c <HAL_RCC_GetHCLKFreq>
        if((hclk >= 14200000U) && (hclk < 15000000U))
 80011c8:	4b1b      	ldr	r3, [pc, #108]	; (8001238 <HAL_PCD_IRQHandler+0x5b8>)
 80011ca:	4a1c      	ldr	r2, [pc, #112]	; (800123c <HAL_PCD_IRQHandler+0x5bc>)
 80011cc:	4403      	add	r3, r0
 80011ce:	4293      	cmp	r3, r2
 80011d0:	6823      	ldr	r3, [r4, #0]
 80011d2:	d804      	bhi.n	80011de <HAL_PCD_IRQHandler+0x55e>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xFU << 10) & USB_OTG_GUSBCFG_TRDT);
 80011d4:	68da      	ldr	r2, [r3, #12]
 80011d6:	f442 5270 	orr.w	r2, r2, #15360	; 0x3c00
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10) & USB_OTG_GUSBCFG_TRDT);
 80011da:	60da      	str	r2, [r3, #12]
 80011dc:	e62e      	b.n	8000e3c <HAL_PCD_IRQHandler+0x1bc>
        else if((hclk >= 15000000U) && (hclk < 16000000U))
 80011de:	4a18      	ldr	r2, [pc, #96]	; (8001240 <HAL_PCD_IRQHandler+0x5c0>)
 80011e0:	4918      	ldr	r1, [pc, #96]	; (8001244 <HAL_PCD_IRQHandler+0x5c4>)
 80011e2:	4402      	add	r2, r0
 80011e4:	428a      	cmp	r2, r1
 80011e6:	d803      	bhi.n	80011f0 <HAL_PCD_IRQHandler+0x570>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xEU << 10) & USB_OTG_GUSBCFG_TRDT);
 80011e8:	68da      	ldr	r2, [r3, #12]
 80011ea:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 80011ee:	e7f4      	b.n	80011da <HAL_PCD_IRQHandler+0x55a>
        else if((hclk >= 16000000U) && (hclk < 17200000U))
 80011f0:	f5a0 0274 	sub.w	r2, r0, #15990784	; 0xf40000
 80011f4:	4914      	ldr	r1, [pc, #80]	; (8001248 <HAL_PCD_IRQHandler+0x5c8>)
 80011f6:	f5a2 5210 	sub.w	r2, r2, #9216	; 0x2400
 80011fa:	428a      	cmp	r2, r1
 80011fc:	d803      	bhi.n	8001206 <HAL_PCD_IRQHandler+0x586>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xDU << 10) & USB_OTG_GUSBCFG_TRDT);
 80011fe:	68da      	ldr	r2, [r3, #12]
 8001200:	f442 5250 	orr.w	r2, r2, #13312	; 0x3400
 8001204:	e7e9      	b.n	80011da <HAL_PCD_IRQHandler+0x55a>
        else if((hclk >= 17200000U) && (hclk < 18500000U))
 8001206:	f1a0 7283 	sub.w	r2, r0, #17170432	; 0x1060000
 800120a:	4910      	ldr	r1, [pc, #64]	; (800124c <HAL_PCD_IRQHandler+0x5cc>)
 800120c:	f5a2 42e7 	sub.w	r2, r2, #29568	; 0x7380
 8001210:	428a      	cmp	r2, r1
 8001212:	d803      	bhi.n	800121c <HAL_PCD_IRQHandler+0x59c>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xCU << 10) & USB_OTG_GUSBCFG_TRDT);
 8001214:	68da      	ldr	r2, [r3, #12]
 8001216:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 800121a:	e7de      	b.n	80011da <HAL_PCD_IRQHandler+0x55a>
        else if((hclk >= 18500000U) && (hclk < 20000000U))
 800121c:	4a0c      	ldr	r2, [pc, #48]	; (8001250 <HAL_PCD_IRQHandler+0x5d0>)
 800121e:	490d      	ldr	r1, [pc, #52]	; (8001254 <HAL_PCD_IRQHandler+0x5d4>)
 8001220:	4402      	add	r2, r0
 8001222:	428a      	cmp	r2, r1
 8001224:	d818      	bhi.n	8001258 <HAL_PCD_IRQHandler+0x5d8>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xBU << 10) & USB_OTG_GUSBCFG_TRDT);
 8001226:	68da      	ldr	r2, [r3, #12]
 8001228:	f442 5230 	orr.w	r2, r2, #11264	; 0x2c00
 800122c:	e7d5      	b.n	80011da <HAL_PCD_IRQHandler+0x55a>
 800122e:	bf00      	nop
 8001230:	4f54300a 	.word	0x4f54300a
 8001234:	4f54310a 	.word	0x4f54310a
 8001238:	ff275340 	.word	0xff275340
 800123c:	000c34ff 	.word	0x000c34ff
 8001240:	ff1b1e40 	.word	0xff1b1e40
 8001244:	000f423f 	.word	0x000f423f
 8001248:	00124f7f 	.word	0x00124f7f
 800124c:	0013d61f 	.word	0x0013d61f
 8001250:	fee5b660 	.word	0xfee5b660
 8001254:	0016e35f 	.word	0x0016e35f
        else if((hclk >= 20000000U) && (hclk < 21800000U))
 8001258:	4a1b      	ldr	r2, [pc, #108]	; (80012c8 <HAL_PCD_IRQHandler+0x648>)
 800125a:	491c      	ldr	r1, [pc, #112]	; (80012cc <HAL_PCD_IRQHandler+0x64c>)
 800125c:	4402      	add	r2, r0
 800125e:	428a      	cmp	r2, r1
 8001260:	d803      	bhi.n	800126a <HAL_PCD_IRQHandler+0x5ea>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xAU << 10) & USB_OTG_GUSBCFG_TRDT);
 8001262:	68da      	ldr	r2, [r3, #12]
 8001264:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
 8001268:	e7b7      	b.n	80011da <HAL_PCD_IRQHandler+0x55a>
        else if((hclk >= 21800000U) && (hclk < 24000000U))
 800126a:	4a19      	ldr	r2, [pc, #100]	; (80012d0 <HAL_PCD_IRQHandler+0x650>)
 800126c:	4919      	ldr	r1, [pc, #100]	; (80012d4 <HAL_PCD_IRQHandler+0x654>)
 800126e:	4402      	add	r2, r0
 8001270:	428a      	cmp	r2, r1
 8001272:	d803      	bhi.n	800127c <HAL_PCD_IRQHandler+0x5fc>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x9U << 10) & USB_OTG_GUSBCFG_TRDT);
 8001274:	68da      	ldr	r2, [r3, #12]
 8001276:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 800127a:	e7ae      	b.n	80011da <HAL_PCD_IRQHandler+0x55a>
        else if((hclk >= 24000000U) && (hclk < 27700000U))
 800127c:	f1a0 72b7 	sub.w	r2, r0, #23986176	; 0x16e0000
 8001280:	4915      	ldr	r1, [pc, #84]	; (80012d8 <HAL_PCD_IRQHandler+0x658>)
 8001282:	f5a2 5258 	sub.w	r2, r2, #13824	; 0x3600
 8001286:	428a      	cmp	r2, r1
 8001288:	d803      	bhi.n	8001292 <HAL_PCD_IRQHandler+0x612>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x8U << 10) & USB_OTG_GUSBCFG_TRDT);
 800128a:	68da      	ldr	r2, [r3, #12]
 800128c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001290:	e7a3      	b.n	80011da <HAL_PCD_IRQHandler+0x55a>
        else if((hclk >= 27700000U) && (hclk < 32000000U))
 8001292:	4a12      	ldr	r2, [pc, #72]	; (80012dc <HAL_PCD_IRQHandler+0x65c>)
 8001294:	4912      	ldr	r1, [pc, #72]	; (80012e0 <HAL_PCD_IRQHandler+0x660>)
 8001296:	4402      	add	r2, r0
 8001298:	428a      	cmp	r2, r1
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x7U << 10) & USB_OTG_GUSBCFG_TRDT);
 800129a:	68da      	ldr	r2, [r3, #12]
 800129c:	bf94      	ite	ls
 800129e:	f442 52e0 	orrls.w	r2, r2, #7168	; 0x1c00
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10) & USB_OTG_GUSBCFG_TRDT);
 80012a2:	f442 52c0 	orrhi.w	r2, r2, #6144	; 0x1800
 80012a6:	e798      	b.n	80011da <HAL_PCD_IRQHandler+0x55a>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80012a8:	2b06      	cmp	r3, #6
 80012aa:	f47f adfb 	bne.w	8000ea4 <HAL_PCD_IRQHandler+0x224>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012ae:	f04f 081c 	mov.w	r8, #28
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80012b2:	2208      	movs	r2, #8
 80012b4:	f504 7170 	add.w	r1, r4, #960	; 0x3c0
 80012b8:	4638      	mov	r0, r7
 80012ba:	f002 fa09 	bl	80036d0 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012be:	fb08 4809 	mla	r8, r8, r9, r4
 80012c2:	f3c6 160a 	ubfx	r6, r6, #4, #11
 80012c6:	e5e8      	b.n	8000e9a <HAL_PCD_IRQHandler+0x21a>
 80012c8:	feced300 	.word	0xfeced300
 80012cc:	001b773f 	.word	0x001b773f
 80012d0:	feb35bc0 	.word	0xfeb35bc0
 80012d4:	002191bf 	.word	0x002191bf
 80012d8:	0038751f 	.word	0x0038751f
 80012dc:	fe5954e0 	.word	0xfe5954e0
 80012e0:	00419cdf 	.word	0x00419cdf

080012e4 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 80012e4:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 80012e8:	2a01      	cmp	r2, #1
{
 80012ea:	b510      	push	{r4, lr}
 80012ec:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80012ee:	d00b      	beq.n	8001308 <HAL_PCD_SetAddress+0x24>
 80012f0:	2201      	movs	r2, #1
 80012f2:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80012f6:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80012fa:	6800      	ldr	r0, [r0, #0]
 80012fc:	f002 fa4e 	bl	800379c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001300:	2000      	movs	r0, #0
 8001302:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 8001306:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8001308:	2002      	movs	r0, #2
}
 800130a:	bd10      	pop	{r4, pc}

0800130c <HAL_PCD_EP_Open>:
{
 800130c:	b570      	push	{r4, r5, r6, lr}
 800130e:	4604      	mov	r4, r0
 8001310:	f001 000f 	and.w	r0, r1, #15
 8001314:	261c      	movs	r6, #28
  if ((ep_addr & 0x80U) == 0x80U)
 8001316:	f011 0f80 	tst.w	r1, #128	; 0x80
 800131a:	b2c5      	uxtb	r5, r0
  ep->num = ep_addr & 0xFU;
 800131c:	b2c0      	uxtb	r0, r0
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 800131e:	fb06 4105 	mla	r1, r6, r5, r4
    ep->is_in = 1U;
 8001322:	bf1d      	ittte	ne
 8001324:	fb06 4505 	mlane	r5, r6, r5, r4
 8001328:	2601      	movne	r6, #1
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 800132a:	313c      	addne	r1, #60	; 0x3c
    ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 800132c:	f501 71fe 	addeq.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 8001330:	bf05      	ittet	eq
 8001332:	fb06 4505 	mlaeq	r5, r6, r5, r4
 8001336:	2600      	moveq	r6, #0
    ep->is_in = 1U;
 8001338:	f885 603d 	strbne.w	r6, [r5, #61]	; 0x3d
    ep->is_in = 0U;
 800133c:	f885 61fd 	strbeq.w	r6, [r5, #509]	; 0x1fd
  ep->maxpacket = ep_mps;
 8001340:	608a      	str	r2, [r1, #8]
  if (ep->is_in != 0U)
 8001342:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & 0xFU;
 8001344:	7008      	strb	r0, [r1, #0]
  ep->type = ep_type;
 8001346:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8001348:	b102      	cbz	r2, 800134c <HAL_PCD_EP_Open+0x40>
    ep->tx_fifo_num = ep->num;
 800134a:	80c8      	strh	r0, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 800134c:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 800134e:	bf04      	itt	eq
 8001350:	2300      	moveq	r3, #0
 8001352:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 8001354:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8001358:	2b01      	cmp	r3, #1
 800135a:	d009      	beq.n	8001370 <HAL_PCD_EP_Open+0x64>
 800135c:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800135e:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8001360:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001364:	f001 ffda 	bl	800331c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001368:	2000      	movs	r0, #0
 800136a:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return ret;
 800136e:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 8001370:	2002      	movs	r0, #2
}
 8001372:	bd70      	pop	{r4, r5, r6, pc}

08001374 <HAL_PCD_EP_Close>:
{
 8001374:	f001 030f 	and.w	r3, r1, #15
  if ((ep_addr & 0x80U) == 0x80U)
 8001378:	f011 0f80 	tst.w	r1, #128	; 0x80
 800137c:	b2da      	uxtb	r2, r3
{
 800137e:	b510      	push	{r4, lr}
 8001380:	4604      	mov	r4, r0
 8001382:	f04f 001c 	mov.w	r0, #28
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8001386:	fb00 4102 	mla	r1, r0, r2, r4
    ep->is_in = 1U;
 800138a:	bf1b      	ittet	ne
 800138c:	fb00 4202 	mlane	r2, r0, r2, r4
 8001390:	2001      	movne	r0, #1
    ep->is_in = 0U;
 8001392:	fb00 4202 	mlaeq	r2, r0, r2, r4
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8001396:	313c      	addne	r1, #60	; 0x3c
    ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 8001398:	bf05      	ittet	eq
 800139a:	f501 71fe 	addeq.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 800139e:	2000      	moveq	r0, #0
    ep->is_in = 1U;
 80013a0:	f882 003d 	strbne.w	r0, [r2, #61]	; 0x3d
    ep->is_in = 0U;
 80013a4:	f882 01fd 	strbeq.w	r0, [r2, #509]	; 0x1fd
  ep->num   = ep_addr & 0xFU;
 80013a8:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 80013aa:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d009      	beq.n	80013c6 <HAL_PCD_EP_Close+0x52>
 80013b2:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance , ep);
 80013b4:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80013b6:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance , ep);
 80013ba:	f001 fff1 	bl	80033a0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80013be:	2000      	movs	r0, #0
 80013c0:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 80013c4:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80013c6:	2002      	movs	r0, #2
}
 80013c8:	bd10      	pop	{r4, pc}

080013ca <HAL_PCD_EP_Receive>:
{
 80013ca:	b538      	push	{r3, r4, r5, lr}
 80013cc:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 80013d0:	241c      	movs	r4, #28
 80013d2:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;
 80013d6:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 80013da:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
  ep->xfer_len = len;
 80013de:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->xfer_count = 0U;
 80013e2:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 80013e4:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
  ep->xfer_count = 0U;
 80013e8:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
  ep->is_in = 0U;
 80013ec:	f884 31fd 	strb.w	r3, [r4, #509]	; 0x1fd
  ep->num = ep_addr & 0xFU;
 80013f0:	f884 51fc 	strb.w	r5, [r4, #508]	; 0x1fc
  if (hpcd->Init.dma_enable == 1U)
 80013f4:	6903      	ldr	r3, [r0, #16]
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80013f6:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 80013f8:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 80013fa:	bf08      	it	eq
 80013fc:	f8c4 220c 	streq.w	r2, [r4, #524]	; 0x20c
 8001400:	b2da      	uxtb	r2, r3
  if ((ep_addr & 0xFU) == 0U)
 8001402:	b91d      	cbnz	r5, 800140c <HAL_PCD_EP_Receive+0x42>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001404:	f001 fffe 	bl	8003404 <USB_EP0StartXfer>
}
 8001408:	2000      	movs	r0, #0
 800140a:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800140c:	f002 f88e 	bl	800352c <USB_EPStartXfer>
 8001410:	e7fa      	b.n	8001408 <HAL_PCD_EP_Receive+0x3e>

08001412 <HAL_PCD_EP_GetRxCount>:
  return (uint16_t)hpcd->OUT_ep[ep_addr & 0xFU].xfer_count;
 8001412:	231c      	movs	r3, #28
 8001414:	f001 010f 	and.w	r1, r1, #15
 8001418:	fb03 0101 	mla	r1, r3, r1, r0
}
 800141c:	f8b1 0214 	ldrh.w	r0, [r1, #532]	; 0x214
 8001420:	4770      	bx	lr

08001422 <HAL_PCD_EP_Transmit>:
{
 8001422:	b538      	push	{r3, r4, r5, lr}
 8001424:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8001428:	241c      	movs	r4, #28
 800142a:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;
 800142e:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8001432:	313c      	adds	r1, #60	; 0x3c
  ep->xfer_len = len;
 8001434:	6523      	str	r3, [r4, #80]	; 0x50
  ep->xfer_count = 0U;
 8001436:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 8001438:	64a2      	str	r2, [r4, #72]	; 0x48
  ep->xfer_count = 0U;
 800143a:	6563      	str	r3, [r4, #84]	; 0x54
  ep->is_in = 1U;
 800143c:	2301      	movs	r3, #1
  ep->num = ep_addr & 0xFU;
 800143e:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  ep->is_in = 1U;
 8001442:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (hpcd->Init.dma_enable == 1U)
 8001446:	6903      	ldr	r3, [r0, #16]
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001448:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 800144a:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 800144c:	bf08      	it	eq
 800144e:	64e2      	streq	r2, [r4, #76]	; 0x4c
 8001450:	b2da      	uxtb	r2, r3
  if ((ep_addr & 0xFU) == 0U)
 8001452:	b91d      	cbnz	r5, 800145c <HAL_PCD_EP_Transmit+0x3a>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001454:	f001 ffd6 	bl	8003404 <USB_EP0StartXfer>
}
 8001458:	2000      	movs	r0, #0
 800145a:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800145c:	f002 f866 	bl	800352c <USB_EPStartXfer>
 8001460:	e7fa      	b.n	8001458 <HAL_PCD_EP_Transmit+0x36>

08001462 <HAL_PCD_EP_SetStall>:
{
 8001462:	b538      	push	{r3, r4, r5, lr}
 8001464:	f001 050f 	and.w	r5, r1, #15
  if (((uint32_t)ep_addr & 0xFU) > hpcd->Init.dev_endpoints)
 8001468:	6843      	ldr	r3, [r0, #4]
{
 800146a:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0xFU) > hpcd->Init.dev_endpoints)
 800146c:	429d      	cmp	r5, r3
 800146e:	d82e      	bhi.n	80014ce <HAL_PCD_EP_SetStall+0x6c>
  if ((0x80U & ep_addr) == 0x80U)
 8001470:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001474:	f04f 021c 	mov.w	r2, #28
 8001478:	d01f      	beq.n	80014ba <HAL_PCD_EP_SetStall+0x58>
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 800147a:	fb02 0305 	mla	r3, r2, r5, r0
    ep->is_in = 1U;
 800147e:	fb02 0105 	mla	r1, r2, r5, r0
 8001482:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8001484:	333c      	adds	r3, #60	; 0x3c
    ep->is_in = 1U;
 8001486:	f881 203d 	strb.w	r2, [r1, #61]	; 0x3d
  ep->is_stall = 1U;
 800148a:	2201      	movs	r2, #1
  ep->num = ep_addr & 0xFU;
 800148c:	701d      	strb	r5, [r3, #0]
  ep->is_stall = 1U;
 800148e:	709a      	strb	r2, [r3, #2]
  __HAL_LOCK(hpcd);
 8001490:	f894 13bc 	ldrb.w	r1, [r4, #956]	; 0x3bc
 8001494:	4291      	cmp	r1, r2
 8001496:	d01c      	beq.n	80014d2 <HAL_PCD_EP_SetStall+0x70>
 8001498:	f884 23bc 	strb.w	r2, [r4, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800149c:	4619      	mov	r1, r3
 800149e:	6820      	ldr	r0, [r4, #0]
 80014a0:	f002 f924 	bl	80036ec <USB_EPSetStall>
  if((ep_addr & 0xFU) == 0U)
 80014a4:	b92d      	cbnz	r5, 80014b2 <HAL_PCD_EP_SetStall+0x50>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80014a6:	f504 7270 	add.w	r2, r4, #960	; 0x3c0
 80014aa:	7c21      	ldrb	r1, [r4, #16]
 80014ac:	6820      	ldr	r0, [r4, #0]
 80014ae:	f002 f9eb 	bl	8003888 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 80014b2:	2000      	movs	r0, #0
 80014b4:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 80014b8:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 80014ba:	fb02 0301 	mla	r3, r2, r1, r0
    ep->is_in = 0U;
 80014be:	fb02 0101 	mla	r1, r2, r1, r0
 80014c2:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 80014c4:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
    ep->is_in = 0U;
 80014c8:	f881 21fd 	strb.w	r2, [r1, #509]	; 0x1fd
 80014cc:	e7dd      	b.n	800148a <HAL_PCD_EP_SetStall+0x28>
    return HAL_ERROR;
 80014ce:	2001      	movs	r0, #1
 80014d0:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 80014d2:	2002      	movs	r0, #2
}
 80014d4:	bd38      	pop	{r3, r4, r5, pc}

080014d6 <HAL_PCD_EP_ClrStall>:
{
 80014d6:	b538      	push	{r3, r4, r5, lr}
 80014d8:	f001 020f 	and.w	r2, r1, #15
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80014dc:	6843      	ldr	r3, [r0, #4]
{
 80014de:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d825      	bhi.n	8001530 <HAL_PCD_EP_ClrStall+0x5a>
 80014e4:	231c      	movs	r3, #28
  if ((0x80U & ep_addr) == 0x80U)
 80014e6:	f011 0f80 	tst.w	r1, #128	; 0x80
  ep->is_stall = 0U;
 80014ea:	f04f 0500 	mov.w	r5, #0
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 80014ee:	fb03 0102 	mla	r1, r3, r2, r0
    ep->is_in = 0U;
 80014f2:	bf0f      	iteee	eq
 80014f4:	2000      	moveq	r0, #0
    ep->is_in = 1U;
 80014f6:	fb03 0302 	mlane	r3, r3, r2, r0
 80014fa:	2001      	movne	r0, #1
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 80014fc:	313c      	addne	r1, #60	; 0x3c
    ep = &hpcd->OUT_ep[ep_addr &0xFU];
 80014fe:	bf05      	ittet	eq
 8001500:	f501 71fe 	addeq.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 8001504:	fb03 4302 	mlaeq	r3, r3, r2, r4
    ep->is_in = 1U;
 8001508:	f883 003d 	strbne.w	r0, [r3, #61]	; 0x3d
    ep->is_in = 0U;
 800150c:	f883 01fd 	strbeq.w	r0, [r3, #509]	; 0x1fd
  ep->is_stall = 0U;
 8001510:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & 0xFU;
 8001512:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8001514:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8001518:	2b01      	cmp	r3, #1
 800151a:	d00b      	beq.n	8001534 <HAL_PCD_EP_ClrStall+0x5e>
 800151c:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800151e:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8001520:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001524:	f002 f90f 	bl	8003746 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001528:	f884 53bc 	strb.w	r5, [r4, #956]	; 0x3bc
  return HAL_OK;
 800152c:	4628      	mov	r0, r5
 800152e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001530:	2001      	movs	r0, #1
 8001532:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8001534:	2002      	movs	r0, #2
}
 8001536:	bd38      	pop	{r3, r4, r5, pc}

08001538 <HAL_PCD_EP_Flush>:
  __HAL_LOCK(hpcd);
 8001538:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 800153c:	2b01      	cmp	r3, #1
{
 800153e:	b510      	push	{r4, lr}
 8001540:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001542:	d011      	beq.n	8001568 <HAL_PCD_EP_Flush+0x30>
 8001544:	2301      	movs	r3, #1
 8001546:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  if ((ep_addr & 0x80U) == 0x80U)
 800154a:	060b      	lsls	r3, r1, #24
 800154c:	d508      	bpl.n	8001560 <HAL_PCD_EP_Flush+0x28>
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & 0xFU);
 800154e:	f001 010f 	and.w	r1, r1, #15
 8001552:	6800      	ldr	r0, [r0, #0]
 8001554:	f001 fdf2 	bl	800313c <USB_FlushTxFifo>
  __HAL_UNLOCK(hpcd);
 8001558:	2000      	movs	r0, #0
 800155a:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 800155e:	bd10      	pop	{r4, pc}
    (void)USB_FlushRxFifo(hpcd->Instance);
 8001560:	6800      	ldr	r0, [r0, #0]
 8001562:	f001 fdfd 	bl	8003160 <USB_FlushRxFifo>
 8001566:	e7f7      	b.n	8001558 <HAL_PCD_EP_Flush+0x20>
  __HAL_LOCK(hpcd);
 8001568:	2002      	movs	r0, #2
}
 800156a:	bd10      	pop	{r4, pc}

0800156c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800156c:	b570      	push	{r4, r5, r6, lr}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800156e:	6804      	ldr	r4, [r0, #0]
 8001570:	6a63      	ldr	r3, [r4, #36]	; 0x24

  if(fifo == 0U)
 8001572:	b921      	cbnz	r1, 800157e <HAL_PCDEx_SetTxFiFo+0x12>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8001574:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001578:	62a3      	str	r3, [r4, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 800157a:	2000      	movs	r0, #0
 800157c:	bd70      	pop	{r4, r5, r6, pc}
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800157e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 8001580:	1e4d      	subs	r5, r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8001582:	eb03 4310 	add.w	r3, r3, r0, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8001586:	2000      	movs	r0, #0
 8001588:	1c46      	adds	r6, r0, #1
 800158a:	b2c0      	uxtb	r0, r0
 800158c:	4285      	cmp	r5, r0
 800158e:	d806      	bhi.n	800159e <HAL_PCDEx_SetTxFiFo+0x32>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8001590:	313f      	adds	r1, #63	; 0x3f
 8001592:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001596:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 800159a:	6063      	str	r3, [r4, #4]
 800159c:	e7ed      	b.n	800157a <HAL_PCDEx_SetTxFiFo+0xe>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800159e:	3040      	adds	r0, #64	; 0x40
 80015a0:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80015a4:	6840      	ldr	r0, [r0, #4]
 80015a6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80015aa:	4630      	mov	r0, r6
 80015ac:	e7ec      	b.n	8001588 <HAL_PCDEx_SetTxFiFo+0x1c>

080015ae <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 80015ae:	6803      	ldr	r3, [r0, #0]

  return HAL_OK;
}
 80015b0:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 80015b2:	6259      	str	r1, [r3, #36]	; 0x24
}
 80015b4:	4770      	bx	lr

080015b6 <HAL_PCDEx_ActivateLPM>:
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  hpcd->lpm_active = 1U;
 80015b6:	2101      	movs	r1, #1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80015b8:	6802      	ldr	r2, [r0, #0]
{
 80015ba:	4603      	mov	r3, r0
  hpcd->lpm_active = 1U;
 80015bc:	f8c0 13f8 	str.w	r1, [r0, #1016]	; 0x3f8
  hpcd->LPM_State = LPM_L0;
 80015c0:	2000      	movs	r0, #0
 80015c2:	f883 03f0 	strb.w	r0, [r3, #1008]	; 0x3f0
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80015c6:	6993      	ldr	r3, [r2, #24]
 80015c8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80015cc:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80015ce:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80015d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015d4:	f043 0303 	orr.w	r3, r3, #3
 80015d8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 80015da:	4770      	bx	lr

080015dc <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 80015dc:	4770      	bx	lr
	...

080015e0 <HAL_PWR_PVD_IRQHandler>:
{
 80015e0:	b510      	push	{r4, lr}
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 80015e2:	4c05      	ldr	r4, [pc, #20]	; (80015f8 <HAL_PWR_PVD_IRQHandler+0x18>)
 80015e4:	6963      	ldr	r3, [r4, #20]
 80015e6:	03db      	lsls	r3, r3, #15
 80015e8:	d504      	bpl.n	80015f4 <HAL_PWR_PVD_IRQHandler+0x14>
    HAL_PWR_PVDCallback();
 80015ea:	f7ff fff7 	bl	80015dc <HAL_PWR_PVDCallback>
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 80015ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015f2:	6163      	str	r3, [r4, #20]
 80015f4:	bd10      	pop	{r4, pc}
 80015f6:	bf00      	nop
 80015f8:	40013c00 	.word	0x40013c00

080015fc <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 80015fc:	4b19      	ldr	r3, [pc, #100]	; (8001664 <HAL_PWREx_EnableOverDrive+0x68>)
{
 80015fe:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8001600:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001602:	4c19      	ldr	r4, [pc, #100]	; (8001668 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001604:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001608:	641a      	str	r2, [r3, #64]	; 0x40
 800160a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001610:	9301      	str	r3, [sp, #4]
 8001612:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001614:	6823      	ldr	r3, [r4, #0]
 8001616:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800161a:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800161c:	f7fe ffb0 	bl	8000580 <HAL_GetTick>
 8001620:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001622:	6863      	ldr	r3, [r4, #4]
 8001624:	03da      	lsls	r2, r3, #15
 8001626:	d50c      	bpl.n	8001642 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001628:	6823      	ldr	r3, [r4, #0]
 800162a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800162e:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001630:	f7fe ffa6 	bl	8000580 <HAL_GetTick>

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001634:	4c0c      	ldr	r4, [pc, #48]	; (8001668 <HAL_PWREx_EnableOverDrive+0x6c>)
  tickstart = HAL_GetTick();
 8001636:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001638:	6863      	ldr	r3, [r4, #4]
 800163a:	039b      	lsls	r3, r3, #14
 800163c:	d50a      	bpl.n	8001654 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 800163e:	2000      	movs	r0, #0
 8001640:	e006      	b.n	8001650 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001642:	f7fe ff9d 	bl	8000580 <HAL_GetTick>
 8001646:	1b40      	subs	r0, r0, r5
 8001648:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800164c:	d9e9      	bls.n	8001622 <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 800164e:	2003      	movs	r0, #3
}
 8001650:	b003      	add	sp, #12
 8001652:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001654:	f7fe ff94 	bl	8000580 <HAL_GetTick>
 8001658:	1b40      	subs	r0, r0, r5
 800165a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800165e:	d9eb      	bls.n	8001638 <HAL_PWREx_EnableOverDrive+0x3c>
 8001660:	e7f5      	b.n	800164e <HAL_PWREx_EnableOverDrive+0x52>
 8001662:	bf00      	nop
 8001664:	40023800 	.word	0x40023800
 8001668:	40007000 	.word	0x40007000

0800166c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800166c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001670:	4604      	mov	r4, r0
 8001672:	b918      	cbnz	r0, 800167c <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8001674:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8001676:	b002      	add	sp, #8
 8001678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800167c:	6803      	ldr	r3, [r0, #0]
 800167e:	07d8      	lsls	r0, r3, #31
 8001680:	d410      	bmi.n	80016a4 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001682:	6823      	ldr	r3, [r4, #0]
 8001684:	0799      	lsls	r1, r3, #30
 8001686:	d45e      	bmi.n	8001746 <HAL_RCC_OscConfig+0xda>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001688:	6823      	ldr	r3, [r4, #0]
 800168a:	0719      	lsls	r1, r3, #28
 800168c:	f100 80a3 	bmi.w	80017d6 <HAL_RCC_OscConfig+0x16a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001690:	6823      	ldr	r3, [r4, #0]
 8001692:	075a      	lsls	r2, r3, #29
 8001694:	f100 80c4 	bmi.w	8001820 <HAL_RCC_OscConfig+0x1b4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001698:	69a2      	ldr	r2, [r4, #24]
 800169a:	2a00      	cmp	r2, #0
 800169c:	f040 812e 	bne.w	80018fc <HAL_RCC_OscConfig+0x290>
  return HAL_OK;
 80016a0:	2000      	movs	r0, #0
 80016a2:	e7e8      	b.n	8001676 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016a4:	4b93      	ldr	r3, [pc, #588]	; (80018f4 <HAL_RCC_OscConfig+0x288>)
 80016a6:	689a      	ldr	r2, [r3, #8]
 80016a8:	f002 020c 	and.w	r2, r2, #12
 80016ac:	2a04      	cmp	r2, #4
 80016ae:	d007      	beq.n	80016c0 <HAL_RCC_OscConfig+0x54>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016b0:	689a      	ldr	r2, [r3, #8]
 80016b2:	f002 020c 	and.w	r2, r2, #12
 80016b6:	2a08      	cmp	r2, #8
 80016b8:	d10a      	bne.n	80016d0 <HAL_RCC_OscConfig+0x64>
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	025a      	lsls	r2, r3, #9
 80016be:	d507      	bpl.n	80016d0 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016c0:	4b8c      	ldr	r3, [pc, #560]	; (80018f4 <HAL_RCC_OscConfig+0x288>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	039b      	lsls	r3, r3, #14
 80016c6:	d5dc      	bpl.n	8001682 <HAL_RCC_OscConfig+0x16>
 80016c8:	6863      	ldr	r3, [r4, #4]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d1d9      	bne.n	8001682 <HAL_RCC_OscConfig+0x16>
 80016ce:	e7d1      	b.n	8001674 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016d0:	6863      	ldr	r3, [r4, #4]
 80016d2:	4d88      	ldr	r5, [pc, #544]	; (80018f4 <HAL_RCC_OscConfig+0x288>)
 80016d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016d8:	d111      	bne.n	80016fe <HAL_RCC_OscConfig+0x92>
 80016da:	682b      	ldr	r3, [r5, #0]
 80016dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016e0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80016e2:	f7fe ff4d 	bl	8000580 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016e6:	4d83      	ldr	r5, [pc, #524]	; (80018f4 <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 80016e8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ea:	682b      	ldr	r3, [r5, #0]
 80016ec:	039f      	lsls	r7, r3, #14
 80016ee:	d4c8      	bmi.n	8001682 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016f0:	f7fe ff46 	bl	8000580 <HAL_GetTick>
 80016f4:	1b80      	subs	r0, r0, r6
 80016f6:	2864      	cmp	r0, #100	; 0x64
 80016f8:	d9f7      	bls.n	80016ea <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 80016fa:	2003      	movs	r0, #3
 80016fc:	e7bb      	b.n	8001676 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016fe:	b99b      	cbnz	r3, 8001728 <HAL_RCC_OscConfig+0xbc>
 8001700:	682b      	ldr	r3, [r5, #0]
 8001702:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001706:	602b      	str	r3, [r5, #0]
 8001708:	682b      	ldr	r3, [r5, #0]
 800170a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800170e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001710:	f7fe ff36 	bl	8000580 <HAL_GetTick>
 8001714:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001716:	682b      	ldr	r3, [r5, #0]
 8001718:	0398      	lsls	r0, r3, #14
 800171a:	d5b2      	bpl.n	8001682 <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800171c:	f7fe ff30 	bl	8000580 <HAL_GetTick>
 8001720:	1b80      	subs	r0, r0, r6
 8001722:	2864      	cmp	r0, #100	; 0x64
 8001724:	d9f7      	bls.n	8001716 <HAL_RCC_OscConfig+0xaa>
 8001726:	e7e8      	b.n	80016fa <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001728:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800172c:	682b      	ldr	r3, [r5, #0]
 800172e:	d103      	bne.n	8001738 <HAL_RCC_OscConfig+0xcc>
 8001730:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001734:	602b      	str	r3, [r5, #0]
 8001736:	e7d0      	b.n	80016da <HAL_RCC_OscConfig+0x6e>
 8001738:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800173c:	602b      	str	r3, [r5, #0]
 800173e:	682b      	ldr	r3, [r5, #0]
 8001740:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001744:	e7cc      	b.n	80016e0 <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001746:	4b6b      	ldr	r3, [pc, #428]	; (80018f4 <HAL_RCC_OscConfig+0x288>)
 8001748:	689a      	ldr	r2, [r3, #8]
 800174a:	f012 0f0c 	tst.w	r2, #12
 800174e:	d007      	beq.n	8001760 <HAL_RCC_OscConfig+0xf4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001750:	689a      	ldr	r2, [r3, #8]
 8001752:	f002 020c 	and.w	r2, r2, #12
 8001756:	2a08      	cmp	r2, #8
 8001758:	d111      	bne.n	800177e <HAL_RCC_OscConfig+0x112>
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	0259      	lsls	r1, r3, #9
 800175e:	d40e      	bmi.n	800177e <HAL_RCC_OscConfig+0x112>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001760:	4b64      	ldr	r3, [pc, #400]	; (80018f4 <HAL_RCC_OscConfig+0x288>)
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	0792      	lsls	r2, r2, #30
 8001766:	d502      	bpl.n	800176e <HAL_RCC_OscConfig+0x102>
 8001768:	68e2      	ldr	r2, [r4, #12]
 800176a:	2a01      	cmp	r2, #1
 800176c:	d182      	bne.n	8001674 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	6921      	ldr	r1, [r4, #16]
 8001772:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001776:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800177a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800177c:	e784      	b.n	8001688 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800177e:	68e3      	ldr	r3, [r4, #12]
 8001780:	4d5c      	ldr	r5, [pc, #368]	; (80018f4 <HAL_RCC_OscConfig+0x288>)
 8001782:	b1bb      	cbz	r3, 80017b4 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_ENABLE();
 8001784:	682b      	ldr	r3, [r5, #0]
 8001786:	f043 0301 	orr.w	r3, r3, #1
 800178a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800178c:	f7fe fef8 	bl	8000580 <HAL_GetTick>
 8001790:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001792:	682b      	ldr	r3, [r5, #0]
 8001794:	079f      	lsls	r7, r3, #30
 8001796:	d507      	bpl.n	80017a8 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001798:	682b      	ldr	r3, [r5, #0]
 800179a:	6922      	ldr	r2, [r4, #16]
 800179c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80017a0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80017a4:	602b      	str	r3, [r5, #0]
 80017a6:	e76f      	b.n	8001688 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017a8:	f7fe feea 	bl	8000580 <HAL_GetTick>
 80017ac:	1b80      	subs	r0, r0, r6
 80017ae:	2802      	cmp	r0, #2
 80017b0:	d9ef      	bls.n	8001792 <HAL_RCC_OscConfig+0x126>
 80017b2:	e7a2      	b.n	80016fa <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 80017b4:	682b      	ldr	r3, [r5, #0]
 80017b6:	f023 0301 	bic.w	r3, r3, #1
 80017ba:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80017bc:	f7fe fee0 	bl	8000580 <HAL_GetTick>
 80017c0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017c2:	682b      	ldr	r3, [r5, #0]
 80017c4:	0798      	lsls	r0, r3, #30
 80017c6:	f57f af5f 	bpl.w	8001688 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017ca:	f7fe fed9 	bl	8000580 <HAL_GetTick>
 80017ce:	1b80      	subs	r0, r0, r6
 80017d0:	2802      	cmp	r0, #2
 80017d2:	d9f6      	bls.n	80017c2 <HAL_RCC_OscConfig+0x156>
 80017d4:	e791      	b.n	80016fa <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80017d6:	6963      	ldr	r3, [r4, #20]
 80017d8:	4d46      	ldr	r5, [pc, #280]	; (80018f4 <HAL_RCC_OscConfig+0x288>)
 80017da:	b183      	cbz	r3, 80017fe <HAL_RCC_OscConfig+0x192>
      __HAL_RCC_LSI_ENABLE();
 80017dc:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80017de:	f043 0301 	orr.w	r3, r3, #1
 80017e2:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80017e4:	f7fe fecc 	bl	8000580 <HAL_GetTick>
 80017e8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ea:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80017ec:	079b      	lsls	r3, r3, #30
 80017ee:	f53f af4f 	bmi.w	8001690 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017f2:	f7fe fec5 	bl	8000580 <HAL_GetTick>
 80017f6:	1b80      	subs	r0, r0, r6
 80017f8:	2802      	cmp	r0, #2
 80017fa:	d9f6      	bls.n	80017ea <HAL_RCC_OscConfig+0x17e>
 80017fc:	e77d      	b.n	80016fa <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 80017fe:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001800:	f023 0301 	bic.w	r3, r3, #1
 8001804:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8001806:	f7fe febb 	bl	8000580 <HAL_GetTick>
 800180a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800180c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800180e:	079f      	lsls	r7, r3, #30
 8001810:	f57f af3e 	bpl.w	8001690 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001814:	f7fe feb4 	bl	8000580 <HAL_GetTick>
 8001818:	1b80      	subs	r0, r0, r6
 800181a:	2802      	cmp	r0, #2
 800181c:	d9f6      	bls.n	800180c <HAL_RCC_OscConfig+0x1a0>
 800181e:	e76c      	b.n	80016fa <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001820:	4b34      	ldr	r3, [pc, #208]	; (80018f4 <HAL_RCC_OscConfig+0x288>)
 8001822:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001824:	00d0      	lsls	r0, r2, #3
 8001826:	d427      	bmi.n	8001878 <HAL_RCC_OscConfig+0x20c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001828:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 800182a:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800182c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001830:	641a      	str	r2, [r3, #64]	; 0x40
 8001832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001834:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001838:	9301      	str	r3, [sp, #4]
 800183a:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800183c:	4d2e      	ldr	r5, [pc, #184]	; (80018f8 <HAL_RCC_OscConfig+0x28c>)
 800183e:	682b      	ldr	r3, [r5, #0]
 8001840:	05d9      	lsls	r1, r3, #23
 8001842:	d51b      	bpl.n	800187c <HAL_RCC_OscConfig+0x210>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001844:	68a3      	ldr	r3, [r4, #8]
 8001846:	4d2b      	ldr	r5, [pc, #172]	; (80018f4 <HAL_RCC_OscConfig+0x288>)
 8001848:	2b01      	cmp	r3, #1
 800184a:	d127      	bne.n	800189c <HAL_RCC_OscConfig+0x230>
 800184c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800184e:	f043 0301 	orr.w	r3, r3, #1
 8001852:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001854:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001858:	f7fe fe92 	bl	8000580 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800185c:	4f25      	ldr	r7, [pc, #148]	; (80018f4 <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 800185e:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001860:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001862:	079b      	lsls	r3, r3, #30
 8001864:	d53f      	bpl.n	80018e6 <HAL_RCC_OscConfig+0x27a>
    if(pwrclkchanged == SET)
 8001866:	2e00      	cmp	r6, #0
 8001868:	f43f af16 	beq.w	8001698 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 800186c:	4a21      	ldr	r2, [pc, #132]	; (80018f4 <HAL_RCC_OscConfig+0x288>)
 800186e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001870:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001874:	6413      	str	r3, [r2, #64]	; 0x40
 8001876:	e70f      	b.n	8001698 <HAL_RCC_OscConfig+0x2c>
  FlagStatus pwrclkchanged = RESET;
 8001878:	2600      	movs	r6, #0
 800187a:	e7df      	b.n	800183c <HAL_RCC_OscConfig+0x1d0>
      PWR->CR1 |= PWR_CR1_DBP;
 800187c:	682b      	ldr	r3, [r5, #0]
 800187e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001882:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001884:	f7fe fe7c 	bl	8000580 <HAL_GetTick>
 8001888:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800188a:	682b      	ldr	r3, [r5, #0]
 800188c:	05da      	lsls	r2, r3, #23
 800188e:	d4d9      	bmi.n	8001844 <HAL_RCC_OscConfig+0x1d8>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001890:	f7fe fe76 	bl	8000580 <HAL_GetTick>
 8001894:	1bc0      	subs	r0, r0, r7
 8001896:	2864      	cmp	r0, #100	; 0x64
 8001898:	d9f7      	bls.n	800188a <HAL_RCC_OscConfig+0x21e>
 800189a:	e72e      	b.n	80016fa <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800189c:	b9ab      	cbnz	r3, 80018ca <HAL_RCC_OscConfig+0x25e>
 800189e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018a0:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018a4:	f023 0301 	bic.w	r3, r3, #1
 80018a8:	672b      	str	r3, [r5, #112]	; 0x70
 80018aa:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80018ac:	f023 0304 	bic.w	r3, r3, #4
 80018b0:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80018b2:	f7fe fe65 	bl	8000580 <HAL_GetTick>
 80018b6:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018b8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80018ba:	0798      	lsls	r0, r3, #30
 80018bc:	d5d3      	bpl.n	8001866 <HAL_RCC_OscConfig+0x1fa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018be:	f7fe fe5f 	bl	8000580 <HAL_GetTick>
 80018c2:	1bc0      	subs	r0, r0, r7
 80018c4:	4540      	cmp	r0, r8
 80018c6:	d9f7      	bls.n	80018b8 <HAL_RCC_OscConfig+0x24c>
 80018c8:	e717      	b.n	80016fa <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018ca:	2b05      	cmp	r3, #5
 80018cc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80018ce:	d103      	bne.n	80018d8 <HAL_RCC_OscConfig+0x26c>
 80018d0:	f043 0304 	orr.w	r3, r3, #4
 80018d4:	672b      	str	r3, [r5, #112]	; 0x70
 80018d6:	e7b9      	b.n	800184c <HAL_RCC_OscConfig+0x1e0>
 80018d8:	f023 0301 	bic.w	r3, r3, #1
 80018dc:	672b      	str	r3, [r5, #112]	; 0x70
 80018de:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80018e0:	f023 0304 	bic.w	r3, r3, #4
 80018e4:	e7b5      	b.n	8001852 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018e6:	f7fe fe4b 	bl	8000580 <HAL_GetTick>
 80018ea:	eba0 0008 	sub.w	r0, r0, r8
 80018ee:	42a8      	cmp	r0, r5
 80018f0:	d9b6      	bls.n	8001860 <HAL_RCC_OscConfig+0x1f4>
 80018f2:	e702      	b.n	80016fa <HAL_RCC_OscConfig+0x8e>
 80018f4:	40023800 	.word	0x40023800
 80018f8:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018fc:	4d24      	ldr	r5, [pc, #144]	; (8001990 <HAL_RCC_OscConfig+0x324>)
 80018fe:	68ab      	ldr	r3, [r5, #8]
 8001900:	f003 030c 	and.w	r3, r3, #12
 8001904:	2b08      	cmp	r3, #8
 8001906:	f43f aeb5 	beq.w	8001674 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 800190a:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800190c:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800190e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001912:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001914:	d12f      	bne.n	8001976 <HAL_RCC_OscConfig+0x30a>
        tickstart = HAL_GetTick();
 8001916:	f7fe fe33 	bl	8000580 <HAL_GetTick>
 800191a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800191c:	682b      	ldr	r3, [r5, #0]
 800191e:	0199      	lsls	r1, r3, #6
 8001920:	d423      	bmi.n	800196a <HAL_RCC_OscConfig+0x2fe>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001922:	6a22      	ldr	r2, [r4, #32]
 8001924:	69e3      	ldr	r3, [r4, #28]
 8001926:	4313      	orrs	r3, r2
 8001928:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800192a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800192e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001930:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001934:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001936:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800193a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800193c:	4c14      	ldr	r4, [pc, #80]	; (8001990 <HAL_RCC_OscConfig+0x324>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800193e:	0852      	lsrs	r2, r2, #1
 8001940:	3a01      	subs	r2, #1
 8001942:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001946:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001948:	682b      	ldr	r3, [r5, #0]
 800194a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800194e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001950:	f7fe fe16 	bl	8000580 <HAL_GetTick>
 8001954:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001956:	6823      	ldr	r3, [r4, #0]
 8001958:	019a      	lsls	r2, r3, #6
 800195a:	f53f aea1 	bmi.w	80016a0 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800195e:	f7fe fe0f 	bl	8000580 <HAL_GetTick>
 8001962:	1b40      	subs	r0, r0, r5
 8001964:	2802      	cmp	r0, #2
 8001966:	d9f6      	bls.n	8001956 <HAL_RCC_OscConfig+0x2ea>
 8001968:	e6c7      	b.n	80016fa <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800196a:	f7fe fe09 	bl	8000580 <HAL_GetTick>
 800196e:	1b80      	subs	r0, r0, r6
 8001970:	2802      	cmp	r0, #2
 8001972:	d9d3      	bls.n	800191c <HAL_RCC_OscConfig+0x2b0>
 8001974:	e6c1      	b.n	80016fa <HAL_RCC_OscConfig+0x8e>
        tickstart = HAL_GetTick();
 8001976:	f7fe fe03 	bl	8000580 <HAL_GetTick>
 800197a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800197c:	682b      	ldr	r3, [r5, #0]
 800197e:	019b      	lsls	r3, r3, #6
 8001980:	f57f ae8e 	bpl.w	80016a0 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001984:	f7fe fdfc 	bl	8000580 <HAL_GetTick>
 8001988:	1b00      	subs	r0, r0, r4
 800198a:	2802      	cmp	r0, #2
 800198c:	d9f6      	bls.n	800197c <HAL_RCC_OscConfig+0x310>
 800198e:	e6b4      	b.n	80016fa <HAL_RCC_OscConfig+0x8e>
 8001990:	40023800 	.word	0x40023800

08001994 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001994:	4913      	ldr	r1, [pc, #76]	; (80019e4 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8001996:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001998:	688b      	ldr	r3, [r1, #8]
 800199a:	f003 030c 	and.w	r3, r3, #12
 800199e:	2b04      	cmp	r3, #4
 80019a0:	d003      	beq.n	80019aa <HAL_RCC_GetSysClockFreq+0x16>
 80019a2:	2b08      	cmp	r3, #8
 80019a4:	d003      	beq.n	80019ae <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019a6:	4810      	ldr	r0, [pc, #64]	; (80019e8 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80019a8:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 80019aa:	4810      	ldr	r0, [pc, #64]	; (80019ec <HAL_RCC_GetSysClockFreq+0x58>)
 80019ac:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019ae:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80019b0:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019b2:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019b4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80019b8:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019bc:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80019c0:	bf1a      	itte	ne
 80019c2:	480a      	ldrne	r0, [pc, #40]	; (80019ec <HAL_RCC_GetSysClockFreq+0x58>)
 80019c4:	2300      	movne	r3, #0
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019c6:	4808      	ldreq	r0, [pc, #32]	; (80019e8 <HAL_RCC_GetSysClockFreq+0x54>)
 80019c8:	fba1 0100 	umull	r0, r1, r1, r0
 80019cc:	f7fe fc38 	bl	8000240 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80019d0:	4b04      	ldr	r3, [pc, #16]	; (80019e4 <HAL_RCC_GetSysClockFreq+0x50>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80019d8:	3301      	adds	r3, #1
 80019da:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 80019dc:	fbb0 f0f3 	udiv	r0, r0, r3
 80019e0:	bd08      	pop	{r3, pc}
 80019e2:	bf00      	nop
 80019e4:	40023800 	.word	0x40023800
 80019e8:	00f42400 	.word	0x00f42400
 80019ec:	016e3600 	.word	0x016e3600

080019f0 <HAL_RCC_ClockConfig>:
{
 80019f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019f4:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80019f6:	4604      	mov	r4, r0
 80019f8:	b910      	cbnz	r0, 8001a00 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80019fa:	2001      	movs	r0, #1
 80019fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a00:	4a46      	ldr	r2, [pc, #280]	; (8001b1c <HAL_RCC_ClockConfig+0x12c>)
 8001a02:	6813      	ldr	r3, [r2, #0]
 8001a04:	f003 030f 	and.w	r3, r3, #15
 8001a08:	428b      	cmp	r3, r1
 8001a0a:	d328      	bcc.n	8001a5e <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a0c:	6821      	ldr	r1, [r4, #0]
 8001a0e:	078f      	lsls	r7, r1, #30
 8001a10:	d430      	bmi.n	8001a74 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a12:	07c8      	lsls	r0, r1, #31
 8001a14:	d443      	bmi.n	8001a9e <HAL_RCC_ClockConfig+0xae>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a16:	4a41      	ldr	r2, [pc, #260]	; (8001b1c <HAL_RCC_ClockConfig+0x12c>)
 8001a18:	6813      	ldr	r3, [r2, #0]
 8001a1a:	f003 030f 	and.w	r3, r3, #15
 8001a1e:	429d      	cmp	r5, r3
 8001a20:	d367      	bcc.n	8001af2 <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a22:	6822      	ldr	r2, [r4, #0]
 8001a24:	0751      	lsls	r1, r2, #29
 8001a26:	d470      	bmi.n	8001b0a <HAL_RCC_ClockConfig+0x11a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a28:	0713      	lsls	r3, r2, #28
 8001a2a:	d507      	bpl.n	8001a3c <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a2c:	4a3c      	ldr	r2, [pc, #240]	; (8001b20 <HAL_RCC_ClockConfig+0x130>)
 8001a2e:	6921      	ldr	r1, [r4, #16]
 8001a30:	6893      	ldr	r3, [r2, #8]
 8001a32:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001a36:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001a3a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a3c:	f7ff ffaa 	bl	8001994 <HAL_RCC_GetSysClockFreq>
 8001a40:	4b37      	ldr	r3, [pc, #220]	; (8001b20 <HAL_RCC_ClockConfig+0x130>)
 8001a42:	4a38      	ldr	r2, [pc, #224]	; (8001b24 <HAL_RCC_ClockConfig+0x134>)
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001a4a:	5cd3      	ldrb	r3, [r2, r3]
 8001a4c:	40d8      	lsrs	r0, r3
 8001a4e:	4b36      	ldr	r3, [pc, #216]	; (8001b28 <HAL_RCC_ClockConfig+0x138>)
 8001a50:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001a52:	2000      	movs	r0, #0
 8001a54:	f004 ff2c 	bl	80068b0 <HAL_InitTick>
  return HAL_OK;
 8001a58:	2000      	movs	r0, #0
 8001a5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a5e:	6813      	ldr	r3, [r2, #0]
 8001a60:	f023 030f 	bic.w	r3, r3, #15
 8001a64:	430b      	orrs	r3, r1
 8001a66:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a68:	6813      	ldr	r3, [r2, #0]
 8001a6a:	f003 030f 	and.w	r3, r3, #15
 8001a6e:	4299      	cmp	r1, r3
 8001a70:	d1c3      	bne.n	80019fa <HAL_RCC_ClockConfig+0xa>
 8001a72:	e7cb      	b.n	8001a0c <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a74:	f011 0f04 	tst.w	r1, #4
 8001a78:	4b29      	ldr	r3, [pc, #164]	; (8001b20 <HAL_RCC_ClockConfig+0x130>)
 8001a7a:	d003      	beq.n	8001a84 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a7c:	689a      	ldr	r2, [r3, #8]
 8001a7e:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8001a82:	609a      	str	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a84:	070e      	lsls	r6, r1, #28
 8001a86:	d503      	bpl.n	8001a90 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a88:	689a      	ldr	r2, [r3, #8]
 8001a8a:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8001a8e:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a90:	689a      	ldr	r2, [r3, #8]
 8001a92:	68a0      	ldr	r0, [r4, #8]
 8001a94:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001a98:	4302      	orrs	r2, r0
 8001a9a:	609a      	str	r2, [r3, #8]
 8001a9c:	e7b9      	b.n	8001a12 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a9e:	6861      	ldr	r1, [r4, #4]
 8001aa0:	4b1f      	ldr	r3, [pc, #124]	; (8001b20 <HAL_RCC_ClockConfig+0x130>)
 8001aa2:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aa4:	681a      	ldr	r2, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aa6:	d11c      	bne.n	8001ae2 <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aa8:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aac:	d0a5      	beq.n	80019fa <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001aae:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ab0:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ab4:	4e1a      	ldr	r6, [pc, #104]	; (8001b20 <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ab6:	f022 0203 	bic.w	r2, r2, #3
 8001aba:	430a      	orrs	r2, r1
 8001abc:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001abe:	f7fe fd5f 	bl	8000580 <HAL_GetTick>
 8001ac2:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ac4:	68b3      	ldr	r3, [r6, #8]
 8001ac6:	6862      	ldr	r2, [r4, #4]
 8001ac8:	f003 030c 	and.w	r3, r3, #12
 8001acc:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001ad0:	d0a1      	beq.n	8001a16 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ad2:	f7fe fd55 	bl	8000580 <HAL_GetTick>
 8001ad6:	1bc0      	subs	r0, r0, r7
 8001ad8:	4540      	cmp	r0, r8
 8001ada:	d9f3      	bls.n	8001ac4 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8001adc:	2003      	movs	r0, #3
}
 8001ade:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ae2:	2902      	cmp	r1, #2
 8001ae4:	d102      	bne.n	8001aec <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ae6:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001aea:	e7df      	b.n	8001aac <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aec:	f012 0f02 	tst.w	r2, #2
 8001af0:	e7dc      	b.n	8001aac <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001af2:	6813      	ldr	r3, [r2, #0]
 8001af4:	f023 030f 	bic.w	r3, r3, #15
 8001af8:	432b      	orrs	r3, r5
 8001afa:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001afc:	6813      	ldr	r3, [r2, #0]
 8001afe:	f003 030f 	and.w	r3, r3, #15
 8001b02:	429d      	cmp	r5, r3
 8001b04:	f47f af79 	bne.w	80019fa <HAL_RCC_ClockConfig+0xa>
 8001b08:	e78b      	b.n	8001a22 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b0a:	4905      	ldr	r1, [pc, #20]	; (8001b20 <HAL_RCC_ClockConfig+0x130>)
 8001b0c:	68e0      	ldr	r0, [r4, #12]
 8001b0e:	688b      	ldr	r3, [r1, #8]
 8001b10:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001b14:	4303      	orrs	r3, r0
 8001b16:	608b      	str	r3, [r1, #8]
 8001b18:	e786      	b.n	8001a28 <HAL_RCC_ClockConfig+0x38>
 8001b1a:	bf00      	nop
 8001b1c:	40023c00 	.word	0x40023c00
 8001b20:	40023800 	.word	0x40023800
 8001b24:	080075a8 	.word	0x080075a8
 8001b28:	200000b0 	.word	0x200000b0

08001b2c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001b2c:	4b01      	ldr	r3, [pc, #4]	; (8001b34 <HAL_RCC_GetHCLKFreq+0x8>)
 8001b2e:	6818      	ldr	r0, [r3, #0]
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	200000b0 	.word	0x200000b0

08001b38 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b38:	4b04      	ldr	r3, [pc, #16]	; (8001b4c <HAL_RCC_GetPCLK1Freq+0x14>)
 8001b3a:	4a05      	ldr	r2, [pc, #20]	; (8001b50 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001b42:	5cd3      	ldrb	r3, [r2, r3]
 8001b44:	4a03      	ldr	r2, [pc, #12]	; (8001b54 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001b46:	6810      	ldr	r0, [r2, #0]
}
 8001b48:	40d8      	lsrs	r0, r3
 8001b4a:	4770      	bx	lr
 8001b4c:	40023800 	.word	0x40023800
 8001b50:	080075b8 	.word	0x080075b8
 8001b54:	200000b0 	.word	0x200000b0

08001b58 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b58:	4b04      	ldr	r3, [pc, #16]	; (8001b6c <HAL_RCC_GetPCLK2Freq+0x14>)
 8001b5a:	4a05      	ldr	r2, [pc, #20]	; (8001b70 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001b62:	5cd3      	ldrb	r3, [r2, r3]
 8001b64:	4a03      	ldr	r2, [pc, #12]	; (8001b74 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001b66:	6810      	ldr	r0, [r2, #0]
}
 8001b68:	40d8      	lsrs	r0, r3
 8001b6a:	4770      	bx	lr
 8001b6c:	40023800 	.word	0x40023800
 8001b70:	080075b8 	.word	0x080075b8
 8001b74:	200000b0 	.word	0x200000b0

08001b78 <HAL_RCC_GetOscConfig>:
  * @retval None
  */
void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  /* Set all possible values for the Oscillator type parameter ---------------*/
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI;
 8001b78:	230f      	movs	r3, #15
 8001b7a:	6003      	str	r3, [r0, #0]

  /* Get the HSE configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 8001b7c:	4b29      	ldr	r3, [pc, #164]	; (8001c24 <HAL_RCC_GetOscConfig+0xac>)
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	0352      	lsls	r2, r2, #13
 8001b82:	d542      	bpl.n	8001c0a <HAL_RCC_GetOscConfig+0x92>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
 8001b84:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
  }
  else
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
 8001b88:	6042      	str	r2, [r0, #4]
  }

  /* Get the HSI configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSION) == RCC_CR_HSION)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f013 0301 	ands.w	r3, r3, #1
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_ON;
 8001b90:	bf18      	it	ne
 8001b92:	2301      	movne	r3, #1
  }
  else
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
 8001b94:	60c3      	str	r3, [r0, #12]
  }

  RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR &RCC_CR_HSITRIM) >> RCC_CR_HSITRIM_Pos);
 8001b96:	4b23      	ldr	r3, [pc, #140]	; (8001c24 <HAL_RCC_GetOscConfig+0xac>)
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8001b9e:	6102      	str	r2, [r0, #16]

  /* Get the LSE configuration -----------------------------------------------*/
  if((RCC->BDCR &RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
 8001ba0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001ba2:	0751      	lsls	r1, r2, #29
 8001ba4:	d538      	bpl.n	8001c18 <HAL_RCC_GetOscConfig+0xa0>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
 8001ba6:	2205      	movs	r2, #5
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_ON;
  }
  else
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
 8001ba8:	6082      	str	r2, [r0, #8]
  }

  /* Get the LSI configuration -----------------------------------------------*/
  if((RCC->CSR &RCC_CSR_LSION) == RCC_CSR_LSION)
 8001baa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bac:	f013 0301 	ands.w	r3, r3, #1
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_ON;
 8001bb0:	bf18      	it	ne
 8001bb2:	2301      	movne	r3, #1
  }
  else
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
 8001bb4:	6143      	str	r3, [r0, #20]
  }

  /* Get the PLL configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_PLLON) == RCC_CR_PLLON)
 8001bb6:	4b1b      	ldr	r3, [pc, #108]	; (8001c24 <HAL_RCC_GetOscConfig+0xac>)
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	01d2      	lsls	r2, r2, #7
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
 8001bbc:	bf4c      	ite	mi
 8001bbe:	2202      	movmi	r2, #2
  }
  else
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
 8001bc0:	2201      	movpl	r2, #1
 8001bc2:	6182      	str	r2, [r0, #24]
  }
  RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001bc4:	685a      	ldr	r2, [r3, #4]
 8001bc6:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8001bca:	61c2      	str	r2, [r0, #28]
  RCC_OscInitStruct->PLL.PLLM = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);
 8001bcc:	685a      	ldr	r2, [r3, #4]
 8001bce:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001bd2:	6202      	str	r2, [r0, #32]
  RCC_OscInitStruct->PLL.PLLN = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001bd4:	685a      	ldr	r2, [r3, #4]
 8001bd6:	f3c2 1288 	ubfx	r2, r2, #6, #9
 8001bda:	6242      	str	r2, [r0, #36]	; 0x24
  RCC_OscInitStruct->PLL.PLLP = (uint32_t)((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) + RCC_PLLCFGR_PLLP_0) << 1) >> RCC_PLLCFGR_PLLP_Pos);
 8001bdc:	685a      	ldr	r2, [r3, #4]
 8001bde:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8001be2:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8001be6:	0bd2      	lsrs	r2, r2, #15
 8001be8:	6282      	str	r2, [r0, #40]	; 0x28
  RCC_OscInitStruct->PLL.PLLQ = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos);
 8001bea:	685a      	ldr	r2, [r3, #4]
 8001bec:	f3c2 6203 	ubfx	r2, r2, #24, #4
 8001bf0:	62c2      	str	r2, [r0, #44]	; 0x2c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf2:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
#if defined (RCC_PLLCFGR_PLLR)
  RCC_OscInitStruct->PLL.PLLR = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> POSITION_VAL(RCC_PLLCFGR_PLLR));
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	fa92 f2a2 	rbit	r2, r2
 8001bfc:	fab2 f282 	clz	r2, r2
 8001c00:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8001c04:	40d3      	lsrs	r3, r2
 8001c06:	6303      	str	r3, [r0, #48]	; 0x30
 8001c08:	4770      	bx	lr
  else if((RCC->CR &RCC_CR_HSEON) == RCC_CR_HSEON)
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	f412 3280 	ands.w	r2, r2, #65536	; 0x10000
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
 8001c10:	bf18      	it	ne
 8001c12:	f44f 3280 	movne.w	r2, #65536	; 0x10000
 8001c16:	e7b7      	b.n	8001b88 <HAL_RCC_GetOscConfig+0x10>
  else if((RCC->BDCR &RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
 8001c18:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001c1a:	f012 0201 	ands.w	r2, r2, #1
    RCC_OscInitStruct->LSEState = RCC_LSE_ON;
 8001c1e:	bf18      	it	ne
 8001c20:	2201      	movne	r2, #1
 8001c22:	e7c1      	b.n	8001ba8 <HAL_RCC_GetOscConfig+0x30>
 8001c24:	40023800 	.word	0x40023800

08001c28 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c28:	230f      	movs	r3, #15
 8001c2a:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c2c:	4b0b      	ldr	r3, [pc, #44]	; (8001c5c <HAL_RCC_GetClockConfig+0x34>)
 8001c2e:	689a      	ldr	r2, [r3, #8]
 8001c30:	f002 0203 	and.w	r2, r2, #3
 8001c34:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c36:	689a      	ldr	r2, [r3, #8]
 8001c38:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8001c3c:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c3e:	689a      	ldr	r2, [r3, #8]
 8001c40:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8001c44:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	08db      	lsrs	r3, r3, #3
 8001c4a:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001c4e:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c50:	4b03      	ldr	r3, [pc, #12]	; (8001c60 <HAL_RCC_GetClockConfig+0x38>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 030f 	and.w	r3, r3, #15
 8001c58:	600b      	str	r3, [r1, #0]
 8001c5a:	4770      	bx	lr
 8001c5c:	40023800 	.word	0x40023800
 8001c60:	40023c00 	.word	0x40023c00

08001c64 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001c68:	6802      	ldr	r2, [r0, #0]
{
 8001c6a:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001c6c:	f012 0601 	ands.w	r6, r2, #1
 8001c70:	d00b      	beq.n	8001c8a <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001c72:	4bb8      	ldr	r3, [pc, #736]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c74:	6899      	ldr	r1, [r3, #8]
 8001c76:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8001c7a:	6099      	str	r1, [r3, #8]
 8001c7c:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8001c7e:	6899      	ldr	r1, [r3, #8]
 8001c80:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001c82:	fab6 f686 	clz	r6, r6
 8001c86:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001c88:	6099      	str	r1, [r3, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001c8a:	f412 2500 	ands.w	r5, r2, #524288	; 0x80000
 8001c8e:	d012      	beq.n	8001cb6 <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001c90:	49b0      	ldr	r1, [pc, #704]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c92:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8001c94:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001c98:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001c9c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
    {
      plli2sused = 1;
 8001ca0:	bf08      	it	eq
 8001ca2:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001ca4:	ea43 0305 	orr.w	r3, r3, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001ca8:	bf16      	itet	ne
 8001caa:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 8001cae:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001cb0:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001cb2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001cb6:	02d7      	lsls	r7, r2, #11
 8001cb8:	d510      	bpl.n	8001cdc <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001cba:	48a6      	ldr	r0, [pc, #664]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001cbc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001cbe:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001cc2:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001cc6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001cca:	ea43 0301 	orr.w	r3, r3, r1
 8001cce:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001cd2:	f000 8189 	beq.w	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x384>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 8001cd6:	2900      	cmp	r1, #0
 8001cd8:	bf08      	it	eq
 8001cda:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 8001cdc:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 8001ce0:	bf18      	it	ne
 8001ce2:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001ce4:	0690      	lsls	r0, r2, #26
 8001ce6:	d531      	bpl.n	8001d4c <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ce8:	4b9a      	ldr	r3, [pc, #616]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001cea:	4f9b      	ldr	r7, [pc, #620]	; (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8001cec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cee:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001cf2:	641a      	str	r2, [r3, #64]	; 0x40
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cfa:	9301      	str	r3, [sp, #4]
 8001cfc:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d04:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d06:	f7fe fc3b 	bl	8000580 <HAL_GetTick>
 8001d0a:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	05d9      	lsls	r1, r3, #23
 8001d10:	f140 816c 	bpl.w	8001fec <HAL_RCCEx_PeriphCLKConfig+0x388>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001d14:	4f8f      	ldr	r7, [pc, #572]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d16:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001d18:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001d1c:	f040 8171 	bne.w	8002002 <HAL_RCCEx_PeriphCLKConfig+0x39e>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d20:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001d22:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001d26:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8001d2a:	4a8a      	ldr	r2, [pc, #552]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d2c:	f040 818f 	bne.w	800204e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8001d30:	6891      	ldr	r1, [r2, #8]
 8001d32:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8001d36:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001d3a:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8001d3e:	4301      	orrs	r1, r0
 8001d40:	6091      	str	r1, [r2, #8]
 8001d42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d46:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8001d48:	430b      	orrs	r3, r1
 8001d4a:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001d4c:	6823      	ldr	r3, [r4, #0]
 8001d4e:	06df      	lsls	r7, r3, #27
 8001d50:	d50c      	bpl.n	8001d6c <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001d52:	4a80      	ldr	r2, [pc, #512]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d54:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8001d58:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8001d5c:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8001d60:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8001d64:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001d66:	4301      	orrs	r1, r0
 8001d68:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001d6c:	0458      	lsls	r0, r3, #17
 8001d6e:	d508      	bpl.n	8001d82 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001d70:	4978      	ldr	r1, [pc, #480]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d72:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8001d74:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001d78:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001d7c:	4302      	orrs	r2, r0
 8001d7e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001d82:	0419      	lsls	r1, r3, #16
 8001d84:	d508      	bpl.n	8001d98 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001d86:	4973      	ldr	r1, [pc, #460]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d88:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8001d8a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001d8e:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8001d92:	4302      	orrs	r2, r0
 8001d94:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001d98:	03da      	lsls	r2, r3, #15
 8001d9a:	d508      	bpl.n	8001dae <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001d9c:	496d      	ldr	r1, [pc, #436]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d9e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001da0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001da4:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001da8:	4302      	orrs	r2, r0
 8001daa:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001dae:	039f      	lsls	r7, r3, #14
 8001db0:	d508      	bpl.n	8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001db2:	4968      	ldr	r1, [pc, #416]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001db4:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8001db6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001dba:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8001dbe:	4302      	orrs	r2, r0
 8001dc0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001dc4:	0658      	lsls	r0, r3, #25
 8001dc6:	d508      	bpl.n	8001dda <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001dc8:	4962      	ldr	r1, [pc, #392]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001dca:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8001dcc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001dd0:	f022 0203 	bic.w	r2, r2, #3
 8001dd4:	4302      	orrs	r2, r0
 8001dd6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001dda:	0619      	lsls	r1, r3, #24
 8001ddc:	d508      	bpl.n	8001df0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001dde:	495d      	ldr	r1, [pc, #372]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001de0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8001de2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001de6:	f022 020c 	bic.w	r2, r2, #12
 8001dea:	4302      	orrs	r2, r0
 8001dec:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001df0:	05da      	lsls	r2, r3, #23
 8001df2:	d508      	bpl.n	8001e06 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001df4:	4957      	ldr	r1, [pc, #348]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001df6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8001df8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001dfc:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8001e00:	4302      	orrs	r2, r0
 8001e02:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001e06:	059f      	lsls	r7, r3, #22
 8001e08:	d508      	bpl.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001e0a:	4952      	ldr	r1, [pc, #328]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e0c:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8001e0e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001e12:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8001e16:	4302      	orrs	r2, r0
 8001e18:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001e1c:	0558      	lsls	r0, r3, #21
 8001e1e:	d508      	bpl.n	8001e32 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001e20:	494c      	ldr	r1, [pc, #304]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e22:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001e24:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001e28:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001e2c:	4302      	orrs	r2, r0
 8001e2e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001e32:	0519      	lsls	r1, r3, #20
 8001e34:	d508      	bpl.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001e36:	4947      	ldr	r1, [pc, #284]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001e3a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001e3e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001e42:	4302      	orrs	r2, r0
 8001e44:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001e48:	04da      	lsls	r2, r3, #19
 8001e4a:	d508      	bpl.n	8001e5e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001e4c:	4941      	ldr	r1, [pc, #260]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e4e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8001e50:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001e54:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001e58:	4302      	orrs	r2, r0
 8001e5a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001e5e:	049f      	lsls	r7, r3, #18
 8001e60:	d508      	bpl.n	8001e74 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001e62:	493c      	ldr	r1, [pc, #240]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e64:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8001e66:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001e6a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8001e6e:	4302      	orrs	r2, r0
 8001e70:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001e74:	0258      	lsls	r0, r3, #9
 8001e76:	d508      	bpl.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001e78:	4936      	ldr	r1, [pc, #216]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e7a:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8001e7c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001e80:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8001e84:	4302      	orrs	r2, r0
 8001e86:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001e8a:	0299      	lsls	r1, r3, #10
 8001e8c:	d50c      	bpl.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001e8e:	4831      	ldr	r0, [pc, #196]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e90:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8001e92:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8001e96:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001e9a:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 8001e9e:	bf08      	it	eq
 8001ea0:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
    pllsaiused = 1;
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001ea8:	035a      	lsls	r2, r3, #13
 8001eaa:	d508      	bpl.n	8001ebe <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001eac:	4929      	ldr	r1, [pc, #164]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001eae:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8001eb0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001eb4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001eb8:	4302      	orrs	r2, r0
 8001eba:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001ebe:	021f      	lsls	r7, r3, #8
 8001ec0:	d509      	bpl.n	8001ed6 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001ec2:	4924      	ldr	r1, [pc, #144]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ec4:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8001ec8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001ecc:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001ed0:	4302      	orrs	r2, r0
 8001ed2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8001ed6:	0158      	lsls	r0, r3, #5
 8001ed8:	d509      	bpl.n	8001eee <HAL_RCCEx_PeriphCLKConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8001eda:	491e      	ldr	r1, [pc, #120]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001edc:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8001ee0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001ee4:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8001ee8:	4302      	orrs	r2, r0
 8001eea:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001eee:	0119      	lsls	r1, r3, #4
 8001ef0:	d509      	bpl.n	8001f06 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001ef2:	4918      	ldr	r1, [pc, #96]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ef4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8001ef8:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8001efc:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8001f00:	4302      	orrs	r2, r0
 8001f02:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8001f06:	00da      	lsls	r2, r3, #3
 8001f08:	d509      	bpl.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8001f0a:	4912      	ldr	r1, [pc, #72]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f0c:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8001f10:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8001f14:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8001f18:	4302      	orrs	r2, r0
 8001f1a:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001f1e:	2e01      	cmp	r6, #1
 8001f20:	f000 8099 	beq.w	8002056 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8001f24:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f28:	f000 8095 	beq.w	8002056 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8001f2c:	2d01      	cmp	r5, #1
 8001f2e:	d159      	bne.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x380>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001f30:	4d08      	ldr	r5, [pc, #32]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f32:	682b      	ldr	r3, [r5, #0]
 8001f34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f38:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f3a:	f7fe fb21 	bl	8000580 <HAL_GetTick>
 8001f3e:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001f40:	682b      	ldr	r3, [r5, #0]
 8001f42:	009f      	lsls	r7, r3, #2
 8001f44:	f100 810b 	bmi.w	800215e <HAL_RCCEx_PeriphCLKConfig+0x4fa>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001f48:	6821      	ldr	r1, [r4, #0]
 8001f4a:	030d      	lsls	r5, r1, #12
 8001f4c:	d506      	bpl.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 8001f4e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001f50:	b143      	cbz	r3, 8001f64 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8001f52:	e003      	b.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 8001f54:	40023800 	.word	0x40023800
 8001f58:	40007000 	.word	0x40007000
 8001f5c:	02c8      	lsls	r0, r1, #11
 8001f5e:	d51d      	bpl.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x338>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001f60:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001f62:	b9db      	cbnz	r3, 8001f9c <HAL_RCCEx_PeriphCLKConfig+0x338>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001f64:	4a85      	ldr	r2, [pc, #532]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x518>)
 8001f66:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001f6a:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8001f6e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f72:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001f76:	4303      	orrs	r3, r0
 8001f78:	6960      	ldr	r0, [r4, #20]
 8001f7a:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001f7e:	69a0      	ldr	r0, [r4, #24]
 8001f80:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001f84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001f88:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001f8c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001f8e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8001f92:	3801      	subs	r0, #1
 8001f94:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001f98:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8001f9c:	028a      	lsls	r2, r1, #10
 8001f9e:	d515      	bpl.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x368>
 8001fa0:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8001fa2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001fa6:	d111      	bne.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001fa8:	4a74      	ldr	r2, [pc, #464]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x518>)
 8001faa:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001fae:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8001fb2:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001fb6:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8001fba:	430b      	orrs	r3, r1
 8001fbc:	6961      	ldr	r1, [r4, #20]
 8001fbe:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8001fc2:	6a21      	ldr	r1, [r4, #32]
 8001fc4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001fc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001fcc:	4c6b      	ldr	r4, [pc, #428]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x518>)
 8001fce:	6823      	ldr	r3, [r4, #0]
 8001fd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fd4:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fd6:	f7fe fad3 	bl	8000580 <HAL_GetTick>
 8001fda:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001fdc:	6823      	ldr	r3, [r4, #0]
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	f140 80c4 	bpl.w	800216c <HAL_RCCEx_PeriphCLKConfig+0x508>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001fe4:	2000      	movs	r0, #0
 8001fe6:	e009      	b.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x398>
      plli2sused = 1;
 8001fe8:	2601      	movs	r6, #1
 8001fea:	e677      	b.n	8001cdc <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fec:	f7fe fac8 	bl	8000580 <HAL_GetTick>
 8001ff0:	eba0 0008 	sub.w	r0, r0, r8
 8001ff4:	2864      	cmp	r0, #100	; 0x64
 8001ff6:	f67f ae89 	bls.w	8001d0c <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 8001ffa:	2003      	movs	r0, #3
}
 8001ffc:	b003      	add	sp, #12
 8001ffe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002002:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002004:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002008:	4293      	cmp	r3, r2
 800200a:	f43f ae89 	beq.w	8001d20 <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800200e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8002010:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002012:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8002016:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800201a:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800201c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800201e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002022:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8002024:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002026:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002028:	07da      	lsls	r2, r3, #31
 800202a:	f57f ae79 	bpl.w	8001d20 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 800202e:	f7fe faa7 	bl	8000580 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002032:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002036:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002038:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800203a:	079b      	lsls	r3, r3, #30
 800203c:	f53f ae70 	bmi.w	8001d20 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002040:	f7fe fa9e 	bl	8000580 <HAL_GetTick>
 8002044:	eba0 0008 	sub.w	r0, r0, r8
 8002048:	4548      	cmp	r0, r9
 800204a:	d9f5      	bls.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
 800204c:	e7d5      	b.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x396>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800204e:	6891      	ldr	r1, [r2, #8]
 8002050:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8002054:	e674      	b.n	8001d40 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
 8002056:	4e49      	ldr	r6, [pc, #292]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x518>)
 8002058:	6833      	ldr	r3, [r6, #0]
 800205a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800205e:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8002060:	f7fe fa8e 	bl	8000580 <HAL_GetTick>
 8002064:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002066:	6833      	ldr	r3, [r6, #0]
 8002068:	011b      	lsls	r3, r3, #4
 800206a:	d472      	bmi.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800206c:	6822      	ldr	r2, [r4, #0]
 800206e:	07d7      	lsls	r7, r2, #31
 8002070:	d512      	bpl.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8002072:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002074:	b983      	cbnz	r3, 8002098 <HAL_RCCEx_PeriphCLKConfig+0x434>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002076:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800207a:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800207e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002082:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8002086:	430b      	orrs	r3, r1
 8002088:	6861      	ldr	r1, [r4, #4]
 800208a:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800208e:	68a1      	ldr	r1, [r4, #8]
 8002090:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8002094:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002098:	0316      	lsls	r6, r2, #12
 800209a:	d503      	bpl.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x440>
 800209c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800209e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80020a2:	d005      	beq.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x44c>
 80020a4:	02d0      	lsls	r0, r2, #11
 80020a6:	d51e      	bpl.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x482>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80020a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80020aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020ae:	d11a      	bne.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x482>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80020b0:	4932      	ldr	r1, [pc, #200]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x518>)
 80020b2:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80020b6:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80020ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020be:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80020c2:	4303      	orrs	r3, r0
 80020c4:	6860      	ldr	r0, [r4, #4]
 80020c6:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80020ca:	68e0      	ldr	r0, [r4, #12]
 80020cc:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80020d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80020d4:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 80020d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80020da:	f020 001f 	bic.w	r0, r0, #31
 80020de:	3b01      	subs	r3, #1
 80020e0:	4303      	orrs	r3, r0
 80020e2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80020e6:	01d1      	lsls	r1, r2, #7
 80020e8:	d511      	bpl.n	800210e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80020ea:	4924      	ldr	r1, [pc, #144]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x518>)
 80020ec:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80020f0:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80020f4:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80020f8:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80020fc:	4303      	orrs	r3, r0
 80020fe:	6860      	ldr	r0, [r4, #4]
 8002100:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002104:	6920      	ldr	r0, [r4, #16]
 8002106:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800210a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800210e:	0192      	lsls	r2, r2, #6
 8002110:	d50d      	bpl.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002112:	6923      	ldr	r3, [r4, #16]
 8002114:	6862      	ldr	r2, [r4, #4]
 8002116:	041b      	lsls	r3, r3, #16
 8002118:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800211c:	68e2      	ldr	r2, [r4, #12]
 800211e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002122:	68a2      	ldr	r2, [r4, #8]
 8002124:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8002128:	4a14      	ldr	r2, [pc, #80]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x518>)
 800212a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 800212e:	4e13      	ldr	r6, [pc, #76]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x518>)
 8002130:	6833      	ldr	r3, [r6, #0]
 8002132:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002136:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8002138:	f7fe fa22 	bl	8000580 <HAL_GetTick>
 800213c:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800213e:	6833      	ldr	r3, [r6, #0]
 8002140:	011b      	lsls	r3, r3, #4
 8002142:	f53f aef3 	bmi.w	8001f2c <HAL_RCCEx_PeriphCLKConfig+0x2c8>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002146:	f7fe fa1b 	bl	8000580 <HAL_GetTick>
 800214a:	1bc0      	subs	r0, r0, r7
 800214c:	2864      	cmp	r0, #100	; 0x64
 800214e:	d9f6      	bls.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002150:	e753      	b.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x396>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002152:	f7fe fa15 	bl	8000580 <HAL_GetTick>
 8002156:	1bc0      	subs	r0, r0, r7
 8002158:	2864      	cmp	r0, #100	; 0x64
 800215a:	d984      	bls.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0x402>
 800215c:	e74d      	b.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x396>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800215e:	f7fe fa0f 	bl	8000580 <HAL_GetTick>
 8002162:	1b80      	subs	r0, r0, r6
 8002164:	2864      	cmp	r0, #100	; 0x64
 8002166:	f67f aeeb 	bls.w	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800216a:	e746      	b.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x396>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800216c:	f7fe fa08 	bl	8000580 <HAL_GetTick>
 8002170:	1b40      	subs	r0, r0, r5
 8002172:	2864      	cmp	r0, #100	; 0x64
 8002174:	f67f af32 	bls.w	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x378>
 8002178:	e73f      	b.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x396>
 800217a:	bf00      	nop
 800217c:	40023800 	.word	0x40023800

08002180 <SPI_WaitFifoStateUntilTimeout.part.1>:
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002180:	6803      	ldr	r3, [r0, #0]
 8002182:	685a      	ldr	r2, [r3, #4]
 8002184:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002188:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800218a:	6842      	ldr	r2, [r0, #4]
 800218c:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8002190:	d10a      	bne.n	80021a8 <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
 8002192:	6882      	ldr	r2, [r0, #8]
 8002194:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002198:	d002      	beq.n	80021a0 <SPI_WaitFifoStateUntilTimeout.part.1+0x20>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800219a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800219e:	d103      	bne.n	80021a8 <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80021a8:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80021aa:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80021ae:	d109      	bne.n	80021c4 <SPI_WaitFifoStateUntilTimeout.part.1+0x44>
        {
          SPI_RESET_CRC(hspi);
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021b6:	0412      	lsls	r2, r2, #16
 80021b8:	0c12      	lsrs	r2, r2, #16
 80021ba:	601a      	str	r2, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021c2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80021c4:	2301      	movs	r3, #1
 80021c6:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80021ca:	2300      	movs	r3, #0
 80021cc:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
      }
    }
  }

  return HAL_OK;
}
 80021d0:	2003      	movs	r0, #3
 80021d2:	4770      	bx	lr

080021d4 <SPI_WaitFlagStateUntilTimeout.constprop.10>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
 80021d4:	b570      	push	{r4, r5, r6, lr}
 80021d6:	4605      	mov	r5, r0
 80021d8:	460c      	mov	r4, r1
 80021da:	4616      	mov	r6, r2
  while ((hspi->Instance->SR & Flag) != State)
 80021dc:	682b      	ldr	r3, [r5, #0]
 80021de:	6898      	ldr	r0, [r3, #8]
 80021e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80021e4:	d100      	bne.n	80021e8 <SPI_WaitFlagStateUntilTimeout.constprop.10+0x14>
}
 80021e6:	bd70      	pop	{r4, r5, r6, pc}
    if (Timeout != HAL_MAX_DELAY)
 80021e8:	1c62      	adds	r2, r4, #1
 80021ea:	d0f8      	beq.n	80021de <SPI_WaitFlagStateUntilTimeout.constprop.10+0xa>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 80021ec:	b924      	cbnz	r4, 80021f8 <SPI_WaitFlagStateUntilTimeout.constprop.10+0x24>
 80021ee:	4628      	mov	r0, r5
}
 80021f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80021f4:	f7ff bfc4 	b.w	8002180 <SPI_WaitFifoStateUntilTimeout.part.1>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 80021f8:	f7fe f9c2 	bl	8000580 <HAL_GetTick>
 80021fc:	1b80      	subs	r0, r0, r6
 80021fe:	4284      	cmp	r4, r0
 8002200:	d8ec      	bhi.n	80021dc <SPI_WaitFlagStateUntilTimeout.constprop.10+0x8>
 8002202:	e7f4      	b.n	80021ee <SPI_WaitFlagStateUntilTimeout.constprop.10+0x1a>

08002204 <SPI_WaitFifoStateUntilTimeout.constprop.11>:
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8002204:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002206:	4606      	mov	r6, r0
 8002208:	460c      	mov	r4, r1
 800220a:	4615      	mov	r5, r2
 800220c:	461f      	mov	r7, r3
  while ((hspi->Instance->SR & Fifo) != State)
 800220e:	6831      	ldr	r1, [r6, #0]
 8002210:	6888      	ldr	r0, [r1, #8]
 8002212:	4020      	ands	r0, r4
 8002214:	d00e      	beq.n	8002234 <SPI_WaitFifoStateUntilTimeout.constprop.11+0x30>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002216:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
 800221a:	d105      	bne.n	8002228 <SPI_WaitFifoStateUntilTimeout.constprop.11+0x24>
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 800221c:	7b0a      	ldrb	r2, [r1, #12]
 800221e:	b2d2      	uxtb	r2, r2
 8002220:	f88d 2007 	strb.w	r2, [sp, #7]
      UNUSED(tmpreg);
 8002224:	f89d 3007 	ldrb.w	r3, [sp, #7]
    if (Timeout != HAL_MAX_DELAY)
 8002228:	1c6b      	adds	r3, r5, #1
 800222a:	d0f1      	beq.n	8002210 <SPI_WaitFifoStateUntilTimeout.constprop.11+0xc>
      if ((Timeout == 0) || ((HAL_GetTick() - Tickstart) >= Timeout))
 800222c:	b925      	cbnz	r5, 8002238 <SPI_WaitFifoStateUntilTimeout.constprop.11+0x34>
 800222e:	4630      	mov	r0, r6
 8002230:	f7ff ffa6 	bl	8002180 <SPI_WaitFifoStateUntilTimeout.part.1>
}
 8002234:	b003      	add	sp, #12
 8002236:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((Timeout == 0) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8002238:	f7fe f9a2 	bl	8000580 <HAL_GetTick>
 800223c:	1bc0      	subs	r0, r0, r7
 800223e:	4285      	cmp	r5, r0
 8002240:	d8e5      	bhi.n	800220e <SPI_WaitFifoStateUntilTimeout.constprop.11+0xa>
 8002242:	e7f4      	b.n	800222e <SPI_WaitFifoStateUntilTimeout.constprop.11+0x2a>

08002244 <SPI_EndRxTxTransaction>:
  * @param hspi SPI handle
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002244:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002246:	4613      	mov	r3, r2
{
 8002248:	460d      	mov	r5, r1
 800224a:	4616      	mov	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800224c:	460a      	mov	r2, r1
 800224e:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
{
 8002252:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002254:	f7ff ffd6 	bl	8002204 <SPI_WaitFifoStateUntilTimeout.constprop.11>
 8002258:	b128      	cbz	r0, 8002266 <SPI_EndRxTxTransaction+0x22>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800225a:	6e23      	ldr	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 800225c:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800225e:	f043 0320 	orr.w	r3, r3, #32
 8002262:	6623      	str	r3, [r4, #96]	; 0x60
 8002264:	e00f      	b.n	8002286 <SPI_EndRxTxTransaction+0x42>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002266:	4632      	mov	r2, r6
 8002268:	4629      	mov	r1, r5
 800226a:	4620      	mov	r0, r4
 800226c:	f7ff ffb2 	bl	80021d4 <SPI_WaitFlagStateUntilTimeout.constprop.10>
 8002270:	2800      	cmp	r0, #0
 8002272:	d1f2      	bne.n	800225a <SPI_EndRxTxTransaction+0x16>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002274:	4633      	mov	r3, r6
 8002276:	462a      	mov	r2, r5
 8002278:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800227c:	4620      	mov	r0, r4
 800227e:	f7ff ffc1 	bl	8002204 <SPI_WaitFifoStateUntilTimeout.constprop.11>
 8002282:	2800      	cmp	r0, #0
 8002284:	d1e9      	bne.n	800225a <SPI_EndRxTxTransaction+0x16>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }
  return HAL_OK;
}
 8002286:	bd70      	pop	{r4, r5, r6, pc}

08002288 <HAL_SPI_Init>:
{
 8002288:	b570      	push	{r4, r5, r6, lr}
  if (hspi == NULL)
 800228a:	4604      	mov	r4, r0
 800228c:	2800      	cmp	r0, #0
 800228e:	d04e      	beq.n	800232e <HAL_SPI_Init+0xa6>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002290:	2300      	movs	r3, #0
 8002292:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002294:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8002298:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800229c:	b91b      	cbnz	r3, 80022a6 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 800229e:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 80022a2:	f004 fa61 	bl	8006768 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 80022a6:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 80022a8:	6821      	ldr	r1, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80022aa:	68e2      	ldr	r2, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 80022ac:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 80022b0:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80022b2:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 80022b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80022ba:	600b      	str	r3, [r1, #0]
 80022bc:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80022c0:	d932      	bls.n	8002328 <HAL_SPI_Init+0xa0>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80022c2:	4618      	mov	r0, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80022c4:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022c8:	bf18      	it	ne
 80022ca:	62a3      	strne	r3, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80022cc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80022ce:	b92b      	cbnz	r3, 80022dc <HAL_SPI_Init+0x54>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80022d0:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80022d4:	bf8c      	ite	hi
 80022d6:	2302      	movhi	r3, #2
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80022d8:	2301      	movls	r3, #1
 80022da:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80022dc:	68a6      	ldr	r6, [r4, #8]
 80022de:	6863      	ldr	r3, [r4, #4]
 80022e0:	69a5      	ldr	r5, [r4, #24]
 80022e2:	4333      	orrs	r3, r6
 80022e4:	6926      	ldr	r6, [r4, #16]
 80022e6:	4333      	orrs	r3, r6
 80022e8:	6966      	ldr	r6, [r4, #20]
 80022ea:	4333      	orrs	r3, r6
 80022ec:	69e6      	ldr	r6, [r4, #28]
 80022ee:	4333      	orrs	r3, r6
 80022f0:	6a26      	ldr	r6, [r4, #32]
 80022f2:	4333      	orrs	r3, r6
 80022f4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80022f6:	4333      	orrs	r3, r6
 80022f8:	f405 7600 	and.w	r6, r5, #512	; 0x200
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80022fc:	0c2d      	lsrs	r5, r5, #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80022fe:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002300:	f005 0504 	and.w	r5, r5, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002304:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002306:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002308:	431a      	orrs	r2, r3
 800230a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800230c:	431a      	orrs	r2, r3
 800230e:	432a      	orrs	r2, r5
 8002310:	4302      	orrs	r2, r0
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002312:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002314:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002316:	69cb      	ldr	r3, [r1, #28]
 8002318:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800231c:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 800231e:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002320:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002322:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  return HAL_OK;
 8002326:	bd70      	pop	{r4, r5, r6, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002328:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800232c:	e7cc      	b.n	80022c8 <HAL_SPI_Init+0x40>
    return HAL_ERROR;
 800232e:	2001      	movs	r0, #1
}
 8002330:	bd70      	pop	{r4, r5, r6, pc}

08002332 <HAL_SPI_Transmit>:
{
 8002332:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002336:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8002338:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
{
 800233c:	4604      	mov	r4, r0
 800233e:	460d      	mov	r5, r1
  __HAL_LOCK(hspi);
 8002340:	2b01      	cmp	r3, #1
{
 8002342:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8002344:	f000 8097 	beq.w	8002476 <HAL_SPI_Transmit+0x144>
 8002348:	2301      	movs	r3, #1
 800234a:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800234e:	f7fe f917 	bl	8000580 <HAL_GetTick>
 8002352:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8002354:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8002358:	b2c0      	uxtb	r0, r0
 800235a:	2801      	cmp	r0, #1
 800235c:	f040 8089 	bne.w	8002472 <HAL_SPI_Transmit+0x140>
  if ((pData == NULL) || (Size == 0U))
 8002360:	2d00      	cmp	r5, #0
 8002362:	d060      	beq.n	8002426 <HAL_SPI_Transmit+0xf4>
 8002364:	f1b8 0f00 	cmp.w	r8, #0
 8002368:	d05d      	beq.n	8002426 <HAL_SPI_Transmit+0xf4>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800236a:	2303      	movs	r3, #3
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800236c:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800236e:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002372:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002376:	2300      	movs	r3, #0
 8002378:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800237a:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 800237c:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->RxXferSize  = 0U;
 8002380:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002384:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002388:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 800238a:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800238c:	68a3      	ldr	r3, [r4, #8]
 800238e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002392:	6823      	ldr	r3, [r4, #0]
 8002394:	d103      	bne.n	800239e <HAL_SPI_Transmit+0x6c>
    SPI_1LINE_TX(hspi);
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800239c:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	0652      	lsls	r2, r2, #25
 80023a2:	d403      	bmi.n	80023ac <HAL_SPI_Transmit+0x7a>
    __HAL_SPI_ENABLE(hspi);
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023aa:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80023ac:	68e3      	ldr	r3, [r4, #12]
 80023ae:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80023b2:	d81d      	bhi.n	80023f0 <HAL_SPI_Transmit+0xbe>
    while (hspi->TxXferCount > 0U)
 80023b4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	b1f3      	cbz	r3, 80023f8 <HAL_SPI_Transmit+0xc6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80023ba:	6823      	ldr	r3, [r4, #0]
 80023bc:	689a      	ldr	r2, [r3, #8]
 80023be:	0792      	lsls	r2, r2, #30
 80023c0:	d54a      	bpl.n	8002458 <HAL_SPI_Transmit+0x126>
        if (hspi->TxXferCount > 1U)
 80023c2:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80023c4:	b292      	uxth	r2, r2
 80023c6:	2a01      	cmp	r2, #1
 80023c8:	d93e      	bls.n	8002448 <HAL_SPI_Transmit+0x116>
          hspi->Instance->DR = *((uint16_t *)pData);
 80023ca:	f835 2b02 	ldrh.w	r2, [r5], #2
 80023ce:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount -= 2U;
 80023d0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80023d2:	3b02      	subs	r3, #2
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80023d8:	e7ec      	b.n	80023b4 <HAL_SPI_Transmit+0x82>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80023da:	6823      	ldr	r3, [r4, #0]
 80023dc:	689a      	ldr	r2, [r3, #8]
 80023de:	0790      	lsls	r0, r2, #30
 80023e0:	d51f      	bpl.n	8002422 <HAL_SPI_Transmit+0xf0>
        hspi->Instance->DR = *((uint16_t *)pData);
 80023e2:	f835 2b02 	ldrh.w	r2, [r5], #2
 80023e6:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 80023e8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80023ea:	3b01      	subs	r3, #1
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 80023f0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d1f0      	bne.n	80023da <HAL_SPI_Transmit+0xa8>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80023f8:	463a      	mov	r2, r7
 80023fa:	4631      	mov	r1, r6
 80023fc:	4620      	mov	r0, r4
 80023fe:	f7ff ff21 	bl	8002244 <SPI_EndRxTxTransaction>
 8002402:	2800      	cmp	r0, #0
 8002404:	d132      	bne.n	800246c <HAL_SPI_Transmit+0x13a>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002406:	68a3      	ldr	r3, [r4, #8]
 8002408:	b933      	cbnz	r3, 8002418 <HAL_SPI_Transmit+0xe6>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800240a:	9301      	str	r3, [sp, #4]
 800240c:	6823      	ldr	r3, [r4, #0]
 800240e:	68da      	ldr	r2, [r3, #12]
 8002410:	9201      	str	r2, [sp, #4]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	9301      	str	r3, [sp, #4]
 8002416:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002418:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 800241a:	3000      	adds	r0, #0
 800241c:	bf18      	it	ne
 800241e:	2001      	movne	r0, #1
 8002420:	e001      	b.n	8002426 <HAL_SPI_Transmit+0xf4>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8002422:	b94e      	cbnz	r6, 8002438 <HAL_SPI_Transmit+0x106>
          errorcode = HAL_TIMEOUT;
 8002424:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8002426:	2301      	movs	r3, #1
 8002428:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800242c:	2300      	movs	r3, #0
 800242e:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8002432:	b002      	add	sp, #8
 8002434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8002438:	1c71      	adds	r1, r6, #1
 800243a:	d0d9      	beq.n	80023f0 <HAL_SPI_Transmit+0xbe>
 800243c:	f7fe f8a0 	bl	8000580 <HAL_GetTick>
 8002440:	1bc0      	subs	r0, r0, r7
 8002442:	4286      	cmp	r6, r0
 8002444:	d8d4      	bhi.n	80023f0 <HAL_SPI_Transmit+0xbe>
 8002446:	e7ed      	b.n	8002424 <HAL_SPI_Transmit+0xf2>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8002448:	782a      	ldrb	r2, [r5, #0]
 800244a:	3501      	adds	r5, #1
 800244c:	731a      	strb	r2, [r3, #12]
          hspi->TxXferCount--;
 800244e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002450:	3b01      	subs	r3, #1
 8002452:	b29b      	uxth	r3, r3
 8002454:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8002456:	e7ad      	b.n	80023b4 <HAL_SPI_Transmit+0x82>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8002458:	2e00      	cmp	r6, #0
 800245a:	d0e3      	beq.n	8002424 <HAL_SPI_Transmit+0xf2>
 800245c:	1c73      	adds	r3, r6, #1
 800245e:	d0a9      	beq.n	80023b4 <HAL_SPI_Transmit+0x82>
 8002460:	f7fe f88e 	bl	8000580 <HAL_GetTick>
 8002464:	1bc0      	subs	r0, r0, r7
 8002466:	4286      	cmp	r6, r0
 8002468:	d8a4      	bhi.n	80023b4 <HAL_SPI_Transmit+0x82>
 800246a:	e7db      	b.n	8002424 <HAL_SPI_Transmit+0xf2>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800246c:	2320      	movs	r3, #32
 800246e:	6623      	str	r3, [r4, #96]	; 0x60
 8002470:	e7c9      	b.n	8002406 <HAL_SPI_Transmit+0xd4>
    errorcode = HAL_BUSY;
 8002472:	2002      	movs	r0, #2
 8002474:	e7d7      	b.n	8002426 <HAL_SPI_Transmit+0xf4>
  __HAL_LOCK(hspi);
 8002476:	2002      	movs	r0, #2
 8002478:	e7db      	b.n	8002432 <HAL_SPI_Transmit+0x100>

0800247a <HAL_SPI_TransmitReceive>:
{
 800247a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800247e:	461f      	mov	r7, r3
  __HAL_LOCK(hspi);
 8002480:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
{
 8002484:	4604      	mov	r4, r0
 8002486:	460d      	mov	r5, r1
  __HAL_LOCK(hspi);
 8002488:	2b01      	cmp	r3, #1
{
 800248a:	4616      	mov	r6, r2
 800248c:	f8dd 8020 	ldr.w	r8, [sp, #32]
  __HAL_LOCK(hspi);
 8002490:	f000 8111 	beq.w	80026b6 <HAL_SPI_TransmitReceive+0x23c>
 8002494:	2301      	movs	r3, #1
 8002496:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800249a:	f7fe f871 	bl	8000580 <HAL_GetTick>
  tmp  = hspi->State;
 800249e:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  tickstart = HAL_GetTick();
 80024a2:	4681      	mov	r9, r0
  tmp1 = hspi->Init.Mode;
 80024a4:	6861      	ldr	r1, [r4, #4]
  tmp  = hspi->State;
 80024a6:	b2db      	uxtb	r3, r3
  if (!((tmp == HAL_SPI_STATE_READY) || \
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d00a      	beq.n	80024c2 <HAL_SPI_TransmitReceive+0x48>
 80024ac:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 80024b0:	f040 80fd 	bne.w	80026ae <HAL_SPI_TransmitReceive+0x234>
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 80024b4:	68a2      	ldr	r2, [r4, #8]
 80024b6:	2a00      	cmp	r2, #0
 80024b8:	f040 80f9 	bne.w	80026ae <HAL_SPI_TransmitReceive+0x234>
 80024bc:	2b04      	cmp	r3, #4
 80024be:	f040 80f6 	bne.w	80026ae <HAL_SPI_TransmitReceive+0x234>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80024c2:	2d00      	cmp	r5, #0
 80024c4:	f000 80f5 	beq.w	80026b2 <HAL_SPI_TransmitReceive+0x238>
 80024c8:	2e00      	cmp	r6, #0
 80024ca:	f000 80f2 	beq.w	80026b2 <HAL_SPI_TransmitReceive+0x238>
 80024ce:	2f00      	cmp	r7, #0
 80024d0:	f000 80ef 	beq.w	80026b2 <HAL_SPI_TransmitReceive+0x238>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80024d4:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 80024d8:	2b04      	cmp	r3, #4
 80024da:	d002      	beq.n	80024e2 <HAL_SPI_TransmitReceive+0x68>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80024dc:	2305      	movs	r3, #5
 80024de:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1))
 80024e2:	68e0      	ldr	r0, [r4, #12]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80024e4:	2300      	movs	r3, #0
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80024e6:	6426      	str	r6, [r4, #64]	; 0x40
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1))
 80024e8:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80024ec:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->RxISR       = NULL;
 80024ee:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->RxXferCount = Size;
 80024f0:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 80024f4:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxXferSize  = Size;
 80024f6:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80024fa:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 80024fc:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80024fe:	87a7      	strh	r7, [r4, #60]	; 0x3c
 8002500:	6823      	ldr	r3, [r4, #0]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1))
 8002502:	d804      	bhi.n	800250e <HAL_SPI_TransmitReceive+0x94>
 8002504:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8002508:	b292      	uxth	r2, r2
 800250a:	2a01      	cmp	r2, #1
 800250c:	d92e      	bls.n	800256c <HAL_SPI_TransmitReceive+0xf2>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800250e:	685a      	ldr	r2, [r3, #4]
 8002510:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002514:	605a      	str	r2, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	0657      	lsls	r7, r2, #25
 800251a:	d403      	bmi.n	8002524 <HAL_SPI_TransmitReceive+0xaa>
    __HAL_SPI_ENABLE(hspi);
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002522:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002524:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8002528:	d958      	bls.n	80025dc <HAL_SPI_TransmitReceive+0x162>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 800252a:	b119      	cbz	r1, 8002534 <HAL_SPI_TransmitReceive+0xba>
 800252c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800252e:	b292      	uxth	r2, r2
 8002530:	2a01      	cmp	r2, #1
 8002532:	d106      	bne.n	8002542 <HAL_SPI_TransmitReceive+0xc8>
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8002534:	f835 2b02 	ldrh.w	r2, [r5], #2
 8002538:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 800253a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800253c:	3b01      	subs	r3, #1
 800253e:	b29b      	uxth	r3, r3
 8002540:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8002542:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002544:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002546:	b29b      	uxth	r3, r3
 8002548:	b9a3      	cbnz	r3, 8002574 <HAL_SPI_TransmitReceive+0xfa>
 800254a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800254e:	b29b      	uxth	r3, r3
 8002550:	b983      	cbnz	r3, 8002574 <HAL_SPI_TransmitReceive+0xfa>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002552:	464a      	mov	r2, r9
 8002554:	4641      	mov	r1, r8
 8002556:	4620      	mov	r0, r4
 8002558:	f7ff fe74 	bl	8002244 <SPI_EndRxTxTransaction>
 800255c:	2800      	cmp	r0, #0
 800255e:	f040 80a3 	bne.w	80026a8 <HAL_SPI_TransmitReceive+0x22e>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002562:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 8002564:	3000      	adds	r0, #0
 8002566:	bf18      	it	ne
 8002568:	2001      	movne	r0, #1
 800256a:	e02f      	b.n	80025cc <HAL_SPI_TransmitReceive+0x152>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800256c:	685a      	ldr	r2, [r3, #4]
 800256e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002572:	e7cf      	b.n	8002514 <HAL_SPI_TransmitReceive+0x9a>
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8002574:	b177      	cbz	r7, 8002594 <HAL_SPI_TransmitReceive+0x11a>
 8002576:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002578:	b29b      	uxth	r3, r3
 800257a:	b15b      	cbz	r3, 8002594 <HAL_SPI_TransmitReceive+0x11a>
 800257c:	6823      	ldr	r3, [r4, #0]
 800257e:	689a      	ldr	r2, [r3, #8]
 8002580:	0792      	lsls	r2, r2, #30
 8002582:	d507      	bpl.n	8002594 <HAL_SPI_TransmitReceive+0x11a>
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8002584:	f835 2b02 	ldrh.w	r2, [r5], #2
        txallowed = 0U;
 8002588:	2700      	movs	r7, #0
        hspi->Instance->DR = *((uint16_t *)pTxData);
 800258a:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 800258c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800258e:	3b01      	subs	r3, #1
 8002590:	b29b      	uxth	r3, r3
 8002592:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8002594:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002598:	b29b      	uxth	r3, r3
 800259a:	b16b      	cbz	r3, 80025b8 <HAL_SPI_TransmitReceive+0x13e>
 800259c:	6823      	ldr	r3, [r4, #0]
 800259e:	689a      	ldr	r2, [r3, #8]
 80025a0:	07d0      	lsls	r0, r2, #31
 80025a2:	d509      	bpl.n	80025b8 <HAL_SPI_TransmitReceive+0x13e>
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 80025a4:	68db      	ldr	r3, [r3, #12]
        txallowed = 1U;
 80025a6:	2701      	movs	r7, #1
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 80025a8:	f826 3b02 	strh.w	r3, [r6], #2
        hspi->RxXferCount--;
 80025ac:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80025b0:	3b01      	subs	r3, #1
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 80025b8:	f1b8 3fff 	cmp.w	r8, #4294967295
 80025bc:	d0c2      	beq.n	8002544 <HAL_SPI_TransmitReceive+0xca>
 80025be:	f7fd ffdf 	bl	8000580 <HAL_GetTick>
 80025c2:	eba0 0009 	sub.w	r0, r0, r9
 80025c6:	4580      	cmp	r8, r0
 80025c8:	d8bc      	bhi.n	8002544 <HAL_SPI_TransmitReceive+0xca>
        errorcode = HAL_TIMEOUT;
 80025ca:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80025cc:	2301      	movs	r3, #1
 80025ce:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80025d2:	2300      	movs	r3, #0
 80025d4:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 80025d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 80025dc:	b119      	cbz	r1, 80025e6 <HAL_SPI_TransmitReceive+0x16c>
 80025de:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80025e0:	b292      	uxth	r2, r2
 80025e2:	2a01      	cmp	r2, #1
 80025e4:	d106      	bne.n	80025f4 <HAL_SPI_TransmitReceive+0x17a>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*pTxData);
 80025e6:	f815 2b01 	ldrb.w	r2, [r5], #1
 80025ea:	731a      	strb	r2, [r3, #12]
      hspi->TxXferCount--;
 80025ec:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80025ee:	3b01      	subs	r3, #1
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80025f4:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025f6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	b923      	cbnz	r3, 8002606 <HAL_SPI_TransmitReceive+0x18c>
 80025fc:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002600:	b29b      	uxth	r3, r3
 8002602:	2b00      	cmp	r3, #0
 8002604:	d0a5      	beq.n	8002552 <HAL_SPI_TransmitReceive+0xd8>
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8002606:	b197      	cbz	r7, 800262e <HAL_SPI_TransmitReceive+0x1b4>
 8002608:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800260a:	b29b      	uxth	r3, r3
 800260c:	b17b      	cbz	r3, 800262e <HAL_SPI_TransmitReceive+0x1b4>
 800260e:	6823      	ldr	r3, [r4, #0]
 8002610:	689a      	ldr	r2, [r3, #8]
 8002612:	0791      	lsls	r1, r2, #30
 8002614:	d50b      	bpl.n	800262e <HAL_SPI_TransmitReceive+0x1b4>
        if (hspi->TxXferCount > 1U)
 8002616:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8002618:	b292      	uxth	r2, r2
 800261a:	2a01      	cmp	r2, #1
 800261c:	d931      	bls.n	8002682 <HAL_SPI_TransmitReceive+0x208>
          hspi->Instance->DR = *((uint16_t *)pTxData);
 800261e:	f835 2b02 	ldrh.w	r2, [r5], #2
 8002622:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount -= 2U;
 8002624:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002626:	3b02      	subs	r3, #2
 8002628:	b29b      	uxth	r3, r3
 800262a:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 800262c:	2700      	movs	r7, #0
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 800262e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002632:	b29b      	uxth	r3, r3
 8002634:	b1db      	cbz	r3, 800266e <HAL_SPI_TransmitReceive+0x1f4>
 8002636:	6823      	ldr	r3, [r4, #0]
 8002638:	689a      	ldr	r2, [r3, #8]
 800263a:	07d2      	lsls	r2, r2, #31
 800263c:	d517      	bpl.n	800266e <HAL_SPI_TransmitReceive+0x1f4>
        if (hspi->RxXferCount > 1U)
 800263e:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8002642:	b292      	uxth	r2, r2
 8002644:	2a01      	cmp	r2, #1
 8002646:	d924      	bls.n	8002692 <HAL_SPI_TransmitReceive+0x218>
          *((uint16_t *)pRxData) = hspi->Instance->DR;
 8002648:	68da      	ldr	r2, [r3, #12]
 800264a:	f826 2b02 	strh.w	r2, [r6], #2
          hspi->RxXferCount -= 2U;
 800264e:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8002652:	3a02      	subs	r2, #2
 8002654:	b292      	uxth	r2, r2
 8002656:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800265a:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 800265e:	b292      	uxth	r2, r2
 8002660:	2a01      	cmp	r2, #1
 8002662:	d803      	bhi.n	800266c <HAL_SPI_TransmitReceive+0x1f2>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002664:	685a      	ldr	r2, [r3, #4]
 8002666:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800266a:	605a      	str	r2, [r3, #4]
        txallowed = 1U;
 800266c:	2701      	movs	r7, #1
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 800266e:	f1b8 3fff 	cmp.w	r8, #4294967295
 8002672:	d0c0      	beq.n	80025f6 <HAL_SPI_TransmitReceive+0x17c>
 8002674:	f7fd ff84 	bl	8000580 <HAL_GetTick>
 8002678:	eba0 0009 	sub.w	r0, r0, r9
 800267c:	4580      	cmp	r8, r0
 800267e:	d8ba      	bhi.n	80025f6 <HAL_SPI_TransmitReceive+0x17c>
 8002680:	e7a3      	b.n	80025ca <HAL_SPI_TransmitReceive+0x150>
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8002682:	782a      	ldrb	r2, [r5, #0]
 8002684:	3501      	adds	r5, #1
 8002686:	731a      	strb	r2, [r3, #12]
          hspi->TxXferCount--;
 8002688:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800268a:	3b01      	subs	r3, #1
 800268c:	b29b      	uxth	r3, r3
 800268e:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8002690:	e7cc      	b.n	800262c <HAL_SPI_TransmitReceive+0x1b2>
          (*pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002692:	7b1b      	ldrb	r3, [r3, #12]
 8002694:	3601      	adds	r6, #1
 8002696:	f806 3c01 	strb.w	r3, [r6, #-1]
          hspi->RxXferCount--;
 800269a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800269e:	3b01      	subs	r3, #1
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 80026a6:	e7e1      	b.n	800266c <HAL_SPI_TransmitReceive+0x1f2>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80026a8:	2320      	movs	r3, #32
 80026aa:	6623      	str	r3, [r4, #96]	; 0x60
 80026ac:	e759      	b.n	8002562 <HAL_SPI_TransmitReceive+0xe8>
    errorcode = HAL_BUSY;
 80026ae:	2002      	movs	r0, #2
 80026b0:	e78c      	b.n	80025cc <HAL_SPI_TransmitReceive+0x152>
    errorcode = HAL_ERROR;
 80026b2:	2001      	movs	r0, #1
 80026b4:	e78a      	b.n	80025cc <HAL_SPI_TransmitReceive+0x152>
  __HAL_LOCK(hspi);
 80026b6:	2002      	movs	r0, #2
}
 80026b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080026bc <HAL_TIM_Base_MspInit>:
 80026bc:	4770      	bx	lr

080026be <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80026be:	6803      	ldr	r3, [r0, #0]
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
      
  /* Return function status */
  return HAL_OK;
}
 80026c0:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80026c2:	68da      	ldr	r2, [r3, #12]
 80026c4:	f042 0201 	orr.w	r2, r2, #1
 80026c8:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	f042 0201 	orr.w	r2, r2, #1
 80026d0:	601a      	str	r2, [r3, #0]
}
 80026d2:	4770      	bx	lr

080026d4 <HAL_TIM_OC_DelayElapsedCallback>:
 80026d4:	4770      	bx	lr

080026d6 <HAL_TIM_IC_CaptureCallback>:
 80026d6:	4770      	bx	lr

080026d8 <HAL_TIM_PWM_PulseFinishedCallback>:
 80026d8:	4770      	bx	lr

080026da <HAL_TIM_TriggerCallback>:
 80026da:	4770      	bx	lr

080026dc <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80026dc:	6803      	ldr	r3, [r0, #0]
 80026de:	691a      	ldr	r2, [r3, #16]
 80026e0:	0791      	lsls	r1, r2, #30
{
 80026e2:	b510      	push	{r4, lr}
 80026e4:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80026e6:	d50f      	bpl.n	8002708 <HAL_TIM_IRQHandler+0x2c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80026e8:	68da      	ldr	r2, [r3, #12]
 80026ea:	0792      	lsls	r2, r2, #30
 80026ec:	d50c      	bpl.n	8002708 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80026ee:	f06f 0202 	mvn.w	r2, #2
 80026f2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026f4:	2201      	movs	r2, #1
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 80026f6:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026f8:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 80026fa:	0799      	lsls	r1, r3, #30
 80026fc:	f000 8085 	beq.w	800280a <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002700:	f7ff ffe9 	bl	80026d6 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002704:	2300      	movs	r3, #0
 8002706:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002708:	6823      	ldr	r3, [r4, #0]
 800270a:	691a      	ldr	r2, [r3, #16]
 800270c:	0752      	lsls	r2, r2, #29
 800270e:	d510      	bpl.n	8002732 <HAL_TIM_IRQHandler+0x56>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8002710:	68da      	ldr	r2, [r3, #12]
 8002712:	0750      	lsls	r0, r2, #29
 8002714:	d50d      	bpl.n	8002732 <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002716:	f06f 0204 	mvn.w	r2, #4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800271a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800271c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800271e:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8002720:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002722:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8002724:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002728:	d075      	beq.n	8002816 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 800272a:	f7ff ffd4 	bl	80026d6 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800272e:	2300      	movs	r3, #0
 8002730:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002732:	6823      	ldr	r3, [r4, #0]
 8002734:	691a      	ldr	r2, [r3, #16]
 8002736:	0711      	lsls	r1, r2, #28
 8002738:	d50f      	bpl.n	800275a <HAL_TIM_IRQHandler+0x7e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 800273a:	68da      	ldr	r2, [r3, #12]
 800273c:	0712      	lsls	r2, r2, #28
 800273e:	d50c      	bpl.n	800275a <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002740:	f06f 0208 	mvn.w	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
      {          
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002744:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002746:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002748:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 800274a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800274c:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 800274e:	079b      	lsls	r3, r3, #30
 8002750:	d067      	beq.n	8002822 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8002752:	f7ff ffc0 	bl	80026d6 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002756:	2300      	movs	r3, #0
 8002758:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800275a:	6823      	ldr	r3, [r4, #0]
 800275c:	691a      	ldr	r2, [r3, #16]
 800275e:	06d0      	lsls	r0, r2, #27
 8002760:	d510      	bpl.n	8002784 <HAL_TIM_IRQHandler+0xa8>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002762:	68da      	ldr	r2, [r3, #12]
 8002764:	06d1      	lsls	r1, r2, #27
 8002766:	d50d      	bpl.n	8002784 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002768:	f06f 0210 	mvn.w	r2, #16
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
      {          
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800276c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800276e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002770:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8002772:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002774:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8002776:	f413 7f40 	tst.w	r3, #768	; 0x300
 800277a:	d058      	beq.n	800282e <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 800277c:	f7ff ffab 	bl	80026d6 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002780:	2300      	movs	r3, #0
 8002782:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002784:	6823      	ldr	r3, [r4, #0]
 8002786:	691a      	ldr	r2, [r3, #16]
 8002788:	07d2      	lsls	r2, r2, #31
 800278a:	d508      	bpl.n	800279e <HAL_TIM_IRQHandler+0xc2>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800278c:	68da      	ldr	r2, [r3, #12]
 800278e:	07d0      	lsls	r0, r2, #31
 8002790:	d505      	bpl.n	800279e <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002792:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002796:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002798:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800279a:	f003 ffad 	bl	80066f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800279e:	6823      	ldr	r3, [r4, #0]
 80027a0:	691a      	ldr	r2, [r3, #16]
 80027a2:	0611      	lsls	r1, r2, #24
 80027a4:	d508      	bpl.n	80027b8 <HAL_TIM_IRQHandler+0xdc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80027a6:	68da      	ldr	r2, [r3, #12]
 80027a8:	0612      	lsls	r2, r2, #24
 80027aa:	d505      	bpl.n	80027b8 <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80027ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80027b0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80027b2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80027b4:	f000 f8c5 	bl	8002942 <HAL_TIMEx_BreakCallback>

    }
  }
  
    /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80027b8:	6823      	ldr	r3, [r4, #0]
 80027ba:	691a      	ldr	r2, [r3, #16]
 80027bc:	05d0      	lsls	r0, r2, #23
 80027be:	d508      	bpl.n	80027d2 <HAL_TIM_IRQHandler+0xf6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80027c0:	68da      	ldr	r2, [r3, #12]
 80027c2:	0611      	lsls	r1, r2, #24
 80027c4:	d505      	bpl.n	80027d2 <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80027c6:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80027ca:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80027cc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80027ce:	f000 f8b8 	bl	8002942 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }

  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80027d2:	6823      	ldr	r3, [r4, #0]
 80027d4:	691a      	ldr	r2, [r3, #16]
 80027d6:	0652      	lsls	r2, r2, #25
 80027d8:	d508      	bpl.n	80027ec <HAL_TIM_IRQHandler+0x110>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80027da:	68da      	ldr	r2, [r3, #12]
 80027dc:	0650      	lsls	r0, r2, #25
 80027de:	d505      	bpl.n	80027ec <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80027e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80027e4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80027e6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80027e8:	f7ff ff77 	bl	80026da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80027ec:	6823      	ldr	r3, [r4, #0]
 80027ee:	691a      	ldr	r2, [r3, #16]
 80027f0:	0691      	lsls	r1, r2, #26
 80027f2:	d522      	bpl.n	800283a <HAL_TIM_IRQHandler+0x15e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80027f4:	68da      	ldr	r2, [r3, #12]
 80027f6:	0692      	lsls	r2, r2, #26
 80027f8:	d51f      	bpl.n	800283a <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80027fa:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutationCallback(htim);
 80027fe:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002800:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002802:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8002806:	f000 b89b 	b.w	8002940 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800280a:	f7ff ff63 	bl	80026d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800280e:	4620      	mov	r0, r4
 8002810:	f7ff ff62 	bl	80026d8 <HAL_TIM_PWM_PulseFinishedCallback>
 8002814:	e776      	b.n	8002704 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002816:	f7ff ff5d 	bl	80026d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800281a:	4620      	mov	r0, r4
 800281c:	f7ff ff5c 	bl	80026d8 <HAL_TIM_PWM_PulseFinishedCallback>
 8002820:	e785      	b.n	800272e <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002822:	f7ff ff57 	bl	80026d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002826:	4620      	mov	r0, r4
 8002828:	f7ff ff56 	bl	80026d8 <HAL_TIM_PWM_PulseFinishedCallback>
 800282c:	e793      	b.n	8002756 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800282e:	f7ff ff51 	bl	80026d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002832:	4620      	mov	r0, r4
 8002834:	f7ff ff50 	bl	80026d8 <HAL_TIM_PWM_PulseFinishedCallback>
 8002838:	e7a2      	b.n	8002780 <HAL_TIM_IRQHandler+0xa4>
 800283a:	bd10      	pop	{r4, pc}

0800283c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 800283c:	4a30      	ldr	r2, [pc, #192]	; (8002900 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 800283e:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8002840:	4290      	cmp	r0, r2
 8002842:	d012      	beq.n	800286a <TIM_Base_SetConfig+0x2e>
 8002844:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002848:	d00f      	beq.n	800286a <TIM_Base_SetConfig+0x2e>
 800284a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800284e:	4290      	cmp	r0, r2
 8002850:	d00b      	beq.n	800286a <TIM_Base_SetConfig+0x2e>
 8002852:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002856:	4290      	cmp	r0, r2
 8002858:	d007      	beq.n	800286a <TIM_Base_SetConfig+0x2e>
 800285a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800285e:	4290      	cmp	r0, r2
 8002860:	d003      	beq.n	800286a <TIM_Base_SetConfig+0x2e>
 8002862:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002866:	4290      	cmp	r0, r2
 8002868:	d11d      	bne.n	80028a6 <TIM_Base_SetConfig+0x6a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800286a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800286c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002870:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8002872:	4a23      	ldr	r2, [pc, #140]	; (8002900 <TIM_Base_SetConfig+0xc4>)
 8002874:	4290      	cmp	r0, r2
 8002876:	d104      	bne.n	8002882 <TIM_Base_SetConfig+0x46>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002878:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800287c:	68ca      	ldr	r2, [r1, #12]
 800287e:	4313      	orrs	r3, r2
 8002880:	e028      	b.n	80028d4 <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8002882:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002886:	d0f7      	beq.n	8002878 <TIM_Base_SetConfig+0x3c>
 8002888:	4a1e      	ldr	r2, [pc, #120]	; (8002904 <TIM_Base_SetConfig+0xc8>)
 800288a:	4290      	cmp	r0, r2
 800288c:	d0f4      	beq.n	8002878 <TIM_Base_SetConfig+0x3c>
 800288e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002892:	4290      	cmp	r0, r2
 8002894:	d0f0      	beq.n	8002878 <TIM_Base_SetConfig+0x3c>
 8002896:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800289a:	4290      	cmp	r0, r2
 800289c:	d0ec      	beq.n	8002878 <TIM_Base_SetConfig+0x3c>
 800289e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80028a2:	4290      	cmp	r0, r2
 80028a4:	d0e8      	beq.n	8002878 <TIM_Base_SetConfig+0x3c>
 80028a6:	4a18      	ldr	r2, [pc, #96]	; (8002908 <TIM_Base_SetConfig+0xcc>)
 80028a8:	4290      	cmp	r0, r2
 80028aa:	d0e5      	beq.n	8002878 <TIM_Base_SetConfig+0x3c>
 80028ac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80028b0:	4290      	cmp	r0, r2
 80028b2:	d0e1      	beq.n	8002878 <TIM_Base_SetConfig+0x3c>
 80028b4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80028b8:	4290      	cmp	r0, r2
 80028ba:	d0dd      	beq.n	8002878 <TIM_Base_SetConfig+0x3c>
 80028bc:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80028c0:	4290      	cmp	r0, r2
 80028c2:	d0d9      	beq.n	8002878 <TIM_Base_SetConfig+0x3c>
 80028c4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80028c8:	4290      	cmp	r0, r2
 80028ca:	d0d5      	beq.n	8002878 <TIM_Base_SetConfig+0x3c>
 80028cc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80028d0:	4290      	cmp	r0, r2
 80028d2:	d0d1      	beq.n	8002878 <TIM_Base_SetConfig+0x3c>
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028d4:	694a      	ldr	r2, [r1, #20]
 80028d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028da:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80028dc:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028de:	688b      	ldr	r3, [r1, #8]
 80028e0:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80028e2:	680b      	ldr	r3, [r1, #0]
 80028e4:	6283      	str	r3, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 80028e6:	4b06      	ldr	r3, [pc, #24]	; (8002900 <TIM_Base_SetConfig+0xc4>)
 80028e8:	4298      	cmp	r0, r3
 80028ea:	d006      	beq.n	80028fa <TIM_Base_SetConfig+0xbe>
 80028ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80028f0:	4298      	cmp	r0, r3
 80028f2:	d002      	beq.n	80028fa <TIM_Base_SetConfig+0xbe>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028f4:	2301      	movs	r3, #1
 80028f6:	6143      	str	r3, [r0, #20]
}
 80028f8:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 80028fa:	690b      	ldr	r3, [r1, #16]
 80028fc:	6303      	str	r3, [r0, #48]	; 0x30
 80028fe:	e7f9      	b.n	80028f4 <TIM_Base_SetConfig+0xb8>
 8002900:	40010000 	.word	0x40010000
 8002904:	40000400 	.word	0x40000400
 8002908:	40014000 	.word	0x40014000

0800290c <HAL_TIM_Base_Init>:
{ 
 800290c:	b510      	push	{r4, lr}
  if(htim == NULL)
 800290e:	4604      	mov	r4, r0
 8002910:	b1a0      	cbz	r0, 800293c <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002912:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002916:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800291a:	b91b      	cbnz	r3, 8002924 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800291c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002920:	f7ff fecc 	bl	80026bc <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002924:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002926:	6820      	ldr	r0, [r4, #0]
 8002928:	1d21      	adds	r1, r4, #4
  htim->State= HAL_TIM_STATE_BUSY;
 800292a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800292e:	f7ff ff85 	bl	800283c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002932:	2301      	movs	r3, #1
  return HAL_OK;
 8002934:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8002936:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800293a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800293c:	2001      	movs	r0, #1
}
 800293e:	bd10      	pop	{r4, pc}

08002940 <HAL_TIMEx_CommutationCallback>:
 8002940:	4770      	bx	lr

08002942 <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002942:	4770      	bx	lr

08002944 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002944:	6803      	ldr	r3, [r0, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800294c:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800294e:	689a      	ldr	r2, [r3, #8]
 8002950:	f022 0201 	bic.w	r2, r2, #1
 8002954:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002956:	2320      	movs	r3, #32
 8002958:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
 800295c:	4770      	bx	lr

0800295e <HAL_UART_Transmit_IT>:
  if(huart->gState == HAL_UART_STATE_READY)
 800295e:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8002962:	2b20      	cmp	r3, #32
 8002964:	d11a      	bne.n	800299c <HAL_UART_Transmit_IT+0x3e>
    if((pData == NULL ) || (Size == 0U))
 8002966:	b1b9      	cbz	r1, 8002998 <HAL_UART_Transmit_IT+0x3a>
 8002968:	b1b2      	cbz	r2, 8002998 <HAL_UART_Transmit_IT+0x3a>
    __HAL_LOCK(huart);
 800296a:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 800296e:	2b01      	cmp	r3, #1
 8002970:	d014      	beq.n	800299c <HAL_UART_Transmit_IT+0x3e>
    huart->TxXferCount = Size;
 8002972:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002976:	2300      	movs	r3, #0
    huart->pTxBuffPtr = pData;
 8002978:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize = Size;
 800297a:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800297e:	2221      	movs	r2, #33	; 0x21
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002980:	6801      	ldr	r1, [r0, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002982:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002984:	f880 2069 	strb.w	r2, [r0, #105]	; 0x69
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002988:	680a      	ldr	r2, [r1, #0]
    __HAL_UNLOCK(huart);
 800298a:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    return HAL_OK;
 800298e:	4618      	mov	r0, r3
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002990:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002994:	600a      	str	r2, [r1, #0]
    return HAL_OK;
 8002996:	4770      	bx	lr
      return HAL_ERROR;
 8002998:	2001      	movs	r0, #1
 800299a:	4770      	bx	lr
    return HAL_BUSY;
 800299c:	2002      	movs	r0, #2
}
 800299e:	4770      	bx	lr

080029a0 <HAL_UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_READY)
 80029a0:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 80029a4:	2b20      	cmp	r3, #32
 80029a6:	d13d      	bne.n	8002a24 <HAL_UART_Receive_IT+0x84>
    if((pData == NULL ) || (Size == 0U))
 80029a8:	2900      	cmp	r1, #0
 80029aa:	d039      	beq.n	8002a20 <HAL_UART_Receive_IT+0x80>
 80029ac:	2a00      	cmp	r2, #0
 80029ae:	d037      	beq.n	8002a20 <HAL_UART_Receive_IT+0x80>
    __HAL_LOCK(huart);
 80029b0:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d035      	beq.n	8002a24 <HAL_UART_Receive_IT+0x84>
 80029b8:	2301      	movs	r3, #1
    huart->pRxBuffPtr = pData;
 80029ba:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 80029bc:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    __HAL_LOCK(huart);
 80029c0:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    UART_MASK_COMPUTATION(huart);
 80029c4:	6883      	ldr	r3, [r0, #8]
    huart->RxXferCount = Size;
 80029c6:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 80029ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029ce:	d119      	bne.n	8002a04 <HAL_UART_Receive_IT+0x64>
 80029d0:	6903      	ldr	r3, [r0, #16]
 80029d2:	b9ab      	cbnz	r3, 8002a00 <HAL_UART_Receive_IT+0x60>
 80029d4:	f240 13ff 	movw	r3, #511	; 0x1ff
 80029d8:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029dc:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80029de:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029e0:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80029e2:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029e6:	6802      	ldr	r2, [r0, #0]
    __HAL_UNLOCK(huart);
 80029e8:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    return HAL_OK;
 80029ec:	4618      	mov	r0, r3
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029ee:	6891      	ldr	r1, [r2, #8]
 80029f0:	f041 0101 	orr.w	r1, r1, #1
 80029f4:	6091      	str	r1, [r2, #8]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80029f6:	6811      	ldr	r1, [r2, #0]
 80029f8:	f441 7190 	orr.w	r1, r1, #288	; 0x120
 80029fc:	6011      	str	r1, [r2, #0]
    return HAL_OK;
 80029fe:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 8002a00:	23ff      	movs	r3, #255	; 0xff
 8002a02:	e7e9      	b.n	80029d8 <HAL_UART_Receive_IT+0x38>
 8002a04:	b923      	cbnz	r3, 8002a10 <HAL_UART_Receive_IT+0x70>
 8002a06:	6903      	ldr	r3, [r0, #16]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d0f9      	beq.n	8002a00 <HAL_UART_Receive_IT+0x60>
 8002a0c:	237f      	movs	r3, #127	; 0x7f
 8002a0e:	e7e3      	b.n	80029d8 <HAL_UART_Receive_IT+0x38>
 8002a10:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a14:	d1e2      	bne.n	80029dc <HAL_UART_Receive_IT+0x3c>
 8002a16:	6903      	ldr	r3, [r0, #16]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d0f7      	beq.n	8002a0c <HAL_UART_Receive_IT+0x6c>
 8002a1c:	233f      	movs	r3, #63	; 0x3f
 8002a1e:	e7db      	b.n	80029d8 <HAL_UART_Receive_IT+0x38>
      return HAL_ERROR;
 8002a20:	2001      	movs	r0, #1
 8002a22:	4770      	bx	lr
    return HAL_BUSY;
 8002a24:	2002      	movs	r0, #2
}
 8002a26:	4770      	bx	lr

08002a28 <UART_WaitOnFlagUntilTimeout>:
{
 8002a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a2c:	9d06      	ldr	r5, [sp, #24]
 8002a2e:	4604      	mov	r4, r0
 8002a30:	460f      	mov	r7, r1
 8002a32:	4616      	mov	r6, r2
 8002a34:	4698      	mov	r8, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a36:	6821      	ldr	r1, [r4, #0]
 8002a38:	69ca      	ldr	r2, [r1, #28]
 8002a3a:	ea37 0302 	bics.w	r3, r7, r2
 8002a3e:	bf0c      	ite	eq
 8002a40:	2201      	moveq	r2, #1
 8002a42:	2200      	movne	r2, #0
 8002a44:	42b2      	cmp	r2, r6
 8002a46:	d002      	beq.n	8002a4e <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8002a48:	2000      	movs	r0, #0
}
 8002a4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8002a4e:	1c6b      	adds	r3, r5, #1
 8002a50:	d0f2      	beq.n	8002a38 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 8002a52:	b99d      	cbnz	r5, 8002a7c <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a54:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8002a56:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002a5e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a60:	689a      	ldr	r2, [r3, #8]
 8002a62:	f022 0201 	bic.w	r2, r2, #1
 8002a66:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8002a68:	2320      	movs	r3, #32
 8002a6a:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8002a6e:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 8002a72:	2300      	movs	r3, #0
 8002a74:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8002a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 8002a7c:	f7fd fd80 	bl	8000580 <HAL_GetTick>
 8002a80:	eba0 0008 	sub.w	r0, r0, r8
 8002a84:	4285      	cmp	r5, r0
 8002a86:	d8d6      	bhi.n	8002a36 <UART_WaitOnFlagUntilTimeout+0xe>
 8002a88:	e7e4      	b.n	8002a54 <UART_WaitOnFlagUntilTimeout+0x2c>

08002a8a <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002a8a:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8002a8e:	6802      	ldr	r2, [r0, #0]
 8002a90:	2b22      	cmp	r3, #34	; 0x22
{
 8002a92:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002a94:	d12a      	bne.n	8002aec <UART_Receive_IT+0x62>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a96:	6883      	ldr	r3, [r0, #8]
  uint16_t uhMask = huart->Mask;
 8002a98:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002aa0:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002aa2:	d11d      	bne.n	8002ae0 <UART_Receive_IT+0x56>
 8002aa4:	6904      	ldr	r4, [r0, #16]
 8002aa6:	b9dc      	cbnz	r4, 8002ae0 <UART_Receive_IT+0x56>
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8002aa8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002aaa:	4011      	ands	r1, r2
 8002aac:	f823 1b02 	strh.w	r1, [r3], #2
      huart->pRxBuffPtr +=2;
 8002ab0:	6543      	str	r3, [r0, #84]	; 0x54
    if(--huart->RxXferCount == 0)
 8002ab2:	f8b0 405a 	ldrh.w	r4, [r0, #90]	; 0x5a
 8002ab6:	3c01      	subs	r4, #1
 8002ab8:	b2a4      	uxth	r4, r4
 8002aba:	f8a0 405a 	strh.w	r4, [r0, #90]	; 0x5a
 8002abe:	b96c      	cbnz	r4, 8002adc <UART_Receive_IT+0x52>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ac0:	6803      	ldr	r3, [r0, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002ac8:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002aca:	689a      	ldr	r2, [r3, #8]
 8002acc:	f022 0201 	bic.w	r2, r2, #1
 8002ad0:	609a      	str	r2, [r3, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8002ad2:	2320      	movs	r3, #32
 8002ad4:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
      HAL_UART_RxCpltCallback(huart);
 8002ad8:	f004 fb88 	bl	80071ec <HAL_UART_RxCpltCallback>
    return HAL_OK;
 8002adc:	2000      	movs	r0, #0
}
 8002ade:	bd10      	pop	{r4, pc}
      *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002ae0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ae2:	1c5c      	adds	r4, r3, #1
 8002ae4:	4011      	ands	r1, r2
 8002ae6:	6544      	str	r4, [r0, #84]	; 0x54
 8002ae8:	7019      	strb	r1, [r3, #0]
 8002aea:	e7e2      	b.n	8002ab2 <UART_Receive_IT+0x28>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002aec:	6993      	ldr	r3, [r2, #24]
    return HAL_BUSY;
 8002aee:	2002      	movs	r0, #2
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002af0:	f043 0308 	orr.w	r3, r3, #8
 8002af4:	6193      	str	r3, [r2, #24]
    return HAL_BUSY;
 8002af6:	bd10      	pop	{r4, pc}

08002af8 <HAL_UART_ErrorCallback>:
{
 8002af8:	4770      	bx	lr
	...

08002afc <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002afc:	6803      	ldr	r3, [r0, #0]
 8002afe:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b00:	6819      	ldr	r1, [r3, #0]
{
 8002b02:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 8002b04:	0716      	lsls	r6, r2, #28
{
 8002b06:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b08:	689d      	ldr	r5, [r3, #8]
  if (errorflags == RESET)
 8002b0a:	d107      	bne.n	8002b1c <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b0c:	0695      	lsls	r5, r2, #26
 8002b0e:	d563      	bpl.n	8002bd8 <HAL_UART_IRQHandler+0xdc>
 8002b10:	068e      	lsls	r6, r1, #26
 8002b12:	d561      	bpl.n	8002bd8 <HAL_UART_IRQHandler+0xdc>
}
 8002b14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8002b18:	f7ff bfb7 	b.w	8002a8a <UART_Receive_IT>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 8002b1c:	f015 0001 	ands.w	r0, r5, #1
 8002b20:	d102      	bne.n	8002b28 <HAL_UART_IRQHandler+0x2c>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8002b22:	f411 7f90 	tst.w	r1, #288	; 0x120
 8002b26:	d057      	beq.n	8002bd8 <HAL_UART_IRQHandler+0xdc>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002b28:	07d5      	lsls	r5, r2, #31
 8002b2a:	d507      	bpl.n	8002b3c <HAL_UART_IRQHandler+0x40>
 8002b2c:	05ce      	lsls	r6, r1, #23
 8002b2e:	d505      	bpl.n	8002b3c <HAL_UART_IRQHandler+0x40>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8002b30:	2501      	movs	r5, #1
 8002b32:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b34:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8002b36:	f045 0501 	orr.w	r5, r5, #1
 8002b3a:	66e5      	str	r5, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b3c:	0795      	lsls	r5, r2, #30
 8002b3e:	d506      	bpl.n	8002b4e <HAL_UART_IRQHandler+0x52>
 8002b40:	b128      	cbz	r0, 8002b4e <HAL_UART_IRQHandler+0x52>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8002b42:	2502      	movs	r5, #2
 8002b44:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b46:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8002b48:	f045 0504 	orr.w	r5, r5, #4
 8002b4c:	66e5      	str	r5, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b4e:	0756      	lsls	r6, r2, #29
 8002b50:	d506      	bpl.n	8002b60 <HAL_UART_IRQHandler+0x64>
 8002b52:	b128      	cbz	r0, 8002b60 <HAL_UART_IRQHandler+0x64>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8002b54:	2504      	movs	r5, #4
 8002b56:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b58:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8002b5a:	f045 0502 	orr.w	r5, r5, #2
 8002b5e:	66e5      	str	r5, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8002b60:	0715      	lsls	r5, r2, #28
 8002b62:	d507      	bpl.n	8002b74 <HAL_UART_IRQHandler+0x78>
 8002b64:	068e      	lsls	r6, r1, #26
 8002b66:	d400      	bmi.n	8002b6a <HAL_UART_IRQHandler+0x6e>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002b68:	b120      	cbz	r0, 8002b74 <HAL_UART_IRQHandler+0x78>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8002b6a:	2008      	movs	r0, #8
 8002b6c:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b6e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8002b70:	4303      	orrs	r3, r0
 8002b72:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b74:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d06a      	beq.n	8002c50 <HAL_UART_IRQHandler+0x154>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b7a:	0695      	lsls	r5, r2, #26
 8002b7c:	d504      	bpl.n	8002b88 <HAL_UART_IRQHandler+0x8c>
 8002b7e:	0688      	lsls	r0, r1, #26
 8002b80:	d502      	bpl.n	8002b88 <HAL_UART_IRQHandler+0x8c>
        UART_Receive_IT(huart);
 8002b82:	4620      	mov	r0, r4
 8002b84:	f7ff ff81 	bl	8002a8a <UART_Receive_IT>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002b88:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
        UART_EndRxTransfer(huart);
 8002b8a:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002b8c:	0719      	lsls	r1, r3, #28
 8002b8e:	d404      	bmi.n	8002b9a <HAL_UART_IRQHandler+0x9e>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8002b90:	6823      	ldr	r3, [r4, #0]
 8002b92:	689d      	ldr	r5, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002b94:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8002b98:	d01a      	beq.n	8002bd0 <HAL_UART_IRQHandler+0xd4>
        UART_EndRxTransfer(huart);
 8002b9a:	f7ff fed3 	bl	8002944 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b9e:	6823      	ldr	r3, [r4, #0]
 8002ba0:	689a      	ldr	r2, [r3, #8]
 8002ba2:	0652      	lsls	r2, r2, #25
 8002ba4:	d510      	bpl.n	8002bc8 <HAL_UART_IRQHandler+0xcc>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ba6:	689a      	ldr	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8002ba8:	6e60      	ldr	r0, [r4, #100]	; 0x64
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002baa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bae:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8002bb0:	b150      	cbz	r0, 8002bc8 <HAL_UART_IRQHandler+0xcc>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002bb2:	4b28      	ldr	r3, [pc, #160]	; (8002c54 <HAL_UART_IRQHandler+0x158>)
 8002bb4:	6503      	str	r3, [r0, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002bb6:	f7fd fe07 	bl	80007c8 <HAL_DMA_Abort_IT>
 8002bba:	2800      	cmp	r0, #0
 8002bbc:	d048      	beq.n	8002c50 <HAL_UART_IRQHandler+0x154>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002bbe:	6e60      	ldr	r0, [r4, #100]	; 0x64
}
 8002bc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002bc4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002bc6:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8002bc8:	4620      	mov	r0, r4
 8002bca:	f7ff ff95 	bl	8002af8 <HAL_UART_ErrorCallback>
 8002bce:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8002bd0:	f7ff ff92 	bl	8002af8 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bd4:	66e5      	str	r5, [r4, #108]	; 0x6c
 8002bd6:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002bd8:	0616      	lsls	r6, r2, #24
 8002bda:	d52b      	bpl.n	8002c34 <HAL_UART_IRQHandler+0x138>
 8002bdc:	060d      	lsls	r5, r1, #24
 8002bde:	d529      	bpl.n	8002c34 <HAL_UART_IRQHandler+0x138>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002be0:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
 8002be4:	2a21      	cmp	r2, #33	; 0x21
 8002be6:	d133      	bne.n	8002c50 <HAL_UART_IRQHandler+0x154>
    if(huart->TxXferCount == 0U)
 8002be8:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8002bec:	b292      	uxth	r2, r2
 8002bee:	b942      	cbnz	r2, 8002c02 <HAL_UART_IRQHandler+0x106>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bf6:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bfe:	601a      	str	r2, [r3, #0]
 8002c00:	bd70      	pop	{r4, r5, r6, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c02:	68a2      	ldr	r2, [r4, #8]
 8002c04:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002c08:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8002c0a:	d10e      	bne.n	8002c2a <HAL_UART_IRQHandler+0x12e>
 8002c0c:	6921      	ldr	r1, [r4, #16]
 8002c0e:	b961      	cbnz	r1, 8002c2a <HAL_UART_IRQHandler+0x12e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8002c10:	f832 1b02 	ldrh.w	r1, [r2], #2
 8002c14:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8002c18:	6299      	str	r1, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8002c1a:	64e2      	str	r2, [r4, #76]	; 0x4c
      huart->TxXferCount--;
 8002c1c:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8002c20:	3b01      	subs	r3, #1
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8002c28:	bd70      	pop	{r4, r5, r6, pc}
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 8002c2a:	1c51      	adds	r1, r2, #1
 8002c2c:	64e1      	str	r1, [r4, #76]	; 0x4c
 8002c2e:	7812      	ldrb	r2, [r2, #0]
 8002c30:	629a      	str	r2, [r3, #40]	; 0x28
 8002c32:	e7f3      	b.n	8002c1c <HAL_UART_IRQHandler+0x120>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002c34:	0650      	lsls	r0, r2, #25
 8002c36:	d50b      	bpl.n	8002c50 <HAL_UART_IRQHandler+0x154>
 8002c38:	064a      	lsls	r2, r1, #25
 8002c3a:	d509      	bpl.n	8002c50 <HAL_UART_IRQHandler+0x154>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002c3c:	681a      	ldr	r2, [r3, #0]
  HAL_UART_TxCpltCallback(huart);
 8002c3e:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002c40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c44:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8002c46:	2320      	movs	r3, #32
 8002c48:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  HAL_UART_TxCpltCallback(huart);
 8002c4c:	f004 fa98 	bl	8007180 <HAL_UART_TxCpltCallback>
 8002c50:	bd70      	pop	{r4, r5, r6, pc}
 8002c52:	bf00      	nop
 8002c54:	08002c59 	.word	0x08002c59

08002c58 <UART_DMAAbortOnError>:
{
 8002c58:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8002c5a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8002c62:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 8002c66:	f7ff ff47 	bl	8002af8 <HAL_UART_ErrorCallback>
 8002c6a:	bd08      	pop	{r3, pc}

08002c6c <UART_SetConfig>:
  * @brief Configure the UART peripheral
  * @param huart uart handle
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c6c:	b538      	push	{r3, r4, r5, lr}
 8002c6e:	4604      	mov	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002c70:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c72:	69c3      	ldr	r3, [r0, #28]
 8002c74:	6921      	ldr	r1, [r4, #16]
 8002c76:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002c78:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	6961      	ldr	r1, [r4, #20]
 8002c7e:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002c80:	4993      	ldr	r1, [pc, #588]	; (8002ed0 <UART_SetConfig+0x264>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c82:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002c84:	4001      	ands	r1, r0
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002c86:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002c88:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c8a:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002c8c:	602a      	str	r2, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c8e:	686a      	ldr	r2, [r5, #4]
 8002c90:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002c94:	430a      	orrs	r2, r1
 8002c96:	606a      	str	r2, [r5, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002c98:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002c9a:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002c9c:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002c9e:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	60aa      	str	r2, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ca6:	4a8b      	ldr	r2, [pc, #556]	; (8002ed4 <UART_SetConfig+0x268>)
 8002ca8:	4295      	cmp	r5, r2
 8002caa:	d119      	bne.n	8002ce0 <UART_SetConfig+0x74>
 8002cac:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8002cb0:	4989      	ldr	r1, [pc, #548]	; (8002ed8 <UART_SetConfig+0x26c>)
 8002cb2:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8002cb6:	f002 0203 	and.w	r2, r2, #3

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cbe:	5c8a      	ldrb	r2, [r1, r2]
 8002cc0:	f040 80b3 	bne.w	8002e2a <UART_SetConfig+0x1be>
  {
    switch (clocksource)
 8002cc4:	2a08      	cmp	r2, #8
 8002cc6:	f200 80ad 	bhi.w	8002e24 <UART_SetConfig+0x1b8>
 8002cca:	e8df f012 	tbh	[pc, r2, lsl #1]
 8002cce:	0026      	.short	0x0026
 8002cd0:	00e9007b 	.word	0x00e9007b
 8002cd4:	00f500ab 	.word	0x00f500ab
 8002cd8:	00ab00ab 	.word	0x00ab00ab
 8002cdc:	00fb00ab 	.word	0x00fb00ab
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ce0:	4a7e      	ldr	r2, [pc, #504]	; (8002edc <UART_SetConfig+0x270>)
 8002ce2:	4295      	cmp	r5, r2
 8002ce4:	d107      	bne.n	8002cf6 <UART_SetConfig+0x8a>
 8002ce6:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 8002cea:	497d      	ldr	r1, [pc, #500]	; (8002ee0 <UART_SetConfig+0x274>)
 8002cec:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8002cf0:	f002 020c 	and.w	r2, r2, #12
 8002cf4:	e7e1      	b.n	8002cba <UART_SetConfig+0x4e>
 8002cf6:	4a7b      	ldr	r2, [pc, #492]	; (8002ee4 <UART_SetConfig+0x278>)
 8002cf8:	4295      	cmp	r5, r2
 8002cfa:	d12b      	bne.n	8002d54 <UART_SetConfig+0xe8>
 8002cfc:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
 8002d00:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8002d04:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8002d08:	2a10      	cmp	r2, #16
 8002d0a:	f000 80d2 	beq.w	8002eb2 <UART_SetConfig+0x246>
 8002d0e:	d816      	bhi.n	8002d3e <UART_SetConfig+0xd2>
 8002d10:	b9da      	cbnz	r2, 8002d4a <UART_SetConfig+0xde>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d16:	f040 809f 	bne.w	8002e58 <UART_SetConfig+0x1ec>
    {
    case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002d1a:	f7fe ff0d 	bl	8001b38 <HAL_RCC_GetPCLK1Freq>
      break;
    case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002d1e:	6861      	ldr	r1, [r4, #4]
 8002d20:	084a      	lsrs	r2, r1, #1
 8002d22:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8002d26:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d2a:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d2c:	2000      	movs	r0, #0
    default:
        ret = HAL_ERROR;
      break;
    }

    brrtemp = usartdiv & 0xFFF0U;
 8002d2e:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d32:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 8002d36:	6821      	ldr	r1, [r4, #0]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	60cb      	str	r3, [r1, #12]
 8002d3c:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d3e:	2a20      	cmp	r2, #32
 8002d40:	f000 80ab 	beq.w	8002e9a <UART_SetConfig+0x22e>
 8002d44:	2a30      	cmp	r2, #48	; 0x30
 8002d46:	f000 80ba 	beq.w	8002ebe <UART_SetConfig+0x252>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d4e:	d069      	beq.n	8002e24 <UART_SetConfig+0x1b8>
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
      break;
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8002d50:	2001      	movs	r0, #1
    }
  }

  return ret;

}
 8002d52:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d54:	4a64      	ldr	r2, [pc, #400]	; (8002ee8 <UART_SetConfig+0x27c>)
 8002d56:	4295      	cmp	r5, r2
 8002d58:	d10e      	bne.n	8002d78 <UART_SetConfig+0x10c>
 8002d5a:	f502 32f6 	add.w	r2, r2, #125952	; 0x1ec00
 8002d5e:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8002d62:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8002d66:	2a40      	cmp	r2, #64	; 0x40
 8002d68:	f000 80a3 	beq.w	8002eb2 <UART_SetConfig+0x246>
 8002d6c:	d9d0      	bls.n	8002d10 <UART_SetConfig+0xa4>
 8002d6e:	2a80      	cmp	r2, #128	; 0x80
 8002d70:	f000 8093 	beq.w	8002e9a <UART_SetConfig+0x22e>
 8002d74:	2ac0      	cmp	r2, #192	; 0xc0
 8002d76:	e7e6      	b.n	8002d46 <UART_SetConfig+0xda>
 8002d78:	4a5c      	ldr	r2, [pc, #368]	; (8002eec <UART_SetConfig+0x280>)
 8002d7a:	4295      	cmp	r5, r2
 8002d7c:	d110      	bne.n	8002da0 <UART_SetConfig+0x134>
 8002d7e:	f502 32f4 	add.w	r2, r2, #124928	; 0x1e800
 8002d82:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8002d86:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002d8a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8002d8e:	f000 8090 	beq.w	8002eb2 <UART_SetConfig+0x246>
 8002d92:	d9bd      	bls.n	8002d10 <UART_SetConfig+0xa4>
 8002d94:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8002d98:	d07f      	beq.n	8002e9a <UART_SetConfig+0x22e>
 8002d9a:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8002d9e:	e7d2      	b.n	8002d46 <UART_SetConfig+0xda>
 8002da0:	4a53      	ldr	r2, [pc, #332]	; (8002ef0 <UART_SetConfig+0x284>)
 8002da2:	4295      	cmp	r5, r2
 8002da4:	d117      	bne.n	8002dd6 <UART_SetConfig+0x16a>
 8002da6:	f502 3292 	add.w	r2, r2, #74752	; 0x12400
 8002daa:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8002dae:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8002db2:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002db6:	d07c      	beq.n	8002eb2 <UART_SetConfig+0x246>
 8002db8:	d807      	bhi.n	8002dca <UART_SetConfig+0x15e>
 8002dba:	2a00      	cmp	r2, #0
 8002dbc:	d1c5      	bne.n	8002d4a <UART_SetConfig+0xde>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002dbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dc2:	d154      	bne.n	8002e6e <UART_SetConfig+0x202>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002dc4:	f7fe fec8 	bl	8001b58 <HAL_RCC_GetPCLK2Freq>
 8002dc8:	e7a9      	b.n	8002d1e <UART_SetConfig+0xb2>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002dca:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8002dce:	d064      	beq.n	8002e9a <UART_SetConfig+0x22e>
 8002dd0:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8002dd4:	e7b7      	b.n	8002d46 <UART_SetConfig+0xda>
 8002dd6:	4a47      	ldr	r2, [pc, #284]	; (8002ef4 <UART_SetConfig+0x288>)
 8002dd8:	4295      	cmp	r5, r2
 8002dda:	d10f      	bne.n	8002dfc <UART_SetConfig+0x190>
 8002ddc:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 8002de0:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8002de4:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 8002de8:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002dec:	d061      	beq.n	8002eb2 <UART_SetConfig+0x246>
 8002dee:	d98f      	bls.n	8002d10 <UART_SetConfig+0xa4>
 8002df0:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002df4:	d051      	beq.n	8002e9a <UART_SetConfig+0x22e>
 8002df6:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 8002dfa:	e7a4      	b.n	8002d46 <UART_SetConfig+0xda>
 8002dfc:	4a3e      	ldr	r2, [pc, #248]	; (8002ef8 <UART_SetConfig+0x28c>)
 8002dfe:	4295      	cmp	r5, r2
 8002e00:	d1a3      	bne.n	8002d4a <UART_SetConfig+0xde>
 8002e02:	f502 32de 	add.w	r2, r2, #113664	; 0x1bc00
 8002e06:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8002e0a:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8002e0e:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8002e12:	d04e      	beq.n	8002eb2 <UART_SetConfig+0x246>
 8002e14:	f67f af7c 	bls.w	8002d10 <UART_SetConfig+0xa4>
 8002e18:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002e1c:	d03d      	beq.n	8002e9a <UART_SetConfig+0x22e>
 8002e1e:	f5b2 4f40 	cmp.w	r2, #49152	; 0xc000
 8002e22:	e790      	b.n	8002d46 <UART_SetConfig+0xda>
        ret = HAL_ERROR;
 8002e24:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8002e26:	2300      	movs	r3, #0
 8002e28:	e781      	b.n	8002d2e <UART_SetConfig+0xc2>
    switch (clocksource)
 8002e2a:	2a08      	cmp	r2, #8
 8002e2c:	d890      	bhi.n	8002d50 <UART_SetConfig+0xe4>
 8002e2e:	a301      	add	r3, pc, #4	; (adr r3, 8002e34 <UART_SetConfig+0x1c8>)
 8002e30:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8002e34:	08002e59 	.word	0x08002e59
 8002e38:	08002e6f 	.word	0x08002e6f
 8002e3c:	08002e75 	.word	0x08002e75
 8002e40:	08002d51 	.word	0x08002d51
 8002e44:	08002e8b 	.word	0x08002e8b
 8002e48:	08002d51 	.word	0x08002d51
 8002e4c:	08002d51 	.word	0x08002d51
 8002e50:	08002d51 	.word	0x08002d51
 8002e54:	08002e91 	.word	0x08002e91
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002e58:	f7fe fe6e 	bl	8001b38 <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002e5c:	6863      	ldr	r3, [r4, #4]
 8002e5e:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002e62:	fbb0 f0f3 	udiv	r0, r0, r3
 8002e66:	b280      	uxth	r0, r0
 8002e68:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e6a:	2000      	movs	r0, #0
      break;
 8002e6c:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002e6e:	f7fe fe73 	bl	8001b58 <HAL_RCC_GetPCLK2Freq>
 8002e72:	e7f3      	b.n	8002e5c <UART_SetConfig+0x1f0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002e74:	6862      	ldr	r2, [r4, #4]
 8002e76:	0853      	lsrs	r3, r2, #1
 8002e78:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002e7c:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002e80:	fbb3 f3f2 	udiv	r3, r3, r2
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	60eb      	str	r3, [r5, #12]
 8002e88:	e7ef      	b.n	8002e6a <UART_SetConfig+0x1fe>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002e8a:	f7fe fd83 	bl	8001994 <HAL_RCC_GetSysClockFreq>
 8002e8e:	e7e5      	b.n	8002e5c <UART_SetConfig+0x1f0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002e90:	6862      	ldr	r2, [r4, #4]
 8002e92:	0853      	lsrs	r3, r2, #1
 8002e94:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002e98:	e7f2      	b.n	8002e80 <UART_SetConfig+0x214>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e9e:	d1e9      	bne.n	8002e74 <UART_SetConfig+0x208>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002ea0:	6860      	ldr	r0, [r4, #4]
 8002ea2:	0843      	lsrs	r3, r0, #1
 8002ea4:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8002ea8:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002eac:	fbb3 f3f0 	udiv	r3, r3, r0
 8002eb0:	e73b      	b.n	8002d2a <UART_SetConfig+0xbe>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002eb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002eb6:	d1e8      	bne.n	8002e8a <UART_SetConfig+0x21e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002eb8:	f7fe fd6c 	bl	8001994 <HAL_RCC_GetSysClockFreq>
 8002ebc:	e72f      	b.n	8002d1e <UART_SetConfig+0xb2>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ebe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ec2:	d1e5      	bne.n	8002e90 <UART_SetConfig+0x224>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002ec4:	6860      	ldr	r0, [r4, #4]
 8002ec6:	0843      	lsrs	r3, r0, #1
 8002ec8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002ecc:	e7ee      	b.n	8002eac <UART_SetConfig+0x240>
 8002ece:	bf00      	nop
 8002ed0:	efff69f3 	.word	0xefff69f3
 8002ed4:	40011000 	.word	0x40011000
 8002ed8:	08007514 	.word	0x08007514
 8002edc:	40004400 	.word	0x40004400
 8002ee0:	08007518 	.word	0x08007518
 8002ee4:	40004800 	.word	0x40004800
 8002ee8:	40004c00 	.word	0x40004c00
 8002eec:	40005000 	.word	0x40005000
 8002ef0:	40011400 	.word	0x40011400
 8002ef4:	40007800 	.word	0x40007800
 8002ef8:	40007c00 	.word	0x40007c00

08002efc <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002efc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002efe:	07da      	lsls	r2, r3, #31
{
 8002f00:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002f02:	d506      	bpl.n	8002f12 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002f04:	6801      	ldr	r1, [r0, #0]
 8002f06:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002f08:	684a      	ldr	r2, [r1, #4]
 8002f0a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002f0e:	4322      	orrs	r2, r4
 8002f10:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002f12:	079c      	lsls	r4, r3, #30
 8002f14:	d506      	bpl.n	8002f24 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002f16:	6801      	ldr	r1, [r0, #0]
 8002f18:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002f1a:	684a      	ldr	r2, [r1, #4]
 8002f1c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002f20:	4322      	orrs	r2, r4
 8002f22:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002f24:	0759      	lsls	r1, r3, #29
 8002f26:	d506      	bpl.n	8002f36 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002f28:	6801      	ldr	r1, [r0, #0]
 8002f2a:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002f2c:	684a      	ldr	r2, [r1, #4]
 8002f2e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f32:	4322      	orrs	r2, r4
 8002f34:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002f36:	071a      	lsls	r2, r3, #28
 8002f38:	d506      	bpl.n	8002f48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002f3a:	6801      	ldr	r1, [r0, #0]
 8002f3c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002f3e:	684a      	ldr	r2, [r1, #4]
 8002f40:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f44:	4322      	orrs	r2, r4
 8002f46:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002f48:	06dc      	lsls	r4, r3, #27
 8002f4a:	d506      	bpl.n	8002f5a <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002f4c:	6801      	ldr	r1, [r0, #0]
 8002f4e:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002f50:	688a      	ldr	r2, [r1, #8]
 8002f52:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002f56:	4322      	orrs	r2, r4
 8002f58:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002f5a:	0699      	lsls	r1, r3, #26
 8002f5c:	d506      	bpl.n	8002f6c <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002f5e:	6801      	ldr	r1, [r0, #0]
 8002f60:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002f62:	688a      	ldr	r2, [r1, #8]
 8002f64:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f68:	4322      	orrs	r2, r4
 8002f6a:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f6c:	065a      	lsls	r2, r3, #25
 8002f6e:	d510      	bpl.n	8002f92 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f70:	6801      	ldr	r1, [r0, #0]
 8002f72:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002f74:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f76:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f7a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002f7e:	ea42 0204 	orr.w	r2, r2, r4
 8002f82:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f84:	d105      	bne.n	8002f92 <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f86:	684a      	ldr	r2, [r1, #4]
 8002f88:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002f8a:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8002f8e:	4322      	orrs	r2, r4
 8002f90:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f92:	061b      	lsls	r3, r3, #24
 8002f94:	d506      	bpl.n	8002fa4 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002f96:	6802      	ldr	r2, [r0, #0]
 8002f98:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002f9a:	6853      	ldr	r3, [r2, #4]
 8002f9c:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002fa0:	430b      	orrs	r3, r1
 8002fa2:	6053      	str	r3, [r2, #4]
 8002fa4:	bd10      	pop	{r4, pc}

08002fa6 <UART_CheckIdleState>:
  * @brief Check the UART Idle State
  * @param huart uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002fa6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fa8:	2500      	movs	r5, #0
{
 8002faa:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fac:	66c5      	str	r5, [r0, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002fae:	f7fd fae7 	bl	8000580 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002fb2:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 8002fb4:	4603      	mov	r3, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002fb6:	6812      	ldr	r2, [r2, #0]
 8002fb8:	0712      	lsls	r2, r2, #28
 8002fba:	d409      	bmi.n	8002fd0 <UART_CheckIdleState+0x2a>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 8002fbc:	2320      	movs	r3, #32
  huart->RxState= HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002fbe:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8002fc0:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8002fc4:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState= HAL_UART_STATE_READY;
 8002fc8:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

  return HAL_OK;
}
 8002fcc:	b003      	add	sp, #12
 8002fce:	bd30      	pop	{r4, r5, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002fd0:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8002fd4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002fd8:	4620      	mov	r0, r4
 8002fda:	9200      	str	r2, [sp, #0]
 8002fdc:	462a      	mov	r2, r5
 8002fde:	f7ff fd23 	bl	8002a28 <UART_WaitOnFlagUntilTimeout>
 8002fe2:	2800      	cmp	r0, #0
 8002fe4:	d0ea      	beq.n	8002fbc <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8002fe6:	2003      	movs	r0, #3
 8002fe8:	e7f0      	b.n	8002fcc <UART_CheckIdleState+0x26>

08002fea <HAL_UART_Init>:
{
 8002fea:	b510      	push	{r4, lr}
  if(huart == NULL)
 8002fec:	4604      	mov	r4, r0
 8002fee:	b360      	cbz	r0, 800304a <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 8002ff0:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8002ff4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002ff8:	b91b      	cbnz	r3, 8003002 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002ffa:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8002ffe:	f003 fcfd 	bl	80069fc <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8003002:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003004:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003006:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8003008:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 800300c:	6813      	ldr	r3, [r2, #0]
 800300e:	f023 0301 	bic.w	r3, r3, #1
 8003012:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003014:	f7ff fe2a 	bl	8002c6c <UART_SetConfig>
 8003018:	2801      	cmp	r0, #1
 800301a:	d016      	beq.n	800304a <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800301c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800301e:	b113      	cbz	r3, 8003026 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8003020:	4620      	mov	r0, r4
 8003022:	f7ff ff6b 	bl	8002efc <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003026:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8003028:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800302a:	685a      	ldr	r2, [r3, #4]
 800302c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003030:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003032:	689a      	ldr	r2, [r3, #8]
 8003034:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003038:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	f042 0201 	orr.w	r2, r2, #1
}
 8003040:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8003044:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8003046:	f7ff bfae 	b.w	8002fa6 <UART_CheckIdleState>
}
 800304a:	2001      	movs	r0, #1
 800304c:	bd10      	pop	{r4, pc}
	...

08003050 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003050:	4b0a      	ldr	r3, [pc, #40]	; (800307c <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003052:	3b01      	subs	r3, #1
 8003054:	d101      	bne.n	800305a <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 8003056:	2003      	movs	r0, #3
 8003058:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800305a:	6902      	ldr	r2, [r0, #16]
 800305c:	2a00      	cmp	r2, #0
 800305e:	daf8      	bge.n	8003052 <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003060:	6903      	ldr	r3, [r0, #16]
 8003062:	4a06      	ldr	r2, [pc, #24]	; (800307c <USB_CoreReset+0x2c>)
 8003064:	f043 0301 	orr.w	r3, r3, #1
 8003068:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 800306a:	3a01      	subs	r2, #1
 800306c:	d0f3      	beq.n	8003056 <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800306e:	6903      	ldr	r3, [r0, #16]
 8003070:	f013 0301 	ands.w	r3, r3, #1
 8003074:	d1f9      	bne.n	800306a <USB_CoreReset+0x1a>

  return HAL_OK;
 8003076:	4618      	mov	r0, r3
}
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	00030d41 	.word	0x00030d41

08003080 <USB_CoreInit>:
{
 8003080:	b084      	sub	sp, #16
 8003082:	b538      	push	{r3, r4, r5, lr}
 8003084:	ad05      	add	r5, sp, #20
 8003086:	4604      	mov	r4, r0
 8003088:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800308c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800308e:	2b01      	cmp	r3, #1
 8003090:	d127      	bne.n	80030e2 <USB_CoreInit+0x62>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003092:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003094:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003098:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800309a:	68c3      	ldr	r3, [r0, #12]
 800309c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80030a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030a4:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80030a6:	68c3      	ldr	r3, [r0, #12]
 80030a8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80030ac:	60c3      	str	r3, [r0, #12]
    if(cfg.use_external_vbus == 1U)
 80030ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d103      	bne.n	80030bc <USB_CoreInit+0x3c>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80030b4:	68c3      	ldr	r3, [r0, #12]
 80030b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030ba:	60c3      	str	r3, [r0, #12]
    (void)USB_CoreReset(USBx);
 80030bc:	4620      	mov	r0, r4
 80030be:	f7ff ffc7 	bl	8003050 <USB_CoreReset>
  if(cfg.dma_enable == 1U)
 80030c2:	9b08      	ldr	r3, [sp, #32]
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d107      	bne.n	80030d8 <USB_CoreInit+0x58>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80030c8:	68a3      	ldr	r3, [r4, #8]
 80030ca:	f043 0306 	orr.w	r3, r3, #6
 80030ce:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80030d0:	68a3      	ldr	r3, [r4, #8]
 80030d2:	f043 0320 	orr.w	r3, r3, #32
 80030d6:	60a3      	str	r3, [r4, #8]
}
 80030d8:	2000      	movs	r0, #0
 80030da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80030de:	b004      	add	sp, #16
 80030e0:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80030e2:	68c3      	ldr	r3, [r0, #12]
 80030e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030e8:	60c3      	str	r3, [r0, #12]
    (void)USB_CoreReset(USBx);
 80030ea:	f7ff ffb1 	bl	8003050 <USB_CoreReset>
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 80030ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030f2:	63a3      	str	r3, [r4, #56]	; 0x38
 80030f4:	e7e5      	b.n	80030c2 <USB_CoreInit+0x42>

080030f6 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80030f6:	6883      	ldr	r3, [r0, #8]
 80030f8:	f043 0301 	orr.w	r3, r3, #1
 80030fc:	6083      	str	r3, [r0, #8]
}
 80030fe:	2000      	movs	r0, #0
 8003100:	4770      	bx	lr

08003102 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003102:	6883      	ldr	r3, [r0, #8]
 8003104:	f023 0301 	bic.w	r3, r3, #1
 8003108:	6083      	str	r3, [r0, #8]
}
 800310a:	2000      	movs	r0, #0
 800310c:	4770      	bx	lr

0800310e <USB_SetCurrentMode>:
{
 800310e:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003110:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8003112:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003114:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003118:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800311a:	d108      	bne.n	800312e <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800311c:	68c3      	ldr	r3, [r0, #12]
 800311e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003122:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 8003124:	2032      	movs	r0, #50	; 0x32
 8003126:	f7fd fa31 	bl	800058c <HAL_Delay>
  return HAL_OK;
 800312a:	2000      	movs	r0, #0
 800312c:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 800312e:	b919      	cbnz	r1, 8003138 <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003130:	68c3      	ldr	r3, [r0, #12]
 8003132:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003136:	e7f4      	b.n	8003122 <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 8003138:	2001      	movs	r0, #1
}
 800313a:	bd08      	pop	{r3, pc}

0800313c <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800313c:	0189      	lsls	r1, r1, #6
 800313e:	4a07      	ldr	r2, [pc, #28]	; (800315c <USB_FlushTxFifo+0x20>)
 8003140:	f041 0120 	orr.w	r1, r1, #32
 8003144:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 8003146:	3a01      	subs	r2, #1
 8003148:	d005      	beq.n	8003156 <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800314a:	6903      	ldr	r3, [r0, #16]
 800314c:	f013 0320 	ands.w	r3, r3, #32
 8003150:	d1f9      	bne.n	8003146 <USB_FlushTxFifo+0xa>
  return HAL_OK;
 8003152:	4618      	mov	r0, r3
 8003154:	4770      	bx	lr
      return HAL_TIMEOUT;
 8003156:	2003      	movs	r0, #3
}
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	00030d41 	.word	0x00030d41

08003160 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003160:	2310      	movs	r3, #16
 8003162:	4a06      	ldr	r2, [pc, #24]	; (800317c <USB_FlushRxFifo+0x1c>)
 8003164:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 8003166:	3a01      	subs	r2, #1
 8003168:	d005      	beq.n	8003176 <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800316a:	6903      	ldr	r3, [r0, #16]
 800316c:	f013 0310 	ands.w	r3, r3, #16
 8003170:	d1f9      	bne.n	8003166 <USB_FlushRxFifo+0x6>
  return HAL_OK;
 8003172:	4618      	mov	r0, r3
 8003174:	4770      	bx	lr
      return HAL_TIMEOUT;
 8003176:	2003      	movs	r0, #3
}
 8003178:	4770      	bx	lr
 800317a:	bf00      	nop
 800317c:	00030d41 	.word	0x00030d41

08003180 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8003180:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8003184:	4319      	orrs	r1, r3
 8003186:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 800318a:	2000      	movs	r0, #0
 800318c:	4770      	bx	lr
	...

08003190 <USB_DevInit>:
{
 8003190:	b084      	sub	sp, #16
 8003192:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003196:	4604      	mov	r4, r0
 8003198:	a809      	add	r0, sp, #36	; 0x24
 800319a:	4688      	mov	r8, r1
 800319c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 80031a0:	2300      	movs	r3, #0
 80031a2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80031a4:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80031a6:	990e      	ldr	r1, [sp, #56]	; 0x38
    USBx->DIEPTXF[i] = 0U;
 80031a8:	461d      	mov	r5, r3
 80031aa:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80031ac:	f103 0040 	add.w	r0, r3, #64	; 0x40
  for (i = 0U; i < 15U; i++)
 80031b0:	3301      	adds	r3, #1
    USBx->DIEPTXF[i] = 0U;
 80031b2:	eb04 0080 	add.w	r0, r4, r0, lsl #2
  for (i = 0U; i < 15U; i++)
 80031b6:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 80031b8:	6045      	str	r5, [r0, #4]
  for (i = 0U; i < 15U; i++)
 80031ba:	d1f7      	bne.n	80031ac <USB_DevInit+0x1c>
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80031bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80031be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80031c2:	63a3      	str	r3, [r4, #56]	; 0x38
  if (cfg.vbus_sensing_enable == 0U)
 80031c4:	b95e      	cbnz	r6, 80031de <USB_DevInit+0x4e>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80031c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80031c8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80031cc:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80031ce:	6823      	ldr	r3, [r4, #0]
 80031d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031d4:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80031d6:	6823      	ldr	r3, [r4, #0]
 80031d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031dc:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 80031de:	2300      	movs	r3, #0
  if(cfg.phy_itface == USB_OTG_ULPI_PHY)
 80031e0:	2901      	cmp	r1, #1
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80031e2:	f504 6500 	add.w	r5, r4, #2048	; 0x800
  USBx_PCGCCTL = 0U;
 80031e6:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80031ea:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 80031ee:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if(cfg.phy_itface == USB_OTG_ULPI_PHY)
 80031f2:	d158      	bne.n	80032a6 <USB_DevInit+0x116>
    if(cfg.speed == USB_OTG_SPEED_HIGH)
 80031f4:	2a00      	cmp	r2, #0
 80031f6:	d154      	bne.n	80032a2 <USB_DevInit+0x112>
      (void)USB_SetDevSpeed (USBx, USB_OTG_SPEED_HIGH);
 80031f8:	2100      	movs	r1, #0
    (void)USB_SetDevSpeed (USBx, USB_OTG_SPEED_FULL);
 80031fa:	4620      	mov	r0, r4
 80031fc:	f7ff ffc0 	bl	8003180 <USB_SetDevSpeed>
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8003200:	2110      	movs	r1, #16
 8003202:	4620      	mov	r0, r4
 8003204:	f7ff ff9a 	bl	800313c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8003208:	4620      	mov	r0, r4
 800320a:	f7ff ffa9 	bl	8003160 <USB_FlushRxFifo>
  USBx_DEVICE->DIEPMSK = 0U;
 800320e:	2300      	movs	r3, #0
 8003210:	f504 6210 	add.w	r2, r4, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003214:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
      USBx_INEP(i)->DIEPCTL = 0U;
 8003218:	4619      	mov	r1, r3
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800321a:	f04f 6e00 	mov.w	lr, #134217728	; 0x8000000
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800321e:	f64f 3c7f 	movw	ip, #64383	; 0xfb7f
  USBx_DEVICE->DIEPMSK = 0U;
 8003222:	612b      	str	r3, [r5, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003224:	616b      	str	r3, [r5, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003226:	61eb      	str	r3, [r5, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003228:	4543      	cmp	r3, r8
 800322a:	d140      	bne.n	80032ae <USB_DevInit+0x11e>
 800322c:	2100      	movs	r1, #0
 800322e:	f504 6230 	add.w	r2, r4, #2816	; 0xb00
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003232:	f04f 4e90 	mov.w	lr, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003236:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800323a:	4608      	mov	r0, r1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800323c:	f64f 387f 	movw	r8, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003240:	428b      	cmp	r3, r1
 8003242:	d146      	bne.n	80032d2 <USB_DevInit+0x142>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003244:	692b      	ldr	r3, [r5, #16]
  if (cfg.dma_enable == 1U)
 8003246:	2f01      	cmp	r7, #1
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003248:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800324c:	612b      	str	r3, [r5, #16]
  if (cfg.dma_enable == 1U)
 800324e:	d107      	bne.n	8003260 <USB_DevInit+0xd0>
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8003250:	4b29      	ldr	r3, [pc, #164]	; (80032f8 <USB_DevInit+0x168>)
 8003252:	632b      	str	r3, [r5, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8003254:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003256:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800325a:	f043 0303 	orr.w	r3, r3, #3
 800325e:	632b      	str	r3, [r5, #48]	; 0x30
  USBx->GINTMSK = 0U;
 8003260:	2300      	movs	r3, #0
 8003262:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003264:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8003268:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 800326a:	b91f      	cbnz	r7, 8003274 <USB_DevInit+0xe4>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800326c:	69a3      	ldr	r3, [r4, #24]
 800326e:	f043 0310 	orr.w	r3, r3, #16
 8003272:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003274:	69a2      	ldr	r2, [r4, #24]
 8003276:	4b21      	ldr	r3, [pc, #132]	; (80032fc <USB_DevInit+0x16c>)
 8003278:	4313      	orrs	r3, r2
 800327a:	61a3      	str	r3, [r4, #24]
  if(cfg.Sof_enable != 0U)
 800327c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800327e:	b11b      	cbz	r3, 8003288 <USB_DevInit+0xf8>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003280:	69a3      	ldr	r3, [r4, #24]
 8003282:	f043 0308 	orr.w	r3, r3, #8
 8003286:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8003288:	2e01      	cmp	r6, #1
 800328a:	d105      	bne.n	8003298 <USB_DevInit+0x108>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800328c:	69a3      	ldr	r3, [r4, #24]
 800328e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003292:	f043 0304 	orr.w	r3, r3, #4
 8003296:	61a3      	str	r3, [r4, #24]
}
 8003298:	2000      	movs	r0, #0
 800329a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800329e:	b004      	add	sp, #16
 80032a0:	4770      	bx	lr
      (void)USB_SetDevSpeed (USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80032a2:	2101      	movs	r1, #1
 80032a4:	e7a9      	b.n	80031fa <USB_DevInit+0x6a>
  else if(cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80032a6:	2903      	cmp	r1, #3
 80032a8:	d0a4      	beq.n	80031f4 <USB_DevInit+0x64>
    (void)USB_SetDevSpeed (USBx, USB_OTG_SPEED_FULL);
 80032aa:	2103      	movs	r1, #3
 80032ac:	e7a5      	b.n	80031fa <USB_DevInit+0x6a>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80032ae:	f8d2 9000 	ldr.w	r9, [r2]
 80032b2:	f1b9 0f00 	cmp.w	r9, #0
 80032b6:	da0a      	bge.n	80032ce <USB_DevInit+0x13e>
      if (i == 0U)
 80032b8:	b93b      	cbnz	r3, 80032ca <USB_DevInit+0x13a>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80032ba:	f8c2 e000 	str.w	lr, [r2]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 80032be:	6111      	str	r1, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80032c0:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80032c2:	f8c2 c008 	str.w	ip, [r2, #8]
 80032c6:	3220      	adds	r2, #32
 80032c8:	e7ae      	b.n	8003228 <USB_DevInit+0x98>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80032ca:	6010      	str	r0, [r2, #0]
 80032cc:	e7f7      	b.n	80032be <USB_DevInit+0x12e>
      USBx_INEP(i)->DIEPCTL = 0U;
 80032ce:	6011      	str	r1, [r2, #0]
 80032d0:	e7f5      	b.n	80032be <USB_DevInit+0x12e>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80032d2:	f8d2 9000 	ldr.w	r9, [r2]
 80032d6:	f1b9 0f00 	cmp.w	r9, #0
 80032da:	da0b      	bge.n	80032f4 <USB_DevInit+0x164>
      if (i == 0U)
 80032dc:	b939      	cbnz	r1, 80032ee <USB_DevInit+0x15e>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80032de:	f8c2 c000 	str.w	ip, [r2]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80032e2:	6110      	str	r0, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80032e4:	3101      	adds	r1, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80032e6:	f8c2 8008 	str.w	r8, [r2, #8]
 80032ea:	3220      	adds	r2, #32
 80032ec:	e7a8      	b.n	8003240 <USB_DevInit+0xb0>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80032ee:	f8c2 e000 	str.w	lr, [r2]
 80032f2:	e7f6      	b.n	80032e2 <USB_DevInit+0x152>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80032f4:	6010      	str	r0, [r2, #0]
 80032f6:	e7f4      	b.n	80032e2 <USB_DevInit+0x152>
 80032f8:	00800100 	.word	0x00800100
 80032fc:	803c3800 	.word	0x803c3800

08003300 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003300:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if(DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003304:	f013 0006 	ands.w	r0, r3, #6
 8003308:	d007      	beq.n	800331a <USB_GetDevSpeed+0x1a>
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800330a:	079b      	lsls	r3, r3, #30
 800330c:	d404      	bmi.n	8003318 <USB_GetDevSpeed+0x18>
  else if (DevEnumSpeed == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800330e:	2804      	cmp	r0, #4
    speed = USB_OTG_SPEED_LOW;
 8003310:	bf14      	ite	ne
 8003312:	2000      	movne	r0, #0
 8003314:	2002      	moveq	r0, #2
 8003316:	4770      	bx	lr
    speed = USB_OTG_SPEED_FULL;
 8003318:	2003      	movs	r0, #3
}
 800331a:	4770      	bx	lr

0800331c <USB_ActivateEndpoint>:
{
 800331c:	b570      	push	{r4, r5, r6, lr}
  if (ep->is_in == 1U)
 800331e:	784a      	ldrb	r2, [r1, #1]
 8003320:	f500 6300 	add.w	r3, r0, #2048	; 0x800
  uint32_t epnum = (uint32_t)ep->num;
 8003324:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 8003326:	2a01      	cmp	r2, #1
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU));
 8003328:	69de      	ldr	r6, [r3, #28]
 800332a:	f004 050f 	and.w	r5, r4, #15
  if (ep->is_in == 1U)
 800332e:	d11b      	bne.n	8003368 <USB_ActivateEndpoint+0x4c>
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU));
 8003330:	40aa      	lsls	r2, r5
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003332:	eb00 1044 	add.w	r0, r0, r4, lsl #5
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU));
 8003336:	4332      	orrs	r2, r6
 8003338:	61da      	str	r2, [r3, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800333a:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800333e:	041a      	lsls	r2, r3, #16
 8003340:	d410      	bmi.n	8003364 <USB_ActivateEndpoint+0x48>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003342:	688b      	ldr	r3, [r1, #8]
                                    ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003344:	78c9      	ldrb	r1, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003346:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800334a:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 800334e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003352:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003356:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 800335a:	ea43 5384 	orr.w	r3, r3, r4, lsl #22
 800335e:	4313      	orrs	r3, r2
 8003360:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8003364:	2000      	movs	r0, #0
 8003366:	bd70      	pop	{r4, r5, r6, pc}
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & 0xFU)) << 16);
 8003368:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800336c:	eb00 1044 	add.w	r0, r0, r4, lsl #5
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & 0xFU)) << 16);
 8003370:	40aa      	lsls	r2, r5
 8003372:	4332      	orrs	r2, r6
 8003374:	61da      	str	r2, [r3, #28]
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003376:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800337a:	041b      	lsls	r3, r3, #16
 800337c:	d4f2      	bmi.n	8003364 <USB_ActivateEndpoint+0x48>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800337e:	688b      	ldr	r3, [r1, #8]
                                    ((uint32_t)ep->type << 18) |
 8003380:	78c9      	ldrb	r1, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003382:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003386:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 800338a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800338e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003392:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 8003396:	4313      	orrs	r3, r2
 8003398:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 800339c:	e7e2      	b.n	8003364 <USB_ActivateEndpoint+0x48>
	...

080033a0 <USB_DeactivateEndpoint>:
{
 80033a0:	b530      	push	{r4, r5, lr}
  if (ep->is_in == 1U)
 80033a2:	784b      	ldrb	r3, [r1, #1]
 80033a4:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  uint32_t epnum = (uint32_t)ep->num;
 80033a8:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 80033aa:	2b01      	cmp	r3, #1
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU)));
 80033ac:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80033ae:	f004 050f 	and.w	r5, r4, #15
  if (ep->is_in == 1U)
 80033b2:	d110      	bne.n	80033d6 <USB_DeactivateEndpoint+0x36>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU)));
 80033b4:	40ab      	lsls	r3, r5
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80033b6:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU)));
 80033ba:	43db      	mvns	r3, r3
 80033bc:	4019      	ands	r1, r3
 80033be:	63d1      	str	r1, [r2, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU)));
 80033c0:	69d1      	ldr	r1, [r2, #28]
 80033c2:	400b      	ands	r3, r1
 80033c4:	61d3      	str	r3, [r2, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80033c6:	4b0d      	ldr	r3, [pc, #52]	; (80033fc <USB_DeactivateEndpoint+0x5c>)
 80033c8:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 80033cc:	4013      	ands	r3, r2
 80033ce:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 80033d2:	2000      	movs	r0, #0
 80033d4:	bd30      	pop	{r4, r5, pc}
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & 0xFU)) << 16));
 80033d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80033da:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & 0xFU)) << 16));
 80033de:	40ab      	lsls	r3, r5
 80033e0:	43db      	mvns	r3, r3
 80033e2:	4019      	ands	r1, r3
 80033e4:	63d1      	str	r1, [r2, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & 0xFU)) << 16));
 80033e6:	69d1      	ldr	r1, [r2, #28]
 80033e8:	400b      	ands	r3, r1
 80033ea:	61d3      	str	r3, [r2, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80033ec:	4b04      	ldr	r3, [pc, #16]	; (8003400 <USB_DeactivateEndpoint+0x60>)
 80033ee:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 80033f2:	4013      	ands	r3, r2
 80033f4:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 80033f8:	e7eb      	b.n	80033d2 <USB_DeactivateEndpoint+0x32>
 80033fa:	bf00      	nop
 80033fc:	ec337800 	.word	0xec337800
 8003400:	eff37800 	.word	0xeff37800

08003404 <USB_EP0StartXfer>:
{
 8003404:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (ep->is_in == 1U)
 8003406:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8003408:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 800340a:	2b01      	cmp	r3, #1
 800340c:	694e      	ldr	r6, [r1, #20]
 800340e:	f04f 0320 	mov.w	r3, #32
 8003412:	4f3b      	ldr	r7, [pc, #236]	; (8003500 <USB_EP0StartXfer+0xfc>)
 8003414:	d14f      	bne.n	80034b6 <USB_EP0StartXfer+0xb2>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003416:	fb13 0304 	smlabb	r3, r3, r4, r0
    if (ep->xfer_len == 0U)
 800341a:	bb26      	cbnz	r6, 8003466 <USB_EP0StartXfer+0x62>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800341c:	f8d3 5910 	ldr.w	r5, [r3, #2320]	; 0x910
    if (dma == 1U)
 8003420:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003422:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8003426:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 800342a:	f8c3 5910 	str.w	r5, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800342e:	f8d3 5910 	ldr.w	r5, [r3, #2320]	; 0x910
 8003432:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8003436:	f8c3 5910 	str.w	r5, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800343a:	f8d3 5910 	ldr.w	r5, [r3, #2320]	; 0x910
 800343e:	ea07 0705 	and.w	r7, r7, r5
 8003442:	f8c3 7910 	str.w	r7, [r3, #2320]	; 0x910
    if (dma == 1U)
 8003446:	d104      	bne.n	8003452 <USB_EP0StartXfer+0x4e>
      USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003448:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 800344c:	690a      	ldr	r2, [r1, #16]
 800344e:	f8c3 2914 	str.w	r2, [r3, #2324]	; 0x914
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003452:	eb00 1044 	add.w	r0, r0, r4, lsl #5
 8003456:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 800345a:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800345e:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
}
 8003462:	2000      	movs	r0, #0
 8003464:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003466:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800346a:	691d      	ldr	r5, [r3, #16]
 800346c:	402f      	ands	r7, r5
 800346e:	611f      	str	r7, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003470:	691d      	ldr	r5, [r3, #16]
 8003472:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8003476:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 800347a:	611d      	str	r5, [r3, #16]
      if(ep->xfer_len > ep->maxpacket)
 800347c:	688d      	ldr	r5, [r1, #8]
 800347e:	42ae      	cmp	r6, r5
        ep->xfer_len = ep->maxpacket;
 8003480:	bf88      	it	hi
 8003482:	614d      	strhi	r5, [r1, #20]
    if (dma == 1U)
 8003484:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003486:	691d      	ldr	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003488:	694e      	ldr	r6, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800348a:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 800348e:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003490:	f3c6 0512 	ubfx	r5, r6, #0, #19
 8003494:	691f      	ldr	r7, [r3, #16]
 8003496:	ea45 0507 	orr.w	r5, r5, r7
 800349a:	611d      	str	r5, [r3, #16]
    if (dma == 1U)
 800349c:	d0d4      	beq.n	8003448 <USB_EP0StartXfer+0x44>
      if (ep->xfer_len > 0U)
 800349e:	2e00      	cmp	r6, #0
 80034a0:	d0d7      	beq.n	8003452 <USB_EP0StartXfer+0x4e>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & 0xFU);
 80034a2:	f004 050f 	and.w	r5, r4, #15
 80034a6:	2301      	movs	r3, #1
 80034a8:	f8d0 1834 	ldr.w	r1, [r0, #2100]	; 0x834
 80034ac:	40ab      	lsls	r3, r5
 80034ae:	430b      	orrs	r3, r1
 80034b0:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 80034b4:	e7cd      	b.n	8003452 <USB_EP0StartXfer+0x4e>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80034b6:	fb13 0004 	smlabb	r0, r3, r4, r0
 80034ba:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 80034be:	691c      	ldr	r4, [r3, #16]
 80034c0:	4027      	ands	r7, r4
 80034c2:	611f      	str	r7, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80034c4:	691c      	ldr	r4, [r3, #16]
 80034c6:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 80034ca:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 80034ce:	611c      	str	r4, [r3, #16]
 80034d0:	688c      	ldr	r4, [r1, #8]
    if (ep->xfer_len > 0U)
 80034d2:	b106      	cbz	r6, 80034d6 <USB_EP0StartXfer+0xd2>
      ep->xfer_len = ep->maxpacket;
 80034d4:	614c      	str	r4, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80034d6:	691d      	ldr	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80034d8:	f3c4 0412 	ubfx	r4, r4, #0, #19
    if (dma == 1U)
 80034dc:	2a01      	cmp	r2, #1
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80034de:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 80034e2:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80034e4:	691d      	ldr	r5, [r3, #16]
 80034e6:	ea44 0405 	orr.w	r4, r4, r5
 80034ea:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 80034ec:	d101      	bne.n	80034f2 <USB_EP0StartXfer+0xee>
      USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80034ee:	68ca      	ldr	r2, [r1, #12]
 80034f0:	615a      	str	r2, [r3, #20]
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80034f2:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80034f6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80034fa:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 80034fe:	e7b0      	b.n	8003462 <USB_EP0StartXfer+0x5e>
 8003500:	fff80000 	.word	0xfff80000

08003504 <USB_WritePacket>:
{
 8003504:	b510      	push	{r4, lr}
 8003506:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
 800350a:	b94c      	cbnz	r4, 8003520 <USB_WritePacket+0x1c>
    count32b =  ((uint32_t)len + 3U) / 4U;
 800350c:	3303      	adds	r3, #3
      USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 800350e:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 8003512:	f023 0303 	bic.w	r3, r3, #3
 8003516:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 800351a:	440b      	add	r3, r1
    for (i = 0U; i < count32b; i++)
 800351c:	4299      	cmp	r1, r3
 800351e:	d101      	bne.n	8003524 <USB_WritePacket+0x20>
}
 8003520:	2000      	movs	r0, #0
 8003522:	bd10      	pop	{r4, pc}
      USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 8003524:	f851 2b04 	ldr.w	r2, [r1], #4
 8003528:	6002      	str	r2, [r0, #0]
 800352a:	e7f7      	b.n	800351c <USB_WritePacket+0x18>

0800352c <USB_EPStartXfer>:
{
 800352c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (ep->is_in == 1U)
 800352e:	784b      	ldrb	r3, [r1, #1]
 8003530:	2420      	movs	r4, #32
  uint32_t epnum = (uint32_t)ep->num;
 8003532:	780e      	ldrb	r6, [r1, #0]
  if (ep->is_in == 1U)
 8003534:	2b01      	cmp	r3, #1
 8003536:	4f64      	ldr	r7, [pc, #400]	; (80036c8 <USB_EPStartXfer+0x19c>)
 8003538:	694b      	ldr	r3, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800353a:	fb14 0406 	smlabb	r4, r4, r6, r0
  if (ep->is_in == 1U)
 800353e:	d17b      	bne.n	8003638 <USB_EPStartXfer+0x10c>
    if (ep->xfer_len == 0U)
 8003540:	2b00      	cmp	r3, #0
 8003542:	d13e      	bne.n	80035c2 <USB_EPStartXfer+0x96>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003544:	f504 6510 	add.w	r5, r4, #2304	; 0x900
 8003548:	f8d4 4910 	ldr.w	r4, [r4, #2320]	; 0x910
 800354c:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8003550:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8003554:	612c      	str	r4, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003556:	692c      	ldr	r4, [r5, #16]
 8003558:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 800355c:	612c      	str	r4, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800355e:	692c      	ldr	r4, [r5, #16]
 8003560:	4027      	ands	r7, r4
 8003562:	612f      	str	r7, [r5, #16]
    if (dma == 1U)
 8003564:	2a01      	cmp	r2, #1
 8003566:	d156      	bne.n	8003616 <USB_EPStartXfer+0xea>
      USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003568:	eb00 1446 	add.w	r4, r0, r6, lsl #5
 800356c:	690d      	ldr	r5, [r1, #16]
 800356e:	f8c4 5914 	str.w	r5, [r4, #2324]	; 0x914
    if (ep->type == EP_TYPE_ISOC)
 8003572:	78cf      	ldrb	r7, [r1, #3]
 8003574:	2f01      	cmp	r7, #1
 8003576:	d110      	bne.n	800359a <USB_EPStartXfer+0x6e>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003578:	f8d0 4808 	ldr.w	r4, [r0, #2056]	; 0x808
 800357c:	f414 7f80 	tst.w	r4, #256	; 0x100
 8003580:	f04f 0420 	mov.w	r4, #32
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003584:	fb14 0406 	smlabb	r4, r4, r6, r0
 8003588:	f8d4 5900 	ldr.w	r5, [r4, #2304]	; 0x900
 800358c:	bf0c      	ite	eq
 800358e:	f045 5500 	orreq.w	r5, r5, #536870912	; 0x20000000
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003592:	f045 5580 	orrne.w	r5, r5, #268435456	; 0x10000000
 8003596:	f8c4 5900 	str.w	r5, [r4, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800359a:	eb00 1446 	add.w	r4, r0, r6, lsl #5
    if (ep->type == EP_TYPE_ISOC)
 800359e:	2f01      	cmp	r7, #1
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80035a0:	f8d4 5900 	ldr.w	r5, [r4, #2304]	; 0x900
 80035a4:	f045 4504 	orr.w	r5, r5, #2214592512	; 0x84000000
 80035a8:	f8c4 5900 	str.w	r5, [r4, #2304]	; 0x900
    if (ep->type == EP_TYPE_ISOC)
 80035ac:	d106      	bne.n	80035bc <USB_EPStartXfer+0x90>
      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80035ae:	780c      	ldrb	r4, [r1, #0]
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	9200      	str	r2, [sp, #0]
 80035b4:	4622      	mov	r2, r4
 80035b6:	68c9      	ldr	r1, [r1, #12]
 80035b8:	f7ff ffa4 	bl	8003504 <USB_WritePacket>
}
 80035bc:	2000      	movs	r0, #0
 80035be:	b003      	add	sp, #12
 80035c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80035c2:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 80035c6:	f504 6410 	add.w	r4, r4, #2304	; 0x900
 80035ca:	402f      	ands	r7, r5
 80035cc:	6127      	str	r7, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80035ce:	6925      	ldr	r5, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80035d0:	688f      	ldr	r7, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80035d2:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 80035d6:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 80035da:	6125      	str	r5, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80035dc:	19dd      	adds	r5, r3, r7
 80035de:	f8d4 e010 	ldr.w	lr, [r4, #16]
 80035e2:	3d01      	subs	r5, #1
 80035e4:	fbb5 f7f7 	udiv	r7, r5, r7
 80035e8:	4d38      	ldr	r5, [pc, #224]	; (80036cc <USB_EPStartXfer+0x1a0>)
 80035ea:	ea05 45c7 	and.w	r5, r5, r7, lsl #19
 80035ee:	ea45 050e 	orr.w	r5, r5, lr
 80035f2:	6125      	str	r5, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80035f4:	f3c3 0512 	ubfx	r5, r3, #0, #19
 80035f8:	6927      	ldr	r7, [r4, #16]
 80035fa:	433d      	orrs	r5, r7
 80035fc:	6125      	str	r5, [r4, #16]
      if (ep->type == EP_TYPE_ISOC)
 80035fe:	78cd      	ldrb	r5, [r1, #3]
 8003600:	2d01      	cmp	r5, #1
 8003602:	d15e      	bne.n	80036c2 <USB_EPStartXfer+0x196>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003604:	6925      	ldr	r5, [r4, #16]
 8003606:	f025 45c0 	bic.w	r5, r5, #1610612736	; 0x60000000
 800360a:	6125      	str	r5, [r4, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800360c:	6925      	ldr	r5, [r4, #16]
 800360e:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8003612:	6125      	str	r5, [r4, #16]
 8003614:	e7a6      	b.n	8003564 <USB_EPStartXfer+0x38>
      if (ep->type != EP_TYPE_ISOC)
 8003616:	78cc      	ldrb	r4, [r1, #3]
 8003618:	2c01      	cmp	r4, #1
 800361a:	d0aa      	beq.n	8003572 <USB_EPStartXfer+0x46>
        if (ep->xfer_len > 0U)
 800361c:	2b00      	cmp	r3, #0
 800361e:	d0a8      	beq.n	8003572 <USB_EPStartXfer+0x46>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & 0xFU);
 8003620:	780c      	ldrb	r4, [r1, #0]
 8003622:	f8d0 e834 	ldr.w	lr, [r0, #2100]	; 0x834
 8003626:	f004 050f 	and.w	r5, r4, #15
 800362a:	2401      	movs	r4, #1
 800362c:	40ac      	lsls	r4, r5
 800362e:	ea44 040e 	orr.w	r4, r4, lr
 8003632:	f8c0 4834 	str.w	r4, [r0, #2100]	; 0x834
 8003636:	e79c      	b.n	8003572 <USB_EPStartXfer+0x46>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003638:	f504 6630 	add.w	r6, r4, #2816	; 0xb00
 800363c:	6935      	ldr	r5, [r6, #16]
 800363e:	402f      	ands	r7, r5
 8003640:	6137      	str	r7, [r6, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003642:	6935      	ldr	r5, [r6, #16]
 8003644:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8003648:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 800364c:	6135      	str	r5, [r6, #16]
 800364e:	688d      	ldr	r5, [r1, #8]
    if (ep->xfer_len == 0U)
 8003650:	bb1b      	cbnz	r3, 800369a <USB_EPStartXfer+0x16e>
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003652:	6933      	ldr	r3, [r6, #16]
 8003654:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8003658:	431d      	orrs	r5, r3
 800365a:	6135      	str	r5, [r6, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800365c:	6933      	ldr	r3, [r6, #16]
 800365e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003662:	6133      	str	r3, [r6, #16]
    if (dma == 1U)
 8003664:	2a01      	cmp	r2, #1
 8003666:	d101      	bne.n	800366c <USB_EPStartXfer+0x140>
      USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)ep->xfer_buff;
 8003668:	68cb      	ldr	r3, [r1, #12]
 800366a:	6173      	str	r3, [r6, #20]
    if (ep->type == EP_TYPE_ISOC)
 800366c:	78cb      	ldrb	r3, [r1, #3]
 800366e:	2b01      	cmp	r3, #1
 8003670:	d10c      	bne.n	800368c <USB_EPStartXfer+0x160>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003672:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8003676:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800367a:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 800367e:	bf0c      	ite	eq
 8003680:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003684:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8003688:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800368c:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 8003690:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003694:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
  return HAL_OK;
 8003698:	e790      	b.n	80035bc <USB_EPStartXfer+0x90>
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800369a:	442b      	add	r3, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800369c:	4f0b      	ldr	r7, [pc, #44]	; (80036cc <USB_EPStartXfer+0x1a0>)
 800369e:	f8d6 e010 	ldr.w	lr, [r6, #16]
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80036a2:	3b01      	subs	r3, #1
 80036a4:	fbb3 f3f5 	udiv	r3, r3, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80036a8:	ea07 47c3 	and.w	r7, r7, r3, lsl #19
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80036ac:	b29b      	uxth	r3, r3
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80036ae:	ea47 070e 	orr.w	r7, r7, lr
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80036b2:	435d      	muls	r5, r3
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80036b4:	6137      	str	r7, [r6, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80036b6:	f3c5 0512 	ubfx	r5, r5, #0, #19
 80036ba:	6937      	ldr	r7, [r6, #16]
 80036bc:	433d      	orrs	r5, r7
 80036be:	6135      	str	r5, [r6, #16]
 80036c0:	e7d0      	b.n	8003664 <USB_EPStartXfer+0x138>
    if (dma == 1U)
 80036c2:	2a01      	cmp	r2, #1
 80036c4:	d1aa      	bne.n	800361c <USB_EPStartXfer+0xf0>
 80036c6:	e74f      	b.n	8003568 <USB_EPStartXfer+0x3c>
 80036c8:	fff80000 	.word	0xfff80000
 80036cc:	1ff80000 	.word	0x1ff80000

080036d0 <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80036d0:	3203      	adds	r2, #3
    *(__packed uint32_t *)pDest = USBx_DFIFO(0U);
 80036d2:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 80036d6:	f022 0203 	bic.w	r2, r2, #3
 80036da:	440a      	add	r2, r1
  for (i = 0U; i < count32b; i++)
 80036dc:	4291      	cmp	r1, r2
 80036de:	d101      	bne.n	80036e4 <USB_ReadPacket+0x14>
}
 80036e0:	4608      	mov	r0, r1
 80036e2:	4770      	bx	lr
    *(__packed uint32_t *)pDest = USBx_DFIFO(0U);
 80036e4:	6803      	ldr	r3, [r0, #0]
 80036e6:	f841 3b04 	str.w	r3, [r1], #4
 80036ea:	e7f7      	b.n	80036dc <USB_ReadPacket+0xc>

080036ec <USB_EPSetStall>:
  if (ep->is_in == 1U)
 80036ec:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 80036ee:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	f04f 0320 	mov.w	r3, #32
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80036f6:	fb13 0002 	smlabb	r0, r3, r2, r0
  if (ep->is_in == 1U)
 80036fa:	d112      	bne.n	8003722 <USB_EPSetStall+0x36>
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80036fc:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8003700:	2b00      	cmp	r3, #0
 8003702:	db06      	blt.n	8003712 <USB_EPSetStall+0x26>
 8003704:	b12a      	cbz	r2, 8003712 <USB_EPSetStall+0x26>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003706:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800370a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800370e:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003712:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8003716:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800371a:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800371e:	2000      	movs	r0, #0
 8003720:	4770      	bx	lr
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003722:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8003726:	2b00      	cmp	r3, #0
 8003728:	db06      	blt.n	8003738 <USB_EPSetStall+0x4c>
 800372a:	b12a      	cbz	r2, 8003738 <USB_EPSetStall+0x4c>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800372c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8003730:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003734:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003738:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800373c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003740:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8003744:	e7eb      	b.n	800371e <USB_EPSetStall+0x32>

08003746 <USB_EPClearStall>:
  if (ep->is_in == 1U)
 8003746:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8003748:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 800374a:	2b01      	cmp	r3, #1
 800374c:	f04f 0320 	mov.w	r3, #32
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003750:	fb13 0002 	smlabb	r0, r3, r2, r0
  if (ep->is_in == 1U)
 8003754:	d111      	bne.n	800377a <USB_EPClearStall+0x34>
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003756:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800375a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800375e:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003762:	78cb      	ldrb	r3, [r1, #3]
 8003764:	3b02      	subs	r3, #2
 8003766:	2b01      	cmp	r3, #1
 8003768:	d805      	bhi.n	8003776 <USB_EPClearStall+0x30>
       USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800376a:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800376e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003772:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8003776:	2000      	movs	r0, #0
 8003778:	4770      	bx	lr
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800377a:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800377e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003782:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003786:	78cb      	ldrb	r3, [r1, #3]
 8003788:	3b02      	subs	r3, #2
 800378a:	2b01      	cmp	r3, #1
 800378c:	d8f3      	bhi.n	8003776 <USB_EPClearStall+0x30>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800378e:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8003792:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003796:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 800379a:	e7ec      	b.n	8003776 <USB_EPClearStall+0x30>

0800379c <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~ (USB_OTG_DCFG_DAD);
 800379c:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80037a0:	0109      	lsls	r1, r1, #4
  USBx_DEVICE->DCFG &= ~ (USB_OTG_DCFG_DAD);
 80037a2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80037a6:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
  USBx_DEVICE->DCFG &= ~ (USB_OTG_DCFG_DAD);
 80037aa:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80037ae:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 80037b2:	4319      	orrs	r1, r3
 80037b4:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 80037b8:	2000      	movs	r0, #0
 80037ba:	4770      	bx	lr

080037bc <USB_DevConnect>:
{
 80037bc:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80037be:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 80037c2:	f023 0302 	bic.w	r3, r3, #2
 80037c6:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 80037ca:	2003      	movs	r0, #3
 80037cc:	f7fc fede 	bl	800058c <HAL_Delay>
}
 80037d0:	2000      	movs	r0, #0
 80037d2:	bd08      	pop	{r3, pc}

080037d4 <USB_DevDisconnect>:
{
 80037d4:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80037d6:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 80037da:	f043 0302 	orr.w	r3, r3, #2
 80037de:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 80037e2:	2003      	movs	r0, #3
 80037e4:	f7fc fed2 	bl	800058c <HAL_Delay>
}
 80037e8:	2000      	movs	r0, #0
 80037ea:	bd08      	pop	{r3, pc}

080037ec <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 80037ec:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 80037ee:	6980      	ldr	r0, [r0, #24]
}
 80037f0:	4010      	ands	r0, r2
 80037f2:	4770      	bx	lr

080037f4 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 80037f4:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 80037f8:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80037fc:	69c0      	ldr	r0, [r0, #28]
 80037fe:	4018      	ands	r0, r3
}
 8003800:	0c00      	lsrs	r0, r0, #16
 8003802:	4770      	bx	lr

08003804 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8003804:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8003808:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800380c:	69c0      	ldr	r0, [r0, #28]
 800380e:	4018      	ands	r0, r3
}
 8003810:	b280      	uxth	r0, r0
 8003812:	4770      	bx	lr

08003814 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8003814:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8003818:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800381c:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8003820:	6940      	ldr	r0, [r0, #20]
}
 8003822:	4010      	ands	r0, r2
 8003824:	4770      	bx	lr

08003826 <USB_ReadDevInEPInterrupt>:
{
 8003826:	b510      	push	{r4, lr}
  msk = USBx_DEVICE->DIEPMSK;
 8003828:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 800382c:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8003830:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & 0xFU)) & 0x1U) << 7;
 8003834:	f001 010f 	and.w	r1, r1, #15
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8003838:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  msk |= ((emp >> (epnum & 0xFU)) & 0x1U) << 7;
 800383c:	40cb      	lsrs	r3, r1
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800383e:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> (epnum & 0xFU)) & 0x1U) << 7;
 8003840:	01db      	lsls	r3, r3, #7
 8003842:	b2db      	uxtb	r3, r3
 8003844:	4323      	orrs	r3, r4
}
 8003846:	4018      	ands	r0, r3
 8003848:	bd10      	pop	{r4, pc}

0800384a <USB_GetMode>:
  return ((USBx->GINTSTS ) & 0x1U);
 800384a:	6940      	ldr	r0, [r0, #20]
}
 800384c:	f000 0001 	and.w	r0, r0, #1
 8003850:	4770      	bx	lr

08003852 <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8003852:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8003856:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800385a:	f023 0307 	bic.w	r3, r3, #7
 800385e:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8003862:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 8003866:	689a      	ldr	r2, [r3, #8]
 8003868:	f002 0206 	and.w	r2, r2, #6
 800386c:	2a04      	cmp	r2, #4
 800386e:	d105      	bne.n	800387c <USB_ActivateSetup+0x2a>
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8003870:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8003874:	f042 0203 	orr.w	r2, r2, #3
 8003878:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800387c:	685a      	ldr	r2, [r3, #4]
}
 800387e:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8003880:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003884:	605a      	str	r2, [r3, #4]
}
 8003886:	4770      	bx	lr

08003888 <USB_EP0_OutStart>:
{
 8003888:	b510      	push	{r4, lr}
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800388a:	2400      	movs	r4, #0
  if (dma == 1U)
 800388c:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800388e:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003892:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8003896:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 800389a:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800389e:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 80038a2:	f044 0418 	orr.w	r4, r4, #24
 80038a6:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80038aa:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 80038ae:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
 80038b2:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  if (dma == 1U)
 80038b6:	d105      	bne.n	80038c4 <USB_EP0_OutStart+0x3c>
    USBx_OUTEP(0U)->DOEPCTL = 0x80008000U;
 80038b8:	f04f 2380 	mov.w	r3, #2147516416	; 0x80008000
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80038bc:	f8c0 2b14 	str.w	r2, [r0, #2836]	; 0xb14
    USBx_OUTEP(0U)->DOEPCTL = 0x80008000U;
 80038c0:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 80038c4:	2000      	movs	r0, #0
 80038c6:	bd10      	pop	{r4, pc}

080038c8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80038c8:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80038ca:	f000 fbd3 	bl	8004074 <vTaskStartScheduler>
  
  return osOK;
}
 80038ce:	2000      	movs	r0, #0
 80038d0:	bd08      	pop	{r3, pc}

080038d2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80038d2:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80038d4:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
{
 80038d8:	b085      	sub	sp, #20
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80038da:	8a02      	ldrh	r2, [r0, #16]
{
 80038dc:	460b      	mov	r3, r1
  if (priority != osPriorityError) {
 80038de:	2c84      	cmp	r4, #132	; 0x84
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80038e0:	e890 0022 	ldmia.w	r0, {r1, r5}
    fpriority += (priority - osPriorityIdle);
 80038e4:	bf14      	ite	ne
 80038e6:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80038e8:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80038ea:	a803      	add	r0, sp, #12
 80038ec:	9400      	str	r4, [sp, #0]
 80038ee:	9001      	str	r0, [sp, #4]
 80038f0:	4628      	mov	r0, r5
 80038f2:	f000 faef 	bl	8003ed4 <xTaskCreate>
 80038f6:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80038f8:	bf0c      	ite	eq
 80038fa:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 80038fc:	2000      	movne	r0, #0
}
 80038fe:	b005      	add	sp, #20
 8003900:	bd30      	pop	{r4, r5, pc}

08003902 <osDelay>:
osStatus osDelay (uint32_t millisec)
{
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003902:	2800      	cmp	r0, #0
 8003904:	bf08      	it	eq
 8003906:	2001      	moveq	r0, #1
{
 8003908:	b508      	push	{r3, lr}
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800390a:	f000 fd09 	bl	8004320 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800390e:	2000      	movs	r0, #0
 8003910:	bd08      	pop	{r3, pc}

08003912 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8003912:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8003914:	f000 fda0 	bl	8004458 <xTaskGetSchedulerState>
 8003918:	2801      	cmp	r0, #1
 800391a:	d003      	beq.n	8003924 <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800391c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8003920:	f000 ba00 	b.w	8003d24 <xPortSysTickHandler>
 8003924:	bd08      	pop	{r3, pc}
	...

08003928 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003928:	4b0f      	ldr	r3, [pc, #60]	; (8003968 <prvInsertBlockIntoFreeList+0x40>)
{
 800392a:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	4282      	cmp	r2, r0
 8003930:	d318      	bcc.n	8003964 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003932:	685c      	ldr	r4, [r3, #4]
 8003934:	1919      	adds	r1, r3, r4
 8003936:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003938:	bf01      	itttt	eq
 800393a:	6841      	ldreq	r1, [r0, #4]
 800393c:	4618      	moveq	r0, r3
 800393e:	1909      	addeq	r1, r1, r4
 8003940:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003942:	6844      	ldr	r4, [r0, #4]
 8003944:	1901      	adds	r1, r0, r4
 8003946:	428a      	cmp	r2, r1
 8003948:	d107      	bne.n	800395a <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800394a:	4908      	ldr	r1, [pc, #32]	; (800396c <prvInsertBlockIntoFreeList+0x44>)
 800394c:	6809      	ldr	r1, [r1, #0]
 800394e:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003950:	bf1f      	itttt	ne
 8003952:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003954:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003956:	1909      	addne	r1, r1, r4
 8003958:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800395a:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800395c:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800395e:	bf18      	it	ne
 8003960:	6018      	strne	r0, [r3, #0]
 8003962:	bd10      	pop	{r4, pc}
 8003964:	4613      	mov	r3, r2
 8003966:	e7e1      	b.n	800392c <prvInsertBlockIntoFreeList+0x4>
 8003968:	20003da8 	.word	0x20003da8
 800396c:	20000198 	.word	0x20000198

08003970 <pvPortMalloc>:
{
 8003970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003974:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8003976:	f000 fbbd 	bl	80040f4 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800397a:	4940      	ldr	r1, [pc, #256]	; (8003a7c <pvPortMalloc+0x10c>)
 800397c:	4d40      	ldr	r5, [pc, #256]	; (8003a80 <pvPortMalloc+0x110>)
 800397e:	680b      	ldr	r3, [r1, #0]
 8003980:	bb0b      	cbnz	r3, 80039c6 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 8003982:	4a40      	ldr	r2, [pc, #256]	; (8003a84 <pvPortMalloc+0x114>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003984:	0756      	lsls	r6, r2, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003986:	4e40      	ldr	r6, [pc, #256]	; (8003a88 <pvPortMalloc+0x118>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003988:	bf1b      	ittet	ne
 800398a:	1dd0      	addne	r0, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800398c:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003990:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003994:	f020 0007 	bicne.w	r0, r0, #7
 8003998:	bf1c      	itt	ne
 800399a:	4602      	movne	r2, r0
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800399c:	1a1b      	subne	r3, r3, r0
	xStart.xBlockSize = ( size_t ) 0;
 800399e:	2000      	movs	r0, #0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80039a0:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80039a2:	6032      	str	r2, [r6, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80039a4:	6070      	str	r0, [r6, #4]
	uxAddress -= xHeapStructSize;
 80039a6:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80039a8:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 80039ac:	6018      	str	r0, [r3, #0]
	pxEnd->xBlockSize = 0;
 80039ae:	6058      	str	r0, [r3, #4]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80039b0:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 80039b2:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80039b4:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80039b6:	4b35      	ldr	r3, [pc, #212]	; (8003a8c <pvPortMalloc+0x11c>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80039b8:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80039ba:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80039bc:	4b34      	ldr	r3, [pc, #208]	; (8003a90 <pvPortMalloc+0x120>)
 80039be:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80039c0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80039c4:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80039c6:	682f      	ldr	r7, [r5, #0]
 80039c8:	4227      	tst	r7, r4
 80039ca:	d116      	bne.n	80039fa <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 80039cc:	2c00      	cmp	r4, #0
 80039ce:	d042      	beq.n	8003a56 <pvPortMalloc+0xe6>
				xWantedSize += xHeapStructSize;
 80039d0:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80039d4:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80039d6:	bf1c      	itt	ne
 80039d8:	f023 0307 	bicne.w	r3, r3, #7
 80039dc:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80039de:	b163      	cbz	r3, 80039fa <pvPortMalloc+0x8a>
 80039e0:	4a2b      	ldr	r2, [pc, #172]	; (8003a90 <pvPortMalloc+0x120>)
 80039e2:	6816      	ldr	r6, [r2, #0]
 80039e4:	4690      	mov	r8, r2
 80039e6:	42b3      	cmp	r3, r6
 80039e8:	d807      	bhi.n	80039fa <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 80039ea:	4a27      	ldr	r2, [pc, #156]	; (8003a88 <pvPortMalloc+0x118>)
 80039ec:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80039ee:	6868      	ldr	r0, [r5, #4]
 80039f0:	4283      	cmp	r3, r0
 80039f2:	d804      	bhi.n	80039fe <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 80039f4:	6809      	ldr	r1, [r1, #0]
 80039f6:	428d      	cmp	r5, r1
 80039f8:	d107      	bne.n	8003a0a <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 80039fa:	2400      	movs	r4, #0
 80039fc:	e02b      	b.n	8003a56 <pvPortMalloc+0xe6>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80039fe:	682c      	ldr	r4, [r5, #0]
 8003a00:	2c00      	cmp	r4, #0
 8003a02:	d0f7      	beq.n	80039f4 <pvPortMalloc+0x84>
 8003a04:	462a      	mov	r2, r5
 8003a06:	4625      	mov	r5, r4
 8003a08:	e7f1      	b.n	80039ee <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003a0a:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003a0c:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003a0e:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003a10:	1ac2      	subs	r2, r0, r3
 8003a12:	2a10      	cmp	r2, #16
 8003a14:	d911      	bls.n	8003a3a <pvPortMalloc+0xca>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003a16:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003a18:	0741      	lsls	r1, r0, #29
 8003a1a:	d00a      	beq.n	8003a32 <pvPortMalloc+0xc2>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a20:	b672      	cpsid	i
 8003a22:	f383 8811 	msr	BASEPRI, r3
 8003a26:	f3bf 8f6f 	isb	sy
 8003a2a:	f3bf 8f4f 	dsb	sy
 8003a2e:	b662      	cpsie	i
 8003a30:	e7fe      	b.n	8003a30 <pvPortMalloc+0xc0>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003a32:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003a34:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003a36:	f7ff ff77 	bl	8003928 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003a3a:	686b      	ldr	r3, [r5, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003a3c:	3408      	adds	r4, #8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003a3e:	4913      	ldr	r1, [pc, #76]	; (8003a8c <pvPortMalloc+0x11c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003a40:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003a42:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003a44:	6808      	ldr	r0, [r1, #0]
					pxBlock->pxNextFreeBlock = NULL;
 8003a46:	2300      	movs	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003a48:	f8c8 6000 	str.w	r6, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003a4c:	4286      	cmp	r6, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003a4e:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003a50:	602b      	str	r3, [r5, #0]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003a52:	bf38      	it	cc
 8003a54:	600e      	strcc	r6, [r1, #0]
	( void ) xTaskResumeAll();
 8003a56:	f000 fbe9 	bl	800422c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003a5a:	0763      	lsls	r3, r4, #29
 8003a5c:	d00a      	beq.n	8003a74 <pvPortMalloc+0x104>
 8003a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a62:	b672      	cpsid	i
 8003a64:	f383 8811 	msr	BASEPRI, r3
 8003a68:	f3bf 8f6f 	isb	sy
 8003a6c:	f3bf 8f4f 	dsb	sy
 8003a70:	b662      	cpsie	i
 8003a72:	e7fe      	b.n	8003a72 <pvPortMalloc+0x102>
}
 8003a74:	4620      	mov	r0, r4
 8003a76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a7a:	bf00      	nop
 8003a7c:	20000198 	.word	0x20000198
 8003a80:	20003d9c 	.word	0x20003d9c
 8003a84:	2000019c 	.word	0x2000019c
 8003a88:	20003da8 	.word	0x20003da8
 8003a8c:	20003da4 	.word	0x20003da4
 8003a90:	20003da0 	.word	0x20003da0

08003a94 <vPortFree>:
{
 8003a94:	b510      	push	{r4, lr}
	if( pv != NULL )
 8003a96:	4604      	mov	r4, r0
 8003a98:	2800      	cmp	r0, #0
 8003a9a:	d032      	beq.n	8003b02 <vPortFree+0x6e>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003a9c:	4a19      	ldr	r2, [pc, #100]	; (8003b04 <vPortFree+0x70>)
 8003a9e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8003aa2:	6812      	ldr	r2, [r2, #0]
 8003aa4:	4213      	tst	r3, r2
 8003aa6:	d10a      	bne.n	8003abe <vPortFree+0x2a>
 8003aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aac:	b672      	cpsid	i
 8003aae:	f383 8811 	msr	BASEPRI, r3
 8003ab2:	f3bf 8f6f 	isb	sy
 8003ab6:	f3bf 8f4f 	dsb	sy
 8003aba:	b662      	cpsie	i
 8003abc:	e7fe      	b.n	8003abc <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003abe:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8003ac2:	b151      	cbz	r1, 8003ada <vPortFree+0x46>
 8003ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ac8:	b672      	cpsid	i
 8003aca:	f383 8811 	msr	BASEPRI, r3
 8003ace:	f3bf 8f6f 	isb	sy
 8003ad2:	f3bf 8f4f 	dsb	sy
 8003ad6:	b662      	cpsie	i
 8003ad8:	e7fe      	b.n	8003ad8 <vPortFree+0x44>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003ada:	ea23 0302 	bic.w	r3, r3, r2
 8003ade:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8003ae2:	f000 fb07 	bl	80040f4 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003ae6:	4a08      	ldr	r2, [pc, #32]	; (8003b08 <vPortFree+0x74>)
 8003ae8:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003aec:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003af0:	6811      	ldr	r1, [r2, #0]
 8003af2:	440b      	add	r3, r1
 8003af4:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003af6:	f7ff ff17 	bl	8003928 <prvInsertBlockIntoFreeList>
}
 8003afa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8003afe:	f000 bb95 	b.w	800422c <xTaskResumeAll>
 8003b02:	bd10      	pop	{r4, pc}
 8003b04:	20003d9c 	.word	0x20003d9c
 8003b08:	20003da0 	.word	0x20003da0

08003b0c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b0c:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003b10:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b14:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b16:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b18:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003b1a:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003b1c:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003b1e:	6003      	str	r3, [r0, #0]
 8003b20:	4770      	bx	lr

08003b22 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003b22:	2300      	movs	r3, #0
 8003b24:	6103      	str	r3, [r0, #16]
 8003b26:	4770      	bx	lr

08003b28 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8003b28:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003b2a:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8003b2c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003b2e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003b30:	689a      	ldr	r2, [r3, #8]
 8003b32:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003b34:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8003b36:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003b38:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	6003      	str	r3, [r0, #0]
 8003b3e:	4770      	bx	lr

08003b40 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003b40:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003b42:	1c53      	adds	r3, r2, #1
{
 8003b44:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 8003b46:	d10a      	bne.n	8003b5e <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003b48:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003b4a:	685a      	ldr	r2, [r3, #4]
 8003b4c:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003b4e:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003b50:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8003b52:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8003b54:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003b56:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8003b58:	3301      	adds	r3, #1
 8003b5a:	6003      	str	r3, [r0, #0]
 8003b5c:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b5e:	f100 0308 	add.w	r3, r0, #8
 8003b62:	685c      	ldr	r4, [r3, #4]
 8003b64:	6825      	ldr	r5, [r4, #0]
 8003b66:	42aa      	cmp	r2, r5
 8003b68:	d3ef      	bcc.n	8003b4a <vListInsert+0xa>
 8003b6a:	4623      	mov	r3, r4
 8003b6c:	e7f9      	b.n	8003b62 <vListInsert+0x22>

08003b6e <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003b6e:	6841      	ldr	r1, [r0, #4]
 8003b70:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003b72:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003b74:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003b76:	6882      	ldr	r2, [r0, #8]
 8003b78:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003b7a:	6859      	ldr	r1, [r3, #4]
 8003b7c:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003b7e:	bf08      	it	eq
 8003b80:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003b82:	2200      	movs	r2, #0
 8003b84:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8003b86:	6818      	ldr	r0, [r3, #0]
 8003b88:	3801      	subs	r0, #1
 8003b8a:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8003b8c:	4770      	bx	lr
	...

08003b90 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003b90:	4b0c      	ldr	r3, [pc, #48]	; (8003bc4 <prvTaskExitError+0x34>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	3301      	adds	r3, #1
 8003b96:	d00a      	beq.n	8003bae <prvTaskExitError+0x1e>
 8003b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b9c:	b672      	cpsid	i
 8003b9e:	f383 8811 	msr	BASEPRI, r3
 8003ba2:	f3bf 8f6f 	isb	sy
 8003ba6:	f3bf 8f4f 	dsb	sy
 8003baa:	b662      	cpsie	i
 8003bac:	e7fe      	b.n	8003bac <prvTaskExitError+0x1c>
 8003bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bb2:	b672      	cpsid	i
 8003bb4:	f383 8811 	msr	BASEPRI, r3
 8003bb8:	f3bf 8f6f 	isb	sy
 8003bbc:	f3bf 8f4f 	dsb	sy
 8003bc0:	b662      	cpsie	i
 8003bc2:	e7fe      	b.n	8003bc2 <prvTaskExitError+0x32>
 8003bc4:	20000004 	.word	0x20000004

08003bc8 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003bc8:	4806      	ldr	r0, [pc, #24]	; (8003be4 <prvPortStartFirstTask+0x1c>)
 8003bca:	6800      	ldr	r0, [r0, #0]
 8003bcc:	6800      	ldr	r0, [r0, #0]
 8003bce:	f380 8808 	msr	MSP, r0
 8003bd2:	b662      	cpsie	i
 8003bd4:	b661      	cpsie	f
 8003bd6:	f3bf 8f4f 	dsb	sy
 8003bda:	f3bf 8f6f 	isb	sy
 8003bde:	df00      	svc	0
 8003be0:	bf00      	nop
 8003be2:	0000      	.short	0x0000
 8003be4:	e000ed08 	.word	0xe000ed08

08003be8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003be8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003bf8 <vPortEnableVFP+0x10>
 8003bec:	6801      	ldr	r1, [r0, #0]
 8003bee:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003bf2:	6001      	str	r1, [r0, #0]
 8003bf4:	4770      	bx	lr
 8003bf6:	0000      	.short	0x0000
 8003bf8:	e000ed88 	.word	0xe000ed88

08003bfc <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003bfc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003c00:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003c04:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8003c08:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003c0a:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003c0c:	4b03      	ldr	r3, [pc, #12]	; (8003c1c <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003c0e:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003c10:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8003c12:	f06f 0302 	mvn.w	r3, #2
 8003c16:	6203      	str	r3, [r0, #32]
}
 8003c18:	4770      	bx	lr
 8003c1a:	bf00      	nop
 8003c1c:	08003b91 	.word	0x08003b91

08003c20 <SVC_Handler>:
	__asm volatile (
 8003c20:	4b07      	ldr	r3, [pc, #28]	; (8003c40 <pxCurrentTCBConst2>)
 8003c22:	6819      	ldr	r1, [r3, #0]
 8003c24:	6808      	ldr	r0, [r1, #0]
 8003c26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c2a:	f380 8809 	msr	PSP, r0
 8003c2e:	f3bf 8f6f 	isb	sy
 8003c32:	f04f 0000 	mov.w	r0, #0
 8003c36:	f380 8811 	msr	BASEPRI, r0
 8003c3a:	4770      	bx	lr
 8003c3c:	f3af 8000 	nop.w

08003c40 <pxCurrentTCBConst2>:
 8003c40:	20003db8 	.word	0x20003db8

08003c44 <vPortEnterCritical>:
 8003c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c48:	b672      	cpsid	i
 8003c4a:	f383 8811 	msr	BASEPRI, r3
 8003c4e:	f3bf 8f6f 	isb	sy
 8003c52:	f3bf 8f4f 	dsb	sy
 8003c56:	b662      	cpsie	i
	uxCriticalNesting++;
 8003c58:	4a0b      	ldr	r2, [pc, #44]	; (8003c88 <vPortEnterCritical+0x44>)
 8003c5a:	6813      	ldr	r3, [r2, #0]
 8003c5c:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8003c5e:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8003c60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8003c62:	d10f      	bne.n	8003c84 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003c64:	4b09      	ldr	r3, [pc, #36]	; (8003c8c <vPortEnterCritical+0x48>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003c6c:	d00a      	beq.n	8003c84 <vPortEnterCritical+0x40>
 8003c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c72:	b672      	cpsid	i
 8003c74:	f383 8811 	msr	BASEPRI, r3
 8003c78:	f3bf 8f6f 	isb	sy
 8003c7c:	f3bf 8f4f 	dsb	sy
 8003c80:	b662      	cpsie	i
 8003c82:	e7fe      	b.n	8003c82 <vPortEnterCritical+0x3e>
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop
 8003c88:	20000004 	.word	0x20000004
 8003c8c:	e000ed04 	.word	0xe000ed04

08003c90 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8003c90:	4a09      	ldr	r2, [pc, #36]	; (8003cb8 <vPortExitCritical+0x28>)
 8003c92:	6813      	ldr	r3, [r2, #0]
 8003c94:	b953      	cbnz	r3, 8003cac <vPortExitCritical+0x1c>
 8003c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c9a:	b672      	cpsid	i
 8003c9c:	f383 8811 	msr	BASEPRI, r3
 8003ca0:	f3bf 8f6f 	isb	sy
 8003ca4:	f3bf 8f4f 	dsb	sy
 8003ca8:	b662      	cpsie	i
 8003caa:	e7fe      	b.n	8003caa <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 8003cac:	3b01      	subs	r3, #1
 8003cae:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003cb0:	b90b      	cbnz	r3, 8003cb6 <vPortExitCritical+0x26>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003cb2:	f383 8811 	msr	BASEPRI, r3
 8003cb6:	4770      	bx	lr
 8003cb8:	20000004 	.word	0x20000004
 8003cbc:	00000000 	.word	0x00000000

08003cc0 <PendSV_Handler>:
	__asm volatile
 8003cc0:	f3ef 8009 	mrs	r0, PSP
 8003cc4:	f3bf 8f6f 	isb	sy
 8003cc8:	4b15      	ldr	r3, [pc, #84]	; (8003d20 <pxCurrentTCBConst>)
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	f01e 0f10 	tst.w	lr, #16
 8003cd0:	bf08      	it	eq
 8003cd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003cd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cda:	6010      	str	r0, [r2, #0]
 8003cdc:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8003ce0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003ce4:	b672      	cpsid	i
 8003ce6:	f380 8811 	msr	BASEPRI, r0
 8003cea:	f3bf 8f4f 	dsb	sy
 8003cee:	f3bf 8f6f 	isb	sy
 8003cf2:	b662      	cpsie	i
 8003cf4:	f000 fb74 	bl	80043e0 <vTaskSwitchContext>
 8003cf8:	f04f 0000 	mov.w	r0, #0
 8003cfc:	f380 8811 	msr	BASEPRI, r0
 8003d00:	bc08      	pop	{r3}
 8003d02:	6819      	ldr	r1, [r3, #0]
 8003d04:	6808      	ldr	r0, [r1, #0]
 8003d06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d0a:	f01e 0f10 	tst.w	lr, #16
 8003d0e:	bf08      	it	eq
 8003d10:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003d14:	f380 8809 	msr	PSP, r0
 8003d18:	f3bf 8f6f 	isb	sy
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop

08003d20 <pxCurrentTCBConst>:
 8003d20:	20003db8 	.word	0x20003db8

08003d24 <xPortSysTickHandler>:
{
 8003d24:	b508      	push	{r3, lr}
	__asm volatile
 8003d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d2a:	b672      	cpsid	i
 8003d2c:	f383 8811 	msr	BASEPRI, r3
 8003d30:	f3bf 8f6f 	isb	sy
 8003d34:	f3bf 8f4f 	dsb	sy
 8003d38:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 8003d3a:	f000 f9e3 	bl	8004104 <xTaskIncrementTick>
 8003d3e:	b118      	cbz	r0, 8003d48 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003d40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d44:	4b02      	ldr	r3, [pc, #8]	; (8003d50 <xPortSysTickHandler+0x2c>)
 8003d46:	601a      	str	r2, [r3, #0]
	__asm volatile
 8003d48:	2300      	movs	r3, #0
 8003d4a:	f383 8811 	msr	BASEPRI, r3
 8003d4e:	bd08      	pop	{r3, pc}
 8003d50:	e000ed04 	.word	0xe000ed04

08003d54 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003d54:	4b06      	ldr	r3, [pc, #24]	; (8003d70 <vPortSetupTimerInterrupt+0x1c>)
 8003d56:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d60:	4a04      	ldr	r2, [pc, #16]	; (8003d74 <vPortSetupTimerInterrupt+0x20>)
 8003d62:	3b01      	subs	r3, #1
 8003d64:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003d66:	2207      	movs	r2, #7
 8003d68:	4b03      	ldr	r3, [pc, #12]	; (8003d78 <vPortSetupTimerInterrupt+0x24>)
 8003d6a:	601a      	str	r2, [r3, #0]
 8003d6c:	4770      	bx	lr
 8003d6e:	bf00      	nop
 8003d70:	200000b0 	.word	0x200000b0
 8003d74:	e000e014 	.word	0xe000e014
 8003d78:	e000e010 	.word	0xe000e010

08003d7c <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003d7c:	4b23      	ldr	r3, [pc, #140]	; (8003e0c <xPortStartScheduler+0x90>)
{
 8003d7e:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003d80:	781a      	ldrb	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003d82:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003d84:	b2d2      	uxtb	r2, r2
 8003d86:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003d88:	22ff      	movs	r2, #255	; 0xff
 8003d8a:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003d8c:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003d8e:	4a20      	ldr	r2, [pc, #128]	; (8003e10 <xPortStartScheduler+0x94>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003d96:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8003d9a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003d9e:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003da0:	2207      	movs	r2, #7
 8003da2:	4b1c      	ldr	r3, [pc, #112]	; (8003e14 <xPortStartScheduler+0x98>)
 8003da4:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003da6:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8003daa:	1e54      	subs	r4, r2, #1
 8003dac:	0600      	lsls	r0, r0, #24
 8003dae:	d423      	bmi.n	8003df8 <xPortStartScheduler+0x7c>
 8003db0:	b101      	cbz	r1, 8003db4 <xPortStartScheduler+0x38>
 8003db2:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003db8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8003dbc:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003dbe:	9b01      	ldr	r3, [sp, #4]
 8003dc0:	4a12      	ldr	r2, [pc, #72]	; (8003e0c <xPortStartScheduler+0x90>)
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003dc6:	4b14      	ldr	r3, [pc, #80]	; (8003e18 <xPortStartScheduler+0x9c>)
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8003dce:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8003dd6:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8003dd8:	f7ff ffbc 	bl	8003d54 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8003ddc:	2200      	movs	r2, #0
 8003dde:	4b0f      	ldr	r3, [pc, #60]	; (8003e1c <xPortStartScheduler+0xa0>)
 8003de0:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 8003de2:	f7ff ff01 	bl	8003be8 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003de6:	4a0e      	ldr	r2, [pc, #56]	; (8003e20 <xPortStartScheduler+0xa4>)
 8003de8:	6813      	ldr	r3, [r2, #0]
 8003dea:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003dee:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8003df0:	f7ff feea 	bl	8003bc8 <prvPortStartFirstTask>
	prvTaskExitError();
 8003df4:	f7ff fecc 	bl	8003b90 <prvTaskExitError>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003df8:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8003dfc:	2101      	movs	r1, #1
 8003dfe:	0052      	lsls	r2, r2, #1
 8003e00:	b2d2      	uxtb	r2, r2
 8003e02:	f88d 2003 	strb.w	r2, [sp, #3]
 8003e06:	4622      	mov	r2, r4
 8003e08:	e7cd      	b.n	8003da6 <xPortStartScheduler+0x2a>
 8003e0a:	bf00      	nop
 8003e0c:	e000e400 	.word	0xe000e400
 8003e10:	20003db0 	.word	0x20003db0
 8003e14:	20003db4 	.word	0x20003db4
 8003e18:	e000ed20 	.word	0xe000ed20
 8003e1c:	20000004 	.word	0x20000004
 8003e20:	e000ef34 	.word	0xe000ef34

08003e24 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e24:	4a06      	ldr	r2, [pc, #24]	; (8003e40 <prvResetNextTaskUnblockTime+0x1c>)
 8003e26:	6813      	ldr	r3, [r2, #0]
 8003e28:	6819      	ldr	r1, [r3, #0]
 8003e2a:	4b06      	ldr	r3, [pc, #24]	; (8003e44 <prvResetNextTaskUnblockTime+0x20>)
 8003e2c:	b919      	cbnz	r1, 8003e36 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003e2e:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003e32:	601a      	str	r2, [r3, #0]
 8003e34:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003e36:	6812      	ldr	r2, [r2, #0]
 8003e38:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003e3a:	68d2      	ldr	r2, [r2, #12]
 8003e3c:	6852      	ldr	r2, [r2, #4]
 8003e3e:	e7f8      	b.n	8003e32 <prvResetNextTaskUnblockTime+0xe>
 8003e40:	20003dbc 	.word	0x20003dbc
 8003e44:	20003e94 	.word	0x20003e94

08003e48 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003e4a:	4b1b      	ldr	r3, [pc, #108]	; (8003eb8 <prvAddCurrentTaskToDelayedList+0x70>)
{
 8003e4c:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e4e:	4e1b      	ldr	r6, [pc, #108]	; (8003ebc <prvAddCurrentTaskToDelayedList+0x74>)
{
 8003e50:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 8003e52:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e54:	6830      	ldr	r0, [r6, #0]
 8003e56:	3004      	adds	r0, #4
 8003e58:	f7ff fe89 	bl	8003b6e <uxListRemove>
 8003e5c:	4633      	mov	r3, r6
 8003e5e:	b940      	cbnz	r0, 8003e72 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003e60:	6831      	ldr	r1, [r6, #0]
 8003e62:	2001      	movs	r0, #1
 8003e64:	4e16      	ldr	r6, [pc, #88]	; (8003ec0 <prvAddCurrentTaskToDelayedList+0x78>)
 8003e66:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8003e68:	6832      	ldr	r2, [r6, #0]
 8003e6a:	4088      	lsls	r0, r1
 8003e6c:	ea22 0200 	bic.w	r2, r2, r0
 8003e70:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003e72:	1c62      	adds	r2, r4, #1
 8003e74:	d107      	bne.n	8003e86 <prvAddCurrentTaskToDelayedList+0x3e>
 8003e76:	b137      	cbz	r7, 8003e86 <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e78:	6819      	ldr	r1, [r3, #0]
 8003e7a:	4812      	ldr	r0, [pc, #72]	; (8003ec4 <prvAddCurrentTaskToDelayedList+0x7c>)
 8003e7c:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003e7e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e82:	f7ff be51 	b.w	8003b28 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003e86:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003e88:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 8003e8a:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003e8c:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8003e8e:	d907      	bls.n	8003ea0 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e90:	4a0d      	ldr	r2, [pc, #52]	; (8003ec8 <prvAddCurrentTaskToDelayedList+0x80>)
 8003e92:	6810      	ldr	r0, [r2, #0]
 8003e94:	6819      	ldr	r1, [r3, #0]
}
 8003e96:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e9a:	3104      	adds	r1, #4
 8003e9c:	f7ff be50 	b.w	8003b40 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ea0:	4a0a      	ldr	r2, [pc, #40]	; (8003ecc <prvAddCurrentTaskToDelayedList+0x84>)
 8003ea2:	6810      	ldr	r0, [r2, #0]
 8003ea4:	6819      	ldr	r1, [r3, #0]
 8003ea6:	3104      	adds	r1, #4
 8003ea8:	f7ff fe4a 	bl	8003b40 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003eac:	4b08      	ldr	r3, [pc, #32]	; (8003ed0 <prvAddCurrentTaskToDelayedList+0x88>)
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	4294      	cmp	r4, r2
 8003eb2:	d200      	bcs.n	8003eb6 <prvAddCurrentTaskToDelayedList+0x6e>
					xNextTaskUnblockTime = xTimeToWake;
 8003eb4:	601c      	str	r4, [r3, #0]
 8003eb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003eb8:	20003edc 	.word	0x20003edc
 8003ebc:	20003db8 	.word	0x20003db8
 8003ec0:	20003e64 	.word	0x20003e64
 8003ec4:	20003eb4 	.word	0x20003eb4
 8003ec8:	20003dc0 	.word	0x20003dc0
 8003ecc:	20003dbc 	.word	0x20003dbc
 8003ed0:	20003e94 	.word	0x20003e94

08003ed4 <xTaskCreate>:
	{
 8003ed4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ed8:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 8003edc:	4680      	mov	r8, r0
 8003ede:	460f      	mov	r7, r1
 8003ee0:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ee2:	4650      	mov	r0, sl
	{
 8003ee4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ee6:	f7ff fd43 	bl	8003970 <pvPortMalloc>
			if( pxStack != NULL )
 8003eea:	4605      	mov	r5, r0
 8003eec:	2800      	cmp	r0, #0
 8003eee:	f000 8096 	beq.w	800401e <xTaskCreate+0x14a>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003ef2:	2054      	movs	r0, #84	; 0x54
 8003ef4:	f7ff fd3c 	bl	8003970 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8003ef8:	4604      	mov	r4, r0
 8003efa:	2800      	cmp	r0, #0
 8003efc:	f000 808c 	beq.w	8004018 <xTaskCreate+0x144>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003f00:	f1aa 0a04 	sub.w	sl, sl, #4
					pxNewTCB->pxStack = pxStack;
 8003f04:	6305      	str	r5, [r0, #48]	; 0x30
 8003f06:	1e7b      	subs	r3, r7, #1
 8003f08:	f100 0234 	add.w	r2, r0, #52	; 0x34
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003f0c:	4455      	add	r5, sl
 8003f0e:	370f      	adds	r7, #15
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003f10:	f025 0a07 	bic.w	sl, r5, #7
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003f14:	7859      	ldrb	r1, [r3, #1]
 8003f16:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 8003f1a:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8003f1e:	b109      	cbz	r1, 8003f24 <xTaskCreate+0x50>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003f20:	42bb      	cmp	r3, r7
 8003f22:	d1f7      	bne.n	8003f14 <xTaskCreate+0x40>
 8003f24:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003f26:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003f2a:	1d27      	adds	r7, r4, #4
 8003f2c:	2d06      	cmp	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003f2e:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003f32:	4638      	mov	r0, r7
		pxNewTCB->uxMutexesHeld = 0;
 8003f34:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
 8003f38:	bf28      	it	cs
 8003f3a:	2506      	movcs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 8003f3c:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8003f3e:	6465      	str	r5, [r4, #68]	; 0x44
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f40:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003f44:	f7ff fded 	bl	8003b22 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003f48:	f104 0018 	add.w	r0, r4, #24
 8003f4c:	f7ff fde9 	bl	8003b22 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8003f50:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003f54:	6124      	str	r4, [r4, #16]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003f56:	464a      	mov	r2, r9
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f58:	61a5      	str	r5, [r4, #24]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003f5a:	4641      	mov	r1, r8
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003f5c:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003f5e:	4650      	mov	r0, sl
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003f60:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003f64:	f7ff fe4a 	bl	8003bfc <pxPortInitialiseStack>
 8003f68:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8003f6a:	b106      	cbz	r6, 8003f6e <xTaskCreate+0x9a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003f6c:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 8003f6e:	f7ff fe69 	bl	8003c44 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8003f72:	4b32      	ldr	r3, [pc, #200]	; (800403c <xTaskCreate+0x168>)
		if( pxCurrentTCB == NULL )
 8003f74:	4e32      	ldr	r6, [pc, #200]	; (8004040 <xTaskCreate+0x16c>)
		uxCurrentNumberOfTasks++;
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 800406c <xTaskCreate+0x198>
 8003f7c:	3201      	adds	r2, #1
 8003f7e:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8003f80:	6835      	ldr	r5, [r6, #0]
 8003f82:	2d00      	cmp	r5, #0
 8003f84:	d14e      	bne.n	8004024 <xTaskCreate+0x150>
			pxCurrentTCB = pxNewTCB;
 8003f86:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d11d      	bne.n	8003fca <xTaskCreate+0xf6>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003f8e:	eb08 0005 	add.w	r0, r8, r5
 8003f92:	3514      	adds	r5, #20
 8003f94:	f7ff fdba 	bl	8003b0c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f98:	2d8c      	cmp	r5, #140	; 0x8c
 8003f9a:	d1f8      	bne.n	8003f8e <xTaskCreate+0xba>
	vListInitialise( &xDelayedTaskList1 );
 8003f9c:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8004070 <xTaskCreate+0x19c>
	vListInitialise( &xDelayedTaskList2 );
 8003fa0:	4d28      	ldr	r5, [pc, #160]	; (8004044 <xTaskCreate+0x170>)
	vListInitialise( &xDelayedTaskList1 );
 8003fa2:	4648      	mov	r0, r9
 8003fa4:	f7ff fdb2 	bl	8003b0c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003fa8:	4628      	mov	r0, r5
 8003faa:	f7ff fdaf 	bl	8003b0c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003fae:	4826      	ldr	r0, [pc, #152]	; (8004048 <xTaskCreate+0x174>)
 8003fb0:	f7ff fdac 	bl	8003b0c <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8003fb4:	4825      	ldr	r0, [pc, #148]	; (800404c <xTaskCreate+0x178>)
 8003fb6:	f7ff fda9 	bl	8003b0c <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8003fba:	4825      	ldr	r0, [pc, #148]	; (8004050 <xTaskCreate+0x17c>)
 8003fbc:	f7ff fda6 	bl	8003b0c <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8003fc0:	4b24      	ldr	r3, [pc, #144]	; (8004054 <xTaskCreate+0x180>)
 8003fc2:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003fc6:	4b24      	ldr	r3, [pc, #144]	; (8004058 <xTaskCreate+0x184>)
 8003fc8:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8003fca:	4a24      	ldr	r2, [pc, #144]	; (800405c <xTaskCreate+0x188>)
		prvAddTaskToReadyList( pxNewTCB );
 8003fcc:	2501      	movs	r5, #1
 8003fce:	4924      	ldr	r1, [pc, #144]	; (8004060 <xTaskCreate+0x18c>)
		uxTaskNumber++;
 8003fd0:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8003fd2:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8003fd4:	3301      	adds	r3, #1
 8003fd6:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8003fd8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003fda:	fa05 f302 	lsl.w	r3, r5, r2
 8003fde:	4303      	orrs	r3, r0
 8003fe0:	2014      	movs	r0, #20
 8003fe2:	600b      	str	r3, [r1, #0]
 8003fe4:	4639      	mov	r1, r7
 8003fe6:	fb00 8002 	mla	r0, r0, r2, r8
 8003fea:	f7ff fd9d 	bl	8003b28 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8003fee:	f7ff fe4f 	bl	8003c90 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8003ff2:	4b1c      	ldr	r3, [pc, #112]	; (8004064 <xTaskCreate+0x190>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	b163      	cbz	r3, 8004012 <xTaskCreate+0x13e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003ff8:	6833      	ldr	r3, [r6, #0]
 8003ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ffc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d207      	bcs.n	8004012 <xTaskCreate+0x13e>
			taskYIELD_IF_USING_PREEMPTION();
 8004002:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004006:	4b18      	ldr	r3, [pc, #96]	; (8004068 <xTaskCreate+0x194>)
 8004008:	601a      	str	r2, [r3, #0]
 800400a:	f3bf 8f4f 	dsb	sy
 800400e:	f3bf 8f6f 	isb	sy
	}
 8004012:	4628      	mov	r0, r5
 8004014:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 8004018:	4628      	mov	r0, r5
 800401a:	f7ff fd3b 	bl	8003a94 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800401e:	f04f 35ff 	mov.w	r5, #4294967295
 8004022:	e7f6      	b.n	8004012 <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
 8004024:	4b0f      	ldr	r3, [pc, #60]	; (8004064 <xTaskCreate+0x190>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d1ce      	bne.n	8003fca <xTaskCreate+0xf6>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800402c:	6833      	ldr	r3, [r6, #0]
 800402e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004030:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004032:	429a      	cmp	r2, r3
 8004034:	d8c9      	bhi.n	8003fca <xTaskCreate+0xf6>
					pxCurrentTCB = pxNewTCB;
 8004036:	6034      	str	r4, [r6, #0]
 8004038:	e7c7      	b.n	8003fca <xTaskCreate+0xf6>
 800403a:	bf00      	nop
 800403c:	20003e50 	.word	0x20003e50
 8004040:	20003db8 	.word	0x20003db8
 8004044:	20003e7c 	.word	0x20003e7c
 8004048:	20003e9c 	.word	0x20003e9c
 800404c:	20003ec8 	.word	0x20003ec8
 8004050:	20003eb4 	.word	0x20003eb4
 8004054:	20003dbc 	.word	0x20003dbc
 8004058:	20003dc0 	.word	0x20003dc0
 800405c:	20003e60 	.word	0x20003e60
 8004060:	20003e64 	.word	0x20003e64
 8004064:	20003eb0 	.word	0x20003eb0
 8004068:	e000ed04 	.word	0xe000ed04
 800406c:	20003dc4 	.word	0x20003dc4
 8004070:	20003e68 	.word	0x20003e68

08004074 <vTaskStartScheduler>:
{
 8004074:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 8004076:	4b19      	ldr	r3, [pc, #100]	; (80040dc <vTaskStartScheduler+0x68>)
 8004078:	2400      	movs	r4, #0
 800407a:	2280      	movs	r2, #128	; 0x80
 800407c:	4918      	ldr	r1, [pc, #96]	; (80040e0 <vTaskStartScheduler+0x6c>)
 800407e:	9301      	str	r3, [sp, #4]
 8004080:	4623      	mov	r3, r4
 8004082:	9400      	str	r4, [sp, #0]
 8004084:	4817      	ldr	r0, [pc, #92]	; (80040e4 <vTaskStartScheduler+0x70>)
 8004086:	f7ff ff25 	bl	8003ed4 <xTaskCreate>
	if( xReturn == pdPASS )
 800408a:	2801      	cmp	r0, #1
 800408c:	d116      	bne.n	80040bc <vTaskStartScheduler+0x48>
	__asm volatile
 800408e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004092:	b672      	cpsid	i
 8004094:	f383 8811 	msr	BASEPRI, r3
 8004098:	f3bf 8f6f 	isb	sy
 800409c:	f3bf 8f4f 	dsb	sy
 80040a0:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 80040a2:	f04f 32ff 	mov.w	r2, #4294967295
 80040a6:	4b10      	ldr	r3, [pc, #64]	; (80040e8 <vTaskStartScheduler+0x74>)
 80040a8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80040aa:	4b10      	ldr	r3, [pc, #64]	; (80040ec <vTaskStartScheduler+0x78>)
 80040ac:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80040ae:	4b10      	ldr	r3, [pc, #64]	; (80040f0 <vTaskStartScheduler+0x7c>)
 80040b0:	601c      	str	r4, [r3, #0]
}
 80040b2:	b002      	add	sp, #8
 80040b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 80040b8:	f7ff be60 	b.w	8003d7c <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80040bc:	3001      	adds	r0, #1
 80040be:	d10a      	bne.n	80040d6 <vTaskStartScheduler+0x62>
 80040c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c4:	b672      	cpsid	i
 80040c6:	f383 8811 	msr	BASEPRI, r3
 80040ca:	f3bf 8f6f 	isb	sy
 80040ce:	f3bf 8f4f 	dsb	sy
 80040d2:	b662      	cpsie	i
 80040d4:	e7fe      	b.n	80040d4 <vTaskStartScheduler+0x60>
}
 80040d6:	b002      	add	sp, #8
 80040d8:	bd10      	pop	{r4, pc}
 80040da:	bf00      	nop
 80040dc:	20003e90 	.word	0x20003e90
 80040e0:	08007525 	.word	0x08007525
 80040e4:	0800436d 	.word	0x0800436d
 80040e8:	20003e94 	.word	0x20003e94
 80040ec:	20003eb0 	.word	0x20003eb0
 80040f0:	20003edc 	.word	0x20003edc

080040f4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80040f4:	4a02      	ldr	r2, [pc, #8]	; (8004100 <vTaskSuspendAll+0xc>)
 80040f6:	6813      	ldr	r3, [r2, #0]
 80040f8:	3301      	adds	r3, #1
 80040fa:	6013      	str	r3, [r2, #0]
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop
 8004100:	20003e5c 	.word	0x20003e5c

08004104 <xTaskIncrementTick>:
{
 8004104:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004108:	4b3d      	ldr	r3, [pc, #244]	; (8004200 <xTaskIncrementTick+0xfc>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d155      	bne.n	80041bc <xTaskIncrementTick+0xb8>
		const TickType_t xConstTickCount = xTickCount + 1;
 8004110:	4b3c      	ldr	r3, [pc, #240]	; (8004204 <xTaskIncrementTick+0x100>)
 8004112:	681c      	ldr	r4, [r3, #0]
 8004114:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8004116:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 8004118:	b9cc      	cbnz	r4, 800414e <xTaskIncrementTick+0x4a>
			taskSWITCH_DELAYED_LISTS();
 800411a:	4b3b      	ldr	r3, [pc, #236]	; (8004208 <xTaskIncrementTick+0x104>)
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	6812      	ldr	r2, [r2, #0]
 8004120:	b152      	cbz	r2, 8004138 <xTaskIncrementTick+0x34>
 8004122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004126:	b672      	cpsid	i
 8004128:	f383 8811 	msr	BASEPRI, r3
 800412c:	f3bf 8f6f 	isb	sy
 8004130:	f3bf 8f4f 	dsb	sy
 8004134:	b662      	cpsie	i
 8004136:	e7fe      	b.n	8004136 <xTaskIncrementTick+0x32>
 8004138:	4a34      	ldr	r2, [pc, #208]	; (800420c <xTaskIncrementTick+0x108>)
 800413a:	6819      	ldr	r1, [r3, #0]
 800413c:	6810      	ldr	r0, [r2, #0]
 800413e:	6018      	str	r0, [r3, #0]
 8004140:	6011      	str	r1, [r2, #0]
 8004142:	4a33      	ldr	r2, [pc, #204]	; (8004210 <xTaskIncrementTick+0x10c>)
 8004144:	6813      	ldr	r3, [r2, #0]
 8004146:	3301      	adds	r3, #1
 8004148:	6013      	str	r3, [r2, #0]
 800414a:	f7ff fe6b 	bl	8003e24 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800414e:	4d31      	ldr	r5, [pc, #196]	; (8004214 <xTaskIncrementTick+0x110>)
 8004150:	f04f 0b00 	mov.w	fp, #0
 8004154:	4f30      	ldr	r7, [pc, #192]	; (8004218 <xTaskIncrementTick+0x114>)
 8004156:	682b      	ldr	r3, [r5, #0]
 8004158:	429c      	cmp	r4, r3
 800415a:	d33e      	bcc.n	80041da <xTaskIncrementTick+0xd6>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800415c:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8004208 <xTaskIncrementTick+0x104>
					prvAddTaskToReadyList( pxTCB );
 8004160:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8004228 <xTaskIncrementTick+0x124>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004164:	f8d8 2000 	ldr.w	r2, [r8]
 8004168:	6812      	ldr	r2, [r2, #0]
 800416a:	bb72      	cbnz	r2, 80041ca <xTaskIncrementTick+0xc6>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800416c:	f04f 32ff 	mov.w	r2, #4294967295
 8004170:	602a      	str	r2, [r5, #0]
					break;
 8004172:	e032      	b.n	80041da <xTaskIncrementTick+0xd6>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004174:	f106 0a04 	add.w	sl, r6, #4
 8004178:	4650      	mov	r0, sl
 800417a:	f7ff fcf8 	bl	8003b6e <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800417e:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8004180:	b119      	cbz	r1, 800418a <xTaskIncrementTick+0x86>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004182:	f106 0018 	add.w	r0, r6, #24
 8004186:	f7ff fcf2 	bl	8003b6e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800418a:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800418c:	2201      	movs	r2, #1
 800418e:	f8d9 3000 	ldr.w	r3, [r9]
 8004192:	f04f 0e14 	mov.w	lr, #20
 8004196:	fa02 f100 	lsl.w	r1, r2, r0
 800419a:	4319      	orrs	r1, r3
 800419c:	4b1f      	ldr	r3, [pc, #124]	; (800421c <xTaskIncrementTick+0x118>)
 800419e:	f8c9 1000 	str.w	r1, [r9]
 80041a2:	4651      	mov	r1, sl
 80041a4:	fb0e 3000 	mla	r0, lr, r0, r3
 80041a8:	f7ff fcbe 	bl	8003b28 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80041ac:	6838      	ldr	r0, [r7, #0]
 80041ae:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 80041b0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 80041b2:	4291      	cmp	r1, r2
 80041b4:	bf28      	it	cs
 80041b6:	f04f 0b01 	movcs.w	fp, #1
 80041ba:	e7d3      	b.n	8004164 <xTaskIncrementTick+0x60>
		++uxPendedTicks;
 80041bc:	4a18      	ldr	r2, [pc, #96]	; (8004220 <xTaskIncrementTick+0x11c>)
BaseType_t xSwitchRequired = pdFALSE;
 80041be:	f04f 0b00 	mov.w	fp, #0
		++uxPendedTicks;
 80041c2:	6813      	ldr	r3, [r2, #0]
 80041c4:	3301      	adds	r3, #1
 80041c6:	6013      	str	r3, [r2, #0]
 80041c8:	e011      	b.n	80041ee <xTaskIncrementTick+0xea>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80041ca:	f8d8 2000 	ldr.w	r2, [r8]
 80041ce:	68d2      	ldr	r2, [r2, #12]
 80041d0:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80041d2:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 80041d4:	428c      	cmp	r4, r1
 80041d6:	d2cd      	bcs.n	8004174 <xTaskIncrementTick+0x70>
						xNextTaskUnblockTime = xItemValue;
 80041d8:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80041da:	683a      	ldr	r2, [r7, #0]
 80041dc:	4b0f      	ldr	r3, [pc, #60]	; (800421c <xTaskIncrementTick+0x118>)
 80041de:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80041e0:	2214      	movs	r2, #20
 80041e2:	434a      	muls	r2, r1
 80041e4:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 80041e6:	2a02      	cmp	r2, #2
 80041e8:	bf28      	it	cs
 80041ea:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 80041ee:	4a0d      	ldr	r2, [pc, #52]	; (8004224 <xTaskIncrementTick+0x120>)
 80041f0:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 80041f2:	2a00      	cmp	r2, #0
 80041f4:	bf18      	it	ne
 80041f6:	f04f 0b01 	movne.w	fp, #1
}
 80041fa:	4658      	mov	r0, fp
 80041fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004200:	20003e5c 	.word	0x20003e5c
 8004204:	20003edc 	.word	0x20003edc
 8004208:	20003dbc 	.word	0x20003dbc
 800420c:	20003dc0 	.word	0x20003dc0
 8004210:	20003e98 	.word	0x20003e98
 8004214:	20003e94 	.word	0x20003e94
 8004218:	20003db8 	.word	0x20003db8
 800421c:	20003dc4 	.word	0x20003dc4
 8004220:	20003e58 	.word	0x20003e58
 8004224:	20003ee0 	.word	0x20003ee0
 8004228:	20003e64 	.word	0x20003e64

0800422c <xTaskResumeAll>:
{
 800422c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8004230:	4c32      	ldr	r4, [pc, #200]	; (80042fc <xTaskResumeAll+0xd0>)
 8004232:	6823      	ldr	r3, [r4, #0]
 8004234:	b953      	cbnz	r3, 800424c <xTaskResumeAll+0x20>
 8004236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800423a:	b672      	cpsid	i
 800423c:	f383 8811 	msr	BASEPRI, r3
 8004240:	f3bf 8f6f 	isb	sy
 8004244:	f3bf 8f4f 	dsb	sy
 8004248:	b662      	cpsie	i
 800424a:	e7fe      	b.n	800424a <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
 800424c:	f7ff fcfa 	bl	8003c44 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8004250:	6823      	ldr	r3, [r4, #0]
 8004252:	3b01      	subs	r3, #1
 8004254:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004256:	6824      	ldr	r4, [r4, #0]
 8004258:	b12c      	cbz	r4, 8004266 <xTaskResumeAll+0x3a>
BaseType_t xAlreadyYielded = pdFALSE;
 800425a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800425c:	f7ff fd18 	bl	8003c90 <vPortExitCritical>
}
 8004260:	4620      	mov	r0, r4
 8004262:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004266:	4b26      	ldr	r3, [pc, #152]	; (8004300 <xTaskResumeAll+0xd4>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d0f5      	beq.n	800425a <xTaskResumeAll+0x2e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800426e:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8004318 <xTaskResumeAll+0xec>
					prvAddTaskToReadyList( pxTCB );
 8004272:	4f24      	ldr	r7, [pc, #144]	; (8004304 <xTaskResumeAll+0xd8>)
 8004274:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 800431c <xTaskResumeAll+0xf0>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004278:	f8d9 3000 	ldr.w	r3, [r9]
 800427c:	b9e3      	cbnz	r3, 80042b8 <xTaskResumeAll+0x8c>
				if( pxTCB != NULL )
 800427e:	b10c      	cbz	r4, 8004284 <xTaskResumeAll+0x58>
					prvResetNextTaskUnblockTime();
 8004280:	f7ff fdd0 	bl	8003e24 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004284:	4d20      	ldr	r5, [pc, #128]	; (8004308 <xTaskResumeAll+0xdc>)
 8004286:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004288:	b144      	cbz	r4, 800429c <xTaskResumeAll+0x70>
								xYieldPending = pdTRUE;
 800428a:	4e20      	ldr	r6, [pc, #128]	; (800430c <xTaskResumeAll+0xe0>)
 800428c:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800428e:	f7ff ff39 	bl	8004104 <xTaskIncrementTick>
 8004292:	b100      	cbz	r0, 8004296 <xTaskResumeAll+0x6a>
								xYieldPending = pdTRUE;
 8004294:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004296:	3c01      	subs	r4, #1
 8004298:	d1f9      	bne.n	800428e <xTaskResumeAll+0x62>
						uxPendedTicks = 0;
 800429a:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 800429c:	4b1b      	ldr	r3, [pc, #108]	; (800430c <xTaskResumeAll+0xe0>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d0da      	beq.n	800425a <xTaskResumeAll+0x2e>
					taskYIELD_IF_USING_PREEMPTION();
 80042a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042a8:	4b19      	ldr	r3, [pc, #100]	; (8004310 <xTaskResumeAll+0xe4>)
 80042aa:	601a      	str	r2, [r3, #0]
 80042ac:	f3bf 8f4f 	dsb	sy
 80042b0:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80042b4:	2401      	movs	r4, #1
 80042b6:	e7d1      	b.n	800425c <xTaskResumeAll+0x30>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80042b8:	f8d9 300c 	ldr.w	r3, [r9, #12]
					prvAddTaskToReadyList( pxTCB );
 80042bc:	2501      	movs	r5, #1
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80042be:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80042c0:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80042c2:	f104 0018 	add.w	r0, r4, #24
 80042c6:	f7ff fc52 	bl	8003b6e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80042ca:	4630      	mov	r0, r6
 80042cc:	f7ff fc4f 	bl	8003b6e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80042d0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80042d2:	6839      	ldr	r1, [r7, #0]
 80042d4:	2014      	movs	r0, #20
 80042d6:	fa05 f302 	lsl.w	r3, r5, r2
 80042da:	fb00 8002 	mla	r0, r0, r2, r8
 80042de:	430b      	orrs	r3, r1
 80042e0:	4631      	mov	r1, r6
 80042e2:	603b      	str	r3, [r7, #0]
 80042e4:	f7ff fc20 	bl	8003b28 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80042e8:	4b0a      	ldr	r3, [pc, #40]	; (8004314 <xTaskResumeAll+0xe8>)
 80042ea:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d3c1      	bcc.n	8004278 <xTaskResumeAll+0x4c>
						xYieldPending = pdTRUE;
 80042f4:	4b05      	ldr	r3, [pc, #20]	; (800430c <xTaskResumeAll+0xe0>)
 80042f6:	601d      	str	r5, [r3, #0]
 80042f8:	e7be      	b.n	8004278 <xTaskResumeAll+0x4c>
 80042fa:	bf00      	nop
 80042fc:	20003e5c 	.word	0x20003e5c
 8004300:	20003e50 	.word	0x20003e50
 8004304:	20003e64 	.word	0x20003e64
 8004308:	20003e58 	.word	0x20003e58
 800430c:	20003ee0 	.word	0x20003ee0
 8004310:	e000ed04 	.word	0xe000ed04
 8004314:	20003db8 	.word	0x20003db8
 8004318:	20003e9c 	.word	0x20003e9c
 800431c:	20003dc4 	.word	0x20003dc4

08004320 <vTaskDelay>:
	{
 8004320:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004322:	b940      	cbnz	r0, 8004336 <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8004324:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004328:	4b0e      	ldr	r3, [pc, #56]	; (8004364 <vTaskDelay+0x44>)
 800432a:	601a      	str	r2, [r3, #0]
 800432c:	f3bf 8f4f 	dsb	sy
 8004330:	f3bf 8f6f 	isb	sy
 8004334:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8004336:	4b0c      	ldr	r3, [pc, #48]	; (8004368 <vTaskDelay+0x48>)
 8004338:	6819      	ldr	r1, [r3, #0]
 800433a:	b151      	cbz	r1, 8004352 <vTaskDelay+0x32>
 800433c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004340:	b672      	cpsid	i
 8004342:	f383 8811 	msr	BASEPRI, r3
 8004346:	f3bf 8f6f 	isb	sy
 800434a:	f3bf 8f4f 	dsb	sy
 800434e:	b662      	cpsie	i
 8004350:	e7fe      	b.n	8004350 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8004352:	f7ff fecf 	bl	80040f4 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004356:	f7ff fd77 	bl	8003e48 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800435a:	f7ff ff67 	bl	800422c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800435e:	2800      	cmp	r0, #0
 8004360:	d0e0      	beq.n	8004324 <vTaskDelay+0x4>
 8004362:	bd08      	pop	{r3, pc}
 8004364:	e000ed04 	.word	0xe000ed04
 8004368:	20003e5c 	.word	0x20003e5c

0800436c <prvIdleTask>:
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800436c:	4e17      	ldr	r6, [pc, #92]	; (80043cc <prvIdleTask+0x60>)
{
 800436e:	b508      	push	{r3, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004370:	4c17      	ldr	r4, [pc, #92]	; (80043d0 <prvIdleTask+0x64>)
 8004372:	6823      	ldr	r3, [r4, #0]
 8004374:	b963      	cbnz	r3, 8004390 <prvIdleTask+0x24>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004376:	4b17      	ldr	r3, [pc, #92]	; (80043d4 <prvIdleTask+0x68>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	2b01      	cmp	r3, #1
 800437c:	d9f8      	bls.n	8004370 <prvIdleTask+0x4>
				taskYIELD();
 800437e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004382:	4b15      	ldr	r3, [pc, #84]	; (80043d8 <prvIdleTask+0x6c>)
 8004384:	601a      	str	r2, [r3, #0]
 8004386:	f3bf 8f4f 	dsb	sy
 800438a:	f3bf 8f6f 	isb	sy
 800438e:	e7ef      	b.n	8004370 <prvIdleTask+0x4>
			vTaskSuspendAll();
 8004390:	f7ff feb0 	bl	80040f4 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8004394:	6835      	ldr	r5, [r6, #0]
			( void ) xTaskResumeAll();
 8004396:	f7ff ff49 	bl	800422c <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 800439a:	2d00      	cmp	r5, #0
 800439c:	d0e9      	beq.n	8004372 <prvIdleTask+0x6>
				taskENTER_CRITICAL();
 800439e:	f7ff fc51 	bl	8003c44 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80043a2:	68f3      	ldr	r3, [r6, #12]
 80043a4:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043a6:	1d28      	adds	r0, r5, #4
 80043a8:	f7ff fbe1 	bl	8003b6e <uxListRemove>
					--uxCurrentNumberOfTasks;
 80043ac:	4a0b      	ldr	r2, [pc, #44]	; (80043dc <prvIdleTask+0x70>)
 80043ae:	6813      	ldr	r3, [r2, #0]
 80043b0:	3b01      	subs	r3, #1
 80043b2:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 80043b4:	6823      	ldr	r3, [r4, #0]
 80043b6:	3b01      	subs	r3, #1
 80043b8:	6023      	str	r3, [r4, #0]
				taskEXIT_CRITICAL();
 80043ba:	f7ff fc69 	bl	8003c90 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 80043be:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80043c0:	f7ff fb68 	bl	8003a94 <vPortFree>
			vPortFree( pxTCB );
 80043c4:	4628      	mov	r0, r5
 80043c6:	f7ff fb65 	bl	8003a94 <vPortFree>
 80043ca:	e7d2      	b.n	8004372 <prvIdleTask+0x6>
 80043cc:	20003ec8 	.word	0x20003ec8
 80043d0:	20003e54 	.word	0x20003e54
 80043d4:	20003dc4 	.word	0x20003dc4
 80043d8:	e000ed04 	.word	0xe000ed04
 80043dc:	20003e50 	.word	0x20003e50

080043e0 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80043e0:	4b18      	ldr	r3, [pc, #96]	; (8004444 <vTaskSwitchContext+0x64>)
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	4b18      	ldr	r3, [pc, #96]	; (8004448 <vTaskSwitchContext+0x68>)
{
 80043e6:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80043e8:	b112      	cbz	r2, 80043f0 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 80043ea:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80043ec:	601a      	str	r2, [r3, #0]
 80043ee:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 80043f0:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80043f2:	4b16      	ldr	r3, [pc, #88]	; (800444c <vTaskSwitchContext+0x6c>)
 80043f4:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 80043f6:	fab3 f383 	clz	r3, r3
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	2214      	movs	r2, #20
 80043fe:	4914      	ldr	r1, [pc, #80]	; (8004450 <vTaskSwitchContext+0x70>)
 8004400:	f1c3 031f 	rsb	r3, r3, #31
 8004404:	435a      	muls	r2, r3
 8004406:	588c      	ldr	r4, [r1, r2]
 8004408:	1888      	adds	r0, r1, r2
 800440a:	b954      	cbnz	r4, 8004422 <vTaskSwitchContext+0x42>
	__asm volatile
 800440c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004410:	b672      	cpsid	i
 8004412:	f383 8811 	msr	BASEPRI, r3
 8004416:	f3bf 8f6f 	isb	sy
 800441a:	f3bf 8f4f 	dsb	sy
 800441e:	b662      	cpsie	i
 8004420:	e7fe      	b.n	8004420 <vTaskSwitchContext+0x40>
 8004422:	6844      	ldr	r4, [r0, #4]
 8004424:	3208      	adds	r2, #8
 8004426:	6864      	ldr	r4, [r4, #4]
 8004428:	440a      	add	r2, r1
 800442a:	4294      	cmp	r4, r2
 800442c:	6044      	str	r4, [r0, #4]
 800442e:	bf04      	itt	eq
 8004430:	6862      	ldreq	r2, [r4, #4]
 8004432:	6042      	streq	r2, [r0, #4]
 8004434:	2214      	movs	r2, #20
 8004436:	fb02 1303 	mla	r3, r2, r3, r1
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	68da      	ldr	r2, [r3, #12]
 800443e:	4b05      	ldr	r3, [pc, #20]	; (8004454 <vTaskSwitchContext+0x74>)
 8004440:	e7d4      	b.n	80043ec <vTaskSwitchContext+0xc>
 8004442:	bf00      	nop
 8004444:	20003e5c 	.word	0x20003e5c
 8004448:	20003ee0 	.word	0x20003ee0
 800444c:	20003e64 	.word	0x20003e64
 8004450:	20003dc4 	.word	0x20003dc4
 8004454:	20003db8 	.word	0x20003db8

08004458 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8004458:	4b05      	ldr	r3, [pc, #20]	; (8004470 <xTaskGetSchedulerState+0x18>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	b133      	cbz	r3, 800446c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800445e:	4b05      	ldr	r3, [pc, #20]	; (8004474 <xTaskGetSchedulerState+0x1c>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8004464:	bf0c      	ite	eq
 8004466:	2002      	moveq	r0, #2
 8004468:	2000      	movne	r0, #0
 800446a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800446c:	2001      	movs	r0, #1
	}
 800446e:	4770      	bx	lr
 8004470:	20003eb0 	.word	0x20003eb0
 8004474:	20003e5c 	.word	0x20003e5c

08004478 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004478:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800447a:	b180      	cbz	r0, 800449e <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800447c:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8004480:	b113      	cbz	r3, 8004488 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8004482:	2300      	movs	r3, #0
 8004484:	f8c0 328c 	str.w	r3, [r0, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8004488:	b109      	cbz	r1, 800448e <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 800448a:	f8c0 1288 	str.w	r1, [r0, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800448e:	2301      	movs	r3, #1
  pdev->id = id;
 8004490:	7002      	strb	r2, [r0, #0]
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8004492:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8004496:	f002 fb89 	bl	8006bac <USBD_LL_Init>

  return USBD_OK;
 800449a:	2000      	movs	r0, #0
 800449c:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800449e:	2002      	movs	r0, #2
}
 80044a0:	bd08      	pop	{r3, pc}

080044a2 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 80044a2:	b119      	cbz	r1, 80044ac <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80044a4:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
    status = USBD_OK;
 80044a8:	2000      	movs	r0, #0
 80044aa:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80044ac:	2002      	movs	r0, #2
  }

  return status;
}
 80044ae:	4770      	bx	lr

080044b0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 80044b0:	b508      	push	{r3, lr}

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80044b2:	f002 fbaf 	bl	8006c14 <USBD_LL_Start>

  return USBD_OK;
}
 80044b6:	2000      	movs	r0, #0
 80044b8:	bd08      	pop	{r3, pc}

080044ba <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80044ba:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;

  if(pdev->pClass != NULL)
 80044bc:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80044c0:	b90b      	cbnz	r3, 80044c6 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 80044c2:	2002      	movs	r0, #2
 80044c4:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4798      	blx	r3
 80044ca:	2800      	cmp	r0, #0
 80044cc:	d1f9      	bne.n	80044c2 <USBD_SetClassConfig+0x8>
      ret = USBD_OK;
    }
  }

  return ret;
}
 80044ce:	bd08      	pop	{r3, pc}

080044d0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80044d0:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80044d2:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	4798      	blx	r3
  return USBD_OK;
}
 80044da:	2000      	movs	r0, #0
 80044dc:	bd08      	pop	{r3, pc}

080044de <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80044de:	b538      	push	{r3, r4, r5, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80044e0:	f500 7520 	add.w	r5, r0, #640	; 0x280
{
 80044e4:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80044e6:	4628      	mov	r0, r5
 80044e8:	f000 faeb 	bl	8004ac2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80044ec:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 80044ee:	f894 1280 	ldrb.w	r1, [r4, #640]	; 0x280
  pdev->ep0_state = USBD_EP0_SETUP;
 80044f2:	f8c4 326c 	str.w	r3, [r4, #620]	; 0x26c
  pdev->ep0_data_len = pdev->request.wLength;
 80044f6:	f8b4 3286 	ldrh.w	r3, [r4, #646]	; 0x286
 80044fa:	f8c4 3270 	str.w	r3, [r4, #624]	; 0x270
  switch (pdev->request.bmRequest & 0x1FU)
 80044fe:	f001 031f 	and.w	r3, r1, #31
 8004502:	2b01      	cmp	r3, #1
 8004504:	d00e      	beq.n	8004524 <USBD_LL_SetupStage+0x46>
 8004506:	d307      	bcc.n	8004518 <USBD_LL_SetupStage+0x3a>
 8004508:	2b02      	cmp	r3, #2
 800450a:	d010      	beq.n	800452e <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
    break;

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800450c:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8004510:	4620      	mov	r0, r4
 8004512:	f002 fbb9 	bl	8006c88 <USBD_LL_StallEP>
    break;
 8004516:	e003      	b.n	8004520 <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 8004518:	4629      	mov	r1, r5
 800451a:	4620      	mov	r0, r4
 800451c:	f000 f900 	bl	8004720 <USBD_StdDevReq>
  }

  return USBD_OK;
}
 8004520:	2000      	movs	r0, #0
 8004522:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 8004524:	4629      	mov	r1, r5
 8004526:	4620      	mov	r0, r4
 8004528:	f000 fa1c 	bl	8004964 <USBD_StdItfReq>
    break;
 800452c:	e7f8      	b.n	8004520 <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);
 800452e:	4629      	mov	r1, r5
 8004530:	4620      	mov	r0, r4
 8004532:	f000 fa3c 	bl	80049ae <USBD_StdEPReq>
    break;
 8004536:	e7f3      	b.n	8004520 <USBD_LL_SetupStage+0x42>

08004538 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004538:	b570      	push	{r4, r5, r6, lr}
 800453a:	4605      	mov	r5, r0
 800453c:	4616      	mov	r6, r2
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800453e:	bb39      	cbnz	r1, 8004590 <USBD_LL_DataOutStage+0x58>
  {
    pep = &pdev->ep_out[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004540:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 8004544:	2b03      	cmp	r3, #3
 8004546:	d11e      	bne.n	8004586 <USBD_LL_DataOutStage+0x4e>
    {
      if(pep->rem_length > pep->maxpacket)
 8004548:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 800454c:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
 8004550:	4293      	cmp	r3, r2
 8004552:	d90b      	bls.n	800456c <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 8004554:	1a9b      	subs	r3, r3, r2

        USBD_CtlContinueRx (pdev,
 8004556:	4631      	mov	r1, r6
 8004558:	429a      	cmp	r2, r3
        pep->rem_length -=  pep->maxpacket;
 800455a:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
        USBD_CtlContinueRx (pdev,
 800455e:	bf8c      	ite	hi
 8004560:	b29a      	uxthhi	r2, r3
 8004562:	b292      	uxthls	r2, r2
 8004564:	f000 fafd 	bl	8004b62 <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8004568:	2000      	movs	r0, #0
    pdev->pClass->DataOut(pdev, epnum);
 800456a:	bd70      	pop	{r4, r5, r6, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800456c:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	b123      	cbz	r3, 800457e <USBD_LL_DataOutStage+0x46>
 8004574:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8004578:	2a03      	cmp	r2, #3
 800457a:	d100      	bne.n	800457e <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev);
 800457c:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 800457e:	4628      	mov	r0, r5
 8004580:	f000 faf7 	bl	8004b72 <USBD_CtlSendStatus>
 8004584:	e7f0      	b.n	8004568 <USBD_LL_DataOutStage+0x30>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8004586:	2b05      	cmp	r3, #5
 8004588:	d1ee      	bne.n	8004568 <USBD_LL_DataOutStage+0x30>
        USBD_LL_StallEP(pdev, 0U);
 800458a:	f002 fb7d 	bl	8006c88 <USBD_LL_StallEP>
 800458e:	e7eb      	b.n	8004568 <USBD_LL_DataOutStage+0x30>
  else if((pdev->pClass->DataOut != NULL) &&
 8004590:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8004594:	699b      	ldr	r3, [r3, #24]
 8004596:	b12b      	cbz	r3, 80045a4 <USBD_LL_DataOutStage+0x6c>
 8004598:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 800459c:	2a03      	cmp	r2, #3
 800459e:	d101      	bne.n	80045a4 <USBD_LL_DataOutStage+0x6c>
    pdev->pClass->DataOut(pdev, epnum);
 80045a0:	4798      	blx	r3
 80045a2:	e7e1      	b.n	8004568 <USBD_LL_DataOutStage+0x30>
    return USBD_FAIL;
 80045a4:	2002      	movs	r0, #2
}
 80045a6:	bd70      	pop	{r4, r5, r6, pc}

080045a8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 80045a8:	b570      	push	{r4, r5, r6, lr}
 80045aa:	4613      	mov	r3, r2
 80045ac:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 80045ae:	460e      	mov	r6, r1
 80045b0:	2900      	cmp	r1, #0
 80045b2:	d147      	bne.n	8004644 <USBD_LL_DataInStage+0x9c>
  {
    pep = &pdev->ep_in[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 80045b4:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 80045b8:	2a02      	cmp	r2, #2
 80045ba:	d13c      	bne.n	8004636 <USBD_LL_DataInStage+0x8e>
    {
      if(pep->rem_length > pep->maxpacket)
 80045bc:	6a05      	ldr	r5, [r0, #32]
 80045be:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80045c0:	4295      	cmp	r5, r2
 80045c2:	d913      	bls.n	80045ec <USBD_LL_DataInStage+0x44>
      {
        pep->rem_length -= pep->maxpacket;
 80045c4:	1aaa      	subs	r2, r5, r2

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 80045c6:	4619      	mov	r1, r3
        pep->rem_length -= pep->maxpacket;
 80045c8:	6202      	str	r2, [r0, #32]
        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 80045ca:	b292      	uxth	r2, r2
 80045cc:	f000 fac1 	bl	8004b52 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80045d0:	4633      	mov	r3, r6
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80045d2:	461a      	mov	r2, r3
 80045d4:	4619      	mov	r1, r3
 80045d6:	4620      	mov	r0, r4
 80045d8:	f002 fba2 	bl	8006d20 <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 80045dc:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
 80045e0:	2000      	movs	r0, #0
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d13a      	bne.n	800465c <USBD_LL_DataInStage+0xb4>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 80045e6:	f884 0278 	strb.w	r0, [r4, #632]	; 0x278
 80045ea:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0U) &&
 80045ec:	69c3      	ldr	r3, [r0, #28]
 80045ee:	fbb3 f5f2 	udiv	r5, r3, r2
 80045f2:	fb02 3515 	mls	r5, r2, r5, r3
 80045f6:	b965      	cbnz	r5, 8004612 <USBD_LL_DataInStage+0x6a>
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d80a      	bhi.n	8004612 <USBD_LL_DataInStage+0x6a>
           (pep->total_length >= pep->maxpacket) &&
 80045fc:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 8004600:	4293      	cmp	r3, r2
 8004602:	d206      	bcs.n	8004612 <USBD_LL_DataInStage+0x6a>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004604:	462a      	mov	r2, r5
 8004606:	f000 faa4 	bl	8004b52 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800460a:	f8c4 5270 	str.w	r5, [r4, #624]	; 0x270
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800460e:	462b      	mov	r3, r5
 8004610:	e7df      	b.n	80045d2 <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8004612:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	b12b      	cbz	r3, 8004626 <USBD_LL_DataInStage+0x7e>
 800461a:	f894 2274 	ldrb.w	r2, [r4, #628]	; 0x274
 800461e:	2a03      	cmp	r2, #3
 8004620:	d101      	bne.n	8004626 <USBD_LL_DataInStage+0x7e>
            pdev->pClass->EP0_TxSent(pdev);
 8004622:	4620      	mov	r0, r4
 8004624:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 8004626:	2180      	movs	r1, #128	; 0x80
 8004628:	4620      	mov	r0, r4
 800462a:	f002 fb2d 	bl	8006c88 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800462e:	4620      	mov	r0, r4
 8004630:	f000 faaa 	bl	8004b88 <USBD_CtlReceiveStatus>
 8004634:	e7d2      	b.n	80045dc <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8004636:	f032 0304 	bics.w	r3, r2, #4
 800463a:	d1cf      	bne.n	80045dc <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 800463c:	2180      	movs	r1, #128	; 0x80
 800463e:	f002 fb23 	bl	8006c88 <USBD_LL_StallEP>
 8004642:	e7cb      	b.n	80045dc <USBD_LL_DataInStage+0x34>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8004644:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8004648:	695b      	ldr	r3, [r3, #20]
 800464a:	b133      	cbz	r3, 800465a <USBD_LL_DataInStage+0xb2>
 800464c:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8004650:	2a03      	cmp	r2, #3
 8004652:	d102      	bne.n	800465a <USBD_LL_DataInStage+0xb2>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum);
 8004654:	4798      	blx	r3
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8004656:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 8004658:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 800465a:	2002      	movs	r0, #2
}
 800465c:	bd70      	pop	{r4, r5, r6, pc}

0800465e <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800465e:	2200      	movs	r2, #0
 8004660:	2340      	movs	r3, #64	; 0x40
{
 8004662:	b570      	push	{r4, r5, r6, lr}
 8004664:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004666:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004668:	2640      	movs	r6, #64	; 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800466a:	4611      	mov	r1, r2
 800466c:	f002 fae0 	bl	8006c30 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004670:	2180      	movs	r1, #128	; 0x80
 8004672:	4633      	mov	r3, r6
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004674:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004678:	f8c4 6150 	str.w	r6, [r4, #336]	; 0x150
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800467c:	2200      	movs	r2, #0
 800467e:	4620      	mov	r0, r4
 8004680:	f002 fad6 	bl	8006c30 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 8004684:	2100      	movs	r1, #0
  pdev->dev_config= 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 8004686:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800468a:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800468c:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 800468e:	f884 5274 	strb.w	r5, [r4, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8004692:	f8c4 126c 	str.w	r1, [r4, #620]	; 0x26c
  pdev->dev_config= 0U;
 8004696:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8004698:	f8c4 127c 	str.w	r1, [r4, #636]	; 0x27c
  if (pdev->pClassData)
 800469c:	b123      	cbz	r3, 80046a8 <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800469e:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 80046a2:	4620      	mov	r0, r4
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	4798      	blx	r3
  }

  return USBD_OK;
}
 80046a8:	2000      	movs	r0, #0
 80046aa:	bd70      	pop	{r4, r5, r6, pc}

080046ac <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80046ac:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 80046ae:	2000      	movs	r0, #0
 80046b0:	4770      	bx	lr

080046b2 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 80046b2:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80046b6:	f880 3275 	strb.w	r3, [r0, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80046ba:	2304      	movs	r3, #4
 80046bc:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  return USBD_OK;
}
 80046c0:	2000      	movs	r0, #0
 80046c2:	4770      	bx	lr

080046c4 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;
 80046c4:	f890 3275 	ldrb.w	r3, [r0, #629]	; 0x275
 80046c8:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  return USBD_OK;
}
 80046cc:	2000      	movs	r0, #0
 80046ce:	4770      	bx	lr

080046d0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 80046d0:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 80046d2:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 80046d6:	2a03      	cmp	r2, #3
 80046d8:	d104      	bne.n	80046e4 <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 80046da:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80046de:	69db      	ldr	r3, [r3, #28]
 80046e0:	b103      	cbz	r3, 80046e4 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 80046e2:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 80046e4:	2000      	movs	r0, #0
 80046e6:	bd08      	pop	{r3, pc}

080046e8 <USBD_LL_IsoINIncomplete>:
 80046e8:	2000      	movs	r0, #0
 80046ea:	4770      	bx	lr

080046ec <USBD_LL_IsoOUTIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 80046ec:	2000      	movs	r0, #0
 80046ee:	4770      	bx	lr

080046f0 <USBD_LL_DevConnected>:
{
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
}
 80046f0:	2000      	movs	r0, #0
 80046f2:	4770      	bx	lr

080046f4 <USBD_LL_DevDisconnected>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80046f4:	2201      	movs	r2, #1
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80046f6:	7901      	ldrb	r1, [r0, #4]
{
 80046f8:	b508      	push	{r3, lr}
  pdev->dev_state = USBD_STATE_DEFAULT;
 80046fa:	f880 2274 	strb.w	r2, [r0, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80046fe:	f8d0 228c 	ldr.w	r2, [r0, #652]	; 0x28c
 8004702:	6852      	ldr	r2, [r2, #4]
 8004704:	4790      	blx	r2

  return USBD_OK;
}
 8004706:	2000      	movs	r0, #0
 8004708:	bd08      	pop	{r3, pc}

0800470a <USBD_CtlError.constprop.1>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 800470a:	b510      	push	{r4, lr}
 800470c:	4604      	mov	r4, r0
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80U);
 800470e:	2180      	movs	r1, #128	; 0x80
 8004710:	f002 faba 	bl	8006c88 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8004714:	2100      	movs	r1, #0
 8004716:	4620      	mov	r0, r4
}
 8004718:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0U);
 800471c:	f002 bab4 	b.w	8006c88 <USBD_LL_StallEP>

08004720 <USBD_StdDevReq>:
{
 8004720:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004722:	780b      	ldrb	r3, [r1, #0]
{
 8004724:	4604      	mov	r4, r0
 8004726:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004728:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800472c:	2b20      	cmp	r3, #32
 800472e:	d014      	beq.n	800475a <USBD_StdDevReq+0x3a>
 8004730:	2b40      	cmp	r3, #64	; 0x40
 8004732:	d012      	beq.n	800475a <USBD_StdDevReq+0x3a>
 8004734:	2b00      	cmp	r3, #0
 8004736:	f040 8095 	bne.w	8004864 <USBD_StdDevReq+0x144>
    switch (req->bRequest)
 800473a:	784b      	ldrb	r3, [r1, #1]
 800473c:	2b09      	cmp	r3, #9
 800473e:	f200 8090 	bhi.w	8004862 <USBD_StdDevReq+0x142>
 8004742:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004746:	00e7      	.short	0x00e7
 8004748:	008e0101 	.word	0x008e0101
 800474c:	008e00fa 	.word	0x008e00fa
 8004750:	00130082 	.word	0x00130082
 8004754:	00d2008e 	.word	0x00d2008e
 8004758:	00a0      	.short	0x00a0
    pdev->pClass->Setup(pdev, req);
 800475a:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 800475e:	4629      	mov	r1, r5
 8004760:	4620      	mov	r0, r4
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	4798      	blx	r3
}
 8004766:	2000      	movs	r0, #0
 8004768:	b003      	add	sp, #12
 800476a:	bd30      	pop	{r4, r5, pc}
  switch (req->wValue >> 8)
 800476c:	884b      	ldrh	r3, [r1, #2]
 800476e:	0a1a      	lsrs	r2, r3, #8
 8004770:	3a01      	subs	r2, #1
 8004772:	2a0e      	cmp	r2, #14
 8004774:	d875      	bhi.n	8004862 <USBD_StdDevReq+0x142>
 8004776:	e8df f002 	tbb	[pc, r2]
 800477a:	2824      	.short	0x2824
 800477c:	55747435 	.word	0x55747435
 8004780:	7474745e 	.word	0x7474745e
 8004784:	74747474 	.word	0x74747474
 8004788:	08          	.byte	0x08
 8004789:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800478a:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800478e:	69db      	ldr	r3, [r3, #28]
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8004790:	f10d 0106 	add.w	r1, sp, #6
 8004794:	7c20      	ldrb	r0, [r4, #16]
 8004796:	4798      	blx	r3
  if((len != 0U) && (req->wLength != 0U))
 8004798:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800479c:	b152      	cbz	r2, 80047b4 <USBD_StdDevReq+0x94>
 800479e:	88eb      	ldrh	r3, [r5, #6]
 80047a0:	b143      	cbz	r3, 80047b4 <USBD_StdDevReq+0x94>
    len = MIN(len, req->wLength);
 80047a2:	429a      	cmp	r2, r3
    USBD_CtlSendData (pdev, pbuf, len);
 80047a4:	4601      	mov	r1, r0
 80047a6:	4620      	mov	r0, r4
    len = MIN(len, req->wLength);
 80047a8:	bf28      	it	cs
 80047aa:	461a      	movcs	r2, r3
 80047ac:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, pbuf, len);
 80047b0:	f000 f9c2 	bl	8004b38 <USBD_CtlSendData>
  if(req->wLength == 0U)
 80047b4:	88eb      	ldrh	r3, [r5, #6]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d1d5      	bne.n	8004766 <USBD_StdDevReq+0x46>
    USBD_CtlSendStatus(pdev);
 80047ba:	4620      	mov	r0, r4
 80047bc:	f000 f9d9 	bl	8004b72 <USBD_CtlSendStatus>
 80047c0:	e7d1      	b.n	8004766 <USBD_StdDevReq+0x46>
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80047c2:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	e7e2      	b.n	8004790 <USBD_StdDevReq+0x70>
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 80047ca:	7c02      	ldrb	r2, [r0, #16]
 80047cc:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80047d0:	b932      	cbnz	r2, 80047e0 <USBD_StdDevReq+0xc0>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 80047d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80047d4:	f10d 0006 	add.w	r0, sp, #6
 80047d8:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80047da:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80047dc:	7043      	strb	r3, [r0, #1]
 80047de:	e7db      	b.n	8004798 <USBD_StdDevReq+0x78>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80047e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e2:	e7f7      	b.n	80047d4 <USBD_StdDevReq+0xb4>
    switch ((uint8_t)(req->wValue))
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	2b05      	cmp	r3, #5
 80047e8:	d83b      	bhi.n	8004862 <USBD_StdDevReq+0x142>
 80047ea:	e8df f003 	tbb	[pc, r3]
 80047ee:	0703      	.short	0x0703
 80047f0:	17130f0b 	.word	0x17130f0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80047f4:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	e7c9      	b.n	8004790 <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80047fc:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	e7c5      	b.n	8004790 <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8004804:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	e7c1      	b.n	8004790 <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800480c:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8004810:	691b      	ldr	r3, [r3, #16]
 8004812:	e7bd      	b.n	8004790 <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8004814:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8004818:	695b      	ldr	r3, [r3, #20]
 800481a:	e7b9      	b.n	8004790 <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800481c:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8004820:	699b      	ldr	r3, [r3, #24]
 8004822:	e7b5      	b.n	8004790 <USBD_StdDevReq+0x70>
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8004824:	7c03      	ldrb	r3, [r0, #16]
 8004826:	b9e3      	cbnz	r3, 8004862 <USBD_StdDevReq+0x142>
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8004828:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800482c:	f10d 0006 	add.w	r0, sp, #6
 8004830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004832:	4798      	blx	r3
 8004834:	e7b0      	b.n	8004798 <USBD_StdDevReq+0x78>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8004836:	7c03      	ldrb	r3, [r0, #16]
 8004838:	b99b      	cbnz	r3, 8004862 <USBD_StdDevReq+0x142>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800483a:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800483e:	f10d 0006 	add.w	r0, sp, #6
 8004842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004844:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004846:	2307      	movs	r3, #7
 8004848:	e7c8      	b.n	80047dc <USBD_StdDevReq+0xbc>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800484a:	888b      	ldrh	r3, [r1, #4]
 800484c:	b94b      	cbnz	r3, 8004862 <USBD_StdDevReq+0x142>
 800484e:	88cb      	ldrh	r3, [r1, #6]
 8004850:	b93b      	cbnz	r3, 8004862 <USBD_StdDevReq+0x142>
 8004852:	884d      	ldrh	r5, [r1, #2]
 8004854:	2d7f      	cmp	r5, #127	; 0x7f
 8004856:	d804      	bhi.n	8004862 <USBD_StdDevReq+0x142>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004858:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800485c:	b2e9      	uxtb	r1, r5
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800485e:	2b03      	cmp	r3, #3
 8004860:	d103      	bne.n	800486a <USBD_StdDevReq+0x14a>
      USBD_CtlError(pdev, req);
 8004862:	4620      	mov	r0, r4
    USBD_CtlError(pdev, req);
 8004864:	f7ff ff51 	bl	800470a <USBD_CtlError.constprop.1>
    break;
 8004868:	e77d      	b.n	8004766 <USBD_StdDevReq+0x46>
      pdev->dev_address = dev_addr;
 800486a:	f880 1276 	strb.w	r1, [r0, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800486e:	f002 fa3b 	bl	8006ce8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8004872:	4620      	mov	r0, r4
 8004874:	f000 f97d 	bl	8004b72 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8004878:	b11d      	cbz	r5, 8004882 <USBD_StdDevReq+0x162>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800487a:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 800487c:	f884 3274 	strb.w	r3, [r4, #628]	; 0x274
 8004880:	e771      	b.n	8004766 <USBD_StdDevReq+0x46>
 8004882:	2301      	movs	r3, #1
 8004884:	e7fa      	b.n	800487c <USBD_StdDevReq+0x15c>
  cfgidx = (uint8_t)(req->wValue);
 8004886:	7889      	ldrb	r1, [r1, #2]
 8004888:	4d35      	ldr	r5, [pc, #212]	; (8004960 <USBD_StdDevReq+0x240>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800488a:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 800488c:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800488e:	d8e8      	bhi.n	8004862 <USBD_StdDevReq+0x142>
    switch (pdev->dev_state)
 8004890:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8004894:	2b02      	cmp	r3, #2
 8004896:	d008      	beq.n	80048aa <USBD_StdDevReq+0x18a>
 8004898:	2b03      	cmp	r3, #3
 800489a:	d014      	beq.n	80048c6 <USBD_StdDevReq+0x1a6>
      USBD_CtlError(pdev, req);
 800489c:	f7ff ff35 	bl	800470a <USBD_CtlError.constprop.1>
      USBD_ClrClassConfig(pdev, cfgidx);
 80048a0:	7829      	ldrb	r1, [r5, #0]
 80048a2:	4620      	mov	r0, r4
 80048a4:	f7ff fe14 	bl	80044d0 <USBD_ClrClassConfig>
 80048a8:	e75d      	b.n	8004766 <USBD_StdDevReq+0x46>
      if (cfgidx)
 80048aa:	2900      	cmp	r1, #0
 80048ac:	d085      	beq.n	80047ba <USBD_StdDevReq+0x9a>
        pdev->dev_config = cfgidx;
 80048ae:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80048b0:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 80048b2:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80048b4:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80048b8:	4620      	mov	r0, r4
 80048ba:	f7ff fdfe 	bl	80044ba <USBD_SetClassConfig>
 80048be:	2802      	cmp	r0, #2
 80048c0:	f47f af7b 	bne.w	80047ba <USBD_StdDevReq+0x9a>
 80048c4:	e7cd      	b.n	8004862 <USBD_StdDevReq+0x142>
      if (cfgidx == 0U)
 80048c6:	b931      	cbnz	r1, 80048d6 <USBD_StdDevReq+0x1b6>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80048c8:	2302      	movs	r3, #2
        pdev->dev_config = cfgidx;
 80048ca:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80048cc:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        USBD_ClrClassConfig(pdev, cfgidx);
 80048d0:	f7ff fdfe 	bl	80044d0 <USBD_ClrClassConfig>
 80048d4:	e771      	b.n	80047ba <USBD_StdDevReq+0x9a>
      else if (cfgidx != pdev->dev_config)
 80048d6:	6841      	ldr	r1, [r0, #4]
 80048d8:	2901      	cmp	r1, #1
 80048da:	f43f af6e 	beq.w	80047ba <USBD_StdDevReq+0x9a>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80048de:	b2c9      	uxtb	r1, r1
 80048e0:	f7ff fdf6 	bl	80044d0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80048e4:	7829      	ldrb	r1, [r5, #0]
 80048e6:	6061      	str	r1, [r4, #4]
 80048e8:	e7e6      	b.n	80048b8 <USBD_StdDevReq+0x198>
  if (req->wLength != 1U)
 80048ea:	88ca      	ldrh	r2, [r1, #6]
 80048ec:	2a01      	cmp	r2, #1
 80048ee:	d1b8      	bne.n	8004862 <USBD_StdDevReq+0x142>
    switch (pdev->dev_state)
 80048f0:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d0b4      	beq.n	8004862 <USBD_StdDevReq+0x142>
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	d903      	bls.n	8004904 <USBD_StdDevReq+0x1e4>
 80048fc:	2b03      	cmp	r3, #3
 80048fe:	d1b0      	bne.n	8004862 <USBD_StdDevReq+0x142>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8004900:	1d01      	adds	r1, r0, #4
 8004902:	e003      	b.n	800490c <USBD_StdDevReq+0x1ec>
      pdev->dev_default_config = 0U;
 8004904:	4601      	mov	r1, r0
 8004906:	2300      	movs	r3, #0
 8004908:	f841 3f08 	str.w	r3, [r1, #8]!
    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800490c:	4620      	mov	r0, r4
 800490e:	f000 f913 	bl	8004b38 <USBD_CtlSendData>
 8004912:	e728      	b.n	8004766 <USBD_StdDevReq+0x46>
  switch (pdev->dev_state)
 8004914:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8004918:	3b01      	subs	r3, #1
 800491a:	2b02      	cmp	r3, #2
 800491c:	d8a1      	bhi.n	8004862 <USBD_StdDevReq+0x142>
    if(req->wLength != 0x2U)
 800491e:	88cb      	ldrh	r3, [r1, #6]
 8004920:	2b02      	cmp	r3, #2
 8004922:	d19e      	bne.n	8004862 <USBD_StdDevReq+0x142>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8004924:	2301      	movs	r3, #1
 8004926:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup)
 8004928:	f8d0 327c 	ldr.w	r3, [r0, #636]	; 0x27c
 800492c:	b10b      	cbz	r3, 8004932 <USBD_StdDevReq+0x212>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800492e:	2303      	movs	r3, #3
 8004930:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8004932:	2202      	movs	r2, #2
 8004934:	f104 010c 	add.w	r1, r4, #12
 8004938:	e7e8      	b.n	800490c <USBD_StdDevReq+0x1ec>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800493a:	884b      	ldrh	r3, [r1, #2]
 800493c:	2b01      	cmp	r3, #1
 800493e:	f47f af12 	bne.w	8004766 <USBD_StdDevReq+0x46>
    pdev->dev_remote_wakeup = 1U;
 8004942:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c
 8004946:	e738      	b.n	80047ba <USBD_StdDevReq+0x9a>
  switch (pdev->dev_state)
 8004948:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800494c:	3b01      	subs	r3, #1
 800494e:	2b02      	cmp	r3, #2
 8004950:	d887      	bhi.n	8004862 <USBD_StdDevReq+0x142>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004952:	884b      	ldrh	r3, [r1, #2]
 8004954:	2b01      	cmp	r3, #1
 8004956:	f47f af06 	bne.w	8004766 <USBD_StdDevReq+0x46>
      pdev->dev_remote_wakeup = 0U;
 800495a:	2300      	movs	r3, #0
 800495c:	e7f1      	b.n	8004942 <USBD_StdDevReq+0x222>
 800495e:	bf00      	nop
 8004960:	20003ee4 	.word	0x20003ee4

08004964 <USBD_StdItfReq>:
{
 8004964:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004966:	780b      	ldrb	r3, [r1, #0]
{
 8004968:	4604      	mov	r4, r0
 800496a:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800496c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004970:	2b20      	cmp	r3, #32
 8004972:	d002      	beq.n	800497a <USBD_StdItfReq+0x16>
 8004974:	2b40      	cmp	r3, #64	; 0x40
 8004976:	d000      	beq.n	800497a <USBD_StdItfReq+0x16>
 8004978:	b9b3      	cbnz	r3, 80049a8 <USBD_StdItfReq+0x44>
    switch (pdev->dev_state)
 800497a:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
 800497e:	3b01      	subs	r3, #1
 8004980:	2b02      	cmp	r3, #2
 8004982:	d810      	bhi.n	80049a6 <USBD_StdItfReq+0x42>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8004984:	792b      	ldrb	r3, [r5, #4]
 8004986:	2b01      	cmp	r3, #1
 8004988:	d80d      	bhi.n	80049a6 <USBD_StdItfReq+0x42>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800498a:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 800498e:	4629      	mov	r1, r5
 8004990:	4620      	mov	r0, r4
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	4798      	blx	r3
        if ((req->wLength == 0U) && (ret == USBD_OK))
 8004996:	88eb      	ldrh	r3, [r5, #6]
 8004998:	b91b      	cbnz	r3, 80049a2 <USBD_StdItfReq+0x3e>
 800499a:	b910      	cbnz	r0, 80049a2 <USBD_StdItfReq+0x3e>
          USBD_CtlSendStatus(pdev);
 800499c:	4620      	mov	r0, r4
 800499e:	f000 f8e8 	bl	8004b72 <USBD_CtlSendStatus>
}
 80049a2:	2000      	movs	r0, #0
 80049a4:	bd38      	pop	{r3, r4, r5, pc}
      USBD_CtlError(pdev, req);
 80049a6:	4620      	mov	r0, r4
    USBD_CtlError(pdev, req);
 80049a8:	f7ff feaf 	bl	800470a <USBD_CtlError.constprop.1>
    break;
 80049ac:	e7f9      	b.n	80049a2 <USBD_StdItfReq+0x3e>

080049ae <USBD_StdEPReq>:
{
 80049ae:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80049b0:	780a      	ldrb	r2, [r1, #0]
{
 80049b2:	4604      	mov	r4, r0
 80049b4:	460b      	mov	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80049b6:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80049ba:	2a20      	cmp	r2, #32
 80049bc:	d013      	beq.n	80049e6 <USBD_StdEPReq+0x38>
 80049be:	2a40      	cmp	r2, #64	; 0x40
 80049c0:	d011      	beq.n	80049e6 <USBD_StdEPReq+0x38>
 80049c2:	b96a      	cbnz	r2, 80049e0 <USBD_StdEPReq+0x32>
    switch (req->bRequest)
 80049c4:	785d      	ldrb	r5, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 80049c6:	888a      	ldrh	r2, [r1, #4]
    switch (req->bRequest)
 80049c8:	2d01      	cmp	r5, #1
  ep_addr  = LOBYTE(req->wIndex);
 80049ca:	b2d1      	uxtb	r1, r2
    switch (req->bRequest)
 80049cc:	d01f      	beq.n	8004a0e <USBD_StdEPReq+0x60>
 80049ce:	d335      	bcc.n	8004a3c <USBD_StdEPReq+0x8e>
 80049d0:	2d03      	cmp	r5, #3
 80049d2:	d105      	bne.n	80049e0 <USBD_StdEPReq+0x32>
      switch (pdev->dev_state)
 80049d4:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 80049d8:	2a02      	cmp	r2, #2
 80049da:	d026      	beq.n	8004a2a <USBD_StdEPReq+0x7c>
 80049dc:	2a03      	cmp	r2, #3
 80049de:	d00a      	beq.n	80049f6 <USBD_StdEPReq+0x48>
    USBD_CtlError(pdev, req);
 80049e0:	f7ff fe93 	bl	800470a <USBD_CtlError.constprop.1>
    break;
 80049e4:	e005      	b.n	80049f2 <USBD_StdEPReq+0x44>
    pdev->pClass->Setup (pdev, req);
 80049e6:	f8d4 228c 	ldr.w	r2, [r4, #652]	; 0x28c
 80049ea:	4619      	mov	r1, r3
 80049ec:	4620      	mov	r0, r4
 80049ee:	6892      	ldr	r2, [r2, #8]
 80049f0:	4790      	blx	r2
}
 80049f2:	2000      	movs	r0, #0
 80049f4:	bd38      	pop	{r3, r4, r5, pc}
        if (req->wValue == USB_FEATURE_EP_HALT)
 80049f6:	885a      	ldrh	r2, [r3, #2]
 80049f8:	b92a      	cbnz	r2, 8004a06 <USBD_StdEPReq+0x58>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80049fa:	064a      	lsls	r2, r1, #25
 80049fc:	d003      	beq.n	8004a06 <USBD_StdEPReq+0x58>
 80049fe:	88db      	ldrh	r3, [r3, #6]
 8004a00:	b90b      	cbnz	r3, 8004a06 <USBD_StdEPReq+0x58>
            USBD_LL_StallEP(pdev, ep_addr);
 8004a02:	f002 f941 	bl	8006c88 <USBD_LL_StallEP>
        USBD_CtlSendStatus(pdev);
 8004a06:	4620      	mov	r0, r4
 8004a08:	f000 f8b3 	bl	8004b72 <USBD_CtlSendStatus>
        break;
 8004a0c:	e7f1      	b.n	80049f2 <USBD_StdEPReq+0x44>
      switch (pdev->dev_state)
 8004a0e:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8004a12:	2a02      	cmp	r2, #2
 8004a14:	d009      	beq.n	8004a2a <USBD_StdEPReq+0x7c>
 8004a16:	2a03      	cmp	r2, #3
 8004a18:	d1e2      	bne.n	80049e0 <USBD_StdEPReq+0x32>
        if (req->wValue == USB_FEATURE_EP_HALT)
 8004a1a:	885b      	ldrh	r3, [r3, #2]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d1e8      	bne.n	80049f2 <USBD_StdEPReq+0x44>
          if ((ep_addr & 0x7FU) != 0x00U)
 8004a20:	064d      	lsls	r5, r1, #25
 8004a22:	d0f0      	beq.n	8004a06 <USBD_StdEPReq+0x58>
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8004a24:	f002 f93e 	bl	8006ca4 <USBD_LL_ClearStallEP>
 8004a28:	e7ed      	b.n	8004a06 <USBD_StdEPReq+0x58>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004a2a:	064b      	lsls	r3, r1, #25
 8004a2c:	d017      	beq.n	8004a5e <USBD_StdEPReq+0xb0>
          USBD_LL_StallEP(pdev, ep_addr);
 8004a2e:	f002 f92b 	bl	8006c88 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8004a32:	2180      	movs	r1, #128	; 0x80
 8004a34:	4620      	mov	r0, r4
 8004a36:	f002 f927 	bl	8006c88 <USBD_LL_StallEP>
 8004a3a:	e7da      	b.n	80049f2 <USBD_StdEPReq+0x44>
      switch (pdev->dev_state)
 8004a3c:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8004a40:	2b02      	cmp	r3, #2
 8004a42:	d00e      	beq.n	8004a62 <USBD_StdEPReq+0xb4>
 8004a44:	2b03      	cmp	r3, #3
 8004a46:	d1cb      	bne.n	80049e0 <USBD_StdEPReq+0x32>
        if((ep_addr & 0x80U) == 0x80U)
 8004a48:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004a4c:	f04f 0314 	mov.w	r3, #20
 8004a50:	f001 020f 	and.w	r2, r1, #15
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004a54:	fb03 0202 	mla	r2, r3, r2, r0
        if((ep_addr & 0x80U) == 0x80U)
 8004a58:	d014      	beq.n	8004a84 <USBD_StdEPReq+0xd6>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004a5a:	6992      	ldr	r2, [r2, #24]
 8004a5c:	b9ea      	cbnz	r2, 8004a9a <USBD_StdEPReq+0xec>
          USBD_CtlError(pdev, req);
 8004a5e:	4620      	mov	r0, r4
 8004a60:	e7be      	b.n	80049e0 <USBD_StdEPReq+0x32>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004a62:	0649      	lsls	r1, r1, #25
 8004a64:	d1fb      	bne.n	8004a5e <USBD_StdEPReq+0xb0>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8004a66:	0613      	lsls	r3, r2, #24
          pep->status = 0x0000U;
 8004a68:	f04f 0300 	mov.w	r3, #0
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004a6c:	f04f 0202 	mov.w	r2, #2
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8004a70:	bf4c      	ite	mi
 8004a72:	f100 0114 	addmi.w	r1, r0, #20
 8004a76:	f500 71a0 	addpl.w	r1, r0, #320	; 0x140
          pep->status = 0x0000U;
 8004a7a:	600b      	str	r3, [r1, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004a7c:	4620      	mov	r0, r4
 8004a7e:	f000 f85b 	bl	8004b38 <USBD_CtlSendData>
          break;
 8004a82:	e7b6      	b.n	80049f2 <USBD_StdEPReq+0x44>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8004a84:	f8d2 2144 	ldr.w	r2, [r2, #324]	; 0x144
 8004a88:	2a00      	cmp	r2, #0
 8004a8a:	d0e8      	beq.n	8004a5e <USBD_StdEPReq+0xb0>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8004a8c:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8004a90:	fb03 0505 	mla	r5, r3, r5, r0
 8004a94:	f505 75a0 	add.w	r5, r5, #320	; 0x140
 8004a98:	e004      	b.n	8004aa4 <USBD_StdEPReq+0xf6>
 8004a9a:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8004a9e:	fb05 3503 	mla	r5, r5, r3, r3
 8004aa2:	4405      	add	r5, r0
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8004aa4:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 8004aa8:	d103      	bne.n	8004ab2 <USBD_StdEPReq+0x104>
            pep->status = 0x0001U;
 8004aaa:	602b      	str	r3, [r5, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004aac:	2202      	movs	r2, #2
 8004aae:	4629      	mov	r1, r5
 8004ab0:	e7e4      	b.n	8004a7c <USBD_StdEPReq+0xce>
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8004ab2:	4620      	mov	r0, r4
 8004ab4:	f002 f904 	bl	8006cc0 <USBD_LL_IsStallEP>
 8004ab8:	b108      	cbz	r0, 8004abe <USBD_StdEPReq+0x110>
            pep->status = 0x0001U;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e7f5      	b.n	8004aaa <USBD_StdEPReq+0xfc>
            pep->status = 0x0000U;
 8004abe:	6028      	str	r0, [r5, #0]
 8004ac0:	e7f4      	b.n	8004aac <USBD_StdEPReq+0xfe>

08004ac2 <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 8004ac2:	780b      	ldrb	r3, [r1, #0]
 8004ac4:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8004ac6:	784b      	ldrb	r3, [r1, #1]
 8004ac8:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8004aca:	78ca      	ldrb	r2, [r1, #3]
 8004acc:	788b      	ldrb	r3, [r1, #2]
 8004ace:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004ad2:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8004ad4:	794a      	ldrb	r2, [r1, #5]
 8004ad6:	790b      	ldrb	r3, [r1, #4]
 8004ad8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004adc:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8004ade:	79ca      	ldrb	r2, [r1, #7]
 8004ae0:	798b      	ldrb	r3, [r1, #6]
 8004ae2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004ae6:	80c3      	strh	r3, [r0, #6]
 8004ae8:	4770      	bx	lr

08004aea <USBD_CtlError>:
{
 8004aea:	b510      	push	{r4, lr}
 8004aec:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80U);
 8004aee:	2180      	movs	r1, #128	; 0x80
 8004af0:	f002 f8ca 	bl	8006c88 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8004af4:	2100      	movs	r1, #0
 8004af6:	4620      	mov	r0, r4
}
 8004af8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0U);
 8004afc:	f002 b8c4 	b.w	8006c88 <USBD_LL_StallEP>

08004b00 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8004b00:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 8004b02:	b188      	cbz	r0, 8004b28 <USBD_GetString+0x28>
 8004b04:	4605      	mov	r5, r0
 8004b06:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0U;

    while (*buf != '\0')
 8004b08:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	2c00      	cmp	r4, #0
 8004b10:	d1f9      	bne.n	8004b06 <USBD_GetString+0x6>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8004b12:	3301      	adds	r3, #1
 8004b14:	3801      	subs	r0, #1
 8004b16:	005b      	lsls	r3, r3, #1
 8004b18:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8004b1a:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8004b1c:	2303      	movs	r3, #3
 8004b1e:	704b      	strb	r3, [r1, #1]
 8004b20:	2302      	movs	r3, #2
    while (*desc != '\0')
 8004b22:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8004b26:	b905      	cbnz	r5, 8004b2a <USBD_GetString+0x2a>
 8004b28:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 8004b2a:	1c5a      	adds	r2, r3, #1
 8004b2c:	54cd      	strb	r5, [r1, r3]
      unicode[idx++] =  0U;
 8004b2e:	3302      	adds	r3, #2
      unicode[idx++] = *desc++;
 8004b30:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	548c      	strb	r4, [r1, r2]
 8004b36:	e7f4      	b.n	8004b22 <USBD_GetString+0x22>

08004b38 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8004b38:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8004b3a:	2202      	movs	r2, #2
{
 8004b3c:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8004b3e:	f8c0 226c 	str.w	r2, [r0, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8004b42:	460a      	mov	r2, r1
  pdev->ep_in[0].total_length = len;
 8004b44:	61c3      	str	r3, [r0, #28]
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8004b46:	2100      	movs	r1, #0
  pdev->ep_in[0].rem_length   = len;
 8004b48:	6203      	str	r3, [r0, #32]
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8004b4a:	f002 f8db 	bl	8006d04 <USBD_LL_Transmit>

  return USBD_OK;
}
 8004b4e:	2000      	movs	r0, #0
 8004b50:	bd10      	pop	{r4, pc}

08004b52 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8004b52:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8004b54:	4613      	mov	r3, r2
 8004b56:	460a      	mov	r2, r1
 8004b58:	2100      	movs	r1, #0
 8004b5a:	f002 f8d3 	bl	8006d04 <USBD_LL_Transmit>

  return USBD_OK;
}
 8004b5e:	2000      	movs	r0, #0
 8004b60:	bd08      	pop	{r3, pc}

08004b62 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8004b62:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004b64:	4613      	mov	r3, r2
 8004b66:	460a      	mov	r2, r1
 8004b68:	2100      	movs	r1, #0
 8004b6a:	f002 f8d9 	bl	8006d20 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004b6e:	2000      	movs	r0, #0
 8004b70:	bd08      	pop	{r3, pc}

08004b72 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8004b72:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8004b74:	2304      	movs	r3, #4
 8004b76:	f8c0 326c 	str.w	r3, [r0, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	4619      	mov	r1, r3
 8004b80:	f002 f8c0 	bl	8006d04 <USBD_LL_Transmit>

  return USBD_OK;
}
 8004b84:	2000      	movs	r0, #0
 8004b86:	bd08      	pop	{r3, pc}

08004b88 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8004b88:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8004b8a:	2305      	movs	r3, #5
 8004b8c:	f8c0 326c 	str.w	r3, [r0, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8004b90:	2300      	movs	r3, #0
 8004b92:	461a      	mov	r2, r3
 8004b94:	4619      	mov	r1, r3
 8004b96:	f002 f8c3 	bl	8006d20 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004b9a:	2000      	movs	r0, #0
 8004b9c:	bd08      	pop	{r3, pc}
	...

08004ba0 <USBD_MSC_GetHSCfgDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_MSC_CfgHSDesc);
 8004ba0:	2320      	movs	r3, #32
 8004ba2:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_CfgHSDesc;
}
 8004ba4:	4800      	ldr	r0, [pc, #0]	; (8004ba8 <USBD_MSC_GetHSCfgDesc+0x8>)
 8004ba6:	4770      	bx	lr
 8004ba8:	20000060 	.word	0x20000060

08004bac <USBD_MSC_GetFSCfgDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_MSC_CfgFSDesc);
 8004bac:	2320      	movs	r3, #32
 8004bae:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_CfgFSDesc;
}
 8004bb0:	4800      	ldr	r0, [pc, #0]	; (8004bb4 <USBD_MSC_GetFSCfgDesc+0x8>)
 8004bb2:	4770      	bx	lr
 8004bb4:	20000040 	.word	0x20000040

08004bb8 <USBD_MSC_GetOtherSpeedCfgDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_MSC_OtherSpeedCfgDesc);
 8004bb8:	2320      	movs	r3, #32
 8004bba:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_OtherSpeedCfgDesc;
}
 8004bbc:	4800      	ldr	r0, [pc, #0]	; (8004bc0 <USBD_MSC_GetOtherSpeedCfgDesc+0x8>)
 8004bbe:	4770      	bx	lr
 8004bc0:	2000008c 	.word	0x2000008c

08004bc4 <USBD_MSC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_MSC_DeviceQualifierDesc);
 8004bc4:	230a      	movs	r3, #10
 8004bc6:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_DeviceQualifierDesc;
}
 8004bc8:	4800      	ldr	r0, [pc, #0]	; (8004bcc <USBD_MSC_GetDeviceQualifierDescriptor+0x8>)
 8004bca:	4770      	bx	lr
 8004bcc:	20000080 	.word	0x20000080

08004bd0 <USBD_MSC_Init>:
{
 8004bd0:	b538      	push	{r3, r4, r5, lr}
  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8004bd2:	7c03      	ldrb	r3, [r0, #16]
{
 8004bd4:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8004bd6:	b9e3      	cbnz	r3, 8004c12 <USBD_MSC_Init+0x42>
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8004bd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004bdc:	2202      	movs	r2, #2
 8004bde:	2101      	movs	r1, #1
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8004be0:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8004be2:	f002 f825 	bl	8006c30 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8004be6:	f44f 7300 	mov.w	r3, #512	; 0x200
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8004bea:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8004bee:	2202      	movs	r2, #2
 8004bf0:	2181      	movs	r1, #129	; 0x81
 8004bf2:	4620      	mov	r0, r4
 8004bf4:	f002 f81c 	bl	8006c30 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8004bf8:	62e5      	str	r5, [r4, #44]	; 0x2c
  pdev->pClassData = USBD_malloc(sizeof (USBD_MSC_BOT_HandleTypeDef));
 8004bfa:	f44f 701b 	mov.w	r0, #620	; 0x26c
 8004bfe:	f002 fb8f 	bl	8007320 <malloc>
 8004c02:	f8c4 0290 	str.w	r0, [r4, #656]	; 0x290
  if(pdev->pClassData == NULL)
 8004c06:	b170      	cbz	r0, 8004c26 <USBD_MSC_Init+0x56>
  MSC_BOT_Init(pdev);
 8004c08:	4620      	mov	r0, r4
 8004c0a:	f000 f8ea 	bl	8004de2 <MSC_BOT_Init>
  return USBD_OK;
 8004c0e:	2000      	movs	r0, #0
 8004c10:	bd38      	pop	{r3, r4, r5, pc}
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8004c12:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8004c14:	2340      	movs	r3, #64	; 0x40
 8004c16:	2202      	movs	r2, #2
 8004c18:	2101      	movs	r1, #1
 8004c1a:	f002 f809 	bl	8006c30 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8004c1e:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8004c22:	2340      	movs	r3, #64	; 0x40
 8004c24:	e7e3      	b.n	8004bee <USBD_MSC_Init+0x1e>
    return USBD_FAIL;
 8004c26:	2002      	movs	r0, #2
}
 8004c28:	bd38      	pop	{r3, r4, r5, pc}

08004c2a <USBD_MSC_DeInit>:
{
 8004c2a:	b538      	push	{r3, r4, r5, lr}
 8004c2c:	4604      	mov	r4, r0
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 8004c2e:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 8004c30:	2101      	movs	r1, #1
 8004c32:	f002 f80d 	bl	8006c50 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 8004c36:	2181      	movs	r1, #129	; 0x81
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 8004c38:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 8004c3c:	4620      	mov	r0, r4
 8004c3e:	f002 f807 	bl	8006c50 <USBD_LL_CloseEP>
  MSC_BOT_DeInit(pdev);
 8004c42:	4620      	mov	r0, r4
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 8004c44:	62e5      	str	r5, [r4, #44]	; 0x2c
  MSC_BOT_DeInit(pdev);
 8004c46:	f000 f8f7 	bl	8004e38 <MSC_BOT_DeInit>
  if(pdev->pClassData != NULL)
 8004c4a:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
 8004c4e:	b118      	cbz	r0, 8004c58 <USBD_MSC_DeInit+0x2e>
    USBD_free(pdev->pClassData);
 8004c50:	f002 fb6e 	bl	8007330 <free>
    pdev->pClassData  = NULL;
 8004c54:	f8c4 5290 	str.w	r5, [r4, #656]	; 0x290
}
 8004c58:	2000      	movs	r0, #0
 8004c5a:	bd38      	pop	{r3, r4, r5, pc}

08004c5c <USBD_MSC_Setup>:
  uint16_t status_info = 0U;
 8004c5c:	2300      	movs	r3, #0
{
 8004c5e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint16_t status_info = 0U;
 8004c62:	f8ad 3006 	strh.w	r3, [sp, #6]
{
 8004c66:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004c68:	780b      	ldrb	r3, [r1, #0]
{
 8004c6a:	460e      	mov	r6, r1
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 8004c6c:	f8d0 7290 	ldr.w	r7, [r0, #656]	; 0x290
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004c70:	f013 0260 	ands.w	r2, r3, #96	; 0x60
 8004c74:	d02d      	beq.n	8004cd2 <USBD_MSC_Setup+0x76>
 8004c76:	2a20      	cmp	r2, #32
 8004c78:	d104      	bne.n	8004c84 <USBD_MSC_Setup+0x28>
    switch (req->bRequest)
 8004c7a:	784a      	ldrb	r2, [r1, #1]
 8004c7c:	2afe      	cmp	r2, #254	; 0xfe
 8004c7e:	d005      	beq.n	8004c8c <USBD_MSC_Setup+0x30>
 8004c80:	2aff      	cmp	r2, #255	; 0xff
 8004c82:	d018      	beq.n	8004cb6 <USBD_MSC_Setup+0x5a>
    USBD_CtlError (pdev, req);
 8004c84:	f7ff ff31 	bl	8004aea <USBD_CtlError>
    ret = USBD_FAIL;
 8004c88:	2002      	movs	r0, #2
    break;
 8004c8a:	e01f      	b.n	8004ccc <USBD_MSC_Setup+0x70>
      if((req->wValue  == 0U) && (req->wLength == 1U) &&
 8004c8c:	884d      	ldrh	r5, [r1, #2]
 8004c8e:	2d00      	cmp	r5, #0
 8004c90:	d175      	bne.n	8004d7e <USBD_MSC_Setup+0x122>
 8004c92:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 8004c96:	f1b8 0f01 	cmp.w	r8, #1
 8004c9a:	d170      	bne.n	8004d7e <USBD_MSC_Setup+0x122>
 8004c9c:	061a      	lsls	r2, r3, #24
 8004c9e:	d56e      	bpl.n	8004d7e <USBD_MSC_Setup+0x122>
        hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8004ca0:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8004ca4:	699b      	ldr	r3, [r3, #24]
 8004ca6:	4798      	blx	r3
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&hmsc->max_lun, 1U);
 8004ca8:	4642      	mov	r2, r8
 8004caa:	4639      	mov	r1, r7
        hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8004cac:	6038      	str	r0, [r7, #0]
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&hmsc->interface, 1U);
 8004cae:	4620      	mov	r0, r4
 8004cb0:	f7ff ff42 	bl	8004b38 <USBD_CtlSendData>
 8004cb4:	e009      	b.n	8004cca <USBD_MSC_Setup+0x6e>
      if((req->wValue  == 0U) && (req->wLength == 0U) &&
 8004cb6:	884a      	ldrh	r2, [r1, #2]
 8004cb8:	2a00      	cmp	r2, #0
 8004cba:	d160      	bne.n	8004d7e <USBD_MSC_Setup+0x122>
 8004cbc:	88cd      	ldrh	r5, [r1, #6]
 8004cbe:	2d00      	cmp	r5, #0
 8004cc0:	d15d      	bne.n	8004d7e <USBD_MSC_Setup+0x122>
 8004cc2:	061b      	lsls	r3, r3, #24
 8004cc4:	d45b      	bmi.n	8004d7e <USBD_MSC_Setup+0x122>
        MSC_BOT_Reset(pdev);
 8004cc6:	f000 f8ac 	bl	8004e22 <MSC_BOT_Reset>
  uint8_t ret = USBD_OK;
 8004cca:	2000      	movs	r0, #0
}
 8004ccc:	b002      	add	sp, #8
 8004cce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    switch (req->bRequest)
 8004cd2:	784b      	ldrb	r3, [r1, #1]
 8004cd4:	2b0b      	cmp	r3, #11
 8004cd6:	d852      	bhi.n	8004d7e <USBD_MSC_Setup+0x122>
 8004cd8:	e8df f003 	tbb	[pc, r3]
 8004cdc:	51511c06 	.word	0x51511c06
 8004ce0:	51515151 	.word	0x51515151
 8004ce4:	150e5151 	.word	0x150e5151
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004ce8:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8004cec:	2b03      	cmp	r3, #3
 8004cee:	d146      	bne.n	8004d7e <USBD_MSC_Setup+0x122>
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8004cf0:	2202      	movs	r2, #2
 8004cf2:	f10d 0106 	add.w	r1, sp, #6
 8004cf6:	e7da      	b.n	8004cae <USBD_MSC_Setup+0x52>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004cf8:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8004cfc:	2b03      	cmp	r3, #3
 8004cfe:	d13e      	bne.n	8004d7e <USBD_MSC_Setup+0x122>
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&hmsc->interface, 1U);
 8004d00:	2201      	movs	r2, #1
 8004d02:	1d39      	adds	r1, r7, #4
 8004d04:	e7d3      	b.n	8004cae <USBD_MSC_Setup+0x52>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d06:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8004d0a:	2b03      	cmp	r3, #3
 8004d0c:	d137      	bne.n	8004d7e <USBD_MSC_Setup+0x122>
        hmsc->interface = (uint8_t)(req->wValue);
 8004d0e:	788b      	ldrb	r3, [r1, #2]
 8004d10:	607b      	str	r3, [r7, #4]
 8004d12:	e7da      	b.n	8004cca <USBD_MSC_Setup+0x6e>
      USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8004d14:	7909      	ldrb	r1, [r1, #4]
 8004d16:	f001 ffa9 	bl	8006c6c <USBD_LL_FlushEP>
      USBD_LL_CloseEP (pdev , (uint8_t)req->wIndex);
 8004d1a:	7931      	ldrb	r1, [r6, #4]
 8004d1c:	4620      	mov	r0, r4
 8004d1e:	f001 ff97 	bl	8006c50 <USBD_LL_CloseEP>
      if((((uint8_t)req->wIndex) & 0x80U) == 0x80U)
 8004d22:	88b3      	ldrh	r3, [r6, #4]
 8004d24:	2114      	movs	r1, #20
 8004d26:	7c22      	ldrb	r2, [r4, #16]
 8004d28:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004d2c:	f003 030f 	and.w	r3, r3, #15
        pdev->ep_in[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 8004d30:	fb01 4303 	mla	r3, r1, r3, r4
 8004d34:	f04f 0100 	mov.w	r1, #0
      if((((uint8_t)req->wIndex) & 0x80U) == 0x80U)
 8004d38:	d011      	beq.n	8004d5e <USBD_MSC_Setup+0x102>
        pdev->ep_in[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 8004d3a:	6199      	str	r1, [r3, #24]
        if(pdev->dev_speed == USBD_SPEED_HIGH)
 8004d3c:	b96a      	cbnz	r2, 8004d5a <USBD_MSC_Setup+0xfe>
          USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 8004d3e:	f44f 7300 	mov.w	r3, #512	; 0x200
          USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 8004d42:	2202      	movs	r2, #2
 8004d44:	2181      	movs	r1, #129	; 0x81
 8004d46:	4620      	mov	r0, r4
 8004d48:	f001 ff72 	bl	8006c30 <USBD_LL_OpenEP>
        pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	62e3      	str	r3, [r4, #44]	; 0x2c
      MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8004d50:	7931      	ldrb	r1, [r6, #4]
 8004d52:	4620      	mov	r0, r4
 8004d54:	f000 f91c 	bl	8004f90 <MSC_BOT_CplClrFeature>
 8004d58:	e7b7      	b.n	8004cca <USBD_MSC_Setup+0x6e>
          USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 8004d5a:	2340      	movs	r3, #64	; 0x40
 8004d5c:	e7f1      	b.n	8004d42 <USBD_MSC_Setup+0xe6>
        pdev->ep_out[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 8004d5e:	f8c3 1144 	str.w	r1, [r3, #324]	; 0x144
        if(pdev->dev_speed == USBD_SPEED_HIGH)
 8004d62:	b952      	cbnz	r2, 8004d7a <USBD_MSC_Setup+0x11e>
          USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 8004d64:	f44f 7300 	mov.w	r3, #512	; 0x200
          USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 8004d68:	2202      	movs	r2, #2
 8004d6a:	2101      	movs	r1, #1
 8004d6c:	4620      	mov	r0, r4
 8004d6e:	f001 ff5f 	bl	8006c30 <USBD_LL_OpenEP>
        pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8004d72:	2301      	movs	r3, #1
 8004d74:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
 8004d78:	e7ea      	b.n	8004d50 <USBD_MSC_Setup+0xf4>
          USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 8004d7a:	2340      	movs	r3, #64	; 0x40
 8004d7c:	e7f4      	b.n	8004d68 <USBD_MSC_Setup+0x10c>
      USBD_CtlError (pdev, req);
 8004d7e:	4631      	mov	r1, r6
 8004d80:	4620      	mov	r0, r4
 8004d82:	e77f      	b.n	8004c84 <USBD_MSC_Setup+0x28>

08004d84 <USBD_MSC_DataIn>:
{
 8004d84:	b508      	push	{r3, lr}
  MSC_BOT_DataIn(pdev , epnum);
 8004d86:	f000 f879 	bl	8004e7c <MSC_BOT_DataIn>
}
 8004d8a:	2000      	movs	r0, #0
 8004d8c:	bd08      	pop	{r3, pc}

08004d8e <USBD_MSC_DataOut>:
{
 8004d8e:	b508      	push	{r3, lr}
  MSC_BOT_DataOut(pdev , epnum);
 8004d90:	f000 f890 	bl	8004eb4 <MSC_BOT_DataOut>
}
 8004d94:	2000      	movs	r0, #0
 8004d96:	bd08      	pop	{r3, pc}

08004d98 <USBD_MSC_RegisterStorage>:
* @retval status
*/
uint8_t  USBD_MSC_RegisterStorage  (USBD_HandleTypeDef   *pdev,
                                    USBD_StorageTypeDef *fops)
{
  if(fops != NULL)
 8004d98:	b109      	cbz	r1, 8004d9e <USBD_MSC_RegisterStorage+0x6>
  {
    pdev->pUserData = fops;
 8004d9a:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  }
  return USBD_OK;
}
 8004d9e:	2000      	movs	r0, #0
 8004da0:	4770      	bx	lr

08004da2 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort (USBD_HandleTypeDef  *pdev)
{
 8004da2:	b570      	push	{r4, r5, r6, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8004da4:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290
{
 8004da8:	4605      	mov	r5, r0

  if ((hmsc->cbw.bmFlags == 0U) &&
 8004daa:	f894 3218 	ldrb.w	r3, [r4, #536]	; 0x218
 8004dae:	b93b      	cbnz	r3, 8004dc0 <MSC_BOT_Abort+0x1e>
 8004db0:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8004db4:	b123      	cbz	r3, 8004dc0 <MSC_BOT_Abort+0x1e>
      (hmsc->cbw.dDataLength != 0U) &&
 8004db6:	7a63      	ldrb	r3, [r4, #9]
 8004db8:	b913      	cbnz	r3, 8004dc0 <MSC_BOT_Abort+0x1e>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
  {
    USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR );
 8004dba:	2101      	movs	r1, #1
 8004dbc:	f001 ff64 	bl	8006c88 <USBD_LL_StallEP>
  }

  USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8004dc0:	2181      	movs	r1, #129	; 0x81
 8004dc2:	4628      	mov	r0, r5
 8004dc4:	f001 ff60 	bl	8006c88 <USBD_LL_StallEP>

  if(hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8004dc8:	7a63      	ldrb	r3, [r4, #9]
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d108      	bne.n	8004de0 <MSC_BOT_Abort+0x3e>
  {
    USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8004dce:	f504 7203 	add.w	r2, r4, #524	; 0x20c
 8004dd2:	4628      	mov	r0, r5
 8004dd4:	231f      	movs	r3, #31
 8004dd6:	2101      	movs	r1, #1
                            USBD_BOT_CBW_LENGTH);
  }
}
 8004dd8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8004ddc:	f001 bfa0 	b.w	8006d20 <USBD_LL_PrepareReceive>
 8004de0:	bd70      	pop	{r4, r5, r6, pc}

08004de2 <MSC_BOT_Init>:
{
 8004de2:	b570      	push	{r4, r5, r6, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8004de4:	f8d0 5290 	ldr.w	r5, [r0, #656]	; 0x290
{
 8004de8:	4604      	mov	r4, r0
  hmsc->bot_state = USBD_BOT_IDLE;
 8004dea:	2000      	movs	r0, #0
 8004dec:	7228      	strb	r0, [r5, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8004dee:	7268      	strb	r0, [r5, #9]
  hmsc->scsi_sense_tail = 0U;
 8004df0:	f885 025d 	strb.w	r0, [r5, #605]	; 0x25d
  hmsc->scsi_sense_head = 0U;
 8004df4:	f885 025c 	strb.w	r0, [r5, #604]	; 0x25c
  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 8004df8:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4798      	blx	r3
  USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8004e00:	2101      	movs	r1, #1
 8004e02:	4620      	mov	r0, r4
 8004e04:	f001 ff32 	bl	8006c6c <USBD_LL_FlushEP>
  USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 8004e08:	2181      	movs	r1, #129	; 0x81
 8004e0a:	4620      	mov	r0, r4
 8004e0c:	f001 ff2e 	bl	8006c6c <USBD_LL_FlushEP>
  USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8004e10:	f505 7203 	add.w	r2, r5, #524	; 0x20c
 8004e14:	4620      	mov	r0, r4
 8004e16:	231f      	movs	r3, #31
 8004e18:	2101      	movs	r1, #1
}
 8004e1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8004e1e:	f001 bf7f 	b.w	8006d20 <USBD_LL_PrepareReceive>

08004e22 <MSC_BOT_Reset>:
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8004e22:	f8d0 2290 	ldr.w	r2, [r0, #656]	; 0x290
  hmsc->bot_state  = USBD_BOT_IDLE;
 8004e26:	2300      	movs	r3, #0
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8004e28:	2101      	movs	r1, #1
  hmsc->bot_state  = USBD_BOT_IDLE;
 8004e2a:	7213      	strb	r3, [r2, #8]
  USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8004e2c:	231f      	movs	r3, #31
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8004e2e:	7251      	strb	r1, [r2, #9]
  USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8004e30:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004e34:	f001 bf74 	b.w	8006d20 <USBD_LL_PrepareReceive>

08004e38 <MSC_BOT_DeInit>:
  hmsc->bot_state  = USBD_BOT_IDLE;
 8004e38:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	721a      	strb	r2, [r3, #8]
 8004e40:	4770      	bx	lr
	...

08004e44 <MSC_BOT_SendCSW>:
{
 8004e44:	b570      	push	{r4, r5, r6, lr}
  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8004e46:	4b0c      	ldr	r3, [pc, #48]	; (8004e78 <MSC_BOT_SendCSW+0x34>)
{
 8004e48:	4605      	mov	r5, r0
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8004e4a:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290
  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8004e4e:	f8c4 322c 	str.w	r3, [r4, #556]	; 0x22c
  hmsc->bot_state = USBD_BOT_IDLE;
 8004e52:	2300      	movs	r3, #0
  hmsc->csw.bStatus = CSW_Status;
 8004e54:	f884 1238 	strb.w	r1, [r4, #568]	; 0x238
  USBD_LL_Transmit (pdev, MSC_EPIN_ADDR, (uint8_t *)(void *)&hmsc->csw,
 8004e58:	f504 720b 	add.w	r2, r4, #556	; 0x22c
  hmsc->bot_state = USBD_BOT_IDLE;
 8004e5c:	7223      	strb	r3, [r4, #8]
  USBD_LL_Transmit (pdev, MSC_EPIN_ADDR, (uint8_t *)(void *)&hmsc->csw,
 8004e5e:	2181      	movs	r1, #129	; 0x81
 8004e60:	230d      	movs	r3, #13
 8004e62:	f001 ff4f 	bl	8006d04 <USBD_LL_Transmit>
  USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8004e66:	f504 7203 	add.w	r2, r4, #524	; 0x20c
 8004e6a:	4628      	mov	r0, r5
 8004e6c:	231f      	movs	r3, #31
 8004e6e:	2101      	movs	r1, #1
}
 8004e70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8004e74:	f001 bf54 	b.w	8006d20 <USBD_LL_PrepareReceive>
 8004e78:	53425355 	.word	0x53425355

08004e7c <MSC_BOT_DataIn>:
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8004e7c:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290
{
 8004e80:	b510      	push	{r4, lr}
  switch (hmsc->bot_state)
 8004e82:	7a1a      	ldrb	r2, [r3, #8]
{
 8004e84:	4604      	mov	r4, r0
  switch (hmsc->bot_state)
 8004e86:	2a02      	cmp	r2, #2
 8004e88:	d003      	beq.n	8004e92 <MSC_BOT_DataIn+0x16>
 8004e8a:	d312      	bcc.n	8004eb2 <MSC_BOT_DataIn+0x36>
 8004e8c:	2a04      	cmp	r2, #4
 8004e8e:	d90e      	bls.n	8004eae <MSC_BOT_DataIn+0x32>
 8004e90:	bd10      	pop	{r4, pc}
    if(SCSI_ProcessCmd(pdev,
 8004e92:	f203 221b 	addw	r2, r3, #539	; 0x21b
 8004e96:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8004e9a:	f000 f8a3 	bl	8004fe4 <SCSI_ProcessCmd>
 8004e9e:	2800      	cmp	r0, #0
 8004ea0:	da07      	bge.n	8004eb2 <MSC_BOT_DataIn+0x36>
      MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 8004ea2:	2101      	movs	r1, #1
 8004ea4:	4620      	mov	r0, r4
}
 8004ea6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 8004eaa:	f7ff bfcb 	b.w	8004e44 <MSC_BOT_SendCSW>
 8004eae:	2100      	movs	r1, #0
 8004eb0:	e7f9      	b.n	8004ea6 <MSC_BOT_DataIn+0x2a>
 8004eb2:	bd10      	pop	{r4, pc}

08004eb4 <MSC_BOT_DataOut>:
{
 8004eb4:	b570      	push	{r4, r5, r6, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8004eb6:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290
{
 8004eba:	4605      	mov	r5, r0
  switch (hmsc->bot_state)
 8004ebc:	7a23      	ldrb	r3, [r4, #8]
 8004ebe:	b113      	cbz	r3, 8004ec6 <MSC_BOT_DataOut+0x12>
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d059      	beq.n	8004f78 <MSC_BOT_DataOut+0xc4>
 8004ec4:	bd70      	pop	{r4, r5, r6, pc}
  hmsc->csw.dTag = hmsc->cbw.dTag;
 8004ec6:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize (pdev ,MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8004eca:	2101      	movs	r1, #1
  hmsc->csw.dTag = hmsc->cbw.dTag;
 8004ecc:	f8c4 3230 	str.w	r3, [r4, #560]	; 0x230
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8004ed0:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8004ed4:	f8c4 3234 	str.w	r3, [r4, #564]	; 0x234
  if ((USBD_LL_GetRxDataSize (pdev ,MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8004ed8:	f001 ff30 	bl	8006d3c <USBD_LL_GetRxDataSize>
 8004edc:	281f      	cmp	r0, #31
 8004ede:	f894 1219 	ldrb.w	r1, [r4, #537]	; 0x219
 8004ee2:	d10b      	bne.n	8004efc <MSC_BOT_DataOut+0x48>
 8004ee4:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
 8004ee8:	4b28      	ldr	r3, [pc, #160]	; (8004f8c <MSC_BOT_DataOut+0xd8>)
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d106      	bne.n	8004efc <MSC_BOT_DataOut+0x48>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8004eee:	2901      	cmp	r1, #1
 8004ef0:	d804      	bhi.n	8004efc <MSC_BOT_DataOut+0x48>
        (hmsc->cbw.bLUN > 1U) ||
 8004ef2:	f894 321a 	ldrb.w	r3, [r4, #538]	; 0x21a
 8004ef6:	3b01      	subs	r3, #1
 8004ef8:	2b0f      	cmp	r3, #15
 8004efa:	d90b      	bls.n	8004f14 <MSC_BOT_DataOut+0x60>
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8004efc:	2320      	movs	r3, #32
 8004efe:	2205      	movs	r2, #5
 8004f00:	4628      	mov	r0, r5
 8004f02:	f000 faa1 	bl	8005448 <SCSI_SenseCode>
    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8004f06:	2302      	movs	r3, #2
 8004f08:	7263      	strb	r3, [r4, #9]
        MSC_BOT_Abort(pdev);
 8004f0a:	4628      	mov	r0, r5
}
 8004f0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        MSC_BOT_Abort(pdev);
 8004f10:	f7ff bf47 	b.w	8004da2 <MSC_BOT_Abort>
    if(SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8004f14:	f204 221b 	addw	r2, r4, #539	; 0x21b
 8004f18:	4628      	mov	r0, r5
 8004f1a:	f000 f863 	bl	8004fe4 <SCSI_ProcessCmd>
 8004f1e:	2800      	cmp	r0, #0
 8004f20:	7a23      	ldrb	r3, [r4, #8]
 8004f22:	da07      	bge.n	8004f34 <MSC_BOT_DataOut+0x80>
      if(hmsc->bot_state == USBD_BOT_NO_DATA)
 8004f24:	2b05      	cmp	r3, #5
 8004f26:	d1f0      	bne.n	8004f0a <MSC_BOT_DataOut+0x56>
        MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 8004f28:	2101      	movs	r1, #1
        MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 8004f2a:	4628      	mov	r0, r5
}
 8004f2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 8004f30:	f7ff bf88 	b.w	8004e44 <MSC_BOT_SendCSW>
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8004f34:	3b01      	subs	r3, #1
 8004f36:	2b02      	cmp	r3, #2
 8004f38:	d926      	bls.n	8004f88 <MSC_BOT_DataOut+0xd4>
      if (hmsc->bot_data_length > 0U)
 8004f3a:	8963      	ldrh	r3, [r4, #10]
 8004f3c:	b1d3      	cbz	r3, 8004f74 <MSC_BOT_DataOut+0xc0>
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8004f3e:	f8d5 1290 	ldr.w	r1, [r5, #656]	; 0x290
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8004f42:	f104 020c 	add.w	r2, r4, #12
  uint16_t length = (uint16_t)MIN(hmsc->cbw.dDataLength, len);
 8004f46:	461c      	mov	r4, r3
  hmsc->csw.dDataResidue -= len;
 8004f48:	f8d1 0234 	ldr.w	r0, [r1, #564]	; 0x234
  uint16_t length = (uint16_t)MIN(hmsc->cbw.dDataLength, len);
 8004f4c:	f8d1 6214 	ldr.w	r6, [r1, #532]	; 0x214
  hmsc->csw.dDataResidue -= len;
 8004f50:	1b00      	subs	r0, r0, r4
  uint16_t length = (uint16_t)MIN(hmsc->cbw.dDataLength, len);
 8004f52:	429e      	cmp	r6, r3
  hmsc->csw.dDataResidue -= len;
 8004f54:	f8c1 0234 	str.w	r0, [r1, #564]	; 0x234
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8004f58:	f04f 0000 	mov.w	r0, #0
  uint16_t length = (uint16_t)MIN(hmsc->cbw.dDataLength, len);
 8004f5c:	bf38      	it	cc
 8004f5e:	b2b3      	uxthcc	r3, r6
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8004f60:	f881 0238 	strb.w	r0, [r1, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8004f64:	2004      	movs	r0, #4
 8004f66:	7208      	strb	r0, [r1, #8]
  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 8004f68:	4628      	mov	r0, r5
 8004f6a:	2181      	movs	r1, #129	; 0x81
}
 8004f6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 8004f70:	f001 bec8 	b.w	8006d04 <USBD_LL_Transmit>
        MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 8004f74:	4619      	mov	r1, r3
 8004f76:	e7d8      	b.n	8004f2a <MSC_BOT_DataOut+0x76>
    if(SCSI_ProcessCmd(pdev,
 8004f78:	f204 221b 	addw	r2, r4, #539	; 0x21b
 8004f7c:	f894 1219 	ldrb.w	r1, [r4, #537]	; 0x219
 8004f80:	f000 f830 	bl	8004fe4 <SCSI_ProcessCmd>
 8004f84:	2800      	cmp	r0, #0
 8004f86:	dbcf      	blt.n	8004f28 <MSC_BOT_DataOut+0x74>
 8004f88:	bd70      	pop	{r4, r5, r6, pc}
 8004f8a:	bf00      	nop
 8004f8c:	43425355 	.word	0x43425355

08004f90 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature (USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8004f90:	b510      	push	{r4, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8004f92:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290

  if(hmsc->bot_status == USBD_BOT_STATUS_ERROR)/* Bad CBW Signature */
 8004f96:	7a63      	ldrb	r3, [r4, #9]
 8004f98:	2b02      	cmp	r3, #2
 8004f9a:	d105      	bne.n	8004fa8 <MSC_BOT_CplClrFeature+0x18>
  {
    USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8004f9c:	2181      	movs	r1, #129	; 0x81
 8004f9e:	f001 fe73 	bl	8006c88 <USBD_LL_StallEP>
    hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	7263      	strb	r3, [r4, #9]
 8004fa6:	bd10      	pop	{r4, pc}
  }
  else if(((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8004fa8:	060a      	lsls	r2, r1, #24
 8004faa:	d506      	bpl.n	8004fba <MSC_BOT_CplClrFeature+0x2a>
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d004      	beq.n	8004fba <MSC_BOT_CplClrFeature+0x2a>
  {
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 8004fb0:	2101      	movs	r1, #1
  }
  else
  {
    return;
  }
}
 8004fb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 8004fb6:	f7ff bf45 	b.w	8004e44 <MSC_BOT_SendCSW>
 8004fba:	bd10      	pop	{r4, pc}

08004fbc <SCSI_SenseCode.constprop.8>:
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8004fbc:	f8d0 2290 	ldr.w	r2, [r0, #656]	; 0x290

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 8004fc0:	f892 325d 	ldrb.w	r3, [r2, #605]	; 0x25d
 8004fc4:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
  hmsc->scsi_sense_tail++;
 8004fc8:	3301      	adds	r3, #1
 8004fca:	b2db      	uxtb	r3, r3
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 8004fcc:	f880 123c 	strb.w	r1, [r0, #572]	; 0x23c
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 8004fd0:	2100      	movs	r1, #0
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8004fd2:	2b04      	cmp	r3, #4
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 8004fd4:	f880 1240 	strb.w	r1, [r0, #576]	; 0x240
  hmsc->scsi_sense_tail++;
 8004fd8:	bf14      	ite	ne
 8004fda:	f882 325d 	strbne.w	r3, [r2, #605]	; 0x25d
  {
    hmsc->scsi_sense_tail = 0U;
 8004fde:	f882 125d 	strbeq.w	r1, [r2, #605]	; 0x25d
 8004fe2:	4770      	bx	lr

08004fe4 <SCSI_ProcessCmd>:
{
 8004fe4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  switch (cmd[0])
 8004fe8:	7813      	ldrb	r3, [r2, #0]
{
 8004fea:	4605      	mov	r5, r0
 8004fec:	460c      	mov	r4, r1
 8004fee:	4617      	mov	r7, r2
  switch (cmd[0])
 8004ff0:	2b1e      	cmp	r3, #30
 8004ff2:	d016      	beq.n	8005022 <SCSI_ProcessCmd+0x3e>
 8004ff4:	d81a      	bhi.n	800502c <SCSI_ProcessCmd+0x48>
 8004ff6:	2b12      	cmp	r3, #18
 8004ff8:	f000 80e9 	beq.w	80051ce <SCSI_ProcessCmd+0x1ea>
 8004ffc:	d80c      	bhi.n	8005018 <SCSI_ProcessCmd+0x34>
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	f000 8097 	beq.w	8005132 <SCSI_ProcessCmd+0x14e>
 8005004:	2b03      	cmp	r3, #3
 8005006:	f000 80b2 	beq.w	800516e <SCSI_ProcessCmd+0x18a>
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 800500a:	2105      	movs	r1, #5
 800500c:	4628      	mov	r0, r5
 800500e:	f7ff ffd5 	bl	8004fbc <SCSI_SenseCode.constprop.8>
    return -1;
 8005012:	f04f 34ff 	mov.w	r4, #4294967295
 8005016:	e0a6      	b.n	8005166 <SCSI_ProcessCmd+0x182>
  switch (cmd[0])
 8005018:	2b1a      	cmp	r3, #26
 800501a:	f000 8100 	beq.w	800521e <SCSI_ProcessCmd+0x23a>
 800501e:	2b1b      	cmp	r3, #27
 8005020:	d1f3      	bne.n	800500a <SCSI_ProcessCmd+0x26>
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
  hmsc->bot_data_length = 0U;
 8005022:	f8d5 3290 	ldr.w	r3, [r5, #656]	; 0x290
 8005026:	2400      	movs	r4, #0
  if(SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
                            hmsc->scsi_blk_len) < 0)
  {
    return -1; /* error */
  }
  hmsc->bot_data_length = 0U;
 8005028:	815c      	strh	r4, [r3, #10]
 800502a:	e09c      	b.n	8005166 <SCSI_ProcessCmd+0x182>
  switch (cmd[0])
 800502c:	2b28      	cmp	r3, #40	; 0x28
 800502e:	f000 8140 	beq.w	80052b2 <SCSI_ProcessCmd+0x2ce>
 8005032:	d827      	bhi.n	8005084 <SCSI_ProcessCmd+0xa0>
 8005034:	2b23      	cmp	r3, #35	; 0x23
 8005036:	f000 8110 	beq.w	800525a <SCSI_ProcessCmd+0x276>
 800503a:	2b25      	cmp	r3, #37	; 0x25
 800503c:	d1e5      	bne.n	800500a <SCSI_ProcessCmd+0x26>
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800503e:	f8d0 6290 	ldr.w	r6, [r0, #656]	; 0x290
  if(((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size) != 0)
 8005042:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8005046:	4620      	mov	r0, r4
 8005048:	f206 225e 	addw	r2, r6, #606	; 0x25e
 800504c:	f506 7118 	add.w	r1, r6, #608	; 0x260
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	4798      	blx	r3
 8005054:	4604      	mov	r4, r0
 8005056:	2800      	cmp	r0, #0
 8005058:	f040 8113 	bne.w	8005282 <SCSI_ProcessCmd+0x29e>
    hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800505c:	f8d6 3260 	ldr.w	r3, [r6, #608]	; 0x260
    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8005060:	7430      	strb	r0, [r6, #16]
    hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8005062:	3b01      	subs	r3, #1
    hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8005064:	7470      	strb	r0, [r6, #17]
    hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8005066:	0e1a      	lsrs	r2, r3, #24
    hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8005068:	73f3      	strb	r3, [r6, #15]
    hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800506a:	7332      	strb	r2, [r6, #12]
    hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800506c:	0c1a      	lsrs	r2, r3, #16
 800506e:	7372      	strb	r2, [r6, #13]
    hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8005070:	0a1a      	lsrs	r2, r3, #8
    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8005072:	f8b6 325e 	ldrh.w	r3, [r6, #606]	; 0x25e
    hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8005076:	73b2      	strb	r2, [r6, #14]
    hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8005078:	74f3      	strb	r3, [r6, #19]
    hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800507a:	0a1a      	lsrs	r2, r3, #8
    hmsc->bot_data_length = 8U;
 800507c:	2308      	movs	r3, #8
    hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800507e:	74b2      	strb	r2, [r6, #18]
    hmsc->bot_data_length = 8U;
 8005080:	8173      	strh	r3, [r6, #10]
 8005082:	e070      	b.n	8005166 <SCSI_ProcessCmd+0x182>
  switch (cmd[0])
 8005084:	2b2f      	cmp	r3, #47	; 0x2f
 8005086:	f000 81c6 	beq.w	8005416 <SCSI_ProcessCmd+0x432>
 800508a:	2b5a      	cmp	r3, #90	; 0x5a
 800508c:	f000 80d6 	beq.w	800523c <SCSI_ProcessCmd+0x258>
 8005090:	2b2a      	cmp	r3, #42	; 0x2a
 8005092:	d1ba      	bne.n	800500a <SCSI_ProcessCmd+0x26>
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 8005094:	f8d0 6290 	ldr.w	r6, [r0, #656]	; 0x290
  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8005098:	7a33      	ldrb	r3, [r6, #8]
 800509a:	2b00      	cmp	r3, #0
 800509c:	f040 817e 	bne.w	800539c <SCSI_ProcessCmd+0x3b8>
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 80050a0:	f996 3218 	ldrsb.w	r3, [r6, #536]	; 0x218
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	db49      	blt.n	800513c <SCSI_ProcessCmd+0x158>
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) !=0)
 80050a8:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 80050ac:	4608      	mov	r0, r1
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	4798      	blx	r3
 80050b2:	2800      	cmp	r0, #0
 80050b4:	f040 80e5 	bne.w	8005282 <SCSI_ProcessCmd+0x29e>
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) !=0 )
 80050b8:	f8d5 3294 	ldr.w	r3, [r5, #660]	; 0x294
 80050bc:	4620      	mov	r0, r4
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	4798      	blx	r3
 80050c2:	4604      	mov	r4, r0
 80050c4:	2800      	cmp	r0, #0
 80050c6:	f040 80dc 	bne.w	8005282 <SCSI_ProcessCmd+0x29e>
                          ((uint32_t)params[3] << 16) |
 80050ca:	78fa      	ldrb	r2, [r7, #3]
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80050cc:	78bb      	ldrb	r3, [r7, #2]
                          ((uint32_t)params[3] << 16) |
 80050ce:	0412      	lsls	r2, r2, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80050d0:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
                           (uint32_t)params[5];
 80050d4:	797b      	ldrb	r3, [r7, #5]
                          ((uint32_t)params[4] << 8) |
 80050d6:	431a      	orrs	r2, r3
 80050d8:	793b      	ldrb	r3, [r7, #4]
 80050da:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80050de:	f8c6 2264 	str.w	r2, [r6, #612]	; 0x264
                          (uint32_t)params[8];
 80050e2:	7a3b      	ldrb	r3, [r7, #8]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 80050e4:	79f9      	ldrb	r1, [r7, #7]
 80050e6:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
static int8_t SCSI_CheckAddressRange (USBD_HandleTypeDef *pdev, uint8_t lun,
                                      uint32_t blk_offset, uint32_t blk_nbr)
{
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 80050ea:	f8d5 3290 	ldr.w	r3, [r5, #656]	; 0x290
 80050ee:	1850      	adds	r0, r2, r1
 80050f0:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 80050f4:	f8c6 1268 	str.w	r1, [r6, #616]	; 0x268
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 80050f8:	4298      	cmp	r0, r3
 80050fa:	d81f      	bhi.n	800513c <SCSI_ProcessCmd+0x158>
    hmsc->scsi_blk_addr *= hmsc->scsi_blk_size;
 80050fc:	f8b6 325e 	ldrh.w	r3, [r6, #606]	; 0x25e
 8005100:	435a      	muls	r2, r3
    hmsc->scsi_blk_len  *= hmsc->scsi_blk_size;
 8005102:	434b      	muls	r3, r1
    hmsc->scsi_blk_addr *= hmsc->scsi_blk_size;
 8005104:	f8c6 2264 	str.w	r2, [r6, #612]	; 0x264
    if (hmsc->cbw.dDataLength != hmsc->scsi_blk_len)
 8005108:	f8d6 2214 	ldr.w	r2, [r6, #532]	; 0x214
    hmsc->scsi_blk_len  *= hmsc->scsi_blk_size;
 800510c:	f8c6 3268 	str.w	r3, [r6, #616]	; 0x268
    if (hmsc->cbw.dDataLength != hmsc->scsi_blk_len)
 8005110:	4293      	cmp	r3, r2
 8005112:	d113      	bne.n	800513c <SCSI_ProcessCmd+0x158>
    len = (uint16_t)MIN(hmsc->scsi_blk_len, MSC_MEDIA_PACKET);
 8005114:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8005118:	f04f 0101 	mov.w	r1, #1
    USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800511c:	f106 020c 	add.w	r2, r6, #12
 8005120:	4628      	mov	r0, r5
    len = (uint16_t)MIN(hmsc->scsi_blk_len, MSC_MEDIA_PACKET);
 8005122:	bf28      	it	cs
 8005124:	f44f 7300 	movcs.w	r3, #512	; 0x200
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8005128:	7231      	strb	r1, [r6, #8]
    USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800512a:	b29b      	uxth	r3, r3
 800512c:	f001 fdf8 	bl	8006d20 <USBD_LL_PrepareReceive>
 8005130:	e019      	b.n	8005166 <SCSI_ProcessCmd+0x182>
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8005132:	f8d0 6290 	ldr.w	r6, [r0, #656]	; 0x290
  if (hmsc->cbw.dDataLength != 0U)
 8005136:	f8d6 7214 	ldr.w	r7, [r6, #532]	; 0x214
 800513a:	b127      	cbz	r7, 8005146 <SCSI_ProcessCmd+0x162>
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800513c:	2105      	movs	r1, #5
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
                              hmsc->bot_data,
                              hmsc->scsi_blk_addr / hmsc->scsi_blk_size,
                              len / hmsc->scsi_blk_size) < 0)
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800513e:	4628      	mov	r0, r5
 8005140:	f7ff ff3c 	bl	8004fbc <SCSI_SenseCode.constprop.8>
 8005144:	e00c      	b.n	8005160 <SCSI_ProcessCmd+0x17c>
  if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8005146:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800514a:	4608      	mov	r0, r1
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	4798      	blx	r3
 8005150:	4604      	mov	r4, r0
 8005152:	b138      	cbz	r0, 8005164 <SCSI_ProcessCmd+0x180>
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005154:	2102      	movs	r1, #2
 8005156:	4628      	mov	r0, r5
 8005158:	f7ff ff30 	bl	8004fbc <SCSI_SenseCode.constprop.8>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800515c:	2305      	movs	r3, #5
 800515e:	7233      	strb	r3, [r6, #8]
  return 0;
 8005160:	2400      	movs	r4, #0
 8005162:	e000      	b.n	8005166 <SCSI_ProcessCmd+0x182>
  hmsc->bot_data_length = 0U;
 8005164:	8170      	strh	r0, [r6, #10]
}
 8005166:	4620      	mov	r0, r4
 8005168:	b002      	add	sp, #8
 800516a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800516e:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290
    hmsc->bot_data[i] = 0U;
 8005172:	2000      	movs	r0, #0
 8005174:	f103 020c 	add.w	r2, r3, #12
 8005178:	f103 011e 	add.w	r1, r3, #30
 800517c:	f802 0b01 	strb.w	r0, [r2], #1
  for(i = 0U ;i < REQUEST_SENSE_DATA_LEN; i++)
 8005180:	428a      	cmp	r2, r1
 8005182:	d1fb      	bne.n	800517c <SCSI_ProcessCmd+0x198>
  hmsc->bot_data[0]	= 0x70U;
 8005184:	2270      	movs	r2, #112	; 0x70
  if((hmsc->scsi_sense_head != hmsc->scsi_sense_tail)) {
 8005186:	f893 125d 	ldrb.w	r1, [r3, #605]	; 0x25d
  hmsc->bot_data[0]	= 0x70U;
 800518a:	731a      	strb	r2, [r3, #12]
  hmsc->bot_data[7]	= REQUEST_SENSE_DATA_LEN - 6U;
 800518c:	220c      	movs	r2, #12
 800518e:	74da      	strb	r2, [r3, #19]
  if((hmsc->scsi_sense_head != hmsc->scsi_sense_tail)) {
 8005190:	f893 225c 	ldrb.w	r2, [r3, #604]	; 0x25c
 8005194:	4291      	cmp	r1, r2
 8005196:	d013      	beq.n	80051c0 <SCSI_ProcessCmd+0x1dc>
 8005198:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
    hmsc->scsi_sense_head++;
 800519c:	3201      	adds	r2, #1
    hmsc->bot_data[2]     = hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800519e:	f891 423c 	ldrb.w	r4, [r1, #572]	; 0x23c
    hmsc->scsi_sense_head++;
 80051a2:	b2d2      	uxtb	r2, r2
    hmsc->bot_data[2]     = hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 80051a4:	739c      	strb	r4, [r3, #14]
    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 80051a6:	2a04      	cmp	r2, #4
    hmsc->bot_data[12]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 80051a8:	f891 4241 	ldrb.w	r4, [r1, #577]	; 0x241
 80051ac:	761c      	strb	r4, [r3, #24]
    hmsc->bot_data[13]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 80051ae:	f891 1240 	ldrb.w	r1, [r1, #576]	; 0x240
    hmsc->scsi_sense_head++;
 80051b2:	bf18      	it	ne
 80051b4:	f883 225c 	strbne.w	r2, [r3, #604]	; 0x25c
    hmsc->bot_data[13]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 80051b8:	7659      	strb	r1, [r3, #25]
      hmsc->scsi_sense_head = 0U;
 80051ba:	bf08      	it	eq
 80051bc:	f883 025c 	strbeq.w	r0, [r3, #604]	; 0x25c
  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 80051c0:	2212      	movs	r2, #18
 80051c2:	815a      	strh	r2, [r3, #10]
  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 80051c4:	793a      	ldrb	r2, [r7, #4]
 80051c6:	2a12      	cmp	r2, #18
    hmsc->bot_data_length = params[4];
 80051c8:	bf98      	it	ls
 80051ca:	815a      	strhls	r2, [r3, #10]
 80051cc:	e7c8      	b.n	8005160 <SCSI_ProcessCmd+0x17c>
  if (params[1] & 0x01U)/*Evpd is set*/
 80051ce:	787b      	ldrb	r3, [r7, #1]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 80051d0:	f8d0 2290 	ldr.w	r2, [r0, #656]	; 0x290
  if (params[1] & 0x01U)/*Evpd is set*/
 80051d4:	07db      	lsls	r3, r3, #31
 80051d6:	d50c      	bpl.n	80051f2 <SCSI_ProcessCmd+0x20e>
    hmsc->bot_data_length = len;
 80051d8:	2307      	movs	r3, #7
 80051da:	4998      	ldr	r1, [pc, #608]	; (800543c <SCSI_ProcessCmd+0x458>)
 80051dc:	8153      	strh	r3, [r2, #10]
 80051de:	f102 0312 	add.w	r3, r2, #18
 80051e2:	320b      	adds	r2, #11
      hmsc->bot_data[len] = MSC_Page00_Inquiry_Data[len];
 80051e4:	f811 0d01 	ldrb.w	r0, [r1, #-1]!
 80051e8:	f803 0901 	strb.w	r0, [r3], #-1
    while (len)
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d1f9      	bne.n	80051e4 <SCSI_ProcessCmd+0x200>
 80051f0:	e7b6      	b.n	8005160 <SCSI_ProcessCmd+0x17c>
    pPage = (uint8_t *)(void *)&((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 80051f2:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 80051f6:	eb01 04c1 	add.w	r4, r1, r1, lsl #3
 80051fa:	7939      	ldrb	r1, [r7, #4]
 80051fc:	69db      	ldr	r3, [r3, #28]
 80051fe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    len = (uint16_t)pPage[4] + 5U;
 8005202:	7923      	ldrb	r3, [r4, #4]
 8005204:	3305      	adds	r3, #5
 8005206:	428b      	cmp	r3, r1
 8005208:	bf28      	it	cs
 800520a:	460b      	movcs	r3, r1
    hmsc->bot_data_length = len;
 800520c:	8153      	strh	r3, [r2, #10]
    while (len)
 800520e:	2b00      	cmp	r3, #0
 8005210:	d0a6      	beq.n	8005160 <SCSI_ProcessCmd+0x17c>
      len--;
 8005212:	3b01      	subs	r3, #1
 8005214:	b29b      	uxth	r3, r3
      hmsc->bot_data[len] = pPage[len];
 8005216:	5ce0      	ldrb	r0, [r4, r3]
 8005218:	18d1      	adds	r1, r2, r3
 800521a:	7308      	strb	r0, [r1, #12]
 800521c:	e7f7      	b.n	800520e <SCSI_ProcessCmd+0x22a>
 800521e:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290
  hmsc->bot_data_length = len;
 8005222:	2208      	movs	r2, #8
 8005224:	4986      	ldr	r1, [pc, #536]	; (8005440 <SCSI_ProcessCmd+0x45c>)
 8005226:	815a      	strh	r2, [r3, #10]
 8005228:	f103 0213 	add.w	r2, r3, #19
 800522c:	330b      	adds	r3, #11
    hmsc->bot_data[len] = MSC_Mode_Sense6_data[len];
 800522e:	f811 0d01 	ldrb.w	r0, [r1, #-1]!
 8005232:	f802 0901 	strb.w	r0, [r2], #-1
  while (len)
 8005236:	4293      	cmp	r3, r2
 8005238:	d1f9      	bne.n	800522e <SCSI_ProcessCmd+0x24a>
 800523a:	e791      	b.n	8005160 <SCSI_ProcessCmd+0x17c>
 800523c:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290
  hmsc->bot_data_length = len;
 8005240:	2208      	movs	r2, #8
 8005242:	4980      	ldr	r1, [pc, #512]	; (8005444 <SCSI_ProcessCmd+0x460>)
 8005244:	815a      	strh	r2, [r3, #10]
 8005246:	f103 0213 	add.w	r2, r3, #19
 800524a:	330b      	adds	r3, #11
    hmsc->bot_data[len] = MSC_Mode_Sense10_data[len];
 800524c:	f811 0d01 	ldrb.w	r0, [r1, #-1]!
 8005250:	f802 0901 	strb.w	r0, [r2], #-1
  while (len)
 8005254:	429a      	cmp	r2, r3
 8005256:	d1f9      	bne.n	800524c <SCSI_ProcessCmd+0x268>
 8005258:	e782      	b.n	8005160 <SCSI_ProcessCmd+0x17c>
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800525a:	f8d0 6290 	ldr.w	r6, [r0, #656]	; 0x290
    hmsc->bot_data[i] = 0U;
 800525e:	2100      	movs	r1, #0
 8005260:	f106 030c 	add.w	r3, r6, #12
 8005264:	f106 0218 	add.w	r2, r6, #24
 8005268:	f803 1b01 	strb.w	r1, [r3], #1
  for(i = 0U; i < 12U ; i++)
 800526c:	4293      	cmp	r3, r2
 800526e:	d1fb      	bne.n	8005268 <SCSI_ProcessCmd+0x284>
  if(((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size) != 0)
 8005270:	f8d5 3294 	ldr.w	r3, [r5, #660]	; 0x294
 8005274:	f10d 0202 	add.w	r2, sp, #2
 8005278:	a901      	add	r1, sp, #4
 800527a:	4620      	mov	r0, r4
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	4798      	blx	r3
 8005280:	b108      	cbz	r0, 8005286 <SCSI_ProcessCmd+0x2a2>
    SCSI_SenseCode(pdev,
 8005282:	2102      	movs	r1, #2
 8005284:	e75b      	b.n	800513e <SCSI_ProcessCmd+0x15a>
    hmsc->bot_data[3] = 0x08U;
 8005286:	2308      	movs	r3, #8
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8005288:	7570      	strb	r0, [r6, #21]
    hmsc->bot_data[3] = 0x08U;
 800528a:	73f3      	strb	r3, [r6, #15]
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800528c:	9b01      	ldr	r3, [sp, #4]
 800528e:	3b01      	subs	r3, #1
 8005290:	0e1a      	lsrs	r2, r3, #24
    hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8005292:	74f3      	strb	r3, [r6, #19]
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8005294:	7432      	strb	r2, [r6, #16]
    hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8005296:	0c1a      	lsrs	r2, r3, #16
 8005298:	7472      	strb	r2, [r6, #17]
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 800529a:	0a1a      	lsrs	r2, r3, #8
    hmsc->bot_data[8] = 0x02U;
 800529c:	2302      	movs	r3, #2
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 800529e:	74b2      	strb	r2, [r6, #18]
    hmsc->bot_data[8] = 0x02U;
 80052a0:	7533      	strb	r3, [r6, #20]
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 80052a2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 80052a6:	0a1a      	lsrs	r2, r3, #8
    hmsc->bot_data[11] = (uint8_t)(blk_size);
 80052a8:	75f3      	strb	r3, [r6, #23]
    hmsc->bot_data_length = 12U;
 80052aa:	230c      	movs	r3, #12
    hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 80052ac:	75b2      	strb	r2, [r6, #22]
    hmsc->bot_data_length = 12U;
 80052ae:	8173      	strh	r3, [r6, #10]
 80052b0:	e756      	b.n	8005160 <SCSI_ProcessCmd+0x17c>
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 80052b2:	f8d0 6290 	ldr.w	r6, [r0, #656]	; 0x290
  if(hmsc->bot_state == USBD_BOT_IDLE)  /* Idle */
 80052b6:	7a33      	ldrb	r3, [r6, #8]
 80052b8:	bba3      	cbnz	r3, 8005324 <SCSI_ProcessCmd+0x340>
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80052ba:	f996 3218 	ldrsb.w	r3, [r6, #536]	; 0x218
 80052be:	2b00      	cmp	r3, #0
 80052c0:	f6bf af3c 	bge.w	800513c <SCSI_ProcessCmd+0x158>
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) !=0 )
 80052c4:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 80052c8:	4608      	mov	r0, r1
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	4798      	blx	r3
 80052ce:	2800      	cmp	r0, #0
 80052d0:	d1d7      	bne.n	8005282 <SCSI_ProcessCmd+0x29e>
                          ((uint32_t)params[3] << 16) |
 80052d2:	78fb      	ldrb	r3, [r7, #3]
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80052d4:	78ba      	ldrb	r2, [r7, #2]
                          ((uint32_t)params[3] << 16) |
 80052d6:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80052d8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                           (uint32_t)params[5];
 80052dc:	797a      	ldrb	r2, [r7, #5]
                          ((uint32_t)params[4] <<  8) |
 80052de:	4313      	orrs	r3, r2
 80052e0:	793a      	ldrb	r2, [r7, #4]
 80052e2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80052e6:	f8c6 3264 	str.w	r3, [r6, #612]	; 0x264
    hmsc->scsi_blk_len =  ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 80052ea:	79fa      	ldrb	r2, [r7, #7]
 80052ec:	7a39      	ldrb	r1, [r7, #8]
 80052ee:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 80052f2:	f8d5 2290 	ldr.w	r2, [r5, #656]	; 0x290
 80052f6:	1858      	adds	r0, r3, r1
 80052f8:	f8d2 2260 	ldr.w	r2, [r2, #608]	; 0x260
    hmsc->scsi_blk_len =  ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 80052fc:	f8c6 1268 	str.w	r1, [r6, #616]	; 0x268
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8005300:	4290      	cmp	r0, r2
 8005302:	f63f af1b 	bhi.w	800513c <SCSI_ProcessCmd+0x158>
    hmsc->bot_state = USBD_BOT_DATA_IN;
 8005306:	2202      	movs	r2, #2
 8005308:	7232      	strb	r2, [r6, #8]
    hmsc->scsi_blk_addr *= hmsc->scsi_blk_size;
 800530a:	f8b6 225e 	ldrh.w	r2, [r6, #606]	; 0x25e
 800530e:	4353      	muls	r3, r2
    hmsc->scsi_blk_len  *= hmsc->scsi_blk_size;
 8005310:	434a      	muls	r2, r1
    hmsc->scsi_blk_addr *= hmsc->scsi_blk_size;
 8005312:	f8c6 3264 	str.w	r3, [r6, #612]	; 0x264
    if (hmsc->cbw.dDataLength != hmsc->scsi_blk_len)
 8005316:	f8d6 3214 	ldr.w	r3, [r6, #532]	; 0x214
    hmsc->scsi_blk_len  *= hmsc->scsi_blk_size;
 800531a:	f8c6 2268 	str.w	r2, [r6, #616]	; 0x268
    if (hmsc->cbw.dDataLength != hmsc->scsi_blk_len)
 800531e:	429a      	cmp	r2, r3
 8005320:	f47f af0c 	bne.w	800513c <SCSI_ProcessCmd+0x158>
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8005324:	f44f 7300 	mov.w	r3, #512	; 0x200
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 8005328:	4620      	mov	r0, r4
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800532a:	8173      	strh	r3, [r6, #10]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800532c:	f8d5 6290 	ldr.w	r6, [r5, #656]	; 0x290
  len = (uint16_t)MIN(hmsc->scsi_blk_len, MSC_MEDIA_PACKET);
 8005330:	f8d6 7268 	ldr.w	r7, [r6, #616]	; 0x268
                              hmsc->bot_data,
 8005334:	f106 080c 	add.w	r8, r6, #12
                              hmsc->scsi_blk_addr / hmsc->scsi_blk_size,
 8005338:	f8b6 225e 	ldrh.w	r2, [r6, #606]	; 0x25e
  len = (uint16_t)MIN(hmsc->scsi_blk_len, MSC_MEDIA_PACKET);
 800533c:	429f      	cmp	r7, r3
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 800533e:	f8d6 1264 	ldr.w	r1, [r6, #612]	; 0x264
  len = (uint16_t)MIN(hmsc->scsi_blk_len, MSC_MEDIA_PACKET);
 8005342:	bf28      	it	cs
 8005344:	461f      	movcs	r7, r3
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 8005346:	f8d5 3294 	ldr.w	r3, [r5, #660]	; 0x294
 800534a:	fa1f f987 	uxth.w	r9, r7
 800534e:	f8d3 a010 	ldr.w	sl, [r3, #16]
 8005352:	fbb9 f3f2 	udiv	r3, r9, r2
 8005356:	fbb1 f2f2 	udiv	r2, r1, r2
 800535a:	4641      	mov	r1, r8
 800535c:	47d0      	blx	sl
 800535e:	2800      	cmp	r0, #0
 8005360:	da01      	bge.n	8005366 <SCSI_ProcessCmd+0x382>
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8005362:	2104      	movs	r1, #4
 8005364:	e6eb      	b.n	800513e <SCSI_ProcessCmd+0x15a>
    return -1;
  }

  USBD_LL_Transmit (pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 8005366:	464b      	mov	r3, r9
 8005368:	4642      	mov	r2, r8
 800536a:	2181      	movs	r1, #129	; 0x81
 800536c:	4628      	mov	r0, r5
 800536e:	f001 fcc9 	bl	8006d04 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += len;
 8005372:	f8d6 3264 	ldr.w	r3, [r6, #612]	; 0x264
  hmsc->scsi_blk_len -= len;
 8005376:	f8d6 4268 	ldr.w	r4, [r6, #616]	; 0x268
  hmsc->scsi_blk_addr += len;
 800537a:	443b      	add	r3, r7
  hmsc->scsi_blk_len -= len;
 800537c:	1be4      	subs	r4, r4, r7
  hmsc->scsi_blk_addr += len;
 800537e:	f8c6 3264 	str.w	r3, [r6, #612]	; 0x264

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8005382:	f8d6 3234 	ldr.w	r3, [r6, #564]	; 0x234
  hmsc->scsi_blk_len -= len;
 8005386:	f8c6 4268 	str.w	r4, [r6, #616]	; 0x268
  hmsc->csw.dDataResidue -= len;
 800538a:	1bdf      	subs	r7, r3, r7
 800538c:	f8c6 7234 	str.w	r7, [r6, #564]	; 0x234

  if (hmsc->scsi_blk_len == 0U)
 8005390:	2c00      	cmp	r4, #0
 8005392:	f47f aee5 	bne.w	8005160 <SCSI_ProcessCmd+0x17c>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8005396:	2303      	movs	r3, #3
 8005398:	7233      	strb	r3, [r6, #8]
 800539a:	e6e4      	b.n	8005166 <SCSI_ProcessCmd+0x182>
static int8_t SCSI_ProcessWrite (USBD_HandleTypeDef  *pdev, uint8_t lun)
{
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
  uint16_t len;

  len = (uint16_t)MIN(hmsc->scsi_blk_len, MSC_MEDIA_PACKET);
 800539c:	f8d6 7268 	ldr.w	r7, [r6, #616]	; 0x268

  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 80053a0:	f106 080c 	add.w	r8, r6, #12
                             hmsc->scsi_blk_addr / hmsc->scsi_blk_size,
 80053a4:	f8b6 225e 	ldrh.w	r2, [r6, #606]	; 0x25e
  len = (uint16_t)MIN(hmsc->scsi_blk_len, MSC_MEDIA_PACKET);
 80053a8:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 80053ac:	f8d6 1264 	ldr.w	r1, [r6, #612]	; 0x264
 80053b0:	f8d0 0294 	ldr.w	r0, [r0, #660]	; 0x294
  len = (uint16_t)MIN(hmsc->scsi_blk_len, MSC_MEDIA_PACKET);
 80053b4:	bf28      	it	cs
 80053b6:	f44f 7700 	movcs.w	r7, #512	; 0x200
  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 80053ba:	f8d0 9014 	ldr.w	r9, [r0, #20]
 80053be:	4620      	mov	r0, r4
 80053c0:	b2bb      	uxth	r3, r7
 80053c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80053c6:	fbb1 f2f2 	udiv	r2, r1, r2
 80053ca:	4641      	mov	r1, r8
 80053cc:	47c8      	blx	r9
 80053ce:	2800      	cmp	r0, #0
 80053d0:	dbc7      	blt.n	8005362 <SCSI_ProcessCmd+0x37e>
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);

    return -1;
  }

  hmsc->scsi_blk_addr += len;
 80053d2:	f8d6 3264 	ldr.w	r3, [r6, #612]	; 0x264
  hmsc->scsi_blk_len -= len;

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 80053d6:	f8d6 2234 	ldr.w	r2, [r6, #564]	; 0x234
  hmsc->scsi_blk_addr += len;
 80053da:	443b      	add	r3, r7
 80053dc:	f8c6 3264 	str.w	r3, [r6, #612]	; 0x264
  hmsc->scsi_blk_len -= len;
 80053e0:	f8d6 3268 	ldr.w	r3, [r6, #616]	; 0x268
 80053e4:	1bdb      	subs	r3, r3, r7
  hmsc->csw.dDataResidue -= len;
 80053e6:	1bd7      	subs	r7, r2, r7
  hmsc->scsi_blk_len -= len;
 80053e8:	f8c6 3268 	str.w	r3, [r6, #616]	; 0x268
  hmsc->csw.dDataResidue -= len;
 80053ec:	f8c6 7234 	str.w	r7, [r6, #564]	; 0x234

  if (hmsc->scsi_blk_len == 0U)
 80053f0:	b923      	cbnz	r3, 80053fc <SCSI_ProcessCmd+0x418>
  {
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 80053f2:	2100      	movs	r1, #0
 80053f4:	4628      	mov	r0, r5
 80053f6:	f7ff fd25 	bl	8004e44 <MSC_BOT_SendCSW>
 80053fa:	e6b1      	b.n	8005160 <SCSI_ProcessCmd+0x17c>
  }
  else
  {
    len = (uint16_t)MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET);
 80053fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    /* Prepare EP to Receive next packet */
    USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8005400:	4642      	mov	r2, r8
 8005402:	f04f 0101 	mov.w	r1, #1
 8005406:	4628      	mov	r0, r5
    len = (uint16_t)MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET);
 8005408:	bf28      	it	cs
 800540a:	f44f 7300 	movcs.w	r3, #512	; 0x200
    USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800540e:	b29b      	uxth	r3, r3
 8005410:	f001 fc86 	bl	8006d20 <USBD_LL_PrepareReceive>
 8005414:	e6a4      	b.n	8005160 <SCSI_ProcessCmd+0x17c>
  if ((params[1]& 0x02U) == 0x02U)
 8005416:	7854      	ldrb	r4, [r2, #1]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 8005418:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290
  if ((params[1]& 0x02U) == 0x02U)
 800541c:	f014 0402 	ands.w	r4, r4, #2
 8005420:	f47f ae8c 	bne.w	800513c <SCSI_ProcessCmd+0x158>
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8005424:	f8d3 1268 	ldr.w	r1, [r3, #616]	; 0x268
 8005428:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 800542c:	440a      	add	r2, r1
 800542e:	f8d3 1260 	ldr.w	r1, [r3, #608]	; 0x260
 8005432:	428a      	cmp	r2, r1
 8005434:	f67f adf8 	bls.w	8005028 <SCSI_ProcessCmd+0x44>
 8005438:	e680      	b.n	800513c <SCSI_ProcessCmd+0x158>
 800543a:	bf00      	nop
 800543c:	08007541 	.word	0x08007541
 8005440:	0800753a 	.word	0x0800753a
 8005444:	08007532 	.word	0x08007532

08005448 <SCSI_SenseCode>:
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8005448:	f8d0 1290 	ldr.w	r1, [r0, #656]	; 0x290
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 800544c:	f891 325d 	ldrb.w	r3, [r1, #605]	; 0x25d
 8005450:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
  hmsc->scsi_sense_tail++;
 8005454:	3301      	adds	r3, #1
 8005456:	b2db      	uxtb	r3, r3
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 8005458:	f880 223c 	strb.w	r2, [r0, #572]	; 0x23c
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 800545c:	2200      	movs	r2, #0
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800545e:	2b04      	cmp	r3, #4
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 8005460:	f880 2240 	strb.w	r2, [r0, #576]	; 0x240
  hmsc->scsi_sense_tail++;
 8005464:	bf14      	ite	ne
 8005466:	f881 325d 	strbne.w	r3, [r1, #605]	; 0x25d
    hmsc->scsi_sense_tail = 0U;
 800546a:	f881 225d 	strbeq.w	r2, [r1, #605]	; 0x25d
 800546e:	4770      	bx	lr

08005470 <SPIDS_LinkDriver_EX>:
uint8_t SPIDS_LinkDriver_EX(const SPIDS_DiskioDriver_Typedef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(systemDisks.nbr < _VOLUMES)
 8005470:	4b0f      	ldr	r3, [pc, #60]	; (80054b0 <SPIDS_LinkDriver_EX+0x40>)
{
 8005472:	b530      	push	{r4, r5, lr}
  if(systemDisks.nbr < _VOLUMES)
 8005474:	7a5d      	ldrb	r5, [r3, #9]
 8005476:	f005 04ff 	and.w	r4, r5, #255	; 0xff
 800547a:	b9b5      	cbnz	r5, 80054aa <SPIDS_LinkDriver_EX+0x3a>
  {
    systemDisks.is_initialized[systemDisks.nbr] = 0;
 800547c:	7a5d      	ldrb	r5, [r3, #9]
 800547e:	555c      	strb	r4, [r3, r5]
    systemDisks.drv[systemDisks.nbr] = drv;
 8005480:	7a5d      	ldrb	r5, [r3, #9]
 8005482:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8005486:	6068      	str	r0, [r5, #4]
    systemDisks.lun[systemDisks.nbr] = lun;
 8005488:	7a58      	ldrb	r0, [r3, #9]
 800548a:	4418      	add	r0, r3
 800548c:	7202      	strb	r2, [r0, #8]
    DiskNum = systemDisks.nbr++;
 800548e:	7a5a      	ldrb	r2, [r3, #9]
 8005490:	b2d2      	uxtb	r2, r2
 8005492:	1c50      	adds	r0, r2, #1
    path[0] = DiskNum + '0';
 8005494:	3230      	adds	r2, #48	; 0x30
    DiskNum = systemDisks.nbr++;
 8005496:	b2c0      	uxtb	r0, r0
 8005498:	7258      	strb	r0, [r3, #9]
    path[1] = ':';
 800549a:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 800549c:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
    path[3] = 0;
 800549e:	4620      	mov	r0, r4
    path[1] = ':';
 80054a0:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 80054a2:	232f      	movs	r3, #47	; 0x2f
    path[3] = 0;
 80054a4:	70cc      	strb	r4, [r1, #3]
    path[2] = '/';
 80054a6:	708b      	strb	r3, [r1, #2]
 80054a8:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 80054aa:	2001      	movs	r0, #1
    ret = 0;
  }

  return ret;
}
 80054ac:	bd30      	pop	{r4, r5, pc}
 80054ae:	bf00      	nop
 80054b0:	20003ee8 	.word	0x20003ee8

080054b4 <SPIDS_LinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t SPIDS_LinkDriver(const SPIDS_DiskioDriver_Typedef *drv, char *path)
{
  return SPIDS_LinkDriver_EX(drv, path, 0);
 80054b4:	2200      	movs	r2, #0
 80054b6:	f7ff bfdb 	b.w	8005470 <SPIDS_LinkDriver_EX>
	...

080054bc <SPIDS_STM32F4_SPI_Settings_Initialize>:
void SPIDS_STM32F4_SPI_Settings_Initialize(SPIDS_STM32F4_SPI_Settings_TypeDef * hspi_settings)
{
	hspi_settings->hspi = NULL;
	hspi_settings->CS_GPIO_Port = NULL;
	hspi_settings->CS_Pin = 0;
	hspi_settings->max_freq = SPIDS_STM32F4_SPI_MAX_FREQ;
 80054bc:	4a06      	ldr	r2, [pc, #24]	; (80054d8 <SPIDS_STM32F4_SPI_Settings_Initialize+0x1c>)
	hspi_settings->hspi = NULL;
 80054be:	2300      	movs	r3, #0
	hspi_settings->max_freq = SPIDS_STM32F4_SPI_MAX_FREQ;
 80054c0:	60c2      	str	r2, [r0, #12]
	hspi_settings->init_freq = SPIDS_STM32F4_SPI_INIT_FREQ;
 80054c2:	4a06      	ldr	r2, [pc, #24]	; (80054dc <SPIDS_STM32F4_SPI_Settings_Initialize+0x20>)
	hspi_settings->hspi = NULL;
 80054c4:	6003      	str	r3, [r0, #0]
	hspi_settings->init_freq = SPIDS_STM32F4_SPI_INIT_FREQ;
 80054c6:	6102      	str	r2, [r0, #16]
	hspi_settings->Timeout = SPIDS_STM32F4_SPI_Default_Timeout;
 80054c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	hspi_settings->CS_GPIO_Port = NULL;
 80054cc:	6043      	str	r3, [r0, #4]
	hspi_settings->CS_Pin = 0;
 80054ce:	8103      	strh	r3, [r0, #8]
	hspi_settings->Timeout = SPIDS_STM32F4_SPI_Default_Timeout;
 80054d0:	6142      	str	r2, [r0, #20]
	hspi_settings->hw_format = SPIDS_SD_HW_SC;						// Assume standard capacity
 80054d2:	7603      	strb	r3, [r0, #24]
 80054d4:	4770      	bx	lr
 80054d6:	bf00      	nop
 80054d8:	017d7840 	.word	0x017d7840
 80054dc:	00061a80 	.word	0x00061a80

080054e0 <SPIDS_STM32F4_SPI_CMD>:

//


void 	SPIDS_STM32F4_SPI_CMD(SPIDS_STM32F4_SPI_Settings_TypeDef * settings, uint8_t cmd_val, uint32_t payload, uint8_t crc_val)
{
 80054e0:	b507      	push	{r0, r1, r2, lr}
	uint8_t command_buff[SPIDS_STM32F4_SPI_CMD_FRAME_LENGTH];
	for(uint8_t indi = 0; indi < SPIDS_STM32F4_SPI_CMD_FRAME_LENGTH; indi++ ){ command_buff[indi] = 0x00; }

	command_buff[0] = (cmd_val | 0b01000000);
 80054e2:	f041 0140 	orr.w	r1, r1, #64	; 0x40
	command_buff[1] = ((payload & 0xFF000000) >> 24);
	command_buff[2] = ((payload & 0x00FF0000) >> 16);
	command_buff[3] = ((payload & 0x0000FF00) >> 8);
	command_buff[4] = ((payload & 0x000000FF) >> 0);
	command_buff[SPIDS_STM32F4_SPI_CMD_FRAME_LENGTH-1] = (crc_val | 0x01);
 80054e6:	f043 0301 	orr.w	r3, r3, #1
	command_buff[4] = ((payload & 0x000000FF) >> 0);
 80054ea:	f88d 2004 	strb.w	r2, [sp, #4]
	command_buff[0] = (cmd_val | 0b01000000);
 80054ee:	f88d 1000 	strb.w	r1, [sp]
	command_buff[1] = ((payload & 0xFF000000) >> 24);
 80054f2:	0e11      	lsrs	r1, r2, #24
	command_buff[SPIDS_STM32F4_SPI_CMD_FRAME_LENGTH-1] = (crc_val | 0x01);
 80054f4:	f88d 3005 	strb.w	r3, [sp, #5]
	command_buff[1] = ((payload & 0xFF000000) >> 24);
 80054f8:	f88d 1001 	strb.w	r1, [sp, #1]
	command_buff[2] = ((payload & 0x00FF0000) >> 16);
 80054fc:	0c11      	lsrs	r1, r2, #16

	HAL_SPI_Transmit(settings->hspi, command_buff, SPIDS_STM32F4_SPI_CMD_FRAME_LENGTH, settings->Timeout);
 80054fe:	6943      	ldr	r3, [r0, #20]
	command_buff[2] = ((payload & 0x00FF0000) >> 16);
 8005500:	f88d 1002 	strb.w	r1, [sp, #2]
	command_buff[3] = ((payload & 0x0000FF00) >> 8);
 8005504:	0a11      	lsrs	r1, r2, #8
	HAL_SPI_Transmit(settings->hspi, command_buff, SPIDS_STM32F4_SPI_CMD_FRAME_LENGTH, settings->Timeout);
 8005506:	2206      	movs	r2, #6
 8005508:	6800      	ldr	r0, [r0, #0]
	command_buff[3] = ((payload & 0x0000FF00) >> 8);
 800550a:	f88d 1003 	strb.w	r1, [sp, #3]
	HAL_SPI_Transmit(settings->hspi, command_buff, SPIDS_STM32F4_SPI_CMD_FRAME_LENGTH, settings->Timeout);
 800550e:	4669      	mov	r1, sp
 8005510:	f7fc ff0f 	bl	8002332 <HAL_SPI_Transmit>
}
 8005514:	b003      	add	sp, #12
 8005516:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800551c <SPIDS_STM32F4_SPI_GET_R1>:
 */

SPIDS_STM32F4_SPI_CodeTypeDef SPIDS_STM32F4_SPI_GET_R1(SPIDS_STM32F4_SPI_Settings_TypeDef * settings, uint8_t * p_r1_rx, uint32_t timeout)
{
	uint32_t count = 0;
	HAL_SPI_TransmitReceive(settings->hspi, &ALL_HIGH,  p_r1_rx, 1, settings->Timeout);
 800551c:	6943      	ldr	r3, [r0, #20]
{
 800551e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	while((*( p_r1_rx) == 0xFF) && (count++ < timeout))
 8005522:	2500      	movs	r5, #0
	{
		HAL_SPI_TransmitReceive(settings->hspi, &ALL_HIGH,  p_r1_rx, 1, settings->Timeout);
 8005524:	f8df 8040 	ldr.w	r8, [pc, #64]	; 8005568 <SPIDS_STM32F4_SPI_GET_R1+0x4c>
	HAL_SPI_TransmitReceive(settings->hspi, &ALL_HIGH,  p_r1_rx, 1, settings->Timeout);
 8005528:	9300      	str	r3, [sp, #0]
{
 800552a:	4604      	mov	r4, r0
 800552c:	460e      	mov	r6, r1
 800552e:	4617      	mov	r7, r2
	HAL_SPI_TransmitReceive(settings->hspi, &ALL_HIGH,  p_r1_rx, 1, settings->Timeout);
 8005530:	2301      	movs	r3, #1
 8005532:	460a      	mov	r2, r1
 8005534:	6800      	ldr	r0, [r0, #0]
 8005536:	490c      	ldr	r1, [pc, #48]	; (8005568 <SPIDS_STM32F4_SPI_GET_R1+0x4c>)
 8005538:	f7fc ff9f 	bl	800247a <HAL_SPI_TransmitReceive>
	while((*( p_r1_rx) == 0xFF) && (count++ < timeout))
 800553c:	7833      	ldrb	r3, [r6, #0]
 800553e:	2bff      	cmp	r3, #255	; 0xff
 8005540:	d10f      	bne.n	8005562 <SPIDS_STM32F4_SPI_GET_R1+0x46>
 8005542:	42af      	cmp	r7, r5
 8005544:	d103      	bne.n	800554e <SPIDS_STM32F4_SPI_GET_R1+0x32>
	}
	if(*( p_r1_rx) == 0xFF)
	{
		return SPIDS_STM32F4_SPI_CODE_TIMEOUT;
 8005546:	2001      	movs	r0, #1
	}
	return SPIDS_STM32F4_SPI_CODE_NOM;
}
 8005548:	b002      	add	sp, #8
 800554a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		HAL_SPI_TransmitReceive(settings->hspi, &ALL_HIGH,  p_r1_rx, 1, settings->Timeout);
 800554e:	6963      	ldr	r3, [r4, #20]
 8005550:	4632      	mov	r2, r6
 8005552:	4641      	mov	r1, r8
 8005554:	6820      	ldr	r0, [r4, #0]
 8005556:	9300      	str	r3, [sp, #0]
 8005558:	2301      	movs	r3, #1
 800555a:	f7fc ff8e 	bl	800247a <HAL_SPI_TransmitReceive>
 800555e:	3501      	adds	r5, #1
 8005560:	e7ec      	b.n	800553c <SPIDS_STM32F4_SPI_GET_R1+0x20>
	return SPIDS_STM32F4_SPI_CODE_NOM;
 8005562:	2000      	movs	r0, #0
 8005564:	e7f0      	b.n	8005548 <SPIDS_STM32F4_SPI_GET_R1+0x2c>
 8005566:	bf00      	nop
 8005568:	200000ac 	.word	0x200000ac

0800556c <SPIDS_STM32F4_SPI_CMD_SD_APP_OP_COND>:
{
 800556c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t rx_byt = 0xFF;
 800556e:	23ff      	movs	r3, #255	; 0xff
 8005570:	ac02      	add	r4, sp, #8
{
 8005572:	4605      	mov	r5, r0
 8005574:	460e      	mov	r6, r1
	uint8_t rx_byt = 0xFF;
 8005576:	f804 3d01 	strb.w	r3, [r4, #-1]!
	SPIDS_STM32F4_SPI_CMD(settings, SDMMC_CMD_APP_CMD, 0, 0);
 800557a:	2300      	movs	r3, #0
 800557c:	2137      	movs	r1, #55	; 0x37
 800557e:	461a      	mov	r2, r3
 8005580:	f7ff ffae 	bl	80054e0 <SPIDS_STM32F4_SPI_CMD>
	result = SPIDS_STM32F4_SPI_GET_R1(settings, &rx_byt, 10);					// timeout = 10 should be enough
 8005584:	4621      	mov	r1, r4
 8005586:	220a      	movs	r2, #10
 8005588:	4628      	mov	r0, r5
 800558a:	f7ff ffc7 	bl	800551c <SPIDS_STM32F4_SPI_GET_R1>
	if(result != SPIDS_STM32F4_SPI_CODE_NOM)
 800558e:	4604      	mov	r4, r0
 8005590:	b950      	cbnz	r0, 80055a8 <SPIDS_STM32F4_SPI_CMD_SD_APP_OP_COND+0x3c>
		payload = 0x40000000;
 8005592:	2e00      	cmp	r6, #0
	SPIDS_STM32F4_SPI_CMD(settings, SDMMC_CMD_SD_APP_OP_COND, payload, 0);
 8005594:	4603      	mov	r3, r0
 8005596:	f04f 0129 	mov.w	r1, #41	; 0x29
 800559a:	4628      	mov	r0, r5
 800559c:	bf14      	ite	ne
 800559e:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
 80055a2:	2200      	moveq	r2, #0
 80055a4:	f7ff ff9c 	bl	80054e0 <SPIDS_STM32F4_SPI_CMD>
}
 80055a8:	4620      	mov	r0, r4
 80055aa:	b002      	add	sp, #8
 80055ac:	bd70      	pop	{r4, r5, r6, pc}
	...

080055b0 <SPIDS_STM32F4_SPI_GET_R2>:

SPIDS_STM32F4_SPI_CodeTypeDef SPIDS_STM32F4_SPI_GET_R2(SPIDS_STM32F4_SPI_Settings_TypeDef * settings, uint16_t *  p_r2_rx, uint32_t timeout)
{
 80055b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80055b2:	460e      	mov	r6, r1
	SPIDS_STM32F4_SPI_CodeTypeDef result = SPIDS_STM32F4_SPI_CODE_NOM;
	uint8_t r2_buff[2];

	result = SPIDS_STM32F4_SPI_GET_R1(settings, r2_buff, timeout);
 80055b4:	a903      	add	r1, sp, #12
{
 80055b6:	4605      	mov	r5, r0
	result = SPIDS_STM32F4_SPI_GET_R1(settings, r2_buff, timeout);
 80055b8:	f7ff ffb0 	bl	800551c <SPIDS_STM32F4_SPI_GET_R1>
	if(result != SPIDS_STM32F4_SPI_CODE_NOM)
 80055bc:	4604      	mov	r4, r0
 80055be:	b978      	cbnz	r0, 80055e0 <SPIDS_STM32F4_SPI_GET_R2+0x30>
	{
		return result;
	}
	HAL_SPI_TransmitReceive(settings->hspi, &ALL_HIGH, &(r2_buff[1]), 1, settings->Timeout);
 80055c0:	696b      	ldr	r3, [r5, #20]
 80055c2:	f10d 020d 	add.w	r2, sp, #13
 80055c6:	4908      	ldr	r1, [pc, #32]	; (80055e8 <SPIDS_STM32F4_SPI_GET_R2+0x38>)
 80055c8:	9300      	str	r3, [sp, #0]
 80055ca:	2301      	movs	r3, #1
 80055cc:	6828      	ldr	r0, [r5, #0]
 80055ce:	f7fc ff54 	bl	800247a <HAL_SPI_TransmitReceive>

	*(p_r2_rx) = ((r2_buff[0] << 8) | (r2_buff[1] << 0));
 80055d2:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80055d6:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80055da:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80055de:	8033      	strh	r3, [r6, #0]

	return SPIDS_STM32F4_SPI_CODE_NOM;
}
 80055e0:	4620      	mov	r0, r4
 80055e2:	b004      	add	sp, #16
 80055e4:	bd70      	pop	{r4, r5, r6, pc}
 80055e6:	bf00      	nop
 80055e8:	200000ac 	.word	0x200000ac

080055ec <SPIDS_STM32F4_SPI_disk_status>:
{
 80055ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80055ee:	460c      	mov	r4, r1
	uint16_t r2_resp = 0xFFFF;
 80055f0:	ad02      	add	r5, sp, #8
 80055f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
	HAL_GPIO_WritePin(settings->CS_GPIO_Port, settings->CS_Pin, 0);
 80055f6:	2200      	movs	r2, #0
 80055f8:	8909      	ldrh	r1, [r1, #8]
 80055fa:	6860      	ldr	r0, [r4, #4]
	uint16_t r2_resp = 0xFFFF;
 80055fc:	f825 3d02 	strh.w	r3, [r5, #-2]!
	HAL_GPIO_WritePin(settings->CS_GPIO_Port, settings->CS_Pin, 0);
 8005600:	f7fb fab0 	bl	8000b64 <HAL_GPIO_WritePin>
	SPIDS_STM32F4_SPI_CMD(settings, SDMMC_CMD_SEND_STATUS, 0, 0);
 8005604:	2300      	movs	r3, #0
 8005606:	210d      	movs	r1, #13
 8005608:	4620      	mov	r0, r4
 800560a:	461a      	mov	r2, r3
 800560c:	f7ff ff68 	bl	80054e0 <SPIDS_STM32F4_SPI_CMD>
	SPIDS_STM32F4_SPI_GET_R2(settings, &r2_resp, 10);
 8005610:	4629      	mov	r1, r5
 8005612:	220a      	movs	r2, #10
 8005614:	4620      	mov	r0, r4
 8005616:	f7ff ffcb 	bl	80055b0 <SPIDS_STM32F4_SPI_GET_R2>
	if(r2_resp) // Actually check the response from the SD card
 800561a:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 800561e:	8921      	ldrh	r1, [r4, #8]
		HAL_GPIO_WritePin(settings->CS_GPIO_Port, settings->CS_Pin, 1);
 8005620:	2201      	movs	r2, #1
 8005622:	6860      	ldr	r0, [r4, #4]
	if(r2_resp) // Actually check the response from the SD card
 8005624:	b125      	cbz	r5, 8005630 <SPIDS_STM32F4_SPI_disk_status+0x44>
		HAL_GPIO_WritePin(settings->CS_GPIO_Port, settings->CS_Pin, 1);
 8005626:	f7fb fa9d 	bl	8000b64 <HAL_GPIO_WritePin>
		return STA_NOINIT;
 800562a:	2001      	movs	r0, #1
}
 800562c:	b003      	add	sp, #12
 800562e:	bd30      	pop	{r4, r5, pc}
	HAL_GPIO_WritePin(settings->CS_GPIO_Port, settings->CS_Pin, 1);
 8005630:	f7fb fa98 	bl	8000b64 <HAL_GPIO_WritePin>
	return STA_NOMINAL;
 8005634:	4628      	mov	r0, r5
 8005636:	e7f9      	b.n	800562c <SPIDS_STM32F4_SPI_disk_status+0x40>

08005638 <SPIDS_STM32F4_SPI_GET_R3>:

SPIDS_STM32F4_SPI_CodeTypeDef SPIDS_STM32F4_SPI_GET_R3(SPIDS_STM32F4_SPI_Settings_TypeDef * settings, uint8_t *  p_r1_rx, uint32_t * p_r3_rx, uint32_t timeout)
{
 8005638:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800563a:	4616      	mov	r6, r2
	SPIDS_STM32F4_SPI_CodeTypeDef result = SPIDS_STM32F4_SPI_CODE_NOM;
	uint8_t tx_buff[4] = {0xFF, 0xFF, 0xFF, 0xFF};
 800563c:	4a0b      	ldr	r2, [pc, #44]	; (800566c <SPIDS_STM32F4_SPI_GET_R3+0x34>)
{
 800563e:	4604      	mov	r4, r0
	uint8_t tx_buff[4] = {0xFF, 0xFF, 0xFF, 0xFF};
 8005640:	6810      	ldr	r0, [r2, #0]
	uint8_t r3_buff[4];

	result = SPIDS_STM32F4_SPI_GET_R1(settings, p_r1_rx, timeout);
 8005642:	461a      	mov	r2, r3
	uint8_t tx_buff[4] = {0xFF, 0xFF, 0xFF, 0xFF};
 8005644:	9002      	str	r0, [sp, #8]
	result = SPIDS_STM32F4_SPI_GET_R1(settings, p_r1_rx, timeout);
 8005646:	4620      	mov	r0, r4
 8005648:	f7ff ff68 	bl	800551c <SPIDS_STM32F4_SPI_GET_R1>
	if(result != SPIDS_STM32F4_SPI_CODE_NOM)
 800564c:	4605      	mov	r5, r0
 800564e:	b950      	cbnz	r0, 8005666 <SPIDS_STM32F4_SPI_GET_R3+0x2e>
	{
		return result;
	}
	HAL_SPI_TransmitReceive(settings->hspi, tx_buff, r3_buff, 4, settings->Timeout);
 8005650:	6963      	ldr	r3, [r4, #20]
 8005652:	aa03      	add	r2, sp, #12
 8005654:	a902      	add	r1, sp, #8
 8005656:	6820      	ldr	r0, [r4, #0]
 8005658:	9300      	str	r3, [sp, #0]
 800565a:	2304      	movs	r3, #4
 800565c:	f7fc ff0d 	bl	800247a <HAL_SPI_TransmitReceive>
 8005660:	9b03      	ldr	r3, [sp, #12]
 8005662:	ba1b      	rev	r3, r3

	*(p_r3_rx) = ((r3_buff[0] << 24) | (r3_buff[1] << 16) | (r3_buff[2] << 8) | (r3_buff[3] << 0));
 8005664:	6033      	str	r3, [r6, #0]

	return SPIDS_STM32F4_SPI_CODE_NOM;
}
 8005666:	4628      	mov	r0, r5
 8005668:	b004      	add	sp, #16
 800566a:	bd70      	pop	{r4, r5, r6, pc}
 800566c:	080074f0 	.word	0x080074f0

08005670 <SPIDS_STM32F4_SPI_Read_Data_Packet>:
 * Intercepting data packets
 *
 */

void SPIDS_STM32F4_SPI_Read_Data_Packet(SPIDS_STM32F4_SPI_Settings_TypeDef * settings, BYTE* buff, uint16_t blocklen, uint16_t timeout)
{
 8005670:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005674:	4698      	mov	r8, r3
	uint32_t count = 0;
	uint8_t temp_buff[2];
	uint8_t tx_buff[2] = {0xFF, 0xFF};
 8005676:	4b1b      	ldr	r3, [pc, #108]	; (80056e4 <SPIDS_STM32F4_SPI_Read_Data_Packet+0x74>)
{
 8005678:	b085      	sub	sp, #20

	if(blocklen > SPIDS_STM32F4_SPI_DEF_BLOCKLEN)
 800567a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
	uint8_t tx_buff[2] = {0xFF, 0xFF};
 800567e:	881b      	ldrh	r3, [r3, #0]
{
 8005680:	4604      	mov	r4, r0
 8005682:	460f      	mov	r7, r1
 8005684:	4616      	mov	r6, r2
	uint8_t tx_buff[2] = {0xFF, 0xFF};
 8005686:	f8ad 300c 	strh.w	r3, [sp, #12]
	if(blocklen > SPIDS_STM32F4_SPI_DEF_BLOCKLEN)
 800568a:	d820      	bhi.n	80056ce <SPIDS_STM32F4_SPI_Read_Data_Packet+0x5e>
	{
		return;	// Can't have any buffer overruns... and for now ALL_HIGH_BLOCKLEN is of length SPIDS_STM32F4_SPI_DEF_BLOCKLEN
	}

	HAL_SPI_TransmitReceive(settings->hspi, &ALL_HIGH,  temp_buff, 1, settings->Timeout);
 800568c:	6943      	ldr	r3, [r0, #20]
//	while((*(temp_buff) == SPIDS_STM32F4_SPI_DATA_TOKEN_READ) && (count++ < timeout))
	while((*(temp_buff) != SPIDS_STM32F4_SPI_DATA_TOKEN_READ) && (count++ < timeout))
 800568e:	2500      	movs	r5, #0
	{
		HAL_SPI_TransmitReceive(settings->hspi, &ALL_HIGH,  temp_buff, 1, settings->Timeout);
 8005690:	f8df 9054 	ldr.w	r9, [pc, #84]	; 80056e8 <SPIDS_STM32F4_SPI_Read_Data_Packet+0x78>
	HAL_SPI_TransmitReceive(settings->hspi, &ALL_HIGH,  temp_buff, 1, settings->Timeout);
 8005694:	aa02      	add	r2, sp, #8
 8005696:	9300      	str	r3, [sp, #0]
 8005698:	2301      	movs	r3, #1
 800569a:	4913      	ldr	r1, [pc, #76]	; (80056e8 <SPIDS_STM32F4_SPI_Read_Data_Packet+0x78>)
 800569c:	6800      	ldr	r0, [r0, #0]
 800569e:	f7fc feec 	bl	800247a <HAL_SPI_TransmitReceive>
	while((*(temp_buff) != SPIDS_STM32F4_SPI_DATA_TOKEN_READ) && (count++ < timeout))
 80056a2:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80056a6:	2bfe      	cmp	r3, #254	; 0xfe
 80056a8:	6963      	ldr	r3, [r4, #20]
		HAL_SPI_TransmitReceive(settings->hspi, &ALL_HIGH,  temp_buff, 1, settings->Timeout);
 80056aa:	9300      	str	r3, [sp, #0]
	while((*(temp_buff) != SPIDS_STM32F4_SPI_DATA_TOKEN_READ) && (count++ < timeout))
 80056ac:	d001      	beq.n	80056b2 <SPIDS_STM32F4_SPI_Read_Data_Packet+0x42>
 80056ae:	45a8      	cmp	r8, r5
 80056b0:	d810      	bhi.n	80056d4 <SPIDS_STM32F4_SPI_Read_Data_Packet+0x64>
	// THe next 'blocklen' bytes should be the data...
//	for(uint16_t indi = 0; indi < blocklen; indi++)
//	{
//		HAL_SPI_TransmitReceive(settings->hspi, &ALL_HIGH, &buff[0]+indi, 1, settings->Timeout);
//	}
	HAL_SPI_TransmitReceive(settings->hspi, ALL_HIGH_BLOCKLEN, buff, blocklen, settings->Timeout);	// I wish I could use this method (full blocklen read... but I need a guaranteed buffer of 0xFF values so that I don't accidentally transmit a bad command
 80056b2:	4633      	mov	r3, r6
 80056b4:	463a      	mov	r2, r7
 80056b6:	490d      	ldr	r1, [pc, #52]	; (80056ec <SPIDS_STM32F4_SPI_Read_Data_Packet+0x7c>)
 80056b8:	6820      	ldr	r0, [r4, #0]
 80056ba:	f7fc fede 	bl	800247a <HAL_SPI_TransmitReceive>

	// Then there should be 2 CRC bytes
	HAL_SPI_TransmitReceive(settings->hspi, tx_buff, temp_buff, 2, settings->Timeout);
 80056be:	6963      	ldr	r3, [r4, #20]
 80056c0:	aa02      	add	r2, sp, #8
 80056c2:	a903      	add	r1, sp, #12
 80056c4:	9300      	str	r3, [sp, #0]
 80056c6:	2302      	movs	r3, #2
 80056c8:	6820      	ldr	r0, [r4, #0]
 80056ca:	f7fc fed6 	bl	800247a <HAL_SPI_TransmitReceive>
}
 80056ce:	b005      	add	sp, #20
 80056d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		HAL_SPI_TransmitReceive(settings->hspi, &ALL_HIGH,  temp_buff, 1, settings->Timeout);
 80056d4:	2301      	movs	r3, #1
 80056d6:	aa02      	add	r2, sp, #8
 80056d8:	4649      	mov	r1, r9
 80056da:	6820      	ldr	r0, [r4, #0]
 80056dc:	f7fc fecd 	bl	800247a <HAL_SPI_TransmitReceive>
 80056e0:	3501      	adds	r5, #1
 80056e2:	e7de      	b.n	80056a2 <SPIDS_STM32F4_SPI_Read_Data_Packet+0x32>
 80056e4:	080074f4 	.word	0x080074f4
 80056e8:	200000ac 	.word	0x200000ac
 80056ec:	20003f30 	.word	0x20003f30

080056f0 <SPIDS_STM32F4_SPI_disk_read>:
{
 80056f0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80056f4:	461f      	mov	r7, r3
	uint8_t r1_resp = 0xFF;
 80056f6:	23ff      	movs	r3, #255	; 0xff
{
 80056f8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80056fa:	4688      	mov	r8, r1
	uint8_t r1_resp = 0xFF;
 80056fc:	f88d 300d 	strb.w	r3, [sp, #13]
	uint16_t r2_resp = 0xFFFF;
 8005700:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
 8005704:	4616      	mov	r6, r2
	uint16_t r2_resp = 0xFFFF;
 8005706:	f8ad 300e 	strh.w	r3, [sp, #14]
	if(settings->hw_format == SPIDS_SD_HW_SC)
 800570a:	7e23      	ldrb	r3, [r4, #24]
 800570c:	b903      	cbnz	r3, 8005710 <SPIDS_STM32F4_SPI_disk_read+0x20>
		start_address = blocklen*sector + 0;	// Can it be this simple?
 800570e:	0256      	lsls	r6, r2, #9
	HAL_GPIO_WritePin(settings->CS_GPIO_Port, settings->CS_Pin, 0);						// Set the CS pin low
 8005710:	2200      	movs	r2, #0
 8005712:	8921      	ldrh	r1, [r4, #8]
 8005714:	6860      	ldr	r0, [r4, #4]
 8005716:	f7fb fa25 	bl	8000b64 <HAL_GPIO_WritePin>
	SPIDS_STM32F4_SPI_CMD(settings, SDMMC_CMD_SEND_STATUS, 0, 0);
 800571a:	2300      	movs	r3, #0
 800571c:	210d      	movs	r1, #13
 800571e:	4620      	mov	r0, r4
 8005720:	461a      	mov	r2, r3
 8005722:	f7ff fedd 	bl	80054e0 <SPIDS_STM32F4_SPI_CMD>
	SPIDS_STM32F4_SPI_GET_R2(settings, &r2_resp, 10);
 8005726:	220a      	movs	r2, #10
 8005728:	f10d 010e 	add.w	r1, sp, #14
 800572c:	4620      	mov	r0, r4
 800572e:	f7ff ff3f 	bl	80055b0 <SPIDS_STM32F4_SPI_GET_R2>
	if(r2_resp) // Actually check the response from the SD card
 8005732:	f8bd 500e 	ldrh.w	r5, [sp, #14]
 8005736:	b145      	cbz	r5, 800574a <SPIDS_STM32F4_SPI_disk_read+0x5a>
		HAL_GPIO_WritePin(settings->CS_GPIO_Port, settings->CS_Pin, 1);
 8005738:	6860      	ldr	r0, [r4, #4]
 800573a:	2201      	movs	r2, #1
 800573c:	8921      	ldrh	r1, [r4, #8]
 800573e:	f7fb fa11 	bl	8000b64 <HAL_GPIO_WritePin>
		return RES_NOTRDY;
 8005742:	2003      	movs	r0, #3
}
 8005744:	b004      	add	sp, #16
 8005746:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	SPIDS_STM32F4_SPI_CMD(settings, SDMMC_CMD_READ_MULT_BLOCK, start_address, 0);
 800574a:	4632      	mov	r2, r6
 800574c:	2112      	movs	r1, #18
 800574e:	4620      	mov	r0, r4
 8005750:	462b      	mov	r3, r5
 8005752:	f7ff fec5 	bl	80054e0 <SPIDS_STM32F4_SPI_CMD>
	result = SPIDS_STM32F4_SPI_GET_R1(settings, &r1_resp, 10);
 8005756:	220a      	movs	r2, #10
 8005758:	f10d 010d 	add.w	r1, sp, #13
 800575c:	4620      	mov	r0, r4
 800575e:	f7ff fedd 	bl	800551c <SPIDS_STM32F4_SPI_GET_R1>
	for(UINT indi = 0; indi < count; indi++)
 8005762:	42bd      	cmp	r5, r7
 8005764:	d12a      	bne.n	80057bc <SPIDS_STM32F4_SPI_disk_read+0xcc>
	SPIDS_STM32F4_SPI_CMD(settings, SDMMC_CMD_STOP_TRANSMISSION, 0, 0);
 8005766:	2300      	movs	r3, #0
 8005768:	210c      	movs	r1, #12
 800576a:	4620      	mov	r0, r4
	while((r1_resp != 0xFF) && (timeout_count++ < 10000))
 800576c:	f242 7511 	movw	r5, #10001	; 0x2711
	SPIDS_STM32F4_SPI_CMD(settings, SDMMC_CMD_STOP_TRANSMISSION, 0, 0);
 8005770:	461a      	mov	r2, r3
		HAL_SPI_TransmitReceive(settings->hspi, &ALL_HIGH, &r1_resp, 1, settings->Timeout);
 8005772:	4e20      	ldr	r6, [pc, #128]	; (80057f4 <SPIDS_STM32F4_SPI_disk_read+0x104>)
	SPIDS_STM32F4_SPI_CMD(settings, SDMMC_CMD_STOP_TRANSMISSION, 0, 0);
 8005774:	f7ff feb4 	bl	80054e0 <SPIDS_STM32F4_SPI_CMD>
	HAL_SPI_TransmitReceive(settings->hspi, &ALL_HIGH, &r1_resp, 1, settings->Timeout);
 8005778:	6963      	ldr	r3, [r4, #20]
 800577a:	f10d 020d 	add.w	r2, sp, #13
 800577e:	491d      	ldr	r1, [pc, #116]	; (80057f4 <SPIDS_STM32F4_SPI_disk_read+0x104>)
 8005780:	9300      	str	r3, [sp, #0]
 8005782:	2301      	movs	r3, #1
 8005784:	6820      	ldr	r0, [r4, #0]
 8005786:	f7fc fe78 	bl	800247a <HAL_SPI_TransmitReceive>
	r1_resp = 0xFF;
 800578a:	23ff      	movs	r3, #255	; 0xff
	result = SPIDS_STM32F4_SPI_GET_R1(settings, &r1_resp, 10);
 800578c:	220a      	movs	r2, #10
 800578e:	f10d 010d 	add.w	r1, sp, #13
 8005792:	4620      	mov	r0, r4
	r1_resp = 0xFF;
 8005794:	f88d 300d 	strb.w	r3, [sp, #13]
	result = SPIDS_STM32F4_SPI_GET_R1(settings, &r1_resp, 10);
 8005798:	f7ff fec0 	bl	800551c <SPIDS_STM32F4_SPI_GET_R1>
	r1_resp = 0x00;
 800579c:	2300      	movs	r3, #0
 800579e:	f88d 300d 	strb.w	r3, [sp, #13]
	while((r1_resp != 0xFF) && (timeout_count++ < 10000))
 80057a2:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80057a6:	2bff      	cmp	r3, #255	; 0xff
 80057a8:	d01d      	beq.n	80057e6 <SPIDS_STM32F4_SPI_disk_read+0xf6>
 80057aa:	3d01      	subs	r5, #1
 80057ac:	d111      	bne.n	80057d2 <SPIDS_STM32F4_SPI_disk_read+0xe2>
		HAL_GPIO_WritePin(settings->CS_GPIO_Port, settings->CS_Pin, 1);						// Set the CS pin high
 80057ae:	6860      	ldr	r0, [r4, #4]
 80057b0:	2201      	movs	r2, #1
 80057b2:	8921      	ldrh	r1, [r4, #8]
 80057b4:	f7fb f9d6 	bl	8000b64 <HAL_GPIO_WritePin>
		return RES_ERROR;
 80057b8:	2001      	movs	r0, #1
 80057ba:	e7c3      	b.n	8005744 <SPIDS_STM32F4_SPI_disk_read+0x54>
		SPIDS_STM32F4_SPI_Read_Data_Packet(settings, buff+blocklen*indi, blocklen, 1000);
 80057bc:	eb08 2145 	add.w	r1, r8, r5, lsl #9
 80057c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80057c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057c8:	4620      	mov	r0, r4
 80057ca:	f7ff ff51 	bl	8005670 <SPIDS_STM32F4_SPI_Read_Data_Packet>
	for(UINT indi = 0; indi < count; indi++)
 80057ce:	3501      	adds	r5, #1
 80057d0:	e7c7      	b.n	8005762 <SPIDS_STM32F4_SPI_disk_read+0x72>
		HAL_SPI_TransmitReceive(settings->hspi, &ALL_HIGH, &r1_resp, 1, settings->Timeout);
 80057d2:	6963      	ldr	r3, [r4, #20]
 80057d4:	f10d 020d 	add.w	r2, sp, #13
 80057d8:	4631      	mov	r1, r6
 80057da:	9300      	str	r3, [sp, #0]
 80057dc:	2301      	movs	r3, #1
 80057de:	6820      	ldr	r0, [r4, #0]
 80057e0:	f7fc fe4b 	bl	800247a <HAL_SPI_TransmitReceive>
 80057e4:	e7dd      	b.n	80057a2 <SPIDS_STM32F4_SPI_disk_read+0xb2>
	HAL_GPIO_WritePin(settings->CS_GPIO_Port, settings->CS_Pin, 1);						// Set the CS pin high
 80057e6:	6860      	ldr	r0, [r4, #4]
 80057e8:	2201      	movs	r2, #1
 80057ea:	8921      	ldrh	r1, [r4, #8]
 80057ec:	f7fb f9ba 	bl	8000b64 <HAL_GPIO_WritePin>
	return RES_OK;
 80057f0:	2000      	movs	r0, #0
 80057f2:	e7a7      	b.n	8005744 <SPIDS_STM32F4_SPI_disk_read+0x54>
 80057f4:	200000ac 	.word	0x200000ac

080057f8 <SPIDS_STM32F4_SPI_Write_Data_Packet>:

void SPIDS_STM32F4_SPI_Write_Data_Packet(SPIDS_STM32F4_SPI_Settings_TypeDef * settings, BYTE* buff, uint16_t blocklen, uint16_t timeout)
{
	uint8_t token = 0;
	uint8_t tx_buff[2] = {0xCA, 0xA3};
 80057f8:	4b10      	ldr	r3, [pc, #64]	; (800583c <SPIDS_STM32F4_SPI_Write_Data_Packet+0x44>)

	if(blocklen > SPIDS_STM32F4_SPI_DEF_BLOCKLEN)
 80057fa:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
	uint8_t tx_buff[2] = {0xCA, 0xA3};
 80057fe:	881b      	ldrh	r3, [r3, #0]
{
 8005800:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005802:	4604      	mov	r4, r0
 8005804:	460e      	mov	r6, r1
 8005806:	4615      	mov	r5, r2
	uint8_t tx_buff[2] = {0xCA, 0xA3};
 8005808:	f8ad 3004 	strh.w	r3, [sp, #4]
	if(blocklen > SPIDS_STM32F4_SPI_DEF_BLOCKLEN)
 800580c:	d814      	bhi.n	8005838 <SPIDS_STM32F4_SPI_Write_Data_Packet+0x40>
	{
		return;	// Can't have any buffer overruns... and for now ALL_HIGH_BLOCKLEN is of length SPIDS_STM32F4_SPI_DEF_BLOCKLEN
	}

	// Transmit the data token
	token = SPIDS_STM32F4_SPI_DATA_TOKEN_25;
 800580e:	a902      	add	r1, sp, #8
 8005810:	23fc      	movs	r3, #252	; 0xfc
	HAL_SPI_Transmit(settings->hspi, &token, 1, settings->Timeout);
 8005812:	2201      	movs	r2, #1
	token = SPIDS_STM32F4_SPI_DATA_TOKEN_25;
 8005814:	f801 3d05 	strb.w	r3, [r1, #-5]!
	HAL_SPI_Transmit(settings->hspi, &token, 1, settings->Timeout);
 8005818:	6943      	ldr	r3, [r0, #20]
 800581a:	6800      	ldr	r0, [r0, #0]
 800581c:	f7fc fd89 	bl	8002332 <HAL_SPI_Transmit>
	// THe next 'blocklen' bytes should be the data...
//	for(uint16_t indi = 0; indi < blocklen; indi++)
//	{
//		HAL_SPI_TransmitReceive(settings->hspi, &ALL_HIGH, &buff[0]+indi, 1, settings->Timeout);
//	}
	HAL_SPI_Transmit(settings->hspi, buff, blocklen, settings->Timeout);	// I wish I could use this method (full blocklen read... but I need a guaranteed buffer of 0xFF values so that I don't accidentally transmit a bad command
 8005820:	6963      	ldr	r3, [r4, #20]
 8005822:	462a      	mov	r2, r5
 8005824:	4631      	mov	r1, r6
 8005826:	6820      	ldr	r0, [r4, #0]
 8005828:	f7fc fd83 	bl	8002332 <HAL_SPI_Transmit>

	// Then there should be 2 CRC bytes
	HAL_SPI_Transmit(settings->hspi, tx_buff, 2, settings->Timeout);
 800582c:	6963      	ldr	r3, [r4, #20]
 800582e:	2202      	movs	r2, #2
 8005830:	a901      	add	r1, sp, #4
 8005832:	6820      	ldr	r0, [r4, #0]
 8005834:	f7fc fd7d 	bl	8002332 <HAL_SPI_Transmit>
}
 8005838:	b002      	add	sp, #8
 800583a:	bd70      	pop	{r4, r5, r6, pc}
 800583c:	080074f6 	.word	0x080074f6

08005840 <SPIDS_STM32F4_SPI_disk_write>:
{
 8005840:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005844:	461f      	mov	r7, r3
 8005846:	b085      	sub	sp, #20
	uint8_t r1_resp = 0xFF;
 8005848:	23ff      	movs	r3, #255	; 0xff
{
 800584a:	460e      	mov	r6, r1
 800584c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800584e:	4615      	mov	r5, r2
	uint8_t r1_resp = 0xFF;
 8005850:	f88d 300c 	strb.w	r3, [sp, #12]
	uint16_t r2_resp = 0xFFFF;
 8005854:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005858:	f8ad 300e 	strh.w	r3, [sp, #14]
	if(settings->hw_format == SPIDS_SD_HW_SC)
 800585c:	7e23      	ldrb	r3, [r4, #24]
 800585e:	b903      	cbnz	r3, 8005862 <SPIDS_STM32F4_SPI_disk_write+0x22>
		start_address = blocklen*sector + 0;	// Can it be this simple?
 8005860:	0255      	lsls	r5, r2, #9
	HAL_GPIO_WritePin(settings->CS_GPIO_Port, settings->CS_Pin, 0);						// Set the CS pin low
 8005862:	2200      	movs	r2, #0
 8005864:	8921      	ldrh	r1, [r4, #8]
 8005866:	6860      	ldr	r0, [r4, #4]
 8005868:	f7fb f97c 	bl	8000b64 <HAL_GPIO_WritePin>
	SPIDS_STM32F4_SPI_CMD(settings, SDMMC_CMD_SEND_STATUS, 0, 0);
 800586c:	2300      	movs	r3, #0
 800586e:	210d      	movs	r1, #13
 8005870:	4620      	mov	r0, r4
 8005872:	461a      	mov	r2, r3
 8005874:	f7ff fe34 	bl	80054e0 <SPIDS_STM32F4_SPI_CMD>
	SPIDS_STM32F4_SPI_GET_R2(settings, &r2_resp, 10);
 8005878:	220a      	movs	r2, #10
 800587a:	f10d 010e 	add.w	r1, sp, #14
 800587e:	4620      	mov	r0, r4
 8005880:	f7ff fe96 	bl	80055b0 <SPIDS_STM32F4_SPI_GET_R2>
	if(r2_resp) // Actually check the response from the SD card
 8005884:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8005888:	b143      	cbz	r3, 800589c <SPIDS_STM32F4_SPI_disk_write+0x5c>
		HAL_GPIO_WritePin(settings->CS_GPIO_Port, settings->CS_Pin, 1);
 800588a:	6860      	ldr	r0, [r4, #4]
 800588c:	2201      	movs	r2, #1
 800588e:	8921      	ldrh	r1, [r4, #8]
 8005890:	f7fb f968 	bl	8000b64 <HAL_GPIO_WritePin>
		return RES_NOTRDY;
 8005894:	2003      	movs	r0, #3
}
 8005896:	b005      	add	sp, #20
 8005898:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	SPIDS_STM32F4_SPI_CMD(settings, SDMMC_CMD_WRITE_MULT_BLOCK, start_address, 0);
 800589c:	462a      	mov	r2, r5
 800589e:	2119      	movs	r1, #25
 80058a0:	4620      	mov	r0, r4
	result = SPIDS_STM32F4_SPI_GET_R1(settings, &r1_resp, 10);
 80058a2:	2505      	movs	r5, #5
		HAL_SPI_Transmit(settings->hspi, &ALL_HIGH, 1, settings->Timeout);
 80058a4:	f8df 810c 	ldr.w	r8, [pc, #268]	; 80059b4 <SPIDS_STM32F4_SPI_disk_write+0x174>
	SPIDS_STM32F4_SPI_CMD(settings, SDMMC_CMD_WRITE_MULT_BLOCK, start_address, 0);
 80058a8:	f7ff fe1a 	bl	80054e0 <SPIDS_STM32F4_SPI_CMD>
	result = SPIDS_STM32F4_SPI_GET_R1(settings, &r1_resp, 10);
 80058ac:	220a      	movs	r2, #10
 80058ae:	a903      	add	r1, sp, #12
 80058b0:	4620      	mov	r0, r4
 80058b2:	f7ff fe33 	bl	800551c <SPIDS_STM32F4_SPI_GET_R1>
 80058b6:	3d01      	subs	r5, #1
		HAL_SPI_Transmit(settings->hspi, &ALL_HIGH, 1, settings->Timeout);
 80058b8:	6963      	ldr	r3, [r4, #20]
 80058ba:	2201      	movs	r2, #1
 80058bc:	4641      	mov	r1, r8
 80058be:	6820      	ldr	r0, [r4, #0]
 80058c0:	f7fc fd37 	bl	8002332 <HAL_SPI_Transmit>
	for(uint8_t indi = 0; indi < 5; indi++)
 80058c4:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 80058c8:	d1f5      	bne.n	80058b6 <SPIDS_STM32F4_SPI_disk_write+0x76>
		HAL_SPI_TransmitReceive(settings->hspi, &ALL_HIGH, &r1_resp, 1, settings->Timeout);
 80058ca:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 80059b4 <SPIDS_STM32F4_SPI_disk_write+0x174>
	for(UINT indi = 0; indi < count; indi++)
 80058ce:	42bd      	cmp	r5, r7
 80058d0:	d12d      	bne.n	800592e <SPIDS_STM32F4_SPI_disk_write+0xee>
	uint8_t token = SPIDS_STM32F4_SPI_DATA_TOKEN_STOP;
 80058d2:	a904      	add	r1, sp, #16
 80058d4:	23fd      	movs	r3, #253	; 0xfd
	HAL_SPI_Transmit(settings->hspi, &token, 1, settings->Timeout);
 80058d6:	2201      	movs	r2, #1
 80058d8:	6820      	ldr	r0, [r4, #0]
	uint8_t token = SPIDS_STM32F4_SPI_DATA_TOKEN_STOP;
 80058da:	f801 3d03 	strb.w	r3, [r1, #-3]!
	while((r1_resp != 0xFF) && (timeout_count++ < 10000))
 80058de:	f242 7511 	movw	r5, #10001	; 0x2711
	HAL_SPI_Transmit(settings->hspi, &token, 1, settings->Timeout);
 80058e2:	6963      	ldr	r3, [r4, #20]
 80058e4:	f7fc fd25 	bl	8002332 <HAL_SPI_Transmit>
	HAL_SPI_TransmitReceive(settings->hspi, &ALL_HIGH, &r1_resp, 1, settings->Timeout);
 80058e8:	6963      	ldr	r3, [r4, #20]
 80058ea:	aa03      	add	r2, sp, #12
 80058ec:	4931      	ldr	r1, [pc, #196]	; (80059b4 <SPIDS_STM32F4_SPI_disk_write+0x174>)
 80058ee:	9300      	str	r3, [sp, #0]
 80058f0:	2301      	movs	r3, #1
 80058f2:	6820      	ldr	r0, [r4, #0]
 80058f4:	f7fc fdc1 	bl	800247a <HAL_SPI_TransmitReceive>
	r1_resp = 0x00;
 80058f8:	2300      	movs	r3, #0
		HAL_SPI_TransmitReceive(settings->hspi, &ALL_HIGH, &r1_resp, 1, settings->Timeout);
 80058fa:	4e2e      	ldr	r6, [pc, #184]	; (80059b4 <SPIDS_STM32F4_SPI_disk_write+0x174>)
	HAL_SPI_TransmitReceive(settings->hspi, &ALL_HIGH, &r1_resp, 1, settings->Timeout);
 80058fc:	aa03      	add	r2, sp, #12
	r1_resp = 0x00;
 80058fe:	f88d 300c 	strb.w	r3, [sp, #12]
	HAL_SPI_TransmitReceive(settings->hspi, &ALL_HIGH, &r1_resp, 1, settings->Timeout);
 8005902:	6963      	ldr	r3, [r4, #20]
 8005904:	492b      	ldr	r1, [pc, #172]	; (80059b4 <SPIDS_STM32F4_SPI_disk_write+0x174>)
 8005906:	9300      	str	r3, [sp, #0]
 8005908:	2301      	movs	r3, #1
 800590a:	6820      	ldr	r0, [r4, #0]
 800590c:	f7fc fdb5 	bl	800247a <HAL_SPI_TransmitReceive>
	while((r1_resp != 0xFF) && (timeout_count++ < 10000))
 8005910:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8005914:	2bff      	cmp	r3, #255	; 0xff
 8005916:	d046      	beq.n	80059a6 <SPIDS_STM32F4_SPI_disk_write+0x166>
 8005918:	3d01      	subs	r5, #1
 800591a:	d01c      	beq.n	8005956 <SPIDS_STM32F4_SPI_disk_write+0x116>
		HAL_SPI_TransmitReceive(settings->hspi, &ALL_HIGH, &r1_resp, 1, settings->Timeout);
 800591c:	6963      	ldr	r3, [r4, #20]
 800591e:	aa03      	add	r2, sp, #12
 8005920:	4631      	mov	r1, r6
 8005922:	9300      	str	r3, [sp, #0]
 8005924:	2301      	movs	r3, #1
 8005926:	6820      	ldr	r0, [r4, #0]
 8005928:	f7fc fda7 	bl	800247a <HAL_SPI_TransmitReceive>
 800592c:	e7f0      	b.n	8005910 <SPIDS_STM32F4_SPI_disk_write+0xd0>
		SPIDS_STM32F4_SPI_Write_Data_Packet(settings, buff+blocklen*indi, blocklen, 1000);
 800592e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005932:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005936:	eb06 2145 	add.w	r1, r6, r5, lsl #9
 800593a:	4620      	mov	r0, r4
 800593c:	f7ff ff5c 	bl	80057f8 <SPIDS_STM32F4_SPI_Write_Data_Packet>
		SPIDS_STM32F4_SPI_GET_R1(settings, &r1_resp, 10);
 8005940:	220a      	movs	r2, #10
 8005942:	a903      	add	r1, sp, #12
 8005944:	4620      	mov	r0, r4
 8005946:	f7ff fde9 	bl	800551c <SPIDS_STM32F4_SPI_GET_R1>
 800594a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800594e:	f003 030f 	and.w	r3, r3, #15
		if((r1_resp & 0x0F) == 11)
 8005952:	2b0b      	cmp	r3, #11
 8005954:	d106      	bne.n	8005964 <SPIDS_STM32F4_SPI_disk_write+0x124>
		HAL_GPIO_WritePin(settings->CS_GPIO_Port, settings->CS_Pin, 1);						// Set the CS pin high
 8005956:	6860      	ldr	r0, [r4, #4]
 8005958:	2201      	movs	r2, #1
 800595a:	8921      	ldrh	r1, [r4, #8]
 800595c:	f7fb f902 	bl	8000b64 <HAL_GPIO_WritePin>
		return RES_ERROR;
 8005960:	2001      	movs	r0, #1
 8005962:	e798      	b.n	8005896 <SPIDS_STM32F4_SPI_disk_write+0x56>
		else if((r1_resp & 0x0F) == 13)
 8005964:	2b0d      	cmp	r3, #13
 8005966:	d0f6      	beq.n	8005956 <SPIDS_STM32F4_SPI_disk_write+0x116>
		r1_resp = 0x00;
 8005968:	2300      	movs	r3, #0
		while((r1_resp != 0xFF) && (timeout_count++ < 10000))
 800596a:	f242 7811 	movw	r8, #10001	; 0x2711
		HAL_SPI_TransmitReceive(settings->hspi, &ALL_HIGH, &r1_resp, 1, settings->Timeout);
 800596e:	aa03      	add	r2, sp, #12
 8005970:	4649      	mov	r1, r9
		r1_resp = 0x00;
 8005972:	f88d 300c 	strb.w	r3, [sp, #12]
		HAL_SPI_TransmitReceive(settings->hspi, &ALL_HIGH, &r1_resp, 1, settings->Timeout);
 8005976:	6963      	ldr	r3, [r4, #20]
 8005978:	9300      	str	r3, [sp, #0]
 800597a:	2301      	movs	r3, #1
 800597c:	6820      	ldr	r0, [r4, #0]
 800597e:	f7fc fd7c 	bl	800247a <HAL_SPI_TransmitReceive>
		while((r1_resp != 0xFF) && (timeout_count++ < 10000))
 8005982:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8005986:	2bff      	cmp	r3, #255	; 0xff
 8005988:	d00b      	beq.n	80059a2 <SPIDS_STM32F4_SPI_disk_write+0x162>
 800598a:	f1b8 0801 	subs.w	r8, r8, #1
 800598e:	d0e2      	beq.n	8005956 <SPIDS_STM32F4_SPI_disk_write+0x116>
			HAL_SPI_TransmitReceive(settings->hspi, &ALL_HIGH, &r1_resp, 1, settings->Timeout);
 8005990:	6963      	ldr	r3, [r4, #20]
 8005992:	aa03      	add	r2, sp, #12
 8005994:	4649      	mov	r1, r9
 8005996:	9300      	str	r3, [sp, #0]
 8005998:	2301      	movs	r3, #1
 800599a:	6820      	ldr	r0, [r4, #0]
 800599c:	f7fc fd6d 	bl	800247a <HAL_SPI_TransmitReceive>
 80059a0:	e7ef      	b.n	8005982 <SPIDS_STM32F4_SPI_disk_write+0x142>
	for(UINT indi = 0; indi < count; indi++)
 80059a2:	3501      	adds	r5, #1
 80059a4:	e793      	b.n	80058ce <SPIDS_STM32F4_SPI_disk_write+0x8e>
	HAL_GPIO_WritePin(settings->CS_GPIO_Port, settings->CS_Pin, 1);						// Set the CS pin high
 80059a6:	6860      	ldr	r0, [r4, #4]
 80059a8:	2201      	movs	r2, #1
 80059aa:	8921      	ldrh	r1, [r4, #8]
 80059ac:	f7fb f8da 	bl	8000b64 <HAL_GPIO_WritePin>
	return RES_OK;
 80059b0:	2000      	movs	r0, #0
 80059b2:	e770      	b.n	8005896 <SPIDS_STM32F4_SPI_disk_write+0x56>
 80059b4:	200000ac 	.word	0x200000ac

080059b8 <SPIDS_STM32F4_SPI_Get_Num_Sectors>:

uint32_t SPIDS_STM32F4_SPI_Get_Num_Sectors(SPIDS_STM32F4_SPI_Settings_TypeDef * settings)
{
 80059b8:	b530      	push	{r4, r5, lr}
 80059ba:	b089      	sub	sp, #36	; 0x24
	uint8_t r1_resp = 0xFF;
 80059bc:	23ff      	movs	r3, #255	; 0xff
{
 80059be:	4604      	mov	r4, r0
	uint8_t CSD[16];
	uint8_t trash[4];

	HAL_GPIO_WritePin(settings->CS_GPIO_Port, settings->CS_Pin, 0);						// Set the CS pin low
 80059c0:	8901      	ldrh	r1, [r0, #8]
	uint8_t r1_resp = 0xFF;
 80059c2:	ad08      	add	r5, sp, #32
	HAL_GPIO_WritePin(settings->CS_GPIO_Port, settings->CS_Pin, 0);						// Set the CS pin low
 80059c4:	2200      	movs	r2, #0
 80059c6:	6840      	ldr	r0, [r0, #4]
	uint8_t r1_resp = 0xFF;
 80059c8:	f805 3d15 	strb.w	r3, [r5, #-21]!
	HAL_GPIO_WritePin(settings->CS_GPIO_Port, settings->CS_Pin, 0);						// Set the CS pin low
 80059cc:	f7fb f8ca 	bl	8000b64 <HAL_GPIO_WritePin>

	// Send the command to get the CSD register
	SPIDS_STM32F4_SPI_CMD(settings, SDMMC_CMD_SEND_CSD, 0, 0);
 80059d0:	2300      	movs	r3, #0
 80059d2:	2109      	movs	r1, #9
 80059d4:	4620      	mov	r0, r4
 80059d6:	461a      	mov	r2, r3
 80059d8:	f7ff fd82 	bl	80054e0 <SPIDS_STM32F4_SPI_CMD>
	SPIDS_STM32F4_SPI_GET_R1(settings, &r1_resp, 10);
 80059dc:	220a      	movs	r2, #10
 80059de:	4629      	mov	r1, r5
 80059e0:	4620      	mov	r0, r4
 80059e2:	f7ff fd9b 	bl	800551c <SPIDS_STM32F4_SPI_GET_R1>

	// Now we are expecting the data token 'SPIDS_STM32F4_SPI_DATA_TOKEN_25'
	HAL_SPI_TransmitReceive(settings->hspi, &ALL_HIGH, &r1_resp, 1, settings->Timeout);
 80059e6:	6963      	ldr	r3, [r4, #20]
 80059e8:	462a      	mov	r2, r5
 80059ea:	4923      	ldr	r1, [pc, #140]	; (8005a78 <SPIDS_STM32F4_SPI_Get_Num_Sectors+0xc0>)
 80059ec:	9300      	str	r3, [sp, #0]
 80059ee:	2301      	movs	r3, #1
 80059f0:	6820      	ldr	r0, [r4, #0]
 80059f2:	f7fc fd42 	bl	800247a <HAL_SPI_TransmitReceive>
	{
		// This would be a 'not good' situation. Not sure what the proper thing to do would be though (error? try again? ehh)
	}

	// Now read 16 bytes of CSD
	HAL_SPI_TransmitReceive(settings->hspi, ALL_HIGH_BLOCKLEN, CSD, 16, settings->Timeout);
 80059f6:	6963      	ldr	r3, [r4, #20]
 80059f8:	4920      	ldr	r1, [pc, #128]	; (8005a7c <SPIDS_STM32F4_SPI_Get_Num_Sectors+0xc4>)
 80059fa:	9300      	str	r3, [sp, #0]
 80059fc:	2310      	movs	r3, #16
 80059fe:	6820      	ldr	r0, [r4, #0]
 8005a00:	eb0d 0203 	add.w	r2, sp, r3
 8005a04:	f7fc fd39 	bl	800247a <HAL_SPI_TransmitReceive>

	// Now read the CRC values
	HAL_SPI_TransmitReceive(settings->hspi, ALL_HIGH_BLOCKLEN, trash, 2, settings->Timeout);
 8005a08:	6963      	ldr	r3, [r4, #20]
 8005a0a:	aa03      	add	r2, sp, #12
 8005a0c:	491b      	ldr	r1, [pc, #108]	; (8005a7c <SPIDS_STM32F4_SPI_Get_Num_Sectors+0xc4>)
 8005a0e:	9300      	str	r3, [sp, #0]
 8005a10:	2302      	movs	r3, #2
 8005a12:	6820      	ldr	r0, [r4, #0]
 8005a14:	f7fc fd31 	bl	800247a <HAL_SPI_TransmitReceive>


	HAL_GPIO_WritePin(settings->CS_GPIO_Port, settings->CS_Pin, 1);						// Set the CS pin high
 8005a18:	2201      	movs	r2, #1
 8005a1a:	8921      	ldrh	r1, [r4, #8]
 8005a1c:	6860      	ldr	r0, [r4, #4]
 8005a1e:	f7fb f8a1 	bl	8000b64 <HAL_GPIO_WritePin>

	// Now use the values to compute the number of sectors!!
	// Keep in mind that HC cards have different CSD fields:

	uint32_t num_sectors = 0;
	if(settings->hw_format == SPIDS_SD_HW_SC)
 8005a22:	7e22      	ldrb	r2, [r4, #24]
 8005a24:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8005a28:	b9c2      	cbnz	r2, 8005a5c <SPIDS_STM32F4_SPI_Get_Num_Sectors+0xa4>
	{
		uint8_t read_bl_len = (CSD[5] & 0x0F);	// read_bl_len is bits 80-83, or the lower nibble of CSD[5]
		uint16_t c_size = (  ((uint16_t)(CSD[6] & 0x03) << 10) | ((uint16_t)(CSD[7] & 0xFF) << 2 )  |  ((uint16_t)(CSD[8] & 0xC0) >> 6)  );// c_size is bits 62-73, or
 8005a2a:	f89d 0018 	ldrb.w	r0, [sp, #24]
		uint8_t c_size_mult =  (((CSD[9] & 0x03) << 1) | ((CSD[10] & 0x80) >> 7));   	// c_size_mult is bits 47-49, or
 8005a2e:	f89d 201a 	ldrb.w	r2, [sp, #26]
		uint16_t c_size = (  ((uint16_t)(CSD[6] & 0x03) << 10) | ((uint16_t)(CSD[7] & 0xFF) << 2 )  |  ((uint16_t)(CSD[8] & 0xC0) >> 6)  );// c_size is bits 62-73, or
 8005a32:	0980      	lsrs	r0, r0, #6
 8005a34:	ea40 0083 	orr.w	r0, r0, r3, lsl #2
 8005a38:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8005a3c:	029b      	lsls	r3, r3, #10
 8005a3e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
			c_size_mult = 7;		// See pg 81 of sd spec.
		}

//		uint16_t BLOCK_LEN = ((uint16_t)0x01 << read_bl_len);
		uint16_t MULT = ((uint16_t)0x01 << (c_size_mult+2));
		uint32_t BLOCKNR = (c_size + 1) * MULT;
 8005a42:	4318      	orrs	r0, r3
		uint8_t c_size_mult =  (((CSD[9] & 0x03) << 1) | ((CSD[10] & 0x80) >> 7));   	// c_size_mult is bits 47-49, or
 8005a44:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8005a48:	005b      	lsls	r3, r3, #1
		uint32_t BLOCKNR = (c_size + 1) * MULT;
 8005a4a:	3001      	adds	r0, #1
		uint8_t c_size_mult =  (((CSD[9] & 0x03) << 1) | ((CSD[10] & 0x80) >> 7));   	// c_size_mult is bits 47-49, or
 8005a4c:	f003 0306 	and.w	r3, r3, #6
		uint16_t MULT = ((uint16_t)0x01 << (c_size_mult+2));
 8005a50:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
 8005a54:	3302      	adds	r3, #2
		uint32_t BLOCKNR = (c_size + 1) * MULT;
 8005a56:	4098      	lsls	r0, r3
		num_sectors = (c_size + 1)*1000;


		return num_sectors;
	}
}
 8005a58:	b009      	add	sp, #36	; 0x24
 8005a5a:	bd30      	pop	{r4, r5, pc}
		uint32_t c_size = ( ((((uint32_t)CSD[7]) & 0x3F) << 16 ) | (((uint32_t)CSD[8]) << 8 ) | (((uint32_t)CSD[9]) << 0 ) );
 8005a5c:	0418      	lsls	r0, r3, #16
 8005a5e:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8005a62:	ba5b      	rev16	r3, r3
 8005a64:	f400 107c 	and.w	r0, r0, #4128768	; 0x3f0000
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	4303      	orrs	r3, r0
		num_sectors = (c_size + 1)*1000;
 8005a6c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005a70:	fb03 0000 	mla	r0, r3, r0, r0
		return num_sectors;
 8005a74:	e7f0      	b.n	8005a58 <SPIDS_STM32F4_SPI_Get_Num_Sectors+0xa0>
 8005a76:	bf00      	nop
 8005a78:	200000ac 	.word	0x200000ac
 8005a7c:	20003f30 	.word	0x20003f30

08005a80 <SPIDS_STM32F4_SPI_Get_Sector_Size>:


uint16_t SPIDS_STM32F4_SPI_Get_Sector_Size(SPIDS_STM32F4_SPI_Settings_TypeDef * settings)
{
 8005a80:	b530      	push	{r4, r5, lr}
 8005a82:	b089      	sub	sp, #36	; 0x24
	uint8_t r1_resp = 0xFF;
 8005a84:	23ff      	movs	r3, #255	; 0xff
{
 8005a86:	4604      	mov	r4, r0
	uint8_t CSD[16];
	uint8_t trash[4];

	HAL_GPIO_WritePin(settings->CS_GPIO_Port, settings->CS_Pin, 0);						// Set the CS pin low
 8005a88:	8901      	ldrh	r1, [r0, #8]
	uint8_t r1_resp = 0xFF;
 8005a8a:	ad08      	add	r5, sp, #32
	HAL_GPIO_WritePin(settings->CS_GPIO_Port, settings->CS_Pin, 0);						// Set the CS pin low
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	6840      	ldr	r0, [r0, #4]
	uint8_t r1_resp = 0xFF;
 8005a90:	f805 3d15 	strb.w	r3, [r5, #-21]!
	HAL_GPIO_WritePin(settings->CS_GPIO_Port, settings->CS_Pin, 0);						// Set the CS pin low
 8005a94:	f7fb f866 	bl	8000b64 <HAL_GPIO_WritePin>

	// Send the command to get the CSD register
	SPIDS_STM32F4_SPI_CMD(settings, SDMMC_CMD_SEND_CSD, 0, 0);
 8005a98:	2300      	movs	r3, #0
 8005a9a:	2109      	movs	r1, #9
 8005a9c:	4620      	mov	r0, r4
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	f7ff fd1e 	bl	80054e0 <SPIDS_STM32F4_SPI_CMD>
	SPIDS_STM32F4_SPI_GET_R1(settings, &r1_resp, 10);
 8005aa4:	220a      	movs	r2, #10
 8005aa6:	4629      	mov	r1, r5
 8005aa8:	4620      	mov	r0, r4
 8005aaa:	f7ff fd37 	bl	800551c <SPIDS_STM32F4_SPI_GET_R1>

	// Now we are expecting the data token 'SPIDS_STM32F4_SPI_DATA_TOKEN_25'
	HAL_SPI_TransmitReceive(settings->hspi, &ALL_HIGH, &r1_resp, 1, settings->Timeout);
 8005aae:	6963      	ldr	r3, [r4, #20]
 8005ab0:	462a      	mov	r2, r5
 8005ab2:	4917      	ldr	r1, [pc, #92]	; (8005b10 <SPIDS_STM32F4_SPI_Get_Sector_Size+0x90>)
 8005ab4:	9300      	str	r3, [sp, #0]
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	6820      	ldr	r0, [r4, #0]
 8005aba:	f7fc fcde 	bl	800247a <HAL_SPI_TransmitReceive>
	{
		// This would be a 'not good' situation. Not sure what the proper thing to do would be though (error? try again? ehh)
	}

	// Now read 16 bytes of CSD
	HAL_SPI_TransmitReceive(settings->hspi, ALL_HIGH_BLOCKLEN, CSD, 16, settings->Timeout);
 8005abe:	6963      	ldr	r3, [r4, #20]
 8005ac0:	4914      	ldr	r1, [pc, #80]	; (8005b14 <SPIDS_STM32F4_SPI_Get_Sector_Size+0x94>)
 8005ac2:	9300      	str	r3, [sp, #0]
 8005ac4:	2310      	movs	r3, #16
 8005ac6:	6820      	ldr	r0, [r4, #0]
 8005ac8:	eb0d 0203 	add.w	r2, sp, r3
 8005acc:	f7fc fcd5 	bl	800247a <HAL_SPI_TransmitReceive>

	// Now read the CRC values
	HAL_SPI_TransmitReceive(settings->hspi, ALL_HIGH_BLOCKLEN, trash, 2, settings->Timeout);
 8005ad0:	6963      	ldr	r3, [r4, #20]
 8005ad2:	aa03      	add	r2, sp, #12
 8005ad4:	490f      	ldr	r1, [pc, #60]	; (8005b14 <SPIDS_STM32F4_SPI_Get_Sector_Size+0x94>)
 8005ad6:	9300      	str	r3, [sp, #0]
 8005ad8:	2302      	movs	r3, #2
 8005ada:	6820      	ldr	r0, [r4, #0]
 8005adc:	f7fc fccd 	bl	800247a <HAL_SPI_TransmitReceive>


	HAL_GPIO_WritePin(settings->CS_GPIO_Port, settings->CS_Pin, 1);						// Set the CS pin high
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	8921      	ldrh	r1, [r4, #8]
 8005ae4:	6860      	ldr	r0, [r4, #4]
 8005ae6:	f7fb f83d 	bl	8000b64 <HAL_GPIO_WritePin>


	if(settings->hw_format == SPIDS_SD_HW_SC)
 8005aea:	7e23      	ldrb	r3, [r4, #24]
 8005aec:	b963      	cbnz	r3, 8005b08 <SPIDS_STM32F4_SPI_Get_Sector_Size+0x88>
	{
		uint8_t read_bl_len = (CSD[5] & 0x0F);	// read_bl_len is bits 80-83, or the lower nibble of CSD[5]
 8005aee:	f89d 0015 	ldrb.w	r0, [sp, #21]
		if(read_bl_len > 11)
		{
			read_bl_len = 11;		// See pg 81 of sd spec.
		}

		uint16_t BLOCK_LEN = ((uint16_t)0x01 << read_bl_len);
 8005af2:	2301      	movs	r3, #1
		uint8_t read_bl_len = (CSD[5] & 0x0F);	// read_bl_len is bits 80-83, or the lower nibble of CSD[5]
 8005af4:	f000 000f 	and.w	r0, r0, #15
		uint16_t BLOCK_LEN = ((uint16_t)0x01 << read_bl_len);
 8005af8:	280b      	cmp	r0, #11
 8005afa:	bf28      	it	cs
 8005afc:	200b      	movcs	r0, #11
 8005afe:	fa03 f000 	lsl.w	r0, r3, r0
	else
	{
		// In the case of a high capacity card the block length is fixed to 512
		return 512;
	}
}
 8005b02:	b280      	uxth	r0, r0
 8005b04:	b009      	add	sp, #36	; 0x24
 8005b06:	bd30      	pop	{r4, r5, pc}
 8005b08:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005b0c:	e7f9      	b.n	8005b02 <SPIDS_STM32F4_SPI_Get_Sector_Size+0x82>
 8005b0e:	bf00      	nop
 8005b10:	200000ac 	.word	0x200000ac
 8005b14:	20003f30 	.word	0x20003f30

08005b18 <SPIDS_STM32F4_SPI_disk_ioctl>:
{
 8005b18:	b510      	push	{r4, lr}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	4614      	mov	r4, r2
	switch(cmd)
 8005b1e:	2904      	cmp	r1, #4
 8005b20:	d804      	bhi.n	8005b2c <SPIDS_STM32F4_SPI_disk_ioctl+0x14>
 8005b22:	e8df f001 	tbb	[pc, r1]
 8005b26:	0508      	.short	0x0508
 8005b28:	0e0a      	.short	0x0e0a
 8005b2a:	08          	.byte	0x08
 8005b2b:	00          	.byte	0x00
		return RES_PARERR;
 8005b2c:	2004      	movs	r0, #4
 8005b2e:	bd10      	pop	{r4, pc}
			num_sectors = (DWORD)SPIDS_STM32F4_SPI_Get_Num_Sectors(settings);
 8005b30:	f7ff ff42 	bl	80059b8 <SPIDS_STM32F4_SPI_Get_Num_Sectors>
			*((DWORD *) buff) = num_sectors;
 8005b34:	6020      	str	r0, [r4, #0]
		return RES_OK;
 8005b36:	2000      	movs	r0, #0
}
 8005b38:	bd10      	pop	{r4, pc}
			sector_size = (WORD)SPIDS_STM32F4_SPI_Get_Sector_Size(settings);
 8005b3a:	f7ff ffa1 	bl	8005a80 <SPIDS_STM32F4_SPI_Get_Sector_Size>
			*((WORD *) buff) = sector_size;
 8005b3e:	8020      	strh	r0, [r4, #0]
 8005b40:	e7f9      	b.n	8005b36 <SPIDS_STM32F4_SPI_disk_ioctl+0x1e>
			*((DWORD *) buff) = (DWORD)1;
 8005b42:	2301      	movs	r3, #1
 8005b44:	6013      	str	r3, [r2, #0]
 8005b46:	e7f6      	b.n	8005b36 <SPIDS_STM32F4_SPI_disk_ioctl+0x1e>

08005b48 <SPIDS_STM32F4_SPI_assert_spi_bus>:
 *
 */


void 	SPIDS_STM32F4_SPI_assert_spi_bus(SPIDS_STM32F4_SPI_Settings_TypeDef * settings, uint8_t initialization)
{
 8005b48:	b570      	push	{r4, r5, r6, lr}

	uint8_t re_init = 0;

	RCC_OscInitTypeDef OscSettings;				// Declare a type to hold the oscillator settings
	RCC_ClkInitTypeDef ClkSettings;				// Declare a type to hold clock settings
	uint32_t FL = __HAL_FLASH_GET_LATENCY();	// Determine the flash latency in order to use the "GetClockConfig" function
 8005b4a:	4b98      	ldr	r3, [pc, #608]	; (8005dac <SPIDS_STM32F4_SPI_assert_spi_bus+0x264>)
{
 8005b4c:	b094      	sub	sp, #80	; 0x50
	uint8_t re_init = 0;
 8005b4e:	2400      	movs	r4, #0
{
 8005b50:	4605      	mov	r5, r0

	HAL_RCC_GetOscConfig(&OscSettings);			// Read the oscillator settings
 8005b52:	a807      	add	r0, sp, #28
{
 8005b54:	460e      	mov	r6, r1
	uint8_t re_init = 0;
 8005b56:	f88d 4003 	strb.w	r4, [sp, #3]
	uint32_t FL = __HAL_FLASH_GET_LATENCY();	// Determine the flash latency in order to use the "GetClockConfig" function
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f003 030f 	and.w	r3, r3, #15
 8005b60:	9301      	str	r3, [sp, #4]
	HAL_RCC_GetOscConfig(&OscSettings);			// Read the oscillator settings
 8005b62:	f7fc f809 	bl	8001b78 <HAL_RCC_GetOscConfig>
	HAL_RCC_GetClockConfig(&ClkSettings, &FL);	// Read the clock settings
 8005b66:	a901      	add	r1, sp, #4
 8005b68:	a802      	add	r0, sp, #8
 8005b6a:	f7fc f85d 	bl	8001c28 <HAL_RCC_GetClockConfig>

	uint32_t SourceFreq = 0;					// Determine the source frequency (skip LSE and LSI because they do not drive the SYSCLK)
	if(OscSettings.HSEState == RCC_HSE_ON){ SourceFreq = HSE_VALUE; }
 8005b6e:	9b08      	ldr	r3, [sp, #32]
 8005b70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b74:	d01f      	beq.n	8005bb6 <SPIDS_STM32F4_SPI_assert_spi_bus+0x6e>
	else if(OscSettings.HSIState == RCC_HSI_ON){ SourceFreq = HSI_VALUE; }
 8005b76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d01e      	beq.n	8005bba <SPIDS_STM32F4_SPI_assert_spi_bus+0x72>
	else{ _Error_Handler(__FILE__, __LINE__); }
 8005b7c:	f240 3171 	movw	r1, #881	; 0x371
 8005b80:	488b      	ldr	r0, [pc, #556]	; (8005db0 <SPIDS_STM32F4_SPI_assert_spi_bus+0x268>)
 8005b82:	f000 fdc3 	bl	800670c <_Error_Handler>

	// Now use the source frequency and the oscillator/clock/spi settings to determine the SCLK frequency
	if(OscSettings.PLL.PLLState == RCC_PLL_ON){
 8005b86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b88:	2b02      	cmp	r3, #2
 8005b8a:	d106      	bne.n	8005b9a <SPIDS_STM32F4_SPI_assert_spi_bus+0x52>
		SourceFreq *= (OscSettings.PLL.PLLN / (OscSettings.PLL.PLLM * OscSettings.PLL.PLLP));
 8005b8c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005b8e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005b90:	435a      	muls	r2, r3
 8005b92:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005b94:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b98:	435c      	muls	r4, r3
	}

	switch(ClkSettings.AHBCLKDivider){
 8005b9a:	9b04      	ldr	r3, [sp, #16]
 8005b9c:	2bb0      	cmp	r3, #176	; 0xb0
 8005b9e:	d040      	beq.n	8005c22 <SPIDS_STM32F4_SPI_assert_spi_bus+0xda>
 8005ba0:	d813      	bhi.n	8005bca <SPIDS_STM32F4_SPI_assert_spi_bus+0x82>
 8005ba2:	2b80      	cmp	r3, #128	; 0x80
 8005ba4:	d01e      	beq.n	8005be4 <SPIDS_STM32F4_SPI_assert_spi_bus+0x9c>
 8005ba6:	d80a      	bhi.n	8005bbe <SPIDS_STM32F4_SPI_assert_spi_bus+0x76>
 8005ba8:	b1eb      	cbz	r3, 8005be6 <SPIDS_STM32F4_SPI_assert_spi_bus+0x9e>
		case RCC_SYSCLK_DIV16 : SourceFreq /= 16; break;
		case RCC_SYSCLK_DIV64 : SourceFreq /= 64; break;
		case RCC_SYSCLK_DIV128 : SourceFreq /= 128; break;
		case RCC_SYSCLK_DIV256 : SourceFreq /= 256; break;
		case RCC_SYSCLK_DIV512 : SourceFreq /= 512; break;
		default : _Error_Handler(__FILE__, __LINE__);
 8005baa:	f240 3182 	movw	r1, #898	; 0x382
 8005bae:	4880      	ldr	r0, [pc, #512]	; (8005db0 <SPIDS_STM32F4_SPI_assert_spi_bus+0x268>)
 8005bb0:	f000 fdac 	bl	800670c <_Error_Handler>
 8005bb4:	e017      	b.n	8005be6 <SPIDS_STM32F4_SPI_assert_spi_bus+0x9e>
	if(OscSettings.HSEState == RCC_HSE_ON){ SourceFreq = HSE_VALUE; }
 8005bb6:	4c7f      	ldr	r4, [pc, #508]	; (8005db4 <SPIDS_STM32F4_SPI_assert_spi_bus+0x26c>)
 8005bb8:	e7e5      	b.n	8005b86 <SPIDS_STM32F4_SPI_assert_spi_bus+0x3e>
	else if(OscSettings.HSIState == RCC_HSI_ON){ SourceFreq = HSI_VALUE; }
 8005bba:	4c7f      	ldr	r4, [pc, #508]	; (8005db8 <SPIDS_STM32F4_SPI_assert_spi_bus+0x270>)
 8005bbc:	e7e3      	b.n	8005b86 <SPIDS_STM32F4_SPI_assert_spi_bus+0x3e>
	switch(ClkSettings.AHBCLKDivider){
 8005bbe:	2b90      	cmp	r3, #144	; 0x90
 8005bc0:	d02d      	beq.n	8005c1e <SPIDS_STM32F4_SPI_assert_spi_bus+0xd6>
 8005bc2:	2ba0      	cmp	r3, #160	; 0xa0
 8005bc4:	d1f1      	bne.n	8005baa <SPIDS_STM32F4_SPI_assert_spi_bus+0x62>
		case RCC_SYSCLK_DIV8 : SourceFreq /= 8; break;
 8005bc6:	08e4      	lsrs	r4, r4, #3
 8005bc8:	e00d      	b.n	8005be6 <SPIDS_STM32F4_SPI_assert_spi_bus+0x9e>
	switch(ClkSettings.AHBCLKDivider){
 8005bca:	2bd0      	cmp	r3, #208	; 0xd0
 8005bcc:	d02b      	beq.n	8005c26 <SPIDS_STM32F4_SPI_assert_spi_bus+0xde>
 8005bce:	d803      	bhi.n	8005bd8 <SPIDS_STM32F4_SPI_assert_spi_bus+0x90>
 8005bd0:	2bc0      	cmp	r3, #192	; 0xc0
 8005bd2:	d1ea      	bne.n	8005baa <SPIDS_STM32F4_SPI_assert_spi_bus+0x62>
		case RCC_SYSCLK_DIV64 : SourceFreq /= 64; break;
 8005bd4:	09a4      	lsrs	r4, r4, #6
 8005bd6:	e006      	b.n	8005be6 <SPIDS_STM32F4_SPI_assert_spi_bus+0x9e>
	switch(ClkSettings.AHBCLKDivider){
 8005bd8:	2be0      	cmp	r3, #224	; 0xe0
 8005bda:	d026      	beq.n	8005c2a <SPIDS_STM32F4_SPI_assert_spi_bus+0xe2>
 8005bdc:	2bf0      	cmp	r3, #240	; 0xf0
 8005bde:	d1e4      	bne.n	8005baa <SPIDS_STM32F4_SPI_assert_spi_bus+0x62>
		case RCC_SYSCLK_DIV512 : SourceFreq /= 512; break;
 8005be0:	0a64      	lsrs	r4, r4, #9
 8005be2:	e000      	b.n	8005be6 <SPIDS_STM32F4_SPI_assert_spi_bus+0x9e>
		case RCC_SYSCLK_DIV2 : SourceFreq /= 2; break;
 8005be4:	0864      	lsrs	r4, r4, #1
	}

	if((settings->hspi->Instance == SPI1) || (settings->hspi->Instance == SPI4) || (settings->hspi->Instance == SPI5))
 8005be6:	682b      	ldr	r3, [r5, #0]
 8005be8:	4a74      	ldr	r2, [pc, #464]	; (8005dbc <SPIDS_STM32F4_SPI_assert_spi_bus+0x274>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d007      	beq.n	8005c00 <SPIDS_STM32F4_SPI_assert_spi_bus+0xb8>
 8005bf0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d003      	beq.n	8005c00 <SPIDS_STM32F4_SPI_assert_spi_bus+0xb8>
 8005bf8:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d11e      	bne.n	8005c3e <SPIDS_STM32F4_SPI_assert_spi_bus+0xf6>
	{
		// These ports use the APB2 clock
		switch(ClkSettings.APB2CLKDivider){
 8005c00:	9b06      	ldr	r3, [sp, #24]
 8005c02:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005c06:	d055      	beq.n	8005cb4 <SPIDS_STM32F4_SPI_assert_spi_bus+0x16c>
 8005c08:	d811      	bhi.n	8005c2e <SPIDS_STM32F4_SPI_assert_spi_bus+0xe6>
 8005c0a:	b39b      	cbz	r3, 8005c74 <SPIDS_STM32F4_SPI_assert_spi_bus+0x12c>
 8005c0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c10:	d02f      	beq.n	8005c72 <SPIDS_STM32F4_SPI_assert_spi_bus+0x12a>
			case RCC_HCLK_DIV1 : SourceFreq /= 1; break;
			case RCC_HCLK_DIV2 : SourceFreq /= 2; break;
			case RCC_HCLK_DIV4 : SourceFreq /= 4; break;
			case RCC_HCLK_DIV8 : SourceFreq /= 8; break;
			case RCC_HCLK_DIV16 : SourceFreq /= 16; break;
			default : _Error_Handler(__FILE__, __LINE__);
 8005c12:	f240 318e 	movw	r1, #910	; 0x38e
			case RCC_HCLK_DIV8 : SourceFreq /= 8; break;
			case RCC_HCLK_DIV16 : SourceFreq /= 16; break;
			default : _Error_Handler(__FILE__, __LINE__);
		}
	}
	else{ _Error_Handler(__FILE__, __LINE__); } // Oops, looks like you don't have a SPI port?
 8005c16:	4866      	ldr	r0, [pc, #408]	; (8005db0 <SPIDS_STM32F4_SPI_assert_spi_bus+0x268>)
 8005c18:	f000 fd78 	bl	800670c <_Error_Handler>
 8005c1c:	e02a      	b.n	8005c74 <SPIDS_STM32F4_SPI_assert_spi_bus+0x12c>
		case RCC_SYSCLK_DIV4 : SourceFreq /= 4; break;
 8005c1e:	08a4      	lsrs	r4, r4, #2
 8005c20:	e7e1      	b.n	8005be6 <SPIDS_STM32F4_SPI_assert_spi_bus+0x9e>
		case RCC_SYSCLK_DIV16 : SourceFreq /= 16; break;
 8005c22:	0924      	lsrs	r4, r4, #4
 8005c24:	e7df      	b.n	8005be6 <SPIDS_STM32F4_SPI_assert_spi_bus+0x9e>
		case RCC_SYSCLK_DIV128 : SourceFreq /= 128; break;
 8005c26:	09e4      	lsrs	r4, r4, #7
 8005c28:	e7dd      	b.n	8005be6 <SPIDS_STM32F4_SPI_assert_spi_bus+0x9e>
		case RCC_SYSCLK_DIV256 : SourceFreq /= 256; break;
 8005c2a:	0a24      	lsrs	r4, r4, #8
 8005c2c:	e7db      	b.n	8005be6 <SPIDS_STM32F4_SPI_assert_spi_bus+0x9e>
		switch(ClkSettings.APB2CLKDivider){
 8005c2e:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8005c32:	d041      	beq.n	8005cb8 <SPIDS_STM32F4_SPI_assert_spi_bus+0x170>
 8005c34:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8005c38:	d1eb      	bne.n	8005c12 <SPIDS_STM32F4_SPI_assert_spi_bus+0xca>
			case RCC_HCLK_DIV16 : SourceFreq /= 16; break;
 8005c3a:	0924      	lsrs	r4, r4, #4
 8005c3c:	e01a      	b.n	8005c74 <SPIDS_STM32F4_SPI_assert_spi_bus+0x12c>
	else if((settings->hspi->Instance == SPI2) || (settings->hspi->Instance == SPI3))
 8005c3e:	4a60      	ldr	r2, [pc, #384]	; (8005dc0 <SPIDS_STM32F4_SPI_assert_spi_bus+0x278>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d003      	beq.n	8005c4c <SPIDS_STM32F4_SPI_assert_spi_bus+0x104>
 8005c44:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d137      	bne.n	8005cbc <SPIDS_STM32F4_SPI_assert_spi_bus+0x174>
		switch(ClkSettings.APB1CLKDivider){
 8005c4c:	9b05      	ldr	r3, [sp, #20]
 8005c4e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005c52:	d02f      	beq.n	8005cb4 <SPIDS_STM32F4_SPI_assert_spi_bus+0x16c>
 8005c54:	d806      	bhi.n	8005c64 <SPIDS_STM32F4_SPI_assert_spi_bus+0x11c>
 8005c56:	b16b      	cbz	r3, 8005c74 <SPIDS_STM32F4_SPI_assert_spi_bus+0x12c>
 8005c58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c5c:	d009      	beq.n	8005c72 <SPIDS_STM32F4_SPI_assert_spi_bus+0x12a>
			default : _Error_Handler(__FILE__, __LINE__);
 8005c5e:	f240 319a 	movw	r1, #922	; 0x39a
 8005c62:	e7d8      	b.n	8005c16 <SPIDS_STM32F4_SPI_assert_spi_bus+0xce>
		switch(ClkSettings.APB1CLKDivider){
 8005c64:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8005c68:	d026      	beq.n	8005cb8 <SPIDS_STM32F4_SPI_assert_spi_bus+0x170>
 8005c6a:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8005c6e:	d0e4      	beq.n	8005c3a <SPIDS_STM32F4_SPI_assert_spi_bus+0xf2>
 8005c70:	e7f5      	b.n	8005c5e <SPIDS_STM32F4_SPI_assert_spi_bus+0x116>
			case RCC_HCLK_DIV2 : SourceFreq /= 2; break;
 8005c72:	0864      	lsrs	r4, r4, #1

	switch(settings->hspi->Init.BaudRatePrescaler){
 8005c74:	682b      	ldr	r3, [r5, #0]
 8005c76:	69db      	ldr	r3, [r3, #28]
 8005c78:	2b18      	cmp	r3, #24
 8005c7a:	d037      	beq.n	8005cec <SPIDS_STM32F4_SPI_assert_spi_bus+0x1a4>
 8005c7c:	d821      	bhi.n	8005cc2 <SPIDS_STM32F4_SPI_assert_spi_bus+0x17a>
 8005c7e:	2b08      	cmp	r3, #8
 8005c80:	d030      	beq.n	8005ce4 <SPIDS_STM32F4_SPI_assert_spi_bus+0x19c>
 8005c82:	2b10      	cmp	r3, #16
 8005c84:	d030      	beq.n	8005ce8 <SPIDS_STM32F4_SPI_assert_spi_bus+0x1a0>
 8005c86:	bb0b      	cbnz	r3, 8005ccc <SPIDS_STM32F4_SPI_assert_spi_bus+0x184>
		case SPI_BAUDRATEPRESCALER_2 : SourceFreq /= 2; break;
 8005c88:	0864      	lsrs	r4, r4, #1
		case SPI_BAUDRATEPRESCALER_128 : SourceFreq /= 128; break;
		case SPI_BAUDRATEPRESCALER_256 : SourceFreq /= 256; break;
		default : _Error_Handler(__FILE__, __LINE__);
	} // SourceFreq finally contains the SPI clock frequency

	if(initialization == 1)
 8005c8a:	2e01      	cmp	r6, #1
 8005c8c:	6828      	ldr	r0, [r5, #0]
 8005c8e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8005c92:	d033      	beq.n	8005cfc <SPIDS_STM32F4_SPI_assert_spi_bus+0x1b4>
		// This loop will end when the frequency was brought within the acceptable range
	}
	else
	{
		// This loop will try to increase the source frequency as long as it is below the desired (maximum) frequency and it CAN be increased
		while((SourceFreq < settings->max_freq) && (settings->hspi->Init.BaudRatePrescaler > 0x07))	// 0x07 here could very well be 0x00 too... I just feel more comfortable this way
 8005c94:	68ee      	ldr	r6, [r5, #12]
 8005c96:	2100      	movs	r1, #0
 8005c98:	42b4      	cmp	r4, r6
 8005c9a:	d36e      	bcc.n	8005d7a <SPIDS_STM32F4_SPI_assert_spi_bus+0x232>
 8005c9c:	b109      	cbz	r1, 8005ca2 <SPIDS_STM32F4_SPI_assert_spi_bus+0x15a>
 8005c9e:	f88d 3003 	strb.w	r3, [sp, #3]
 8005ca2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8005ca6:	2100      	movs	r1, #0
			SourceFreq *= 2;
			re_init = 1;
		}
		// The above loop will stop when the freq exceeds the limit OR it cannot be increased any more
		// So we use the anti-loop to go to at least one setting below the acceptable frequency
		while((SourceFreq > settings->max_freq) && (settings->hspi->Init.BaudRatePrescaler < 0x38)) 	// 0x38 is the code for the maximum prescaler of /512
 8005ca8:	42b4      	cmp	r4, r6
 8005caa:	d86f      	bhi.n	8005d8c <SPIDS_STM32F4_SPI_assert_spi_bus+0x244>
 8005cac:	b3a9      	cbz	r1, 8005d1a <SPIDS_STM32F4_SPI_assert_spi_bus+0x1d2>
 8005cae:	f88d 3003 	strb.w	r3, [sp, #3]
 8005cb2:	e032      	b.n	8005d1a <SPIDS_STM32F4_SPI_assert_spi_bus+0x1d2>
			case RCC_HCLK_DIV4 : SourceFreq /= 4; break;
 8005cb4:	08a4      	lsrs	r4, r4, #2
 8005cb6:	e7dd      	b.n	8005c74 <SPIDS_STM32F4_SPI_assert_spi_bus+0x12c>
			case RCC_HCLK_DIV8 : SourceFreq /= 8; break;
 8005cb8:	08e4      	lsrs	r4, r4, #3
 8005cba:	e7db      	b.n	8005c74 <SPIDS_STM32F4_SPI_assert_spi_bus+0x12c>
	else{ _Error_Handler(__FILE__, __LINE__); } // Oops, looks like you don't have a SPI port?
 8005cbc:	f240 319d 	movw	r1, #925	; 0x39d
 8005cc0:	e7a9      	b.n	8005c16 <SPIDS_STM32F4_SPI_assert_spi_bus+0xce>
	switch(settings->hspi->Init.BaudRatePrescaler){
 8005cc2:	2b28      	cmp	r3, #40	; 0x28
 8005cc4:	d016      	beq.n	8005cf4 <SPIDS_STM32F4_SPI_assert_spi_bus+0x1ac>
 8005cc6:	d807      	bhi.n	8005cd8 <SPIDS_STM32F4_SPI_assert_spi_bus+0x190>
 8005cc8:	2b20      	cmp	r3, #32
 8005cca:	d011      	beq.n	8005cf0 <SPIDS_STM32F4_SPI_assert_spi_bus+0x1a8>
		default : _Error_Handler(__FILE__, __LINE__);
 8005ccc:	f44f 716a 	mov.w	r1, #936	; 0x3a8
 8005cd0:	4837      	ldr	r0, [pc, #220]	; (8005db0 <SPIDS_STM32F4_SPI_assert_spi_bus+0x268>)
 8005cd2:	f000 fd1b 	bl	800670c <_Error_Handler>
 8005cd6:	e7d8      	b.n	8005c8a <SPIDS_STM32F4_SPI_assert_spi_bus+0x142>
	switch(settings->hspi->Init.BaudRatePrescaler){
 8005cd8:	2b30      	cmp	r3, #48	; 0x30
 8005cda:	d00d      	beq.n	8005cf8 <SPIDS_STM32F4_SPI_assert_spi_bus+0x1b0>
 8005cdc:	2b38      	cmp	r3, #56	; 0x38
 8005cde:	d1f5      	bne.n	8005ccc <SPIDS_STM32F4_SPI_assert_spi_bus+0x184>
		case SPI_BAUDRATEPRESCALER_256 : SourceFreq /= 256; break;
 8005ce0:	0a24      	lsrs	r4, r4, #8
 8005ce2:	e7d2      	b.n	8005c8a <SPIDS_STM32F4_SPI_assert_spi_bus+0x142>
		case SPI_BAUDRATEPRESCALER_4 : SourceFreq /= 4; break;
 8005ce4:	08a4      	lsrs	r4, r4, #2
 8005ce6:	e7d0      	b.n	8005c8a <SPIDS_STM32F4_SPI_assert_spi_bus+0x142>
		case SPI_BAUDRATEPRESCALER_8 : SourceFreq /= 8; break;
 8005ce8:	08e4      	lsrs	r4, r4, #3
 8005cea:	e7ce      	b.n	8005c8a <SPIDS_STM32F4_SPI_assert_spi_bus+0x142>
		case SPI_BAUDRATEPRESCALER_16 : SourceFreq /= 16; break;
 8005cec:	0924      	lsrs	r4, r4, #4
 8005cee:	e7cc      	b.n	8005c8a <SPIDS_STM32F4_SPI_assert_spi_bus+0x142>
		case SPI_BAUDRATEPRESCALER_32: SourceFreq /= 32; break;
 8005cf0:	0964      	lsrs	r4, r4, #5
 8005cf2:	e7ca      	b.n	8005c8a <SPIDS_STM32F4_SPI_assert_spi_bus+0x142>
		case SPI_BAUDRATEPRESCALER_64 : SourceFreq /= 64; break;
 8005cf4:	09a4      	lsrs	r4, r4, #6
 8005cf6:	e7c8      	b.n	8005c8a <SPIDS_STM32F4_SPI_assert_spi_bus+0x142>
		case SPI_BAUDRATEPRESCALER_128 : SourceFreq /= 128; break;
 8005cf8:	09e4      	lsrs	r4, r4, #7
 8005cfa:	e7c6      	b.n	8005c8a <SPIDS_STM32F4_SPI_assert_spi_bus+0x142>
		while((SourceFreq < settings->init_freq) && (settings->hspi->Init.BaudRatePrescaler > 0x07))	// 0x07 here could very well be 0x00 too... I just feel more comfortable this way
 8005cfc:	692e      	ldr	r6, [r5, #16]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	42b4      	cmp	r4, r6
 8005d02:	d328      	bcc.n	8005d56 <SPIDS_STM32F4_SPI_assert_spi_bus+0x20e>
 8005d04:	b10a      	cbz	r2, 8005d0a <SPIDS_STM32F4_SPI_assert_spi_bus+0x1c2>
 8005d06:	f88d 3003 	strb.w	r3, [sp, #3]
 8005d0a:	f89d 1003 	ldrb.w	r1, [sp, #3]
			re_init = 1;
 8005d0e:	2300      	movs	r3, #0
		while((SourceFreq > settings->init_freq) && (settings->hspi->Init.BaudRatePrescaler < 0x38)) 	// 0x38 is the code for the maximum prescaler of /512
 8005d10:	42b4      	cmp	r4, r6
 8005d12:	d829      	bhi.n	8005d68 <SPIDS_STM32F4_SPI_assert_spi_bus+0x220>
 8005d14:	b10b      	cbz	r3, 8005d1a <SPIDS_STM32F4_SPI_assert_spi_bus+0x1d2>
 8005d16:	f88d 1003 	strb.w	r1, [sp, #3]
		// This loop will end when the frequency was brought within the acceptable range
	}


	// Check if the CPOL and CPHA are correct
	if(settings->hspi->Init.CLKPolarity != SPIDS_STM32F4_SPI_CPOL)
 8005d1a:	6903      	ldr	r3, [r0, #16]
 8005d1c:	2b02      	cmp	r3, #2
 8005d1e:	d13e      	bne.n	8005d9e <SPIDS_STM32F4_SPI_assert_spi_bus+0x256>
	{
		settings->hspi->Init.CLKPolarity = SPIDS_STM32F4_SPI_CPOL;
		re_init = 1;
	}
	if(settings->hspi->Init.CLKPhase != SPIDS_STM32F4_SPI_CPHA)
 8005d20:	6943      	ldr	r3, [r0, #20]
 8005d22:	2b01      	cmp	r3, #1
	{
		settings->hspi->Init.CLKPhase = SPIDS_STM32F4_SPI_CPHA;
 8005d24:	bf1e      	ittt	ne
 8005d26:	2301      	movne	r3, #1
 8005d28:	6143      	strne	r3, [r0, #20]
		re_init = 1;
 8005d2a:	f88d 3003 	strbne.w	r3, [sp, #3]
	}

	if(re_init)
 8005d2e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8005d32:	b173      	cbz	r3, 8005d52 <SPIDS_STM32F4_SPI_assert_spi_bus+0x20a>
	{
		if (HAL_SPI_Init(settings->hspi) != HAL_OK)		// Attempt to re-initialize the new SPI settings
 8005d34:	f7fc faa8 	bl	8002288 <HAL_SPI_Init>
 8005d38:	b120      	cbz	r0, 8005d44 <SPIDS_STM32F4_SPI_assert_spi_bus+0x1fc>
		{
			_Error_Handler(__FILE__, __LINE__);
 8005d3a:	f240 31e3 	movw	r1, #995	; 0x3e3
 8005d3e:	481c      	ldr	r0, [pc, #112]	; (8005db0 <SPIDS_STM32F4_SPI_assert_spi_bus+0x268>)
 8005d40:	f000 fce4 	bl	800670c <_Error_Handler>
		}
		HAL_SPI_Transmit(settings->hspi, &re_init, 1, settings->Timeout);	// Send a transmission to "fix" the SPI lines
 8005d44:	696b      	ldr	r3, [r5, #20]
 8005d46:	2201      	movs	r2, #1
 8005d48:	f10d 0103 	add.w	r1, sp, #3
 8005d4c:	6828      	ldr	r0, [r5, #0]
 8005d4e:	f7fc faf0 	bl	8002332 <HAL_SPI_Transmit>
	}
}
 8005d52:	b014      	add	sp, #80	; 0x50
 8005d54:	bd70      	pop	{r4, r5, r6, pc}
		while((SourceFreq < settings->init_freq) && (settings->hspi->Init.BaudRatePrescaler > 0x07))	// 0x07 here could very well be 0x00 too... I just feel more comfortable this way
 8005d56:	69c1      	ldr	r1, [r0, #28]
 8005d58:	2907      	cmp	r1, #7
 8005d5a:	d9d3      	bls.n	8005d04 <SPIDS_STM32F4_SPI_assert_spi_bus+0x1bc>
			settings->hspi->Init.BaudRatePrescaler -= 0x08;
 8005d5c:	3908      	subs	r1, #8
 8005d5e:	2201      	movs	r2, #1
			SourceFreq *= 2;
 8005d60:	0064      	lsls	r4, r4, #1
			settings->hspi->Init.BaudRatePrescaler -= 0x08;
 8005d62:	61c1      	str	r1, [r0, #28]
			re_init = 1;
 8005d64:	4613      	mov	r3, r2
 8005d66:	e7cb      	b.n	8005d00 <SPIDS_STM32F4_SPI_assert_spi_bus+0x1b8>
		while((SourceFreq > settings->init_freq) && (settings->hspi->Init.BaudRatePrescaler < 0x38)) 	// 0x38 is the code for the maximum prescaler of /512
 8005d68:	69c2      	ldr	r2, [r0, #28]
 8005d6a:	2a37      	cmp	r2, #55	; 0x37
 8005d6c:	d8d2      	bhi.n	8005d14 <SPIDS_STM32F4_SPI_assert_spi_bus+0x1cc>
			settings->hspi->Init.BaudRatePrescaler += 0x08;
 8005d6e:	3208      	adds	r2, #8
 8005d70:	2301      	movs	r3, #1
			SourceFreq /= 2;
 8005d72:	0864      	lsrs	r4, r4, #1
			settings->hspi->Init.BaudRatePrescaler += 0x08;
 8005d74:	61c2      	str	r2, [r0, #28]
			re_init = 1;
 8005d76:	4619      	mov	r1, r3
 8005d78:	e7ca      	b.n	8005d10 <SPIDS_STM32F4_SPI_assert_spi_bus+0x1c8>
		while((SourceFreq < settings->max_freq) && (settings->hspi->Init.BaudRatePrescaler > 0x07))	// 0x07 here could very well be 0x00 too... I just feel more comfortable this way
 8005d7a:	69c2      	ldr	r2, [r0, #28]
 8005d7c:	2a07      	cmp	r2, #7
 8005d7e:	d98d      	bls.n	8005c9c <SPIDS_STM32F4_SPI_assert_spi_bus+0x154>
			settings->hspi->Init.BaudRatePrescaler -= 0x08;
 8005d80:	3a08      	subs	r2, #8
			re_init = 1;
 8005d82:	2301      	movs	r3, #1
			SourceFreq *= 2;
 8005d84:	0064      	lsls	r4, r4, #1
			settings->hspi->Init.BaudRatePrescaler -= 0x08;
 8005d86:	61c2      	str	r2, [r0, #28]
 8005d88:	4619      	mov	r1, r3
 8005d8a:	e785      	b.n	8005c98 <SPIDS_STM32F4_SPI_assert_spi_bus+0x150>
		while((SourceFreq > settings->max_freq) && (settings->hspi->Init.BaudRatePrescaler < 0x38)) 	// 0x38 is the code for the maximum prescaler of /512
 8005d8c:	69c2      	ldr	r2, [r0, #28]
 8005d8e:	2a37      	cmp	r2, #55	; 0x37
 8005d90:	d88c      	bhi.n	8005cac <SPIDS_STM32F4_SPI_assert_spi_bus+0x164>
			settings->hspi->Init.BaudRatePrescaler += 0x08;
 8005d92:	3208      	adds	r2, #8
			re_init = 1;
 8005d94:	2301      	movs	r3, #1
			SourceFreq /= 2;
 8005d96:	0864      	lsrs	r4, r4, #1
			settings->hspi->Init.BaudRatePrescaler += 0x08;
 8005d98:	61c2      	str	r2, [r0, #28]
 8005d9a:	4619      	mov	r1, r3
 8005d9c:	e784      	b.n	8005ca8 <SPIDS_STM32F4_SPI_assert_spi_bus+0x160>
		settings->hspi->Init.CLKPolarity = SPIDS_STM32F4_SPI_CPOL;
 8005d9e:	2302      	movs	r3, #2
 8005da0:	6103      	str	r3, [r0, #16]
		re_init = 1;
 8005da2:	2301      	movs	r3, #1
 8005da4:	f88d 3003 	strb.w	r3, [sp, #3]
 8005da8:	e7ba      	b.n	8005d20 <SPIDS_STM32F4_SPI_assert_spi_bus+0x1d8>
 8005daa:	bf00      	nop
 8005dac:	40023c00 	.word	0x40023c00
 8005db0:	08007541 	.word	0x08007541
 8005db4:	016e3600 	.word	0x016e3600
 8005db8:	00f42400 	.word	0x00f42400
 8005dbc:	40013000 	.word	0x40013000
 8005dc0:	40003800 	.word	0x40003800

08005dc4 <SPIDS_STM32F4_SPI_disk_initialize>:
{
 8005dc4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t r1_resp = 0xFF;
 8005dc6:	22ff      	movs	r2, #255	; 0xff
{
 8005dc8:	460c      	mov	r4, r1
	uint32_t r3_resp = 0x00000000;
 8005dca:	2300      	movs	r3, #0
		ALL_HIGH_BLOCKLEN[indi] = 0xFF;
 8005dcc:	496c      	ldr	r1, [pc, #432]	; (8005f80 <SPIDS_STM32F4_SPI_disk_initialize+0x1bc>)
	uint8_t r1_resp = 0xFF;
 8005dce:	f88d 2003 	strb.w	r2, [sp, #3]
	uint32_t r3_resp = 0x00000000;
 8005dd2:	9301      	str	r3, [sp, #4]
		ALL_HIGH_BLOCKLEN[indi] = 0xFF;
 8005dd4:	545a      	strb	r2, [r3, r1]
	for(uint32_t indi = 0; indi < SPIDS_STM32F4_SPI_DEF_BLOCKLEN; indi++)				// Fill out the giant all_high buffer for faster reads...
 8005dd6:	3301      	adds	r3, #1
 8005dd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ddc:	d1fa      	bne.n	8005dd4 <SPIDS_STM32F4_SPI_disk_initialize+0x10>
	SPIDS_STM32F4_SPI_assert_spi_bus(settings, 1); 										// Assert the SPI bus for the given settings, in initialization mode
 8005dde:	2564      	movs	r5, #100	; 0x64
		HAL_SPI_Transmit(settings->hspi, &ALL_HIGH, 1, settings->Timeout);
 8005de0:	4e68      	ldr	r6, [pc, #416]	; (8005f84 <SPIDS_STM32F4_SPI_disk_initialize+0x1c0>)
	SPIDS_STM32F4_SPI_assert_spi_bus(settings, 1); 										// Assert the SPI bus for the given settings, in initialization mode
 8005de2:	2101      	movs	r1, #1
 8005de4:	4620      	mov	r0, r4
 8005de6:	f7ff feaf 	bl	8005b48 <SPIDS_STM32F4_SPI_assert_spi_bus>
 8005dea:	3d01      	subs	r5, #1
		HAL_GPIO_WritePin(settings->CS_GPIO_Port, settings->CS_Pin, 1);
 8005dec:	2201      	movs	r2, #1
 8005dee:	8921      	ldrh	r1, [r4, #8]
 8005df0:	6860      	ldr	r0, [r4, #4]
 8005df2:	b2ad      	uxth	r5, r5
 8005df4:	f7fa feb6 	bl	8000b64 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(settings->hspi, &ALL_HIGH, 1, settings->Timeout);
 8005df8:	6963      	ldr	r3, [r4, #20]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	4631      	mov	r1, r6
 8005dfe:	6820      	ldr	r0, [r4, #0]
 8005e00:	f7fc fa97 	bl	8002332 <HAL_SPI_Transmit>
	for(uint16_t indi = 0; indi < SPIDS_STM32F4_SPI_NUM_DUMMY_BYTES; indi++)
 8005e04:	2d00      	cmp	r5, #0
 8005e06:	d1f0      	bne.n	8005dea <SPIDS_STM32F4_SPI_disk_initialize+0x26>
	HAL_GPIO_WritePin(settings->CS_GPIO_Port, settings->CS_Pin, 0);						// Set the CS pin low
 8005e08:	462a      	mov	r2, r5
 8005e0a:	8921      	ldrh	r1, [r4, #8]
 8005e0c:	6860      	ldr	r0, [r4, #4]
 8005e0e:	f7fa fea9 	bl	8000b64 <HAL_GPIO_WritePin>
	SPIDS_STM32F4_SPI_CMD(settings, SDMMC_CMD_GO_IDLE_STATE, 0, 148);					// Reset
 8005e12:	462a      	mov	r2, r5
 8005e14:	4629      	mov	r1, r5
 8005e16:	4620      	mov	r0, r4
 8005e18:	2394      	movs	r3, #148	; 0x94
 8005e1a:	f7ff fb61 	bl	80054e0 <SPIDS_STM32F4_SPI_CMD>
	result = SPIDS_STM32F4_SPI_GET_R1(settings, &r1_resp, 10);							// Resp should be 1, 10 tries should be enough for timeout
 8005e1e:	220a      	movs	r2, #10
 8005e20:	f10d 0103 	add.w	r1, sp, #3
 8005e24:	4620      	mov	r0, r4
 8005e26:	f7ff fb79 	bl	800551c <SPIDS_STM32F4_SPI_GET_R1>
	if(result != SPIDS_STM32F4_SPI_CODE_NOM)
 8005e2a:	b118      	cbz	r0, 8005e34 <SPIDS_STM32F4_SPI_disk_initialize+0x70>
		HAL_GPIO_WritePin(settings->CS_GPIO_Port, settings->CS_Pin, 1);
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	8921      	ldrh	r1, [r4, #8]
 8005e30:	6860      	ldr	r0, [r4, #4]
 8005e32:	e0a0      	b.n	8005f76 <SPIDS_STM32F4_SPI_disk_initialize+0x1b2>
	SPIDS_STM32F4_SPI_CMD(settings, SDMMC_CMD_GO_IDLE_STATE, 0, 148);					// Reset again (why?)
 8005e34:	462a      	mov	r2, r5
 8005e36:	4629      	mov	r1, r5
 8005e38:	4620      	mov	r0, r4
 8005e3a:	2394      	movs	r3, #148	; 0x94
 8005e3c:	f7ff fb50 	bl	80054e0 <SPIDS_STM32F4_SPI_CMD>
	result = SPIDS_STM32F4_SPI_GET_R1(settings, &r1_resp, 10);							// Resp should be 1
 8005e40:	220a      	movs	r2, #10
 8005e42:	f10d 0103 	add.w	r1, sp, #3
 8005e46:	4620      	mov	r0, r4
 8005e48:	f7ff fb68 	bl	800551c <SPIDS_STM32F4_SPI_GET_R1>
	if(result != SPIDS_STM32F4_SPI_CODE_NOM)
 8005e4c:	2800      	cmp	r0, #0
 8005e4e:	d1ed      	bne.n	8005e2c <SPIDS_STM32F4_SPI_disk_initialize+0x68>
	SPIDS_STM32F4_SPI_CMD(settings, SDMMC_CMD_HS_SEND_EXT_CSD, 0x000001AA, 134);		// Send cmd8 (SD physical layer spec pg. 95)
 8005e50:	2386      	movs	r3, #134	; 0x86
 8005e52:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8005e56:	2108      	movs	r1, #8
 8005e58:	4620      	mov	r0, r4
 8005e5a:	f7ff fb41 	bl	80054e0 <SPIDS_STM32F4_SPI_CMD>
	result = SPIDS_STM32F4_SPI_GET_R3(settings, &r1_resp, &r3_resp, 10);
 8005e5e:	230a      	movs	r3, #10
 8005e60:	aa01      	add	r2, sp, #4
 8005e62:	f10d 0103 	add.w	r1, sp, #3
 8005e66:	4620      	mov	r0, r4
 8005e68:	f7ff fbe6 	bl	8005638 <SPIDS_STM32F4_SPI_GET_R3>
	if(result != SPIDS_STM32F4_SPI_CODE_NOM)
 8005e6c:	2800      	cmp	r0, #0
 8005e6e:	d1dd      	bne.n	8005e2c <SPIDS_STM32F4_SPI_disk_initialize+0x68>
	if(r1_resp & SPIDS_SPI_R1_ILLEGAL_COMMAND)
 8005e70:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8005e74:	0759      	lsls	r1, r3, #29
 8005e76:	d538      	bpl.n	8005eea <SPIDS_STM32F4_SPI_disk_initialize+0x126>
		SPIDS_STM32F4_SPI_CMD(settings, SDMMC_CMD_READ_OCR, 0, 0);		// Send cmd58 to check operating voltages
 8005e78:	462b      	mov	r3, r5
 8005e7a:	462a      	mov	r2, r5
 8005e7c:	213a      	movs	r1, #58	; 0x3a
 8005e7e:	4620      	mov	r0, r4
 8005e80:	f7ff fb2e 	bl	80054e0 <SPIDS_STM32F4_SPI_CMD>
		result = SPIDS_STM32F4_SPI_GET_R3(settings, &r1_resp, &r3_resp, 10);
 8005e84:	230a      	movs	r3, #10
 8005e86:	aa01      	add	r2, sp, #4
 8005e88:	f10d 0103 	add.w	r1, sp, #3
 8005e8c:	4620      	mov	r0, r4
 8005e8e:	f7ff fbd3 	bl	8005638 <SPIDS_STM32F4_SPI_GET_R3>
		if(result != SPIDS_STM32F4_SPI_CODE_NOM)
 8005e92:	2800      	cmp	r0, #0
 8005e94:	d1ca      	bne.n	8005e2c <SPIDS_STM32F4_SPI_disk_initialize+0x68>
		if(r1_resp & SPIDS_SPI_R1_ILLEGAL_COMMAND)
 8005e96:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8005e9a:	075a      	lsls	r2, r3, #29
 8005e9c:	d4c6      	bmi.n	8005e2c <SPIDS_STM32F4_SPI_disk_initialize+0x68>
 8005e9e:	f242 7511 	movw	r5, #10001	; 0x2711
		while((r1_resp != 0x00) && (count++ < 10000))
 8005ea2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8005ea6:	b10b      	cbz	r3, 8005eac <SPIDS_STM32F4_SPI_disk_initialize+0xe8>
 8005ea8:	3d01      	subs	r5, #1
 8005eaa:	d10d      	bne.n	8005ec8 <SPIDS_STM32F4_SPI_disk_initialize+0x104>
		settings->hw_format = SPIDS_SD_HW_SC;
 8005eac:	2500      	movs	r5, #0
		SPIDS_STM32F4_SPI_assert_spi_bus(settings, 0);	// Go into full speed mode
 8005eae:	4620      	mov	r0, r4
 8005eb0:	4629      	mov	r1, r5
		settings->hw_format = SPIDS_SD_HW_SC;
 8005eb2:	7625      	strb	r5, [r4, #24]
		SPIDS_STM32F4_SPI_assert_spi_bus(settings, 0);	// Go into full speed mode
 8005eb4:	f7ff fe48 	bl	8005b48 <SPIDS_STM32F4_SPI_assert_spi_bus>
		HAL_GPIO_WritePin(settings->CS_GPIO_Port, settings->CS_Pin, 1);
 8005eb8:	2201      	movs	r2, #1
 8005eba:	8921      	ldrh	r1, [r4, #8]
 8005ebc:	6860      	ldr	r0, [r4, #4]
 8005ebe:	f7fa fe51 	bl	8000b64 <HAL_GPIO_WritePin>
	return STA_NOMINAL;
 8005ec2:	4628      	mov	r0, r5
}
 8005ec4:	b002      	add	sp, #8
 8005ec6:	bd70      	pop	{r4, r5, r6, pc}
			SPIDS_STM32F4_SPI_CMD_SD_APP_OP_COND(settings, 0);
 8005ec8:	2100      	movs	r1, #0
 8005eca:	4620      	mov	r0, r4
 8005ecc:	f7ff fb4e 	bl	800556c <SPIDS_STM32F4_SPI_CMD_SD_APP_OP_COND>
			result = SPIDS_STM32F4_SPI_GET_R1(settings, &r1_resp, 10);
 8005ed0:	220a      	movs	r2, #10
 8005ed2:	f10d 0103 	add.w	r1, sp, #3
 8005ed6:	4620      	mov	r0, r4
 8005ed8:	f7ff fb20 	bl	800551c <SPIDS_STM32F4_SPI_GET_R1>
			if(result != SPIDS_STM32F4_SPI_CODE_NOM)
 8005edc:	2800      	cmp	r0, #0
 8005ede:	d1a5      	bne.n	8005e2c <SPIDS_STM32F4_SPI_disk_initialize+0x68>
			if(r1_resp & SPIDS_SPI_R1_ILLEGAL_COMMAND)
 8005ee0:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8005ee4:	075b      	lsls	r3, r3, #29
 8005ee6:	d4a1      	bmi.n	8005e2c <SPIDS_STM32F4_SPI_disk_initialize+0x68>
 8005ee8:	e7db      	b.n	8005ea2 <SPIDS_STM32F4_SPI_disk_initialize+0xde>
	r1_resp = 0xFF;
 8005eea:	23ff      	movs	r3, #255	; 0xff
	while((r1_resp != 0x00) && (count++ < 10000))
 8005eec:	f242 7511 	movw	r5, #10001	; 0x2711
	r1_resp = 0xFF;
 8005ef0:	f88d 3003 	strb.w	r3, [sp, #3]
	while((r1_resp != 0x00) && (count++ < 10000))
 8005ef4:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8005ef8:	b1ab      	cbz	r3, 8005f26 <SPIDS_STM32F4_SPI_disk_initialize+0x162>
 8005efa:	3d01      	subs	r5, #1
 8005efc:	d096      	beq.n	8005e2c <SPIDS_STM32F4_SPI_disk_initialize+0x68>
		SPIDS_STM32F4_SPI_CMD_SD_APP_OP_COND(settings, 1);			// The 1 here indicates 'high capacity support (HCS)'
 8005efe:	2101      	movs	r1, #1
 8005f00:	4620      	mov	r0, r4
 8005f02:	f7ff fb33 	bl	800556c <SPIDS_STM32F4_SPI_CMD_SD_APP_OP_COND>
		result = SPIDS_STM32F4_SPI_GET_R1(settings, &r1_resp, 10);
 8005f06:	220a      	movs	r2, #10
 8005f08:	f10d 0103 	add.w	r1, sp, #3
 8005f0c:	4620      	mov	r0, r4
 8005f0e:	f7ff fb05 	bl	800551c <SPIDS_STM32F4_SPI_GET_R1>
		if(result != SPIDS_STM32F4_SPI_CODE_NOM)
 8005f12:	2800      	cmp	r0, #0
 8005f14:	d0ee      	beq.n	8005ef4 <SPIDS_STM32F4_SPI_disk_initialize+0x130>
 8005f16:	e789      	b.n	8005e2c <SPIDS_STM32F4_SPI_disk_initialize+0x68>
	HAL_GPIO_WritePin(settings->CS_GPIO_Port, settings->CS_Pin, 1);
 8005f18:	f7fa fe24 	bl	8000b64 <HAL_GPIO_WritePin>
	SPIDS_STM32F4_SPI_assert_spi_bus(settings, 0);	// Go into full speed mode
 8005f1c:	4629      	mov	r1, r5
 8005f1e:	4620      	mov	r0, r4
 8005f20:	f7ff fe12 	bl	8005b48 <SPIDS_STM32F4_SPI_assert_spi_bus>
 8005f24:	e7cd      	b.n	8005ec2 <SPIDS_STM32F4_SPI_disk_initialize+0xfe>
	SPIDS_STM32F4_SPI_CMD(settings, SDMMC_CMD_READ_OCR, 0, 0);		// Send cmd58 to check operating voltages
 8005f26:	461a      	mov	r2, r3
 8005f28:	213a      	movs	r1, #58	; 0x3a
 8005f2a:	4620      	mov	r0, r4
 8005f2c:	f7ff fad8 	bl	80054e0 <SPIDS_STM32F4_SPI_CMD>
	result = SPIDS_STM32F4_SPI_GET_R3(settings, &r1_resp, &r3_resp, 10);
 8005f30:	230a      	movs	r3, #10
 8005f32:	aa01      	add	r2, sp, #4
 8005f34:	f10d 0103 	add.w	r1, sp, #3
 8005f38:	4620      	mov	r0, r4
 8005f3a:	f7ff fb7d 	bl	8005638 <SPIDS_STM32F4_SPI_GET_R3>
	if(result != SPIDS_STM32F4_SPI_CODE_NOM)
 8005f3e:	2800      	cmp	r0, #0
 8005f40:	f47f af74 	bne.w	8005e2c <SPIDS_STM32F4_SPI_disk_initialize+0x68>
	if(r3_resp & 0x40000000)
 8005f44:	9b01      	ldr	r3, [sp, #4]
	SPIDS_STM32F4_SPI_CMD(settings, SDMMC_CMD_SET_BLOCKLEN, 0x00000200, 0);
 8005f46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f4a:	2110      	movs	r1, #16
 8005f4c:	4620      	mov	r0, r4
	if(r3_resp & 0x40000000)
 8005f4e:	f013 4380 	ands.w	r3, r3, #1073741824	; 0x40000000
		settings->hw_format = SPIDS_SD_HW_HC;
 8005f52:	bf18      	it	ne
 8005f54:	2301      	movne	r3, #1
		settings->hw_format = SPIDS_SD_HW_SC;
 8005f56:	7623      	strb	r3, [r4, #24]
	SPIDS_STM32F4_SPI_CMD(settings, SDMMC_CMD_SET_BLOCKLEN, 0x00000200, 0);
 8005f58:	2300      	movs	r3, #0
 8005f5a:	f7ff fac1 	bl	80054e0 <SPIDS_STM32F4_SPI_CMD>
	result = SPIDS_STM32F4_SPI_GET_R1(settings, &r1_resp, 10);					//
 8005f5e:	220a      	movs	r2, #10
 8005f60:	f10d 0103 	add.w	r1, sp, #3
 8005f64:	4620      	mov	r0, r4
 8005f66:	f7ff fad9 	bl	800551c <SPIDS_STM32F4_SPI_GET_R1>
	if(result != SPIDS_STM32F4_SPI_CODE_NOM)
 8005f6a:	4605      	mov	r5, r0
 8005f6c:	8921      	ldrh	r1, [r4, #8]
		HAL_GPIO_WritePin(settings->CS_GPIO_Port, settings->CS_Pin, 1);
 8005f6e:	2201      	movs	r2, #1
 8005f70:	6860      	ldr	r0, [r4, #4]
	if(result != SPIDS_STM32F4_SPI_CODE_NOM)
 8005f72:	2d00      	cmp	r5, #0
 8005f74:	d0d0      	beq.n	8005f18 <SPIDS_STM32F4_SPI_disk_initialize+0x154>
		HAL_GPIO_WritePin(settings->CS_GPIO_Port, settings->CS_Pin, 1);
 8005f76:	f7fa fdf5 	bl	8000b64 <HAL_GPIO_WritePin>
		return STA_NOINIT;	// The card timed out...
 8005f7a:	2001      	movs	r0, #1
 8005f7c:	e7a2      	b.n	8005ec4 <SPIDS_STM32F4_SPI_disk_initialize+0x100>
 8005f7e:	bf00      	nop
 8005f80:	20003f30 	.word	0x20003f30
 8005f84:	200000ac 	.word	0x200000ac

08005f88 <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = systemDisks.drv[pdrv]->disk_status(systemDisks.lun[pdrv]);
 8005f88:	4b03      	ldr	r3, [pc, #12]	; (8005f98 <disk_status+0x10>)
 8005f8a:	181a      	adds	r2, r3, r0
 8005f8c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	7a10      	ldrb	r0, [r2, #8]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	4718      	bx	r3
 8005f98:	20003ee8 	.word	0x20003ee8

08005f9c <disk_initialize>:
  DSTATUS stat = RES_OK;

//  if(systemDisks.is_initialized[pdrv] == 0)
//  {
//    systemDisks.is_initialized[pdrv] = 1;
    stat = systemDisks.drv[pdrv]->disk_initialize(systemDisks.lun[pdrv]);
 8005f9c:	4b03      	ldr	r3, [pc, #12]	; (8005fac <disk_initialize+0x10>)
 8005f9e:	181a      	adds	r2, r3, r0
 8005fa0:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	7a10      	ldrb	r0, [r2, #8]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4718      	bx	r3
 8005fac:	20003ee8 	.word	0x20003ee8

08005fb0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005fb0:	b430      	push	{r4, r5}
  DRESULT res;

  res = systemDisks.drv[pdrv]->disk_read(systemDisks.lun[pdrv], buff, sector, count);
 8005fb2:	4c05      	ldr	r4, [pc, #20]	; (8005fc8 <disk_read+0x18>)
 8005fb4:	1825      	adds	r5, r4, r0
 8005fb6:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8005fba:	6860      	ldr	r0, [r4, #4]
 8005fbc:	6884      	ldr	r4, [r0, #8]
 8005fbe:	7a28      	ldrb	r0, [r5, #8]
 8005fc0:	46a4      	mov	ip, r4
  return res;
}
 8005fc2:	bc30      	pop	{r4, r5}
  res = systemDisks.drv[pdrv]->disk_read(systemDisks.lun[pdrv], buff, sector, count);
 8005fc4:	4760      	bx	ip
 8005fc6:	bf00      	nop
 8005fc8:	20003ee8 	.word	0x20003ee8

08005fcc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005fcc:	b430      	push	{r4, r5}
  DRESULT res;

  res = systemDisks.drv[pdrv]->disk_write(systemDisks.lun[pdrv], buff, sector, count);
 8005fce:	4c05      	ldr	r4, [pc, #20]	; (8005fe4 <disk_write+0x18>)
 8005fd0:	1825      	adds	r5, r4, r0
 8005fd2:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8005fd6:	6860      	ldr	r0, [r4, #4]
 8005fd8:	68c4      	ldr	r4, [r0, #12]
 8005fda:	7a28      	ldrb	r0, [r5, #8]
 8005fdc:	46a4      	mov	ip, r4
  return res;
}
 8005fde:	bc30      	pop	{r4, r5}
  res = systemDisks.drv[pdrv]->disk_write(systemDisks.lun[pdrv], buff, sector, count);
 8005fe0:	4760      	bx	ip
 8005fe2:	bf00      	nop
 8005fe4:	20003ee8 	.word	0x20003ee8

08005fe8 <ld_dword>:
static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
	rv = rv << 8 | ptr[2];
 8005fe8:	8842      	ldrh	r2, [r0, #2]
	rv = rv << 8 | ptr[1];
 8005fea:	7843      	ldrb	r3, [r0, #1]
	rv = rv << 8 | ptr[0];
 8005fec:	7800      	ldrb	r0, [r0, #0]
	rv = rv << 8 | ptr[1];
 8005fee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	return rv;
}
 8005ff2:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8005ff6:	4770      	bx	lr

08005ff8 <mem_cmp>:
}


/* Compare memory block */
static int mem_cmp (const void* dst, const void* src, UINT cnt)	/* ZR:same, NZ:different */
{
 8005ff8:	b530      	push	{r4, r5, lr}
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005ffa:	4604      	mov	r4, r0
	int r = 0;

	do {
		r = *d++ - *s++;
 8005ffc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006000:	f811 5b01 	ldrb.w	r5, [r1], #1
 8006004:	1b5b      	subs	r3, r3, r5
 8006006:	1b15      	subs	r5, r2, r4
	} while (--cnt && r == 0);
 8006008:	42e8      	cmn	r0, r5
 800600a:	d001      	beq.n	8006010 <mem_cmp+0x18>
 800600c:	2b00      	cmp	r3, #0
 800600e:	d0f5      	beq.n	8005ffc <mem_cmp+0x4>

	return r;
}
 8006010:	4618      	mov	r0, r3
 8006012:	bd30      	pop	{r4, r5, pc}

08006014 <get_ldnumber>:
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
 8006014:	6802      	ldr	r2, [r0, #0]
	if (!tp) return vol;	/* Invalid path name? */
 8006016:	b14a      	cbz	r2, 800602c <get_ldnumber+0x18>
 8006018:	4613      	mov	r3, r2
	do tc = *tt++; while ((UINT)tc >= (FF_USE_LFN ? ' ' : '!') && tc != ':');	/* Find a colon in the path */
 800601a:	f813 1b01 	ldrb.w	r1, [r3], #1
 800601e:	291f      	cmp	r1, #31
 8006020:	d90d      	bls.n	800603e <get_ldnumber+0x2a>
 8006022:	293a      	cmp	r1, #58	; 0x3a
 8006024:	d1f9      	bne.n	800601a <get_ldnumber+0x6>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
		i = FF_VOLUMES;
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 8006026:	1c91      	adds	r1, r2, #2
 8006028:	428b      	cmp	r3, r1
 800602a:	d002      	beq.n	8006032 <get_ldnumber+0x1e>
	if (!tp) return vol;	/* Invalid path name? */
 800602c:	f04f 30ff 	mov.w	r0, #4294967295
	vol = CurrVol;	/* Default drive is current drive */
#else
	vol = 0;		/* Default drive is 0 */
#endif
	return vol;		/* Return the default drive */
}
 8006030:	4770      	bx	lr
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 8006032:	7812      	ldrb	r2, [r2, #0]
 8006034:	2a30      	cmp	r2, #48	; 0x30
 8006036:	d1f9      	bne.n	800602c <get_ldnumber+0x18>
			*path = tt;		/* Snip the drive prefix off */
 8006038:	6003      	str	r3, [r0, #0]
 800603a:	2000      	movs	r0, #0
 800603c:	4770      	bx	lr
	vol = CurrVol;	/* Default drive is current drive */
 800603e:	4b01      	ldr	r3, [pc, #4]	; (8006044 <get_ldnumber+0x30>)
 8006040:	7818      	ldrb	r0, [r3, #0]
	return vol;		/* Return the default drive */
 8006042:	4770      	bx	lr
 8006044:	20003ef4 	.word	0x20003ef4

08006048 <sync_window>:
{
 8006048:	b570      	push	{r4, r5, r6, lr}
	if (fs->wflag) {	/* Is the disk access window dirty */
 800604a:	78c3      	ldrb	r3, [r0, #3]
{
 800604c:	4604      	mov	r4, r0
	if (fs->wflag) {	/* Is the disk access window dirty */
 800604e:	b90b      	cbnz	r3, 8006054 <sync_window+0xc>
	FRESULT res = FR_OK;
 8006050:	2000      	movs	r0, #0
 8006052:	bd70      	pop	{r4, r5, r6, pc}
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write back the window */
 8006054:	f100 0638 	add.w	r6, r0, #56	; 0x38
 8006058:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800605a:	2301      	movs	r3, #1
 800605c:	7840      	ldrb	r0, [r0, #1]
 800605e:	4631      	mov	r1, r6
 8006060:	f7ff ffb4 	bl	8005fcc <disk_write>
 8006064:	b980      	cbnz	r0, 8006088 <sync_window+0x40>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 8006066:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006068:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800606a:	6a22      	ldr	r2, [r4, #32]
 800606c:	1acb      	subs	r3, r1, r3
			fs->wflag = 0;	/* Clear window dirty flag */
 800606e:	70e0      	strb	r0, [r4, #3]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 8006070:	4293      	cmp	r3, r2
 8006072:	d2ed      	bcs.n	8006050 <sync_window+0x8>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 8006074:	78a3      	ldrb	r3, [r4, #2]
 8006076:	2b02      	cmp	r3, #2
 8006078:	d1ea      	bne.n	8006050 <sync_window+0x8>
 800607a:	440a      	add	r2, r1
 800607c:	2301      	movs	r3, #1
 800607e:	4631      	mov	r1, r6
 8006080:	7860      	ldrb	r0, [r4, #1]
 8006082:	f7ff ffa3 	bl	8005fcc <disk_write>
 8006086:	e7e3      	b.n	8006050 <sync_window+0x8>
			res = FR_DISK_ERR;
 8006088:	2001      	movs	r0, #1
}
 800608a:	bd70      	pop	{r4, r5, r6, pc}

0800608c <move_window>:
	if (sector != fs->winsect) {	/* Window offset changed? */
 800608c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800608e:	428b      	cmp	r3, r1
{
 8006090:	b570      	push	{r4, r5, r6, lr}
 8006092:	4606      	mov	r6, r0
 8006094:	460d      	mov	r5, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006096:	d012      	beq.n	80060be <move_window+0x32>
		res = sync_window(fs);		/* Write-back changes */
 8006098:	f7ff ffd6 	bl	8006048 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 800609c:	4604      	mov	r4, r0
 800609e:	b960      	cbnz	r0, 80060ba <move_window+0x2e>
			if (disk_read(fs->pdrv, fs->win, sector, 1) != RES_OK) {
 80060a0:	462a      	mov	r2, r5
 80060a2:	2301      	movs	r3, #1
 80060a4:	f106 0138 	add.w	r1, r6, #56	; 0x38
 80060a8:	7870      	ldrb	r0, [r6, #1]
 80060aa:	f7ff ff81 	bl	8005fb0 <disk_read>
 80060ae:	2800      	cmp	r0, #0
				res = FR_DISK_ERR;
 80060b0:	bf1c      	itt	ne
 80060b2:	f04f 35ff 	movne.w	r5, #4294967295
 80060b6:	2401      	movne	r4, #1
			fs->winsect = sector;
 80060b8:	6375      	str	r5, [r6, #52]	; 0x34
}
 80060ba:	4620      	mov	r0, r4
 80060bc:	bd70      	pop	{r4, r5, r6, pc}
	FRESULT res = FR_OK;
 80060be:	2400      	movs	r4, #0
 80060c0:	e7fb      	b.n	80060ba <move_window+0x2e>
	...

080060c4 <check_fs>:
static BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,			/* Filesystem object */
	DWORD sect			/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80060c4:	2300      	movs	r3, #0
{
 80060c6:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80060c8:	70c3      	strb	r3, [r0, #3]
 80060ca:	f04f 33ff 	mov.w	r3, #4294967295
{
 80060ce:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80060d0:	6343      	str	r3, [r0, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80060d2:	f7ff ffdb 	bl	800608c <move_window>
 80060d6:	bb18      	cbnz	r0, 8006120 <check_fs+0x5c>
	rv = rv << 8 | ptr[0];
 80060d8:	f894 2237 	ldrb.w	r2, [r4, #567]	; 0x237
 80060dc:	f894 3236 	ldrb.w	r3, [r4, #566]	; 0x236
 80060e0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always here regardless of the sector size) */
 80060e4:	f64a 2255 	movw	r2, #43605	; 0xaa55
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d11b      	bne.n	8006124 <check_fs+0x60>

#if FF_FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* Check if exFAT VBR */
#endif
	if (fs->win[BS_JmpBoot] == 0xE9 || fs->win[BS_JmpBoot] == 0xEB || fs->win[BS_JmpBoot] == 0xE8) {	/* Valid JumpBoot code? */
 80060ec:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80060f0:	2beb      	cmp	r3, #235	; 0xeb
 80060f2:	d003      	beq.n	80060fc <check_fs+0x38>
 80060f4:	3318      	adds	r3, #24
 80060f6:	b2db      	uxtb	r3, r3
 80060f8:	2b01      	cmp	r3, #1
 80060fa:	d815      	bhi.n	8006128 <check_fs+0x64>
		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
 80060fc:	2203      	movs	r2, #3
 80060fe:	490b      	ldr	r1, [pc, #44]	; (800612c <check_fs+0x68>)
 8006100:	f104 006e 	add.w	r0, r4, #110	; 0x6e
 8006104:	f7ff ff78 	bl	8005ff8 <mem_cmp>
 8006108:	b178      	cbz	r0, 800612a <check_fs+0x66>
		if (!mem_cmp(fs->win + BS_FilSysType32, "FAT32", 5)) return 0;	/* Is it an FAT32 VBR? */
 800610a:	2205      	movs	r2, #5
 800610c:	4908      	ldr	r1, [pc, #32]	; (8006130 <check_fs+0x6c>)
 800610e:	f104 008a 	add.w	r0, r4, #138	; 0x8a
 8006112:	f7ff ff71 	bl	8005ff8 <mem_cmp>
		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
 8006116:	2800      	cmp	r0, #0
 8006118:	bf14      	ite	ne
 800611a:	2002      	movne	r0, #2
 800611c:	2000      	moveq	r0, #0
 800611e:	bd10      	pop	{r4, pc}
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006120:	2004      	movs	r0, #4
 8006122:	bd10      	pop	{r4, pc}
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always here regardless of the sector size) */
 8006124:	2003      	movs	r0, #3
 8006126:	bd10      	pop	{r4, pc}
	}
	return 2;	/* Valid BS but not FAT */
 8006128:	2002      	movs	r0, #2
}
 800612a:	bd10      	pop	{r4, pc}
 800612c:	08007565 	.word	0x08007565
 8006130:	08007569 	.word	0x08007569

08006134 <find_volume>:
static FRESULT find_volume (	/* FR_OK(0): successful, !=0: an error occurred */
	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
	BYTE mode					/* !=0: Check write protection for write access */
)
{
 8006134:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006138:	2300      	movs	r3, #0
{
 800613a:	460f      	mov	r7, r1
 800613c:	4615      	mov	r5, r2
	*rfs = 0;
 800613e:	600b      	str	r3, [r1, #0]
	vol = get_ldnumber(path);
 8006140:	f7ff ff68 	bl	8006014 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8006144:	1e06      	subs	r6, r0, #0
 8006146:	f2c0 80c4 	blt.w	80062d2 <find_volume+0x19e>

	/* Check if the filesystem object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 800614a:	4b97      	ldr	r3, [pc, #604]	; (80063a8 <find_volume+0x274>)
 800614c:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 8006150:	2c00      	cmp	r4, #0
 8006152:	f000 80c0 	beq.w	80062d6 <find_volume+0x1a2>
#if FF_FS_REENTRANT
	if (!lock_fs(fs)) return FR_TIMEOUT;	/* Lock the volume */
#endif
	*rfs = fs;							/* Return pointer to the filesystem object */
 8006156:	603c      	str	r4, [r7, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006158:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 800615c:	7823      	ldrb	r3, [r4, #0]
 800615e:	b173      	cbz	r3, 800617e <find_volume+0x4a>
		stat = disk_status(fs->pdrv);
 8006160:	7860      	ldrb	r0, [r4, #1]
 8006162:	f7ff ff11 	bl	8005f88 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006166:	07c7      	lsls	r7, r0, #31
 8006168:	d409      	bmi.n	800617e <find_volume+0x4a>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800616a:	2d00      	cmp	r5, #0
 800616c:	f000 80b5 	beq.w	80062da <find_volume+0x1a6>
 8006170:	f010 0004 	ands.w	r0, r0, #4
 8006174:	d000      	beq.n	8006178 <find_volume+0x44>
				return FR_WRITE_PROTECTED;
 8006176:	200a      	movs	r0, #10
#endif
#if FF_FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
 8006178:	b004      	add	sp, #16
 800617a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fs->fs_type = 0;					/* Clear the filesystem object */
 800617e:	2300      	movs	r3, #0
	fs->pdrv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006180:	b2f0      	uxtb	r0, r6
	fs->fs_type = 0;					/* Clear the filesystem object */
 8006182:	7023      	strb	r3, [r4, #0]
	fs->pdrv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006184:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
 8006186:	f7ff ff09 	bl	8005f9c <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800618a:	07c1      	lsls	r1, r0, #31
 800618c:	f100 80a7 	bmi.w	80062de <find_volume+0x1aa>
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006190:	b10d      	cbz	r5, 8006196 <find_volume+0x62>
 8006192:	0742      	lsls	r2, r0, #29
 8006194:	d4ef      	bmi.n	8006176 <find_volume+0x42>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006196:	2100      	movs	r1, #0
 8006198:	4620      	mov	r0, r4
 800619a:	f7ff ff93 	bl	80060c4 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800619e:	2802      	cmp	r0, #2
 80061a0:	f040 808f 	bne.w	80062c2 <find_volume+0x18e>
 80061a4:	f504 75ff 	add.w	r5, r4, #510	; 0x1fe
 80061a8:	2100      	movs	r1, #0
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80061aa:	f815 0c04 	ldrb.w	r0, [r5, #-4]
 80061ae:	b110      	cbz	r0, 80061b6 <find_volume+0x82>
 80061b0:	4628      	mov	r0, r5
 80061b2:	f7ff ff19 	bl	8005fe8 <ld_dword>
 80061b6:	f84d 0021 	str.w	r0, [sp, r1, lsl #2]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80061ba:	3101      	adds	r1, #1
 80061bc:	3510      	adds	r5, #16
 80061be:	2904      	cmp	r1, #4
 80061c0:	d1f3      	bne.n	80061aa <find_volume+0x76>
 80061c2:	2600      	movs	r6, #0
			bsect = br[i];
 80061c4:	f85d 5026 	ldr.w	r5, [sp, r6, lsl #2]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80061c8:	2d00      	cmp	r5, #0
 80061ca:	d072      	beq.n	80062b2 <find_volume+0x17e>
 80061cc:	4629      	mov	r1, r5
 80061ce:	4620      	mov	r0, r4
 80061d0:	f7ff ff78 	bl	80060c4 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80061d4:	2801      	cmp	r0, #1
 80061d6:	d86d      	bhi.n	80062b4 <find_volume+0x180>
	rv = rv << 8 | ptr[0];
 80061d8:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 80061dc:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80061e0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80061e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061e8:	d16f      	bne.n	80062ca <find_volume+0x196>
	rv = rv << 8 | ptr[0];
 80061ea:	f894 304f 	ldrb.w	r3, [r4, #79]	; 0x4f
 80061ee:	f894 604e 	ldrb.w	r6, [r4, #78]	; 0x4e
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80061f2:	ea56 2603 	orrs.w	r6, r6, r3, lsl #8
 80061f6:	d104      	bne.n	8006202 <find_volume+0xce>
 80061f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80061fc:	f7ff fef4 	bl	8005fe8 <ld_dword>
 8006200:	4606      	mov	r6, r0
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006202:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
		fs->fsize = fasize;
 8006206:	6226      	str	r6, [r4, #32]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006208:	1e4b      	subs	r3, r1, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800620a:	70a1      	strb	r1, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800620c:	2b01      	cmp	r3, #1
 800620e:	d85c      	bhi.n	80062ca <find_volume+0x196>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006210:	f894 8045 	ldrb.w	r8, [r4, #69]	; 0x45
 8006214:	fa1f f388 	uxth.w	r3, r8
 8006218:	8163      	strh	r3, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800621a:	2b00      	cmp	r3, #0
 800621c:	d055      	beq.n	80062ca <find_volume+0x196>
 800621e:	f108 33ff 	add.w	r3, r8, #4294967295
 8006222:	ea13 0f08 	tst.w	r3, r8
 8006226:	d150      	bne.n	80062ca <find_volume+0x196>
	rv = rv << 8 | ptr[0];
 8006228:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 800622c:	f894 7049 	ldrb.w	r7, [r4, #73]	; 0x49
 8006230:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006234:	073b      	lsls	r3, r7, #28
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006236:	8127      	strh	r7, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006238:	d147      	bne.n	80062ca <find_volume+0x196>
	rv = rv << 8 | ptr[0];
 800623a:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 800623e:	f894 004b 	ldrb.w	r0, [r4, #75]	; 0x4b
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006242:	ea50 2003 	orrs.w	r0, r0, r3, lsl #8
 8006246:	d103      	bne.n	8006250 <find_volume+0x11c>
 8006248:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800624c:	f7ff fecc 	bl	8005fe8 <ld_dword>
	rv = rv << 8 | ptr[0];
 8006250:	f894 2047 	ldrb.w	r2, [r4, #71]	; 0x47
 8006254:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006258:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 800625c:	d035      	beq.n	80062ca <find_volume+0x196>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800625e:	fb06 fe01 	mul.w	lr, r6, r1
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006262:	eb03 1217 	add.w	r2, r3, r7, lsr #4
 8006266:	4472      	add	r2, lr
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006268:	4290      	cmp	r0, r2
 800626a:	d32e      	bcc.n	80062ca <find_volume+0x196>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800626c:	1a80      	subs	r0, r0, r2
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800626e:	494f      	ldr	r1, [pc, #316]	; (80063ac <find_volume+0x278>)
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006270:	fbb0 f0f8 	udiv	r0, r0, r8
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006274:	f100 3cff 	add.w	ip, r0, #4294967295
 8006278:	458c      	cmp	ip, r1
 800627a:	d826      	bhi.n	80062ca <find_volume+0x196>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800627c:	f64f 71f5 	movw	r1, #65525	; 0xfff5
 8006280:	442b      	add	r3, r5
 8006282:	442a      	add	r2, r5
 8006284:	4288      	cmp	r0, r1
 8006286:	f100 0102 	add.w	r1, r0, #2
 800628a:	d831      	bhi.n	80062f0 <find_volume+0x1bc>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800628c:	f640 7cf5 	movw	ip, #4085	; 0xff5
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006290:	61e1      	str	r1, [r4, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8006292:	6265      	str	r5, [r4, #36]	; 0x24
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006294:	4560      	cmp	r0, ip
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006296:	62a3      	str	r3, [r4, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8006298:	6322      	str	r2, [r4, #48]	; 0x30
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800629a:	d822      	bhi.n	80062e2 <find_volume+0x1ae>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800629c:	b1af      	cbz	r7, 80062ca <find_volume+0x196>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800629e:	4473      	add	r3, lr
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80062a0:	2701      	movs	r7, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80062a2:	62e3      	str	r3, [r4, #44]	; 0x2c
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80062a4:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 80062a8:	f001 0101 	and.w	r1, r1, #1
 80062ac:	eb01 0153 	add.w	r1, r1, r3, lsr #1
 80062b0:	e032      	b.n	8006318 <find_volume+0x1e4>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80062b2:	2003      	movs	r0, #3
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80062b4:	3601      	adds	r6, #1
 80062b6:	2e04      	cmp	r6, #4
 80062b8:	d184      	bne.n	80061c4 <find_volume+0x90>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80062ba:	2804      	cmp	r0, #4
 80062bc:	d105      	bne.n	80062ca <find_volume+0x196>
 80062be:	2001      	movs	r0, #1
 80062c0:	e75a      	b.n	8006178 <find_volume+0x44>
 80062c2:	2804      	cmp	r0, #4
 80062c4:	d0fb      	beq.n	80062be <find_volume+0x18a>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80062c6:	2801      	cmp	r0, #1
 80062c8:	d901      	bls.n	80062ce <find_volume+0x19a>
 80062ca:	200d      	movs	r0, #13
 80062cc:	e754      	b.n	8006178 <find_volume+0x44>
	bsect = 0;
 80062ce:	2500      	movs	r5, #0
 80062d0:	e782      	b.n	80061d8 <find_volume+0xa4>
	if (vol < 0) return FR_INVALID_DRIVE;
 80062d2:	200b      	movs	r0, #11
 80062d4:	e750      	b.n	8006178 <find_volume+0x44>
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 80062d6:	200c      	movs	r0, #12
 80062d8:	e74e      	b.n	8006178 <find_volume+0x44>
			return FR_OK;				/* The filesystem object is valid */
 80062da:	4628      	mov	r0, r5
 80062dc:	e74c      	b.n	8006178 <find_volume+0x44>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80062de:	2003      	movs	r0, #3
 80062e0:	e74a      	b.n	8006178 <find_volume+0x44>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 80062e2:	2f00      	cmp	r7, #0
 80062e4:	d0f1      	beq.n	80062ca <find_volume+0x196>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80062e6:	4473      	add	r3, lr
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80062e8:	0049      	lsls	r1, r1, #1
 80062ea:	2702      	movs	r7, #2
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80062ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80062ee:	e013      	b.n	8006318 <find_volume+0x1e4>
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80062f0:	62a3      	str	r3, [r4, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80062f2:	6322      	str	r2, [r4, #48]	; 0x30
	rv = rv << 8 | ptr[0];
 80062f4:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
 80062f8:	f894 2063 	ldrb.w	r2, [r4, #99]	; 0x63
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80062fc:	61e1      	str	r1, [r4, #28]
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80062fe:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
		fs->volbase = bsect;							/* Volume start sector */
 8006302:	6265      	str	r5, [r4, #36]	; 0x24
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006304:	d1e1      	bne.n	80062ca <find_volume+0x196>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006306:	2f00      	cmp	r7, #0
 8006308:	d1df      	bne.n	80062ca <find_volume+0x196>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800630a:	f104 0064 	add.w	r0, r4, #100	; 0x64
 800630e:	2703      	movs	r7, #3
 8006310:	f7ff fe6a 	bl	8005fe8 <ld_dword>
 8006314:	62e0      	str	r0, [r4, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006316:	0089      	lsls	r1, r1, #2
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006318:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
 800631c:	ebb6 2f51 	cmp.w	r6, r1, lsr #9
 8006320:	d3d3      	bcc.n	80062ca <find_volume+0x196>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006322:	f04f 33ff 	mov.w	r3, #4294967295
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
 8006326:	2f03      	cmp	r7, #3
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006328:	6163      	str	r3, [r4, #20]
 800632a:	6123      	str	r3, [r4, #16]
		fs->fsi_flag = 0x80;
 800632c:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006330:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
 8006332:	d12f      	bne.n	8006394 <find_volume+0x260>
	rv = rv << 8 | ptr[0];
 8006334:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
 8006338:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
 800633c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006340:	2b01      	cmp	r3, #1
 8006342:	d127      	bne.n	8006394 <find_volume+0x260>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006344:	1c69      	adds	r1, r5, #1
 8006346:	4620      	mov	r0, r4
 8006348:	f7ff fea0 	bl	800608c <move_window>
 800634c:	bb10      	cbnz	r0, 8006394 <find_volume+0x260>
	rv = rv << 8 | ptr[0];
 800634e:	f894 2237 	ldrb.w	r2, [r4, #567]	; 0x237
 8006352:	f894 3236 	ldrb.w	r3, [r4, #566]	; 0x236
			fs->fsi_flag = 0;
 8006356:	7120      	strb	r0, [r4, #4]
	rv = rv << 8 | ptr[0];
 8006358:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 800635c:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8006360:	4293      	cmp	r3, r2
 8006362:	d117      	bne.n	8006394 <find_volume+0x260>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006364:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8006368:	f7ff fe3e 	bl	8005fe8 <ld_dword>
 800636c:	4b10      	ldr	r3, [pc, #64]	; (80063b0 <find_volume+0x27c>)
 800636e:	4298      	cmp	r0, r3
 8006370:	d110      	bne.n	8006394 <find_volume+0x260>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006372:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 8006376:	f7ff fe37 	bl	8005fe8 <ld_dword>
 800637a:	4b0e      	ldr	r3, [pc, #56]	; (80063b4 <find_volume+0x280>)
 800637c:	4298      	cmp	r0, r3
 800637e:	d109      	bne.n	8006394 <find_volume+0x260>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006380:	f504 7008 	add.w	r0, r4, #544	; 0x220
 8006384:	f7ff fe30 	bl	8005fe8 <ld_dword>
 8006388:	6160      	str	r0, [r4, #20]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800638a:	f504 7009 	add.w	r0, r4, #548	; 0x224
 800638e:	f7ff fe2b 	bl	8005fe8 <ld_dword>
 8006392:	6120      	str	r0, [r4, #16]
	fs->id = ++Fsid;		/* Volume mount ID */
 8006394:	4a08      	ldr	r2, [pc, #32]	; (80063b8 <find_volume+0x284>)
	fs->cdir = 0;			/* Initialize current directory */
 8006396:	2000      	movs	r0, #0
	fs->fs_type = fmt;		/* FAT sub-type */
 8006398:	7027      	strb	r7, [r4, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
 800639a:	8813      	ldrh	r3, [r2, #0]
	fs->cdir = 0;			/* Initialize current directory */
 800639c:	61a0      	str	r0, [r4, #24]
	fs->id = ++Fsid;		/* Volume mount ID */
 800639e:	3301      	adds	r3, #1
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	8013      	strh	r3, [r2, #0]
 80063a4:	80e3      	strh	r3, [r4, #6]
	return FR_OK;
 80063a6:	e6e7      	b.n	8006178 <find_volume+0x44>
 80063a8:	20003ef8 	.word	0x20003ef8
 80063ac:	0ffffff4 	.word	0x0ffffff4
 80063b0:	41615252 	.word	0x41615252
 80063b4:	61417272 	.word	0x61417272
 80063b8:	20003efc 	.word	0x20003efc

080063bc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80063bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80063be:	9001      	str	r0, [sp, #4]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80063c0:	a804      	add	r0, sp, #16
{
 80063c2:	9100      	str	r1, [sp, #0]
 80063c4:	4614      	mov	r4, r2
	const TCHAR *rp = path;
 80063c6:	f840 1d04 	str.w	r1, [r0, #-4]!


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80063ca:	f7ff fe23 	bl	8006014 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 80063ce:	2800      	cmp	r0, #0
 80063d0:	db13      	blt.n	80063fa <f_mount+0x3e>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80063d2:	4b0c      	ldr	r3, [pc, #48]	; (8006404 <f_mount+0x48>)
 80063d4:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]

	if (cfs) {
 80063d8:	b10a      	cbz	r2, 80063de <f_mount+0x22>
		clear_lock(cfs);
#endif
#if FF_FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80063da:	2100      	movs	r1, #0
 80063dc:	7011      	strb	r1, [r2, #0]
	}

	if (fs) {
 80063de:	9a01      	ldr	r2, [sp, #4]
 80063e0:	b10a      	cbz	r2, 80063e6 <f_mount+0x2a>
		fs->fs_type = 0;				/* Clear new fs object */
 80063e2:	2100      	movs	r1, #0
 80063e4:	7011      	strb	r1, [r2, #0]
#if FF_FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80063e6:	f843 2020 	str.w	r2, [r3, r0, lsl #2]

	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */
 80063ea:	b144      	cbz	r4, 80063fe <f_mount+0x42>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80063ec:	2200      	movs	r2, #0
 80063ee:	a901      	add	r1, sp, #4
 80063f0:	4668      	mov	r0, sp
 80063f2:	f7ff fe9f 	bl	8006134 <find_volume>
	LEAVE_FF(fs, res);
}
 80063f6:	b004      	add	sp, #16
 80063f8:	bd10      	pop	{r4, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 80063fa:	200b      	movs	r0, #11
 80063fc:	e7fb      	b.n	80063f6 <f_mount+0x3a>
	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */
 80063fe:	4620      	mov	r0, r4
 8006400:	e7f9      	b.n	80063f6 <f_mount+0x3a>
 8006402:	bf00      	nop
 8006404:	20003ef8 	.word	0x20003ef8

08006408 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8006408:	b508      	push	{r3, lr}
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800640a:	f000 fb25 	bl	8006a58 <MX_USB_DEVICE_Init>

  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800640e:	2001      	movs	r0, #1
 8006410:	f7fd fa77 	bl	8003902 <osDelay>
 8006414:	e7fb      	b.n	800640e <StartDefaultTask+0x6>
	...

08006418 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8006418:	b530      	push	{r4, r5, lr}
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800641a:	4d07      	ldr	r5, [pc, #28]	; (8006438 <MX_FREERTOS_Init+0x20>)
void MX_FREERTOS_Init(void) {
 800641c:	b087      	sub	sp, #28
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800641e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006420:	ac01      	add	r4, sp, #4
 8006422:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006424:	682b      	ldr	r3, [r5, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8006426:	2100      	movs	r1, #0
 8006428:	a801      	add	r0, sp, #4
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800642a:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800642c:	f7fd fa51 	bl	80038d2 <osThreadCreate>
 8006430:	4b02      	ldr	r3, [pc, #8]	; (800643c <MX_FREERTOS_Init+0x24>)
 8006432:	6018      	str	r0, [r3, #0]
}
 8006434:	b007      	add	sp, #28
 8006436:	bd30      	pop	{r4, r5, pc}
 8006438:	080074f8 	.word	0x080074f8
 800643c:	20004130 	.word	0x20004130

08006440 <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006440:	4b2e      	ldr	r3, [pc, #184]	; (80064fc <MX_GPIO_Init+0xbc>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_SD_GPIO_Port, CS_SD_Pin, GPIO_PIN_SET);
 8006442:	2108      	movs	r1, #8
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006444:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006446:	f042 0210 	orr.w	r2, r2, #16
{
 800644a:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800644c:	631a      	str	r2, [r3, #48]	; 0x30
{
 800644e:	b08d      	sub	sp, #52	; 0x34
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006450:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOC, ULED1_Pin|ULED2_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_SD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006452:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(CS_SD_GPIO_Port, CS_SD_Pin, GPIO_PIN_SET);
 8006454:	4f2a      	ldr	r7, [pc, #168]	; (8006500 <MX_GPIO_Init+0xc0>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006456:	2601      	movs	r6, #1
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006458:	f002 0210 	and.w	r2, r2, #16
  HAL_GPIO_WritePin(GPIOC, ULED1_Pin|ULED2_Pin, GPIO_PIN_SET);
 800645c:	4d29      	ldr	r5, [pc, #164]	; (8006504 <MX_GPIO_Init+0xc4>)
  HAL_GPIO_WritePin(CS_SD_GPIO_Port, CS_SD_Pin, GPIO_PIN_SET);
 800645e:	4638      	mov	r0, r7
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006460:	9201      	str	r2, [sp, #4]
 8006462:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006464:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006466:	f042 0204 	orr.w	r2, r2, #4
 800646a:	631a      	str	r2, [r3, #48]	; 0x30
 800646c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800646e:	f002 0204 	and.w	r2, r2, #4
 8006472:	9202      	str	r2, [sp, #8]
 8006474:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006476:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006478:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800647c:	631a      	str	r2, [r3, #48]	; 0x30
 800647e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006480:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8006484:	9203      	str	r2, [sp, #12]
 8006486:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006488:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800648a:	f042 0201 	orr.w	r2, r2, #1
 800648e:	631a      	str	r2, [r3, #48]	; 0x30
 8006490:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006492:	f002 0201 	and.w	r2, r2, #1
 8006496:	9204      	str	r2, [sp, #16]
 8006498:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800649a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800649c:	f042 0208 	orr.w	r2, r2, #8
 80064a0:	631a      	str	r2, [r3, #48]	; 0x30
 80064a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064a4:	f002 0208 	and.w	r2, r2, #8
 80064a8:	9205      	str	r2, [sp, #20]
 80064aa:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80064ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064ae:	f042 0202 	orr.w	r2, r2, #2
 80064b2:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(CS_SD_GPIO_Port, CS_SD_Pin, GPIO_PIN_SET);
 80064b4:	2201      	movs	r2, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80064b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064b8:	f003 0302 	and.w	r3, r3, #2
 80064bc:	9306      	str	r3, [sp, #24]
 80064be:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(CS_SD_GPIO_Port, CS_SD_Pin, GPIO_PIN_SET);
 80064c0:	f7fa fb50 	bl	8000b64 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, ULED1_Pin|ULED2_Pin, GPIO_PIN_SET);
 80064c4:	2201      	movs	r2, #1
 80064c6:	4628      	mov	r0, r5
 80064c8:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80064cc:	f7fa fb4a 	bl	8000b64 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = CS_SD_Pin;
 80064d0:	2308      	movs	r3, #8
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(CS_SD_GPIO_Port, &GPIO_InitStruct);
 80064d2:	a907      	add	r1, sp, #28
 80064d4:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = CS_SD_Pin;
 80064d6:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80064d8:	2303      	movs	r3, #3
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80064da:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80064dc:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064de:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(CS_SD_GPIO_Port, &GPIO_InitStruct);
 80064e0:	f7fa fa56 	bl	8000990 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ULED1_Pin|ULED2_Pin;
 80064e4:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80064e8:	a907      	add	r1, sp, #28
 80064ea:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80064ec:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pin = ULED1_Pin|ULED2_Pin;
 80064ee:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064f0:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80064f2:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80064f4:	f7fa fa4c 	bl	8000990 <HAL_GPIO_Init>

}
 80064f8:	b00d      	add	sp, #52	; 0x34
 80064fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064fc:	40023800 	.word	0x40023800
 8006500:	40021000 	.word	0x40021000
 8006504:	40020800 	.word	0x40020800

08006508 <Heartbeet_Task>:
/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/

TaskHandle_t Heartbeet_Task_Handle = NULL;
void Heartbeet_Task(void* pvParameters )
{
 8006508:	b538      	push	{r3, r4, r5, lr}
//		vTaskSuspend(NULL); // Task will suspend itself (NULL) until resumed externally (for example when UART ISR is called)
//		HAL_UART_Transmit_IT(&huart7, &(rx_byte), 1);
//		//		HAL_GPIO_TogglePin(ULED2_GPIO_Port, ULED2_Pin);

		vTaskDelay(xDelay);
		serial_println(FTDI, "And I am still alive!");
 800650a:	4d05      	ldr	r5, [pc, #20]	; (8006520 <Heartbeet_Task+0x18>)
 800650c:	4c05      	ldr	r4, [pc, #20]	; (8006524 <Heartbeet_Task+0x1c>)
		vTaskDelay(xDelay);
 800650e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006512:	f7fd ff05 	bl	8004320 <vTaskDelay>
		serial_println(FTDI, "And I am still alive!");
 8006516:	4629      	mov	r1, r5
 8006518:	4620      	mov	r0, r4
 800651a:	f000 fd1b 	bl	8006f54 <serial_println>
 800651e:	e7f6      	b.n	800650e <Heartbeet_Task+0x6>
 8006520:	0800757b 	.word	0x0800757b
 8006524:	20004350 	.word	0x20004350

08006528 <AES_SPI_disk_initialize>:

/* USER CODE BEGIN 4 */

DSTATUS AES_SPI_disk_initialize(BYTE pdrv)
{
	return SPIDS_STM32F4_SPI_disk_initialize(pdrv, &AES_SPIDS_SPI_Settings);
 8006528:	4901      	ldr	r1, [pc, #4]	; (8006530 <AES_SPI_disk_initialize+0x8>)
 800652a:	f7ff bc4b 	b.w	8005dc4 <SPIDS_STM32F4_SPI_disk_initialize>
 800652e:	bf00      	nop
 8006530:	200043b4 	.word	0x200043b4

08006534 <AES_SPI_disk_status>:
}

DSTATUS AES_SPI_disk_status(BYTE pdrv)
{
	return SPIDS_STM32F4_SPI_disk_status(pdrv, &AES_SPIDS_SPI_Settings);
 8006534:	4901      	ldr	r1, [pc, #4]	; (800653c <AES_SPI_disk_status+0x8>)
 8006536:	f7ff b859 	b.w	80055ec <SPIDS_STM32F4_SPI_disk_status>
 800653a:	bf00      	nop
 800653c:	200043b4 	.word	0x200043b4

08006540 <AES_SPI_disk_read>:
}

DRESULT AES_SPI_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8006540:	b513      	push	{r0, r1, r4, lr}
	return SPIDS_STM32F4_SPI_disk_read( pdrv, buff, sector, count, &AES_SPIDS_SPI_Settings);
 8006542:	4c03      	ldr	r4, [pc, #12]	; (8006550 <AES_SPI_disk_read+0x10>)
 8006544:	9400      	str	r4, [sp, #0]
 8006546:	f7ff f8d3 	bl	80056f0 <SPIDS_STM32F4_SPI_disk_read>
}
 800654a:	b002      	add	sp, #8
 800654c:	bd10      	pop	{r4, pc}
 800654e:	bf00      	nop
 8006550:	200043b4 	.word	0x200043b4

08006554 <AES_SPI_disk_write>:

#if _USE_WRITE == 1
DRESULT AES_SPI_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8006554:	b513      	push	{r0, r1, r4, lr}
	return SPIDS_STM32F4_SPI_disk_write( pdrv, buff, sector, count, &AES_SPIDS_SPI_Settings);
 8006556:	4c03      	ldr	r4, [pc, #12]	; (8006564 <AES_SPI_disk_write+0x10>)
 8006558:	9400      	str	r4, [sp, #0]
 800655a:	f7ff f971 	bl	8005840 <SPIDS_STM32F4_SPI_disk_write>
}
 800655e:	b002      	add	sp, #8
 8006560:	bd10      	pop	{r4, pc}
 8006562:	bf00      	nop
 8006564:	200043b4 	.word	0x200043b4

08006568 <AES_SPI_disk_ioctl>:
#endif /* _USE_WRITE == 1 */

#if _USE_IOCTL == 1
DRESULT AES_SPI_disk_ioctl(BYTE pdrv, BYTE cmd, void* buff)
{
	return SPIDS_STM32F4_SPI_disk_ioctl( pdrv, cmd, buff, &AES_SPIDS_SPI_Settings);
 8006568:	4b01      	ldr	r3, [pc, #4]	; (8006570 <AES_SPI_disk_ioctl+0x8>)
 800656a:	f7ff bad5 	b.w	8005b18 <SPIDS_STM32F4_SPI_disk_ioctl>
 800656e:	bf00      	nop
 8006570:	200043b4 	.word	0x200043b4

08006574 <SystemClock_Config>:
  __HAL_RCC_PWR_CLK_ENABLE();
 8006574:	4b2e      	ldr	r3, [pc, #184]	; (8006630 <SystemClock_Config+0xbc>)
 8006576:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006578:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
{
 800657c:	b530      	push	{r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 800657e:	641a      	str	r2, [r3, #64]	; 0x40
{
 8006580:	b0b9      	sub	sp, #228	; 0xe4
  __HAL_RCC_PWR_CLK_ENABLE();
 8006582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006584:	2402      	movs	r4, #2
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006586:	a807      	add	r0, sp, #28
  __HAL_RCC_PWR_CLK_ENABLE();
 8006588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800658c:	9300      	str	r3, [sp, #0]
 800658e:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006590:	4b28      	ldr	r3, [pc, #160]	; (8006634 <SystemClock_Config+0xc0>)
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8006598:	601a      	str	r2, [r3, #0]
 800659a:	681b      	ldr	r3, [r3, #0]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800659c:	940d      	str	r4, [sp, #52]	; 0x34
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800659e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80065a2:	9411      	str	r4, [sp, #68]	; 0x44
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80065a4:	9301      	str	r3, [sp, #4]
 80065a6:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80065a8:	2301      	movs	r3, #1
 80065aa:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80065ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80065b0:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80065b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80065b6:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 12;
 80065b8:	230c      	movs	r3, #12
 80065ba:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80065bc:	23d8      	movs	r3, #216	; 0xd8
 80065be:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80065c0:	2309      	movs	r3, #9
 80065c2:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80065c4:	f7fb f852 	bl	800166c <HAL_RCC_OscConfig>
 80065c8:	b100      	cbz	r0, 80065cc <SystemClock_Config+0x58>
 80065ca:	e7fe      	b.n	80065ca <SystemClock_Config+0x56>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80065cc:	f7fb f816 	bl	80015fc <HAL_PWREx_EnableOverDrive>
 80065d0:	b100      	cbz	r0, 80065d4 <SystemClock_Config+0x60>
 80065d2:	e7fe      	b.n	80065d2 <SystemClock_Config+0x5e>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80065d4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80065d8:	250f      	movs	r5, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80065da:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80065dc:	2107      	movs	r1, #7
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80065de:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80065e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80065e4:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80065e6:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80065e8:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80065ea:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80065ec:	f7fb fa00 	bl	80019f0 <HAL_RCC_ClockConfig>
 80065f0:	b100      	cbz	r0, 80065f4 <SystemClock_Config+0x80>
 80065f2:	e7fe      	b.n	80065f2 <SystemClock_Config+0x7e>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7|RCC_PERIPHCLK_CLK48;
 80065f4:	4b10      	ldr	r3, [pc, #64]	; (8006638 <SystemClock_Config+0xc4>)
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 80065f6:	902b      	str	r0, [sp, #172]	; 0xac
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80065f8:	9033      	str	r0, [sp, #204]	; 0xcc
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80065fa:	a814      	add	r0, sp, #80	; 0x50
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7|RCC_PERIPHCLK_CLK48;
 80065fc:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80065fe:	f7fb fb31 	bl	8001c64 <HAL_RCCEx_PeriphCLKConfig>
 8006602:	4604      	mov	r4, r0
 8006604:	b100      	cbz	r0, 8006608 <SystemClock_Config+0x94>
 8006606:	e7fe      	b.n	8006606 <SystemClock_Config+0x92>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8006608:	f7fb fa90 	bl	8001b2c <HAL_RCC_GetHCLKFreq>
 800660c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006610:	fbb0 f0f3 	udiv	r0, r0, r3
 8006614:	f7fa f822 	bl	800065c <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8006618:	2004      	movs	r0, #4
 800661a:	f7fa f835 	bl	8000688 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 800661e:	4622      	mov	r2, r4
 8006620:	4629      	mov	r1, r5
 8006622:	f04f 30ff 	mov.w	r0, #4294967295
 8006626:	f7f9 ffd5 	bl	80005d4 <HAL_NVIC_SetPriority>
}
 800662a:	b039      	add	sp, #228	; 0xe4
 800662c:	bd30      	pop	{r4, r5, pc}
 800662e:	bf00      	nop
 8006630:	40023800 	.word	0x40023800
 8006634:	40007000 	.word	0x40007000
 8006638:	00201000 	.word	0x00201000

0800663c <main>:
	SPIDS_STM32F4_SPI_Settings_Initialize(&AES_SPIDS_SPI_Settings);		// Set the SPI settings to default for safety
 800663c:	4c1e      	ldr	r4, [pc, #120]	; (80066b8 <main+0x7c>)
	AES_SPIDS_SPI_Settings.hspi = &hspi1;								// Use hspi1
 800663e:	4d1f      	ldr	r5, [pc, #124]	; (80066bc <main+0x80>)
{
 8006640:	b507      	push	{r0, r1, r2, lr}
	SPIDS_STM32F4_SPI_Settings_Initialize(&AES_SPIDS_SPI_Settings);		// Set the SPI settings to default for safety
 8006642:	4620      	mov	r0, r4
 8006644:	f7fe ff3a 	bl	80054bc <SPIDS_STM32F4_SPI_Settings_Initialize>
	AES_SPIDS_SPI_Settings.CS_GPIO_Port = CS_SD_GPIO_Port;				// Use the sd_cs port
 8006648:	4b1d      	ldr	r3, [pc, #116]	; (80066c0 <main+0x84>)
	AES_SPIDS_SPI_Driver.disk_initialize = AES_SPI_disk_initialize;                     							/*!< Initialize Disk Drive                     */
 800664a:	481e      	ldr	r0, [pc, #120]	; (80066c4 <main+0x88>)
	AES_SPIDS_SPI_Settings.CS_GPIO_Port = CS_SD_GPIO_Port;				// Use the sd_cs port
 800664c:	6063      	str	r3, [r4, #4]
	AES_SPIDS_SPI_Settings.CS_Pin = CS_SD_Pin;							// Use the sd_cs pin
 800664e:	2308      	movs	r3, #8
		SPIDS_LinkDriver(&AES_SPIDS_SPI_Driver, AES_SDPath); // The first drive linked in should be at path "0:/\0"
 8006650:	491d      	ldr	r1, [pc, #116]	; (80066c8 <main+0x8c>)
	AES_SPIDS_SPI_Settings.CS_Pin = CS_SD_Pin;							// Use the sd_cs pin
 8006652:	8123      	strh	r3, [r4, #8]
	AES_SPIDS_SPI_Settings.max_freq = 20000000;							// Only 20 MHz
 8006654:	4b1d      	ldr	r3, [pc, #116]	; (80066cc <main+0x90>)
	AES_SPIDS_SPI_Settings.hspi = &hspi1;								// Use hspi1
 8006656:	6025      	str	r5, [r4, #0]
	AES_SPIDS_SPI_Settings.max_freq = 20000000;							// Only 20 MHz
 8006658:	60e3      	str	r3, [r4, #12]
	AES_SPIDS_SPI_Driver.disk_initialize = AES_SPI_disk_initialize;                     							/*!< Initialize Disk Drive                     */
 800665a:	4b1d      	ldr	r3, [pc, #116]	; (80066d0 <main+0x94>)
 800665c:	6003      	str	r3, [r0, #0]
	AES_SPIDS_SPI_Driver.disk_status = AES_SPI_disk_status;
 800665e:	4b1d      	ldr	r3, [pc, #116]	; (80066d4 <main+0x98>)
 8006660:	6043      	str	r3, [r0, #4]
	AES_SPIDS_SPI_Driver.disk_read = AES_SPI_disk_read;
 8006662:	4b1d      	ldr	r3, [pc, #116]	; (80066d8 <main+0x9c>)
 8006664:	6083      	str	r3, [r0, #8]
		AES_SPIDS_SPI_Driver.disk_write = AES_SPI_disk_write;
 8006666:	4b1d      	ldr	r3, [pc, #116]	; (80066dc <main+0xa0>)
 8006668:	60c3      	str	r3, [r0, #12]
		AES_SPIDS_SPI_Driver.disk_ioctl = AES_SPI_disk_ioctl;
 800666a:	4b1d      	ldr	r3, [pc, #116]	; (80066e0 <main+0xa4>)
 800666c:	6103      	str	r3, [r0, #16]
		SPIDS_LinkDriver(&AES_SPIDS_SPI_Driver, AES_SDPath); // The first drive linked in should be at path "0:/\0"
 800666e:	f7fe ff21 	bl	80054b4 <SPIDS_LinkDriver>
  HAL_Init();
 8006672:	f7f9 ff6d 	bl	8000550 <HAL_Init>
  SystemClock_Config();
 8006676:	f7ff ff7d 	bl	8006574 <SystemClock_Config>
  MX_GPIO_Init();
 800667a:	f7ff fee1 	bl	8006440 <MX_GPIO_Init>
  MX_UART7_Init();
 800667e:	f000 f99b 	bl	80069b8 <MX_UART7_Init>
  MX_SPI1_Init();
 8006682:	f000 f845 	bl	8006710 <MX_SPI1_Init>
  HAL_SPI_MspInit( &hspi1 );	// Configure SPI hardware
 8006686:	4628      	mov	r0, r5
 8006688:	f000 f86e 	bl	8006768 <HAL_SPI_MspInit>
  MX_USB_DEVICE_Init();
 800668c:	f000 f9e4 	bl	8006a58 <MX_USB_DEVICE_Init>
  xTaskCreate(Heartbeet_Task,
 8006690:	4b14      	ldr	r3, [pc, #80]	; (80066e4 <main+0xa8>)
 8006692:	2280      	movs	r2, #128	; 0x80
 8006694:	4914      	ldr	r1, [pc, #80]	; (80066e8 <main+0xac>)
 8006696:	9301      	str	r3, [sp, #4]
 8006698:	2303      	movs	r3, #3
 800669a:	4814      	ldr	r0, [pc, #80]	; (80066ec <main+0xb0>)
 800669c:	9300      	str	r3, [sp, #0]
 800669e:	2300      	movs	r3, #0
 80066a0:	f7fd fc18 	bl	8003ed4 <xTaskCreate>
  serial_initialize(FTDI, &huart7);
 80066a4:	4912      	ldr	r1, [pc, #72]	; (80066f0 <main+0xb4>)
 80066a6:	4813      	ldr	r0, [pc, #76]	; (80066f4 <main+0xb8>)
 80066a8:	f000 fd1e 	bl	80070e8 <serial_initialize>
  MX_FREERTOS_Init();
 80066ac:	f7ff feb4 	bl	8006418 <MX_FREERTOS_Init>
  osKernelStart();
 80066b0:	f7fd f90a 	bl	80038c8 <osKernelStart>
 80066b4:	e7fe      	b.n	80066b4 <main+0x78>
 80066b6:	bf00      	nop
 80066b8:	200043b4 	.word	0x200043b4
 80066bc:	20004b44 	.word	0x20004b44
 80066c0:	40021000 	.word	0x40021000
 80066c4:	200044e8 	.word	0x200044e8
 80066c8:	2000434c 	.word	0x2000434c
 80066cc:	01312d00 	.word	0x01312d00
 80066d0:	08006529 	.word	0x08006529
 80066d4:	08006535 	.word	0x08006535
 80066d8:	08006541 	.word	0x08006541
 80066dc:	08006555 	.word	0x08006555
 80066e0:	08006569 	.word	0x08006569
 80066e4:	20003f00 	.word	0x20003f00
 80066e8:	08007591 	.word	0x08007591
 80066ec:	08006509 	.word	0x08006509
 80066f0:	20004be8 	.word	0x20004be8
 80066f4:	20004350 	.word	0x20004350

080066f8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 80066f8:	6802      	ldr	r2, [r0, #0]
 80066fa:	4b03      	ldr	r3, [pc, #12]	; (8006708 <HAL_TIM_PeriodElapsedCallback+0x10>)
 80066fc:	429a      	cmp	r2, r3
 80066fe:	d101      	bne.n	8006704 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8006700:	f7f9 bf32 	b.w	8000568 <HAL_IncTick>
 8006704:	4770      	bx	lr
 8006706:	bf00      	nop
 8006708:	40001400 	.word	0x40001400

0800670c <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 800670c:	e7fe      	b.n	800670c <_Error_Handler>
	...

08006710 <MX_SPI1_Init>:

/* SPI1 init function */
void MX_SPI1_Init(void)
{

  hspi1.Instance = SPI1;
 8006710:	4812      	ldr	r0, [pc, #72]	; (800675c <MX_SPI1_Init+0x4c>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8006712:	f44f 62e0 	mov.w	r2, #1792	; 0x700
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8006716:	4912      	ldr	r1, [pc, #72]	; (8006760 <MX_SPI1_Init+0x50>)
{
 8006718:	b508      	push	{r3, lr}
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800671a:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800671c:	2202      	movs	r2, #2
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800671e:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8006722:	6102      	str	r2, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8006724:	2201      	movs	r2, #1
 8006726:	6142      	str	r2, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8006728:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800672c:	e880 000a 	stmia.w	r0, {r1, r3}
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8006730:	6182      	str	r2, [r0, #24]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8006732:	2300      	movs	r3, #0
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
 8006734:	2207      	movs	r2, #7
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8006736:	6083      	str	r3, [r0, #8]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006738:	61c3      	str	r3, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800673a:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800673c:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800673e:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8006740:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8006742:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8006744:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8006746:	f7fb fd9f 	bl	8002288 <HAL_SPI_Init>
 800674a:	b128      	cbz	r0, 8006758 <MX_SPI1_Init+0x48>
  {
    _Error_Handler(__FILE__, __LINE__);
 800674c:	2151      	movs	r1, #81	; 0x51
 800674e:	4805      	ldr	r0, [pc, #20]	; (8006764 <MX_SPI1_Init+0x54>)
  }

}
 8006750:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8006754:	f7ff bfda 	b.w	800670c <_Error_Handler>
 8006758:	bd08      	pop	{r3, pc}
 800675a:	bf00      	nop
 800675c:	20004b44 	.word	0x20004b44
 8006760:	40013000 	.word	0x40013000
 8006764:	0800759b 	.word	0x0800759b

08006768 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(spiHandle->Instance==SPI1)
 8006768:	6802      	ldr	r2, [r0, #0]
 800676a:	4b1a      	ldr	r3, [pc, #104]	; (80067d4 <HAL_SPI_MspInit+0x6c>)
 800676c:	429a      	cmp	r2, r3
{
 800676e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006770:	b087      	sub	sp, #28
  if(spiHandle->Instance==SPI1)
 8006772:	d12c      	bne.n	80067ce <HAL_SPI_MspInit+0x66>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006774:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006778:	2702      	movs	r7, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800677a:	2600      	movs	r6, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800677c:	2503      	movs	r5, #3
    __HAL_RCC_SPI1_CLK_ENABLE();
 800677e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006780:	2405      	movs	r4, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006782:	a901      	add	r1, sp, #4
 8006784:	4814      	ldr	r0, [pc, #80]	; (80067d8 <HAL_SPI_MspInit+0x70>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006786:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800678a:	645a      	str	r2, [r3, #68]	; 0x44
 800678c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800678e:	9702      	str	r7, [sp, #8]
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006790:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006794:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006796:	9504      	str	r5, [sp, #16]
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006798:	9300      	str	r3, [sp, #0]
 800679a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800679c:	2340      	movs	r3, #64	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800679e:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80067a0:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80067a2:	f7fa f8f5 	bl	8000990 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80067a6:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80067a8:	a901      	add	r1, sp, #4
 80067aa:	480c      	ldr	r0, [pc, #48]	; (80067dc <HAL_SPI_MspInit+0x74>)
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80067ac:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80067ae:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067b0:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80067b2:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80067b4:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80067b6:	f7fa f8eb 	bl	8000990 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80067ba:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80067bc:	a901      	add	r1, sp, #4
 80067be:	4808      	ldr	r0, [pc, #32]	; (80067e0 <HAL_SPI_MspInit+0x78>)
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80067c0:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80067c2:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067c4:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80067c6:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80067c8:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80067ca:	f7fa f8e1 	bl	8000990 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80067ce:	b007      	add	sp, #28
 80067d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067d2:	bf00      	nop
 80067d4:	40013000 	.word	0x40013000
 80067d8:	40020000 	.word	0x40020000
 80067dc:	40020c00 	.word	0x40020c00
 80067e0:	40020400 	.word	0x40020400

080067e4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80067e4:	4b31      	ldr	r3, [pc, #196]	; (80068ac <HAL_MspInit+0xc8>)
{
 80067e6:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 80067e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  __HAL_RCC_SYSCFG_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80067ea:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 80067ec:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80067f0:	641a      	str	r2, [r3, #64]	; 0x40
 80067f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067f4:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80067f8:	9200      	str	r2, [sp, #0]
 80067fa:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80067fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006802:	645a      	str	r2, [r3, #68]	; 0x44
 8006804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006806:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800680a:	9301      	str	r3, [sp, #4]
 800680c:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800680e:	f7f9 fecf 	bl	80005b0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8006812:	2200      	movs	r2, #0
 8006814:	f06f 000b 	mvn.w	r0, #11
 8006818:	4611      	mov	r1, r2
 800681a:	f7f9 fedb 	bl	80005d4 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800681e:	2200      	movs	r2, #0
 8006820:	f06f 000a 	mvn.w	r0, #10
 8006824:	4611      	mov	r1, r2
 8006826:	f7f9 fed5 	bl	80005d4 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800682a:	2200      	movs	r2, #0
 800682c:	f06f 0009 	mvn.w	r0, #9
 8006830:	4611      	mov	r1, r2
 8006832:	f7f9 fecf 	bl	80005d4 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8006836:	2200      	movs	r2, #0
 8006838:	f06f 0004 	mvn.w	r0, #4
 800683c:	4611      	mov	r1, r2
 800683e:	f7f9 fec9 	bl	80005d4 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8006842:	2200      	movs	r2, #0
 8006844:	f06f 0003 	mvn.w	r0, #3
 8006848:	4611      	mov	r1, r2
 800684a:	f7f9 fec3 	bl	80005d4 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800684e:	2200      	movs	r2, #0
 8006850:	210f      	movs	r1, #15
 8006852:	f06f 0001 	mvn.w	r0, #1
 8006856:	f7f9 febd 	bl	80005d4 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 800685a:	2200      	movs	r2, #0
 800685c:	210f      	movs	r1, #15
 800685e:	f04f 30ff 	mov.w	r0, #4294967295
 8006862:	f7f9 feb7 	bl	80005d4 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 5, 0);
 8006866:	2200      	movs	r2, #0
 8006868:	2105      	movs	r1, #5
 800686a:	2001      	movs	r0, #1
 800686c:	f7f9 feb2 	bl	80005d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8006870:	2001      	movs	r0, #1
 8006872:	f7f9 fee7 	bl	8000644 <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 5, 0);
 8006876:	2200      	movs	r2, #0
 8006878:	2105      	movs	r1, #5
 800687a:	2004      	movs	r0, #4
 800687c:	f7f9 feaa 	bl	80005d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8006880:	2004      	movs	r0, #4
 8006882:	f7f9 fedf 	bl	8000644 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8006886:	2105      	movs	r1, #5
 8006888:	2200      	movs	r2, #0
 800688a:	4608      	mov	r0, r1
 800688c:	f7f9 fea2 	bl	80005d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8006890:	2005      	movs	r0, #5
 8006892:	f7f9 fed7 	bl	8000644 <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 5, 0);
 8006896:	2200      	movs	r2, #0
 8006898:	2105      	movs	r1, #5
 800689a:	2051      	movs	r0, #81	; 0x51
 800689c:	f7f9 fe9a 	bl	80005d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 80068a0:	2051      	movs	r0, #81	; 0x51
 80068a2:	f7f9 fecf 	bl	8000644 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80068a6:	b003      	add	sp, #12
 80068a8:	f85d fb04 	ldr.w	pc, [sp], #4
 80068ac:	40023800 	.word	0x40023800

080068b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80068b0:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0); 
 80068b2:	4601      	mov	r1, r0
{
 80068b4:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0); 
 80068b6:	2200      	movs	r2, #0
 80068b8:	2037      	movs	r0, #55	; 0x37
 80068ba:	f7f9 fe8b 	bl	80005d4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn); 
 80068be:	2037      	movs	r0, #55	; 0x37
 80068c0:	f7f9 fec0 	bl	8000644 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 80068c4:	4b14      	ldr	r3, [pc, #80]	; (8006918 <HAL_InitTick+0x68>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80068c6:	a901      	add	r1, sp, #4
 80068c8:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM7_CLK_ENABLE();
 80068ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 80068cc:	4c13      	ldr	r4, [pc, #76]	; (800691c <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM7_CLK_ENABLE();
 80068ce:	f042 0220 	orr.w	r2, r2, #32
 80068d2:	641a      	str	r2, [r3, #64]	; 0x40
 80068d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068d6:	f003 0320 	and.w	r3, r3, #32
 80068da:	9302      	str	r3, [sp, #8]
 80068dc:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80068de:	f7fb f9a3 	bl	8001c28 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80068e2:	f7fb f929 	bl	8001b38 <HAL_RCC_GetPCLK1Freq>
  htim7.Instance = TIM7;
 80068e6:	4b0e      	ldr	r3, [pc, #56]	; (8006920 <HAL_InitTick+0x70>)
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80068e8:	0040      	lsls	r0, r0, #1
  htim7.Instance = TIM7;
 80068ea:	6023      	str	r3, [r4, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000 / 1000) - 1;
 80068ec:	f240 33e7 	movw	r3, #999	; 0x3e7
 80068f0:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80068f2:	4b0c      	ldr	r3, [pc, #48]	; (8006924 <HAL_InitTick+0x74>)
 80068f4:	fbb0 f0f3 	udiv	r0, r0, r3
 80068f8:	3801      	subs	r0, #1
  htim7.Init.Prescaler = uwPrescalerValue;
  htim7.Init.ClockDivision = 0;
 80068fa:	2300      	movs	r3, #0
  htim7.Init.Prescaler = uwPrescalerValue;
 80068fc:	6060      	str	r0, [r4, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 80068fe:	4620      	mov	r0, r4
  htim7.Init.ClockDivision = 0;
 8006900:	6123      	str	r3, [r4, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006902:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8006904:	f7fc f802 	bl	800290c <HAL_TIM_Base_Init>
 8006908:	b920      	cbnz	r0, 8006914 <HAL_InitTick+0x64>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 800690a:	4620      	mov	r0, r4
 800690c:	f7fb fed7 	bl	80026be <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8006910:	b008      	add	sp, #32
 8006912:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 8006914:	2001      	movs	r0, #1
 8006916:	e7fb      	b.n	8006910 <HAL_InitTick+0x60>
 8006918:	40023800 	.word	0x40023800
 800691c:	20004ba8 	.word	0x20004ba8
 8006920:	40001400 	.word	0x40001400
 8006924:	000f4240 	.word	0x000f4240

08006928 <NMI_Handler>:
 8006928:	4770      	bx	lr

0800692a <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800692a:	e7fe      	b.n	800692a <HardFault_Handler>

0800692c <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 800692c:	e7fe      	b.n	800692c <MemManage_Handler>

0800692e <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800692e:	e7fe      	b.n	800692e <BusFault_Handler>

08006930 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8006930:	e7fe      	b.n	8006930 <UsageFault_Handler>

08006932 <DebugMon_Handler>:
 8006932:	4770      	bx	lr

08006934 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 8006934:	f7fc bfed 	b.w	8003912 <osSystickHandler>

08006938 <PVD_IRQHandler>:
void PVD_IRQHandler(void)
{
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8006938:	f7fa be52 	b.w	80015e0 <HAL_PWR_PVD_IRQHandler>

0800693c <FLASH_IRQHandler>:
void FLASH_IRQHandler(void)
{
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 800693c:	f7f9 bf8a 	b.w	8000854 <HAL_FLASH_IRQHandler>

08006940 <RCC_IRQHandler>:
 8006940:	4770      	bx	lr
	...

08006944 <TIM7_IRQHandler>:
void TIM7_IRQHandler(void)
{
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8006944:	4801      	ldr	r0, [pc, #4]	; (800694c <TIM7_IRQHandler+0x8>)
 8006946:	f7fb bec9 	b.w	80026dc <HAL_TIM_IRQHandler>
 800694a:	bf00      	nop
 800694c:	20004ba8 	.word	0x20004ba8

08006950 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8006950:	4801      	ldr	r0, [pc, #4]	; (8006958 <OTG_FS_IRQHandler+0x8>)
 8006952:	f7fa b995 	b.w	8000c80 <HAL_PCD_IRQHandler>
 8006956:	bf00      	nop
 8006958:	20004ef4 	.word	0x20004ef4

0800695c <FPU_IRQHandler>:

/**
* @brief This function handles FPU global interrupt.
*/
void FPU_IRQHandler(void)
{
 800695c:	4770      	bx	lr
	...

08006960 <UART7_IRQHandler>:
void UART7_IRQHandler(void)
{
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8006960:	4801      	ldr	r0, [pc, #4]	; (8006968 <UART7_IRQHandler+0x8>)
 8006962:	f7fc b8cb 	b.w	8002afc <HAL_UART_IRQHandler>
 8006966:	bf00      	nop
 8006968:	20004be8 	.word	0x20004be8

0800696c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800696c:	490f      	ldr	r1, [pc, #60]	; (80069ac <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800696e:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006970:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8006974:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006978:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 800697c:	4b0c      	ldr	r3, [pc, #48]	; (80069b0 <SystemInit+0x44>)
 800697e:	681a      	ldr	r2, [r3, #0]
 8006980:	f042 0201 	orr.w	r2, r2, #1
 8006984:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8006986:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800698e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006992:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8006994:	4a07      	ldr	r2, [pc, #28]	; (80069b4 <SystemInit+0x48>)
 8006996:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800699e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80069a0:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80069a2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80069a6:	608b      	str	r3, [r1, #8]
 80069a8:	4770      	bx	lr
 80069aa:	bf00      	nop
 80069ac:	e000ed00 	.word	0xe000ed00
 80069b0:	40023800 	.word	0x40023800
 80069b4:	24003010 	.word	0x24003010

080069b8 <MX_UART7_Init>:

UART_HandleTypeDef huart7;

/* UART7 init function */
void MX_UART7_Init(void)
{
 80069b8:	b508      	push	{r3, lr}

  huart7.Instance = UART7;
 80069ba:	480d      	ldr	r0, [pc, #52]	; (80069f0 <MX_UART7_Init+0x38>)
  huart7.Init.BaudRate = 9600;
 80069bc:	f44f 5e16 	mov.w	lr, #9600	; 0x2580
 80069c0:	4b0c      	ldr	r3, [pc, #48]	; (80069f4 <MX_UART7_Init+0x3c>)
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
  huart7.Init.StopBits = UART_STOPBITS_1;
  huart7.Init.Parity = UART_PARITY_NONE;
  huart7.Init.Mode = UART_MODE_TX_RX;
 80069c2:	220c      	movs	r2, #12
  huart7.Init.BaudRate = 9600;
 80069c4:	e880 4008 	stmia.w	r0, {r3, lr}
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80069c8:	2300      	movs	r3, #0
  huart7.Init.Mode = UART_MODE_TX_RX;
 80069ca:	6142      	str	r2, [r0, #20]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80069cc:	6083      	str	r3, [r0, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80069ce:	60c3      	str	r3, [r0, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80069d0:	6103      	str	r3, [r0, #16]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80069d2:	6183      	str	r3, [r0, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80069d4:	61c3      	str	r3, [r0, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80069d6:	6203      	str	r3, [r0, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80069d8:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80069da:	f7fc fb06 	bl	8002fea <HAL_UART_Init>
 80069de:	b128      	cbz	r0, 80069ec <MX_UART7_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 80069e0:	214d      	movs	r1, #77	; 0x4d
 80069e2:	4805      	ldr	r0, [pc, #20]	; (80069f8 <MX_UART7_Init+0x40>)
  }

}
 80069e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 80069e8:	f7ff be90 	b.w	800670c <_Error_Handler>
 80069ec:	bd08      	pop	{r3, pc}
 80069ee:	bf00      	nop
 80069f0:	20004be8 	.word	0x20004be8
 80069f4:	40007800 	.word	0x40007800
 80069f8:	080075c0 	.word	0x080075c0

080069fc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==UART7)
 80069fc:	6802      	ldr	r2, [r0, #0]
 80069fe:	4b14      	ldr	r3, [pc, #80]	; (8006a50 <HAL_UART_MspInit+0x54>)
 8006a00:	429a      	cmp	r2, r3
{
 8006a02:	b510      	push	{r4, lr}
 8006a04:	b086      	sub	sp, #24
  if(uartHandle->Instance==UART7)
 8006a06:	d121      	bne.n	8006a4c <HAL_UART_MspInit+0x50>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8006a08:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a0c:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006a0e:	a901      	add	r1, sp, #4
 8006a10:	4810      	ldr	r0, [pc, #64]	; (8006a54 <HAL_UART_MspInit+0x58>)
    __HAL_RCC_UART7_CLK_ENABLE();
 8006a12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a14:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006a18:	641a      	str	r2, [r3, #64]	; 0x40
 8006a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a1c:	9403      	str	r4, [sp, #12]
    __HAL_RCC_UART7_CLK_ENABLE();
 8006a1e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006a22:	9300      	str	r3, [sp, #0]
 8006a24:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8006a26:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8006a2a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a2c:	2302      	movs	r3, #2
 8006a2e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006a30:	2303      	movs	r3, #3
 8006a32:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8006a34:	2308      	movs	r3, #8
 8006a36:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006a38:	f7f9 ffaa 	bl	8000990 <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 8006a3c:	2052      	movs	r0, #82	; 0x52
 8006a3e:	4622      	mov	r2, r4
 8006a40:	2105      	movs	r1, #5
 8006a42:	f7f9 fdc7 	bl	80005d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8006a46:	2052      	movs	r0, #82	; 0x52
 8006a48:	f7f9 fdfc 	bl	8000644 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }
}
 8006a4c:	b006      	add	sp, #24
 8006a4e:	bd10      	pop	{r4, pc}
 8006a50:	40007800 	.word	0x40007800
 8006a54:	40021000 	.word	0x40021000

08006a58 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006a58:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 8006a5a:	4c09      	ldr	r4, [pc, #36]	; (8006a80 <MX_USB_DEVICE_Init+0x28>)
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	4909      	ldr	r1, [pc, #36]	; (8006a84 <MX_USB_DEVICE_Init+0x2c>)
 8006a60:	4620      	mov	r0, r4
 8006a62:	f7fd fd09 	bl	8004478 <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC);
 8006a66:	4908      	ldr	r1, [pc, #32]	; (8006a88 <MX_USB_DEVICE_Init+0x30>)
 8006a68:	4620      	mov	r0, r4
 8006a6a:	f7fd fd1a 	bl	80044a2 <USBD_RegisterClass>

  USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS);
 8006a6e:	4620      	mov	r0, r4
 8006a70:	4906      	ldr	r1, [pc, #24]	; (8006a8c <MX_USB_DEVICE_Init+0x34>)
 8006a72:	f7fe f991 	bl	8004d98 <USBD_MSC_RegisterStorage>

  USBD_Start(&hUsbDeviceFS);
 8006a76:	4620      	mov	r0, r4

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006a78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_Start(&hUsbDeviceFS);
 8006a7c:	f7fd bd18 	b.w	80044b0 <USBD_Start>
 8006a80:	20004c58 	.word	0x20004c58
 8006a84:	200000b4 	.word	0x200000b4
 8006a88:	20000008 	.word	0x20000008
 8006a8c:	200000f8 	.word	0x200000f8

08006a90 <HAL_PCD_MspInit>:
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB_OTG_FS)
 8006a90:	6803      	ldr	r3, [r0, #0]
 8006a92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 8006a96:	b510      	push	{r4, lr}
 8006a98:	b088      	sub	sp, #32
  if(pcdHandle->Instance==USB_OTG_FS)
 8006a9a:	d129      	bne.n	8006af0 <HAL_PCD_MspInit+0x60>
  
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006a9c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006aa0:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006aa2:	a903      	add	r1, sp, #12
 8006aa4:	4813      	ldr	r0, [pc, #76]	; (8006af4 <HAL_PCD_MspInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006aa6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006aa8:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006aaa:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006aac:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006aae:	2303      	movs	r3, #3
 8006ab0:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006ab2:	230a      	movs	r3, #10
 8006ab4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ab6:	f7f9 ff6b 	bl	8000990 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006aba:	4b0f      	ldr	r3, [pc, #60]	; (8006af8 <HAL_PCD_MspInit+0x68>)

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8006abc:	2043      	movs	r0, #67	; 0x43
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006abe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006ac0:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8006ac4:	6359      	str	r1, [r3, #52]	; 0x34
 8006ac6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006ac8:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8006acc:	9101      	str	r1, [sp, #4]
 8006ace:	9a01      	ldr	r2, [sp, #4]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8006ad0:	4622      	mov	r2, r4
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006ad2:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8006ad4:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8006ad8:	6459      	str	r1, [r3, #68]	; 0x44
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8006ada:	2105      	movs	r1, #5
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ade:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ae2:	9302      	str	r3, [sp, #8]
 8006ae4:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8006ae6:	f7f9 fd75 	bl	80005d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006aea:	2043      	movs	r0, #67	; 0x43
 8006aec:	f7f9 fdaa 	bl	8000644 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006af0:	b008      	add	sp, #32
 8006af2:	bd10      	pop	{r4, pc}
 8006af4:	40020000 	.word	0x40020000
 8006af8:	40023800 	.word	0x40023800

08006afc <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006afc:	f500 7170 	add.w	r1, r0, #960	; 0x3c0
 8006b00:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 8006b04:	f7fd bceb 	b.w	80044de <USBD_LL_SetupStage>

08006b08 <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006b08:	231c      	movs	r3, #28
 8006b0a:	fb03 0301 	mla	r3, r3, r1, r0
 8006b0e:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 8006b12:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006b16:	f7fd bd0f 	b.w	8004538 <USBD_LL_DataOutStage>

08006b1a <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006b1a:	231c      	movs	r3, #28
 8006b1c:	fb03 0301 	mla	r3, r3, r1, r0
 8006b20:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 8006b24:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006b26:	f7fd bd3f 	b.w	80045a8 <USBD_LL_DataInStage>

08006b2a <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006b2a:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 8006b2e:	f7fd bdcf 	b.w	80046d0 <USBD_LL_SOF>

08006b32 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  /* Set USB current speed. */
  switch (hpcd->Init.speed)
 8006b32:	68c1      	ldr	r1, [r0, #12]
	
  default:
    speed = USBD_SPEED_FULL;
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006b34:	3100      	adds	r1, #0
{ 
 8006b36:	b510      	push	{r4, lr}
 8006b38:	4604      	mov	r4, r0
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006b3a:	bf18      	it	ne
 8006b3c:	2101      	movne	r1, #1
 8006b3e:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 8006b42:	f7fd fdb3 	bl	80046ac <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006b46:	f8d4 03fc 	ldr.w	r0, [r4, #1020]	; 0x3fc
}
 8006b4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006b4e:	f7fd bd86 	b.w	800465e <USBD_LL_Reset>
	...

08006b54 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8006b54:	b510      	push	{r4, lr}
 8006b56:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006b58:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 8006b5c:	f7fd fda9 	bl	80046b2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006b60:	6822      	ldr	r2, [r4, #0]
 8006b62:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8006b66:	f043 0301 	orr.w	r3, r3, #1
 8006b6a:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006b6e:	6a23      	ldr	r3, [r4, #32]
 8006b70:	b123      	cbz	r3, 8006b7c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006b72:	4a03      	ldr	r2, [pc, #12]	; (8006b80 <HAL_PCD_SuspendCallback+0x2c>)
 8006b74:	6913      	ldr	r3, [r2, #16]
 8006b76:	f043 0306 	orr.w	r3, r3, #6
 8006b7a:	6113      	str	r3, [r2, #16]
 8006b7c:	bd10      	pop	{r4, pc}
 8006b7e:	bf00      	nop
 8006b80:	e000ed00 	.word	0xe000ed00

08006b84 <HAL_PCD_ResumeCallback>:
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006b84:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 8006b88:	f7fd bd9c 	b.w	80046c4 <USBD_LL_Resume>

08006b8c <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006b8c:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 8006b90:	f7fd bdac 	b.w	80046ec <USBD_LL_IsoOUTIncomplete>

08006b94 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006b94:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 8006b98:	f7fd bda6 	b.w	80046e8 <USBD_LL_IsoINIncomplete>

08006b9c <HAL_PCD_ConnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006b9c:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 8006ba0:	f7fd bda6 	b.w	80046f0 <USBD_LL_DevConnected>

08006ba4 <HAL_PCD_DisconnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006ba4:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 8006ba8:	f7fd bda4 	b.w	80046f4 <USBD_LL_DevDisconnected>

08006bac <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006bac:	b508      	push	{r3, lr}
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006bae:	7802      	ldrb	r2, [r0, #0]
 8006bb0:	bb52      	cbnz	r2, 8006c08 <USBD_LL_Init+0x5c>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006bb2:	4b16      	ldr	r3, [pc, #88]	; (8006c0c <USBD_LL_Init+0x60>)
  pdev->pData = &hpcd_USB_OTG_FS;
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8006bb4:	2106      	movs	r1, #6
  hpcd_USB_OTG_FS.pData = pdev;
 8006bb6:	f8c3 03fc 	str.w	r0, [r3, #1020]	; 0x3fc
  pdev->pData = &hpcd_USB_OTG_FS;
 8006bba:	f8c0 3298 	str.w	r3, [r0, #664]	; 0x298
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8006bbe:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006bc2:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 8006bc4:	615a      	str	r2, [r3, #20]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006bc6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006bc8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006bca:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006bcc:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006bce:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8006bd0:	e883 0003 	stmia.w	r3, {r0, r1}
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006bd4:	2102      	movs	r1, #2
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006bd6:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006bd8:	60d9      	str	r1, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006bda:	6199      	str	r1, [r3, #24]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006bdc:	f7f9 ffc7 	bl	8000b6e <HAL_PCD_Init>
 8006be0:	b120      	cbz	r0, 8006bec <USBD_LL_Init+0x40>
  {
    _Error_Handler(__FILE__, __LINE__);
 8006be2:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8006be6:	480a      	ldr	r0, [pc, #40]	; (8006c10 <USBD_LL_Init+0x64>)
 8006be8:	f7ff fd90 	bl	800670c <_Error_Handler>
  }

  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006bec:	2180      	movs	r1, #128	; 0x80
 8006bee:	4807      	ldr	r0, [pc, #28]	; (8006c0c <USBD_LL_Init+0x60>)
 8006bf0:	f7fa fcdd 	bl	80015ae <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006bf4:	2240      	movs	r2, #64	; 0x40
 8006bf6:	2100      	movs	r1, #0
 8006bf8:	4804      	ldr	r0, [pc, #16]	; (8006c0c <USBD_LL_Init+0x60>)
 8006bfa:	f7fa fcb7 	bl	800156c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006bfe:	2280      	movs	r2, #128	; 0x80
 8006c00:	2101      	movs	r1, #1
 8006c02:	4802      	ldr	r0, [pc, #8]	; (8006c0c <USBD_LL_Init+0x60>)
 8006c04:	f7fa fcb2 	bl	800156c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
}
 8006c08:	2000      	movs	r0, #0
 8006c0a:	bd08      	pop	{r3, pc}
 8006c0c:	20004ef4 	.word	0x20004ef4
 8006c10:	080075d3 	.word	0x080075d3

08006c14 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006c14:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8006c16:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8006c1a:	f7fa f81c 	bl	8000c56 <HAL_PCD_Start>
 8006c1e:	2803      	cmp	r0, #3
 8006c20:	bf9a      	itte	ls
 8006c22:	4b02      	ldrls	r3, [pc, #8]	; (8006c2c <USBD_LL_Start+0x18>)
 8006c24:	5c18      	ldrbls	r0, [r3, r0]
 8006c26:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8006c28:	bd08      	pop	{r3, pc}
 8006c2a:	bf00      	nop
 8006c2c:	080075cf 	.word	0x080075cf

08006c30 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006c30:	b510      	push	{r4, lr}
 8006c32:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006c34:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8006c38:	4613      	mov	r3, r2
 8006c3a:	4622      	mov	r2, r4
 8006c3c:	f7fa fb66 	bl	800130c <HAL_PCD_EP_Open>
 8006c40:	2803      	cmp	r0, #3
 8006c42:	bf9a      	itte	ls
 8006c44:	4b01      	ldrls	r3, [pc, #4]	; (8006c4c <USBD_LL_OpenEP+0x1c>)
 8006c46:	5c18      	ldrbls	r0, [r3, r0]
 8006c48:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8006c4a:	bd10      	pop	{r4, pc}
 8006c4c:	080075cf 	.word	0x080075cf

08006c50 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006c50:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006c52:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8006c56:	f7fa fb8d 	bl	8001374 <HAL_PCD_EP_Close>
 8006c5a:	2803      	cmp	r0, #3
 8006c5c:	bf9a      	itte	ls
 8006c5e:	4b02      	ldrls	r3, [pc, #8]	; (8006c68 <USBD_LL_CloseEP+0x18>)
 8006c60:	5c18      	ldrbls	r0, [r3, r0]
 8006c62:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8006c64:	bd08      	pop	{r3, pc}
 8006c66:	bf00      	nop
 8006c68:	080075cf 	.word	0x080075cf

08006c6c <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006c6c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8006c6e:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8006c72:	f7fa fc61 	bl	8001538 <HAL_PCD_EP_Flush>
 8006c76:	2803      	cmp	r0, #3
 8006c78:	bf9a      	itte	ls
 8006c7a:	4b02      	ldrls	r3, [pc, #8]	; (8006c84 <USBD_LL_FlushEP+0x18>)
 8006c7c:	5c18      	ldrbls	r0, [r3, r0]
 8006c7e:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8006c80:	bd08      	pop	{r3, pc}
 8006c82:	bf00      	nop
 8006c84:	080075cf 	.word	0x080075cf

08006c88 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006c88:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006c8a:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8006c8e:	f7fa fbe8 	bl	8001462 <HAL_PCD_EP_SetStall>
 8006c92:	2803      	cmp	r0, #3
 8006c94:	bf9a      	itte	ls
 8006c96:	4b02      	ldrls	r3, [pc, #8]	; (8006ca0 <USBD_LL_StallEP+0x18>)
 8006c98:	5c18      	ldrbls	r0, [r3, r0]
 8006c9a:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8006c9c:	bd08      	pop	{r3, pc}
 8006c9e:	bf00      	nop
 8006ca0:	080075cf 	.word	0x080075cf

08006ca4 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006ca4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8006ca6:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8006caa:	f7fa fc14 	bl	80014d6 <HAL_PCD_EP_ClrStall>
 8006cae:	2803      	cmp	r0, #3
 8006cb0:	bf9a      	itte	ls
 8006cb2:	4b02      	ldrls	r3, [pc, #8]	; (8006cbc <USBD_LL_ClearStallEP+0x18>)
 8006cb4:	5c18      	ldrbls	r0, [r3, r0]
 8006cb6:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8006cb8:	bd08      	pop	{r3, pc}
 8006cba:	bf00      	nop
 8006cbc:	080075cf 	.word	0x080075cf

08006cc0 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8006cc0:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006cc4:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 8006cc8:	f04f 021c 	mov.w	r2, #28
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8006ccc:	bf17      	itett	ne
 8006cce:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8006cd2:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8006cd6:	fb02 3101 	mlane	r1, r2, r1, r3
 8006cda:	f891 003e 	ldrbne.w	r0, [r1, #62]	; 0x3e
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8006cde:	bf08      	it	eq
 8006ce0:	f891 01fe 	ldrbeq.w	r0, [r1, #510]	; 0x1fe
  }
}
 8006ce4:	4770      	bx	lr
	...

08006ce8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006ce8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006cea:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8006cee:	f7fa faf9 	bl	80012e4 <HAL_PCD_SetAddress>
 8006cf2:	2803      	cmp	r0, #3
 8006cf4:	bf9a      	itte	ls
 8006cf6:	4b02      	ldrls	r3, [pc, #8]	; (8006d00 <USBD_LL_SetUSBAddress+0x18>)
 8006cf8:	5c18      	ldrbls	r0, [r3, r0]
 8006cfa:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8006cfc:	bd08      	pop	{r3, pc}
 8006cfe:	bf00      	nop
 8006d00:	080075cf 	.word	0x080075cf

08006d04 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006d04:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006d06:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8006d0a:	f7fa fb8a 	bl	8001422 <HAL_PCD_EP_Transmit>
 8006d0e:	2803      	cmp	r0, #3
 8006d10:	bf9a      	itte	ls
 8006d12:	4b02      	ldrls	r3, [pc, #8]	; (8006d1c <USBD_LL_Transmit+0x18>)
 8006d14:	5c18      	ldrbls	r0, [r3, r0]
 8006d16:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;    
}
 8006d18:	bd08      	pop	{r3, pc}
 8006d1a:	bf00      	nop
 8006d1c:	080075cf 	.word	0x080075cf

08006d20 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006d20:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006d22:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8006d26:	f7fa fb50 	bl	80013ca <HAL_PCD_EP_Receive>
 8006d2a:	2803      	cmp	r0, #3
 8006d2c:	bf9a      	itte	ls
 8006d2e:	4b02      	ldrls	r3, [pc, #8]	; (8006d38 <USBD_LL_PrepareReceive+0x18>)
 8006d30:	5c18      	ldrbls	r0, [r3, r0]
 8006d32:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8006d34:	bd08      	pop	{r3, pc}
 8006d36:	bf00      	nop
 8006d38:	080075cf 	.word	0x080075cf

08006d3c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006d3c:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006d3e:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8006d42:	f7fa fb66 	bl	8001412 <HAL_PCD_EP_GetRxCount>
}
 8006d46:	bd08      	pop	{r3, pc}

08006d48 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006d48:	b510      	push	{r4, lr}
 8006d4a:	4604      	mov	r4, r0
  switch (msg)
 8006d4c:	b111      	cbz	r1, 8006d54 <HAL_PCDEx_LPM_Callback+0xc>
 8006d4e:	2901      	cmp	r1, #1
 8006d50:	d016      	beq.n	8006d80 <HAL_PCDEx_LPM_Callback+0x38>
 8006d52:	bd10      	pop	{r4, pc}
  {
  case PCD_LPM_L0_ACTIVE:
    if (hpcd->Init.low_power_enable)
 8006d54:	6a03      	ldr	r3, [r0, #32]
 8006d56:	b133      	cbz	r3, 8006d66 <HAL_PCDEx_LPM_Callback+0x1e>
    {
      SystemClock_Config();
 8006d58:	f7ff fc0c 	bl	8006574 <SystemClock_Config>
      
      /* Reset SLEEPDEEP bit of Cortex System Control Register. */
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006d5c:	4a12      	ldr	r2, [pc, #72]	; (8006da8 <HAL_PCDEx_LPM_Callback+0x60>)
 8006d5e:	6913      	ldr	r3, [r2, #16]
 8006d60:	f023 0306 	bic.w	r3, r3, #6
 8006d64:	6113      	str	r3, [r2, #16]
    }
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8006d66:	6822      	ldr	r2, [r4, #0]
    USBD_LL_Resume(hpcd->pData);
 8006d68:	f8d4 03fc 	ldr.w	r0, [r4, #1020]	; 0x3fc
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8006d6c:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8006d70:	f023 0301 	bic.w	r3, r3, #1
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 8006d74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8006d78:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    USBD_LL_Resume(hpcd->pData);
 8006d7c:	f7fd bca2 	b.w	80046c4 <USBD_LL_Resume>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006d80:	6802      	ldr	r2, [r0, #0]
    USBD_LL_Suspend(hpcd->pData);
 8006d82:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006d86:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8006d8a:	f043 0301 	orr.w	r3, r3, #1
 8006d8e:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    USBD_LL_Suspend(hpcd->pData);
 8006d92:	f7fd fc8e 	bl	80046b2 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8006d96:	6a23      	ldr	r3, [r4, #32]
 8006d98:	b123      	cbz	r3, 8006da4 <HAL_PCDEx_LPM_Callback+0x5c>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006d9a:	4a03      	ldr	r2, [pc, #12]	; (8006da8 <HAL_PCDEx_LPM_Callback+0x60>)
 8006d9c:	6913      	ldr	r3, [r2, #16]
 8006d9e:	f043 0306 	orr.w	r3, r3, #6
 8006da2:	6113      	str	r3, [r2, #16]
 8006da4:	bd10      	pop	{r4, pc}
 8006da6:	bf00      	nop
 8006da8:	e000ed00 	.word	0xe000ed00

08006dac <USBD_FS_DeviceDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 8006dac:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8006dae:	4801      	ldr	r0, [pc, #4]	; (8006db4 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8006db0:	800b      	strh	r3, [r1, #0]
}
 8006db2:	4770      	bx	lr
 8006db4:	200000e0 	.word	0x200000e0

08006db8 <USBD_FS_LangIDStrDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);
 8006db8:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8006dba:	4801      	ldr	r0, [pc, #4]	; (8006dc0 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8006dbc:	800b      	strh	r3, [r1, #0]
}
 8006dbe:	4770      	bx	lr
 8006dc0:	200000f4 	.word	0x200000f4

08006dc4 <USBD_FS_USR_BOSDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_BOSDesc);
 8006dc4:	230c      	movs	r3, #12
  return (uint8_t*)USBD_FS_BOSDesc;
}
 8006dc6:	4801      	ldr	r0, [pc, #4]	; (8006dcc <USBD_FS_USR_BOSDescriptor+0x8>)
  *length = sizeof(USBD_FS_BOSDesc);
 8006dc8:	800b      	strh	r3, [r1, #0]
}
 8006dca:	4770      	bx	lr
 8006dcc:	200000d4 	.word	0x200000d4

08006dd0 <USBD_FS_ManufacturerStrDescriptor>:
{
 8006dd0:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006dd2:	4c04      	ldr	r4, [pc, #16]	; (8006de4 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8006dd4:	460a      	mov	r2, r1
 8006dd6:	4804      	ldr	r0, [pc, #16]	; (8006de8 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8006dd8:	4621      	mov	r1, r4
 8006dda:	f7fd fe91 	bl	8004b00 <USBD_GetString>
}
 8006dde:	4620      	mov	r0, r4
 8006de0:	bd10      	pop	{r4, pc}
 8006de2:	bf00      	nop
 8006de4:	200052f4 	.word	0x200052f4
 8006de8:	080075ff 	.word	0x080075ff

08006dec <USBD_FS_ProductStrDescriptor>:
{
 8006dec:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006dee:	4c04      	ldr	r4, [pc, #16]	; (8006e00 <USBD_FS_ProductStrDescriptor+0x14>)
 8006df0:	460a      	mov	r2, r1
 8006df2:	4804      	ldr	r0, [pc, #16]	; (8006e04 <USBD_FS_ProductStrDescriptor+0x18>)
 8006df4:	4621      	mov	r1, r4
 8006df6:	f7fd fe83 	bl	8004b00 <USBD_GetString>
}
 8006dfa:	4620      	mov	r0, r4
 8006dfc:	bd10      	pop	{r4, pc}
 8006dfe:	bf00      	nop
 8006e00:	200052f4 	.word	0x200052f4
 8006e04:	08007612 	.word	0x08007612

08006e08 <USBD_FS_SerialStrDescriptor>:
{
 8006e08:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8006e0a:	4c04      	ldr	r4, [pc, #16]	; (8006e1c <USBD_FS_SerialStrDescriptor+0x14>)
 8006e0c:	460a      	mov	r2, r1
 8006e0e:	4804      	ldr	r0, [pc, #16]	; (8006e20 <USBD_FS_SerialStrDescriptor+0x18>)
 8006e10:	4621      	mov	r1, r4
 8006e12:	f7fd fe75 	bl	8004b00 <USBD_GetString>
}
 8006e16:	4620      	mov	r0, r4
 8006e18:	bd10      	pop	{r4, pc}
 8006e1a:	bf00      	nop
 8006e1c:	200052f4 	.word	0x200052f4
 8006e20:	08007625 	.word	0x08007625

08006e24 <USBD_FS_ConfigStrDescriptor>:
{
 8006e24:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006e26:	4c04      	ldr	r4, [pc, #16]	; (8006e38 <USBD_FS_ConfigStrDescriptor+0x14>)
 8006e28:	460a      	mov	r2, r1
 8006e2a:	4804      	ldr	r0, [pc, #16]	; (8006e3c <USBD_FS_ConfigStrDescriptor+0x18>)
 8006e2c:	4621      	mov	r1, r4
 8006e2e:	f7fd fe67 	bl	8004b00 <USBD_GetString>
}
 8006e32:	4620      	mov	r0, r4
 8006e34:	bd10      	pop	{r4, pc}
 8006e36:	bf00      	nop
 8006e38:	200052f4 	.word	0x200052f4
 8006e3c:	080075e6 	.word	0x080075e6

08006e40 <USBD_FS_InterfaceStrDescriptor>:
{
 8006e40:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006e42:	4c04      	ldr	r4, [pc, #16]	; (8006e54 <USBD_FS_InterfaceStrDescriptor+0x14>)
 8006e44:	460a      	mov	r2, r1
 8006e46:	4804      	ldr	r0, [pc, #16]	; (8006e58 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8006e48:	4621      	mov	r1, r4
 8006e4a:	f7fd fe59 	bl	8004b00 <USBD_GetString>
}
 8006e4e:	4620      	mov	r0, r4
 8006e50:	bd10      	pop	{r4, pc}
 8006e52:	bf00      	nop
 8006e54:	200052f4 	.word	0x200052f4
 8006e58:	080075f1 	.word	0x080075f1

08006e5c <STORAGE_GetMaxLun_FS>:

//	return 1;

  return (STORAGE_LUN_NBR - 1);
  /* USER CODE END 8 */
}
 8006e5c:	2000      	movs	r0, #0
 8006e5e:	4770      	bx	lr

08006e60 <STORAGE_Write_FS>:
{
 8006e60:	b513      	push	{r0, r1, r4, lr}
	DRESULT result = SPIDS_STM32F4_SPI_disk_write(lun, buf, blk_addr, blk_len, &AES_SPIDS_SPI_Settings);
 8006e62:	4c05      	ldr	r4, [pc, #20]	; (8006e78 <STORAGE_Write_FS+0x18>)
 8006e64:	9400      	str	r4, [sp, #0]
 8006e66:	f7fe fceb 	bl	8005840 <SPIDS_STM32F4_SPI_disk_write>
	if( result != RES_OK){ return (USBD_FAIL); }
 8006e6a:	2800      	cmp	r0, #0
}
 8006e6c:	bf14      	ite	ne
 8006e6e:	2002      	movne	r0, #2
 8006e70:	2000      	moveq	r0, #0
 8006e72:	b002      	add	sp, #8
 8006e74:	bd10      	pop	{r4, pc}
 8006e76:	bf00      	nop
 8006e78:	200043b4 	.word	0x200043b4

08006e7c <STORAGE_Read_FS>:
{
 8006e7c:	b513      	push	{r0, r1, r4, lr}
	DRESULT result = SPIDS_STM32F4_SPI_disk_read(lun, buf, blk_addr, blk_len, &AES_SPIDS_SPI_Settings);
 8006e7e:	4c05      	ldr	r4, [pc, #20]	; (8006e94 <STORAGE_Read_FS+0x18>)
 8006e80:	9400      	str	r4, [sp, #0]
 8006e82:	f7fe fc35 	bl	80056f0 <SPIDS_STM32F4_SPI_disk_read>
	if( result != RES_OK){ return (USBD_FAIL); }
 8006e86:	2800      	cmp	r0, #0
}
 8006e88:	bf14      	ite	ne
 8006e8a:	2002      	movne	r0, #2
 8006e8c:	2000      	moveq	r0, #0
 8006e8e:	b002      	add	sp, #8
 8006e90:	bd10      	pop	{r4, pc}
 8006e92:	bf00      	nop
 8006e94:	200043b4 	.word	0x200043b4

08006e98 <STORAGE_IsWriteProtected_FS>:
{
 8006e98:	b508      	push	{r3, lr}
	DSTATUS stat = SPIDS_STM32F4_SPI_disk_status(lun, &AES_SPIDS_SPI_Settings);
 8006e9a:	4904      	ldr	r1, [pc, #16]	; (8006eac <STORAGE_IsWriteProtected_FS+0x14>)
 8006e9c:	f7fe fba6 	bl	80055ec <SPIDS_STM32F4_SPI_disk_status>
		if( stat == STA_PROTECT ){ return (USBD_FAIL); }
 8006ea0:	2804      	cmp	r0, #4
}
 8006ea2:	bf0c      	ite	eq
 8006ea4:	2002      	moveq	r0, #2
 8006ea6:	2000      	movne	r0, #0
 8006ea8:	bd08      	pop	{r3, pc}
 8006eaa:	bf00      	nop
 8006eac:	200043b4 	.word	0x200043b4

08006eb0 <STORAGE_IsReady_FS>:
{
 8006eb0:	b508      	push	{r3, lr}
	DSTATUS stat = SPIDS_STM32F4_SPI_disk_status(lun, &AES_SPIDS_SPI_Settings);
 8006eb2:	4904      	ldr	r1, [pc, #16]	; (8006ec4 <STORAGE_IsReady_FS+0x14>)
 8006eb4:	f7fe fb9a 	bl	80055ec <SPIDS_STM32F4_SPI_disk_status>
	if( stat != STA_NOMINAL ){ return (USBD_FAIL); }
 8006eb8:	2800      	cmp	r0, #0
}
 8006eba:	bf14      	ite	ne
 8006ebc:	2002      	movne	r0, #2
 8006ebe:	2000      	moveq	r0, #0
 8006ec0:	bd08      	pop	{r3, pc}
 8006ec2:	bf00      	nop
 8006ec4:	200043b4 	.word	0x200043b4

08006ec8 <STORAGE_GetCapacity_FS>:
{
 8006ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t numSecs = SPIDS_STM32F4_SPI_Get_Num_Sectors(&AES_SPIDS_SPI_Settings);
 8006eca:	4c07      	ldr	r4, [pc, #28]	; (8006ee8 <STORAGE_GetCapacity_FS+0x20>)
{
 8006ecc:	460d      	mov	r5, r1
 8006ece:	4617      	mov	r7, r2
  uint32_t numSecs = SPIDS_STM32F4_SPI_Get_Num_Sectors(&AES_SPIDS_SPI_Settings);
 8006ed0:	4620      	mov	r0, r4
 8006ed2:	f7fe fd71 	bl	80059b8 <SPIDS_STM32F4_SPI_Get_Num_Sectors>
 8006ed6:	4606      	mov	r6, r0
  uint16_t secSize = SPIDS_STM32F4_SPI_Get_Sector_Size(&AES_SPIDS_SPI_Settings);
 8006ed8:	4620      	mov	r0, r4
 8006eda:	f7fe fdd1 	bl	8005a80 <SPIDS_STM32F4_SPI_Get_Sector_Size>
  *(block_size) = secSize;
 8006ede:	8038      	strh	r0, [r7, #0]
  *(block_num) = numSecs;
 8006ee0:	602e      	str	r6, [r5, #0]
}
 8006ee2:	2000      	movs	r0, #0
 8006ee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ee6:	bf00      	nop
 8006ee8:	200043b4 	.word	0x200043b4

08006eec <STORAGE_Init_FS>:
{
 8006eec:	b510      	push	{r4, lr}
  fresult = f_mount(&fatfs, AES_SDPath, 1);
 8006eee:	2201      	movs	r2, #1
 8006ef0:	4909      	ldr	r1, [pc, #36]	; (8006f18 <STORAGE_Init_FS+0x2c>)
 8006ef2:	480a      	ldr	r0, [pc, #40]	; (8006f1c <STORAGE_Init_FS+0x30>)
 8006ef4:	f7ff fa62 	bl	80063bc <f_mount>
 8006ef8:	4c09      	ldr	r4, [pc, #36]	; (8006f20 <STORAGE_Init_FS+0x34>)
  if(fresult == FR_NOT_READY)
 8006efa:	2803      	cmp	r0, #3
  fresult = f_mount(&fatfs, AES_SDPath, 1);
 8006efc:	7020      	strb	r0, [r4, #0]
  if(fresult == FR_NOT_READY)
 8006efe:	d105      	bne.n	8006f0c <STORAGE_Init_FS+0x20>
	  fresult = f_mount(&fatfs, AES_SDPath, 1);
 8006f00:	2201      	movs	r2, #1
 8006f02:	4905      	ldr	r1, [pc, #20]	; (8006f18 <STORAGE_Init_FS+0x2c>)
 8006f04:	4805      	ldr	r0, [pc, #20]	; (8006f1c <STORAGE_Init_FS+0x30>)
 8006f06:	f7ff fa59 	bl	80063bc <f_mount>
 8006f0a:	7020      	strb	r0, [r4, #0]
  if(fresult == FR_NOT_READY)
 8006f0c:	7823      	ldrb	r3, [r4, #0]
  return (USBD_OK);
 8006f0e:	2b03      	cmp	r3, #3
}
 8006f10:	bf0c      	ite	eq
 8006f12:	2002      	moveq	r0, #2
 8006f14:	2000      	movne	r0, #0
 8006f16:	bd10      	pop	{r4, pc}
 8006f18:	2000434c 	.word	0x2000434c
 8006f1c:	200046c8 	.word	0x200046c8
 8006f20:	200044fc 	.word	0x200044fc

08006f24 <serial_write>:
{
	return *(hserial->pbuff + hserial->read_index);	// Simply return the value that would be read next, but don't chage the status of the data buffer
}

void serial_write(serial_HandleTypeDef * hserial, uint8_t * pdata, uint16_t size)
{
 8006f24:	b510      	push	{r4, lr}
 8006f26:	4604      	mov	r4, r0
	while((hserial->transmit_complete) == 0){};		// Wait until it is ready...
 8006f28:	7b23      	ldrb	r3, [r4, #12]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d0fc      	beq.n	8006f28 <serial_write+0x4>
	HAL_UART_Transmit_IT(hserial->huart, pdata, size);
 8006f2e:	6820      	ldr	r0, [r4, #0]
 8006f30:	f7fb fd15 	bl	800295e <HAL_UART_Transmit_IT>
	hserial->transmit_complete = 0;
 8006f34:	2300      	movs	r3, #0
 8006f36:	7323      	strb	r3, [r4, #12]
 8006f38:	bd10      	pop	{r4, pc}

08006f3a <serial_print>:



//Print
void serial_print(serial_HandleTypeDef * hserial, uint8_t * pdata)
{
 8006f3a:	b538      	push	{r3, r4, r5, lr}
 8006f3c:	4605      	mov	r5, r0
 8006f3e:	460c      	mov	r4, r1
	uint32_t count = 0;
	while(*(pdata + count) != '\0')
 8006f40:	4621      	mov	r1, r4
 8006f42:	3401      	adds	r4, #1
 8006f44:	780b      	ldrb	r3, [r1, #0]
 8006f46:	b903      	cbnz	r3, 8006f4a <serial_print+0x10>
	{
		serial_write(hserial, pdata+count++, 1);
	}
}
 8006f48:	bd38      	pop	{r3, r4, r5, pc}
		serial_write(hserial, pdata+count++, 1);
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	4628      	mov	r0, r5
 8006f4e:	f7ff ffe9 	bl	8006f24 <serial_write>
 8006f52:	e7f5      	b.n	8006f40 <serial_print+0x6>

08006f54 <serial_println>:



// Println
void serial_println(serial_HandleTypeDef * hserial, uint8_t * pdata)
{
 8006f54:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t newl = NEWLINE;
 8006f56:	230a      	movs	r3, #10
{
 8006f58:	4605      	mov	r5, r0
	uint8_t newl = NEWLINE;
 8006f5a:	ac02      	add	r4, sp, #8
 8006f5c:	f804 3d01 	strb.w	r3, [r4, #-1]!
	serial_print(hserial, pdata);
 8006f60:	f7ff ffeb 	bl	8006f3a <serial_print>
	serial_write(hserial, &newl, 1);
 8006f64:	2201      	movs	r2, #1
 8006f66:	4621      	mov	r1, r4
 8006f68:	4628      	mov	r0, r5
 8006f6a:	f7ff ffdb 	bl	8006f24 <serial_write>
}
 8006f6e:	b003      	add	sp, #12
 8006f70:	bd30      	pop	{r4, r5, pc}
	...

08006f74 <serial_HAL_UART_MspInit>:

void serial_HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART1)
 8006f74:	6803      	ldr	r3, [r0, #0]
 8006f76:	4a52      	ldr	r2, [pc, #328]	; (80070c0 <serial_HAL_UART_MspInit+0x14c>)
 8006f78:	4293      	cmp	r3, r2
{
 8006f7a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006f7e:	4606      	mov	r6, r0
 8006f80:	b089      	sub	sp, #36	; 0x24
  if(uartHandle->Instance==USART1)
 8006f82:	d12d      	bne.n	8006fe0 <serial_HAL_UART_MspInit+0x6c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006f84:	4b4f      	ldr	r3, [pc, #316]	; (80070c4 <serial_HAL_UART_MspInit+0x150>)
    /**USART1 GPIO Configuration    
    PA15     ------> USART1_TX
    PB3     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f86:	2702      	movs	r7, #2
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006f88:	2601      	movs	r6, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f8a:	2503      	movs	r5, #3
    __HAL_RCC_USART1_CLK_ENABLE();
 8006f8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006f8e:	2407      	movs	r4, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f90:	a903      	add	r1, sp, #12
 8006f92:	484d      	ldr	r0, [pc, #308]	; (80070c8 <serial_HAL_UART_MspInit+0x154>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8006f94:	f042 0210 	orr.w	r2, r2, #16
 8006f98:	645a      	str	r2, [r3, #68]	; 0x44
 8006f9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f9c:	9704      	str	r7, [sp, #16]
    __HAL_RCC_USART1_CLK_ENABLE();
 8006f9e:	f003 0310 	and.w	r3, r3, #16
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006fa2:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006fa4:	9506      	str	r5, [sp, #24]
    __HAL_RCC_USART1_CLK_ENABLE();
 8006fa6:	9300      	str	r3, [sp, #0]
 8006fa8:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8006faa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006fae:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8006fb0:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006fb2:	f7f9 fced 	bl	8000990 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8006fb6:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006fb8:	a903      	add	r1, sp, #12
 8006fba:	4844      	ldr	r0, [pc, #272]	; (80070cc <serial_HAL_UART_MspInit+0x158>)
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8006fbc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006fbe:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006fc0:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006fc2:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006fc4:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006fc6:	f7f9 fce3 	bl	8000990 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8006fca:	2200      	movs	r2, #0
 8006fcc:	2025      	movs	r0, #37	; 0x25
 8006fce:	4611      	mov	r1, r2
 8006fd0:	f7f9 fb00 	bl	80005d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006fd4:	2025      	movs	r0, #37	; 0x25
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8006fd6:	f7f9 fb35 	bl	8000644 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8006fda:	b009      	add	sp, #36	; 0x24
 8006fdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  else if(uartHandle->Instance==USART2)
 8006fe0:	4a3b      	ldr	r2, [pc, #236]	; (80070d0 <serial_HAL_UART_MspInit+0x15c>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d14a      	bne.n	800707c <serial_HAL_UART_MspInit+0x108>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006fe6:	4b37      	ldr	r3, [pc, #220]	; (80070c4 <serial_HAL_UART_MspInit+0x150>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fe8:	2500      	movs	r5, #0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006fea:	2407      	movs	r4, #7
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8006fec:	f04f 0801 	mov.w	r8, #1
    __HAL_RCC_USART2_CLK_ENABLE();
 8006ff0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ff2:	f04f 0902 	mov.w	r9, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ff6:	2703      	movs	r7, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ff8:	a903      	add	r1, sp, #12
    __HAL_RCC_USART2_CLK_ENABLE();
 8006ffa:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ffe:	4832      	ldr	r0, [pc, #200]	; (80070c8 <serial_HAL_UART_MspInit+0x154>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8007000:	641a      	str	r2, [r3, #64]	; 0x40
 8007002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007004:	9407      	str	r4, [sp, #28]
    __HAL_RCC_USART2_CLK_ENABLE();
 8007006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800700a:	f8cd 800c 	str.w	r8, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800700e:	f8cd 9010 	str.w	r9, [sp, #16]
    __HAL_RCC_USART2_CLK_ENABLE();
 8007012:	9301      	str	r3, [sp, #4]
 8007014:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007016:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007018:	9706      	str	r7, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800701a:	f7f9 fcb9 	bl	8000990 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800701e:	230c      	movs	r3, #12
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007020:	4829      	ldr	r0, [pc, #164]	; (80070c8 <serial_HAL_UART_MspInit+0x154>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007022:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007024:	eb0d 0103 	add.w	r1, sp, r3
    hdma_usart2_rx.Instance = DMA1_Stream7;
 8007028:	4c2a      	ldr	r4, [pc, #168]	; (80070d4 <serial_HAL_UART_MspInit+0x160>)
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800702a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800702c:	f8cd 9010 	str.w	r9, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007030:	f8cd 8014 	str.w	r8, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007034:	9706      	str	r7, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007036:	f7f9 fcab 	bl	8000990 <HAL_GPIO_Init>
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_6;
 800703a:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 800703e:	4a26      	ldr	r2, [pc, #152]	; (80070d8 <serial_HAL_UART_MspInit+0x164>)
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8007040:	4620      	mov	r0, r4
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007042:	60a5      	str	r5, [r4, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007044:	60e5      	str	r5, [r4, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007046:	6165      	str	r5, [r4, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007048:	61a5      	str	r5, [r4, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800704a:	61e5      	str	r5, [r4, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800704c:	6225      	str	r5, [r4, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800704e:	6265      	str	r5, [r4, #36]	; 0x24
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_6;
 8007050:	e884 000c 	stmia.w	r4, {r2, r3}
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007054:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007058:	6123      	str	r3, [r4, #16]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800705a:	f7f9 fb37 	bl	80006cc <HAL_DMA_Init>
 800705e:	b120      	cbz	r0, 800706a <serial_HAL_UART_MspInit+0xf6>
      _Error_Handler(__FILE__, __LINE__);
 8007060:	f44f 71b9 	mov.w	r1, #370	; 0x172
 8007064:	481d      	ldr	r0, [pc, #116]	; (80070dc <serial_HAL_UART_MspInit+0x168>)
 8007066:	f7ff fb51 	bl	800670c <_Error_Handler>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800706a:	2200      	movs	r2, #0
 800706c:	2026      	movs	r0, #38	; 0x26
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800706e:	6674      	str	r4, [r6, #100]	; 0x64
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8007070:	4611      	mov	r1, r2
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8007072:	63a6      	str	r6, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8007074:	f7f9 faae 	bl	80005d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8007078:	2026      	movs	r0, #38	; 0x26
 800707a:	e7ac      	b.n	8006fd6 <serial_HAL_UART_MspInit+0x62>
  else if(uartHandle->Instance==USART6)
 800707c:	4a18      	ldr	r2, [pc, #96]	; (80070e0 <serial_HAL_UART_MspInit+0x16c>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d1ab      	bne.n	8006fda <serial_HAL_UART_MspInit+0x66>
    __HAL_RCC_USART6_CLK_ENABLE();
 8007082:	4b10      	ldr	r3, [pc, #64]	; (80070c4 <serial_HAL_UART_MspInit+0x150>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007084:	a903      	add	r1, sp, #12
 8007086:	4817      	ldr	r0, [pc, #92]	; (80070e4 <serial_HAL_UART_MspInit+0x170>)
    __HAL_RCC_USART6_CLK_ENABLE();
 8007088:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800708a:	f042 0220 	orr.w	r2, r2, #32
 800708e:	645a      	str	r2, [r3, #68]	; 0x44
 8007090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007092:	f003 0320 	and.w	r3, r3, #32
 8007096:	9302      	str	r3, [sp, #8]
 8007098:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800709a:	23c0      	movs	r3, #192	; 0xc0
 800709c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800709e:	2302      	movs	r3, #2
 80070a0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80070a2:	2301      	movs	r3, #1
 80070a4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80070a6:	2303      	movs	r3, #3
 80070a8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80070aa:	2308      	movs	r3, #8
 80070ac:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80070ae:	f7f9 fc6f 	bl	8000990 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80070b2:	2200      	movs	r2, #0
 80070b4:	2047      	movs	r0, #71	; 0x47
 80070b6:	4611      	mov	r1, r2
 80070b8:	f7f9 fa8c 	bl	80005d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80070bc:	2047      	movs	r0, #71	; 0x47
 80070be:	e78a      	b.n	8006fd6 <serial_HAL_UART_MspInit+0x62>
 80070c0:	40011000 	.word	0x40011000
 80070c4:	40023800 	.word	0x40023800
 80070c8:	40020000 	.word	0x40020000
 80070cc:	40020400 	.word	0x40020400
 80070d0:	40004400 	.word	0x40004400
 80070d4:	200054f4 	.word	0x200054f4
 80070d8:	400260b8 	.word	0x400260b8
 80070dc:	08007656 	.word	0x08007656
 80070e0:	40011400 	.word	0x40011400
 80070e4:	40020800 	.word	0x40020800

080070e8 <serial_initialize>:
  if(hserial->huart->Instance == USART1){ hserial->pbuff = &serial_buffer_USART1[0]; }
 80070e8:	680b      	ldr	r3, [r1, #0]
 80070ea:	4a1d      	ldr	r2, [pc, #116]	; (8007160 <serial_initialize+0x78>)
 80070ec:	4293      	cmp	r3, r2
{
 80070ee:	b510      	push	{r4, lr}
 80070f0:	4604      	mov	r4, r0
  hserial->huart = huart_pass;	// Add this step here so that the user cannot miss it.
 80070f2:	6001      	str	r1, [r0, #0]
  if(hserial->huart->Instance == USART1){ hserial->pbuff = &serial_buffer_USART1[0]; }
 80070f4:	d11a      	bne.n	800712c <serial_initialize+0x44>
 80070f6:	4b1b      	ldr	r3, [pc, #108]	; (8007164 <serial_initialize+0x7c>)
  else if(hserial->huart->Instance == USART2){ hserial->pbuff = &serial_buffer_USART2[0]; }
 80070f8:	60a3      	str	r3, [r4, #8]
  if (HAL_UART_Init(hserial->huart) != HAL_OK)
 80070fa:	6820      	ldr	r0, [r4, #0]
 80070fc:	f7fb ff75 	bl	8002fea <HAL_UART_Init>
 8007100:	b118      	cbz	r0, 800710a <serial_initialize+0x22>
    _Error_Handler(__FILE__, __LINE__);
 8007102:	211f      	movs	r1, #31
 8007104:	4818      	ldr	r0, [pc, #96]	; (8007168 <serial_initialize+0x80>)
 8007106:	f7ff fb01 	bl	800670c <_Error_Handler>
  serial_HAL_UART_MspInit(hserial->huart);
 800710a:	6820      	ldr	r0, [r4, #0]
 800710c:	f7ff ff32 	bl	8006f74 <serial_HAL_UART_MspInit>
  hserial->num_avail = 0;
 8007110:	2300      	movs	r3, #0
  hserial->write_ok = 1;
 8007112:	2201      	movs	r2, #1
  HAL_UART_Receive_IT(hserial->huart, &(hserial->lock), serial_default_receive_size); // first dominoe: this will wait till one byte is received then perform the callback function which continues the chain reaction
 8007114:	1d21      	adds	r1, r4, #4
  hserial->num_avail = 0;
 8007116:	82a3      	strh	r3, [r4, #20]
  hserial->active = 1;
 8007118:	7362      	strb	r2, [r4, #13]
  hserial->write_index = 0;
 800711a:	81e3      	strh	r3, [r4, #14]
  HAL_UART_Receive_IT(hserial->huart, &(hserial->lock), serial_default_receive_size); // first dominoe: this will wait till one byte is received then perform the callback function which continues the chain reaction
 800711c:	6820      	ldr	r0, [r4, #0]
  hserial->read_index = 0;
 800711e:	8223      	strh	r3, [r4, #16]
  hserial->write_ok = 1;
 8007120:	74a2      	strb	r2, [r4, #18]
  hserial->transmit_complete = 1;
 8007122:	7322      	strb	r2, [r4, #12]
}
 8007124:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_UART_Receive_IT(hserial->huart, &(hserial->lock), serial_default_receive_size); // first dominoe: this will wait till one byte is received then perform the callback function which continues the chain reaction
 8007128:	f7fb bc3a 	b.w	80029a0 <HAL_UART_Receive_IT>
  else if(hserial->huart->Instance == USART2){ hserial->pbuff = &serial_buffer_USART2[0]; }
 800712c:	4a0f      	ldr	r2, [pc, #60]	; (800716c <serial_initialize+0x84>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d101      	bne.n	8007136 <serial_initialize+0x4e>
 8007132:	4b0f      	ldr	r3, [pc, #60]	; (8007170 <serial_initialize+0x88>)
 8007134:	e7e0      	b.n	80070f8 <serial_initialize+0x10>
  else if(hserial->huart->Instance == USART6){ hserial->pbuff = &serial_buffer_USART6[0]; }
 8007136:	4a0f      	ldr	r2, [pc, #60]	; (8007174 <serial_initialize+0x8c>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d101      	bne.n	8007140 <serial_initialize+0x58>
 800713c:	4b0e      	ldr	r3, [pc, #56]	; (8007178 <serial_initialize+0x90>)
 800713e:	e7db      	b.n	80070f8 <serial_initialize+0x10>
  else if(hserial->huart->Instance == UART4){ hserial->pbuff = &serial_buffer_USART1[0]; }
 8007140:	4a0e      	ldr	r2, [pc, #56]	; (800717c <serial_initialize+0x94>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d0d7      	beq.n	80070f6 <serial_initialize+0xe>
  else if(hserial->huart->Instance == UART5){ hserial->pbuff = &serial_buffer_USART2[0]; }
 8007146:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800714a:	4293      	cmp	r3, r2
 800714c:	d0f1      	beq.n	8007132 <serial_initialize+0x4a>
  else if(hserial->huart->Instance == UART7){ hserial->pbuff = &serial_buffer_USART1[0]; }
 800714e:	f502 5220 	add.w	r2, r2, #10240	; 0x2800
 8007152:	4293      	cmp	r3, r2
 8007154:	d0cf      	beq.n	80070f6 <serial_initialize+0xe>
  else{ _Error_Handler(__FILE__, __LINE__); }
 8007156:	211a      	movs	r1, #26
 8007158:	4803      	ldr	r0, [pc, #12]	; (8007168 <serial_initialize+0x80>)
 800715a:	f7ff fad7 	bl	800670c <_Error_Handler>
 800715e:	e7cc      	b.n	80070fa <serial_initialize+0x12>
 8007160:	40011000 	.word	0x40011000
 8007164:	20004234 	.word	0x20004234
 8007168:	08007656 	.word	0x08007656
 800716c:	40004400 	.word	0x40004400
 8007170:	20004134 	.word	0x20004134
 8007174:	40011400 	.word	0x40011400
 8007178:	200044fd 	.word	0x200044fd
 800717c:	40004c00 	.word	0x40004c00

08007180 <HAL_UART_TxCpltCallback>:
{
  //__NOP();
	serial_HandleTypeDef *temp_serial_ptr;

	// Get the corresponding serial handle
	if(huart->Instance == USART1){ temp_serial_ptr = &serial1; temp_serial_ptr->transmit_complete = 1; }
 8007180:	6803      	ldr	r3, [r0, #0]
 8007182:	4a10      	ldr	r2, [pc, #64]	; (80071c4 <HAL_UART_TxCpltCallback+0x44>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d102      	bne.n	800718e <HAL_UART_TxCpltCallback+0xe>
	// Temporary ones for the f767
	else if(huart->Instance == UART4){ temp_serial_ptr = &serial2; temp_serial_ptr->transmit_complete = 1; }
	else if(huart->Instance == UART5){ temp_serial_ptr = &serial1; temp_serial_ptr->transmit_complete = 1; }

	// Ugh another ugly temporary fix to a stupid system. You HAVE to redo the serial library
	else if(huart->Instance == UART7){ temp_serial_ptr = &serial1; temp_serial_ptr->transmit_complete = 1; }
 8007188:	2201      	movs	r2, #1
 800718a:	4b0f      	ldr	r3, [pc, #60]	; (80071c8 <HAL_UART_TxCpltCallback+0x48>)
 800718c:	e00a      	b.n	80071a4 <HAL_UART_TxCpltCallback+0x24>
	else if(huart->Instance == USART2){ temp_serial_ptr = &serial2; temp_serial_ptr->transmit_complete = 1; }
 800718e:	4a0f      	ldr	r2, [pc, #60]	; (80071cc <HAL_UART_TxCpltCallback+0x4c>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d102      	bne.n	800719a <HAL_UART_TxCpltCallback+0x1a>
	else if(huart->Instance == UART4){ temp_serial_ptr = &serial2; temp_serial_ptr->transmit_complete = 1; }
 8007194:	2201      	movs	r2, #1
 8007196:	4b0e      	ldr	r3, [pc, #56]	; (80071d0 <HAL_UART_TxCpltCallback+0x50>)
 8007198:	e004      	b.n	80071a4 <HAL_UART_TxCpltCallback+0x24>
	else if(huart->Instance == USART6){ temp_serial_ptr = &serial6; temp_serial_ptr->transmit_complete = 1; }
 800719a:	4a0e      	ldr	r2, [pc, #56]	; (80071d4 <HAL_UART_TxCpltCallback+0x54>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d103      	bne.n	80071a8 <HAL_UART_TxCpltCallback+0x28>
 80071a0:	2201      	movs	r2, #1
 80071a2:	4b0d      	ldr	r3, [pc, #52]	; (80071d8 <HAL_UART_TxCpltCallback+0x58>)
	else if(huart->Instance == UART7){ temp_serial_ptr = &serial1; temp_serial_ptr->transmit_complete = 1; }
 80071a4:	731a      	strb	r2, [r3, #12]
 80071a6:	4770      	bx	lr
	else if(huart->Instance == UART4){ temp_serial_ptr = &serial2; temp_serial_ptr->transmit_complete = 1; }
 80071a8:	4a0c      	ldr	r2, [pc, #48]	; (80071dc <HAL_UART_TxCpltCallback+0x5c>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d0f2      	beq.n	8007194 <HAL_UART_TxCpltCallback+0x14>
	else if(huart->Instance == UART5){ temp_serial_ptr = &serial1; temp_serial_ptr->transmit_complete = 1; }
 80071ae:	4a0c      	ldr	r2, [pc, #48]	; (80071e0 <HAL_UART_TxCpltCallback+0x60>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d0e9      	beq.n	8007188 <HAL_UART_TxCpltCallback+0x8>
	else if(huart->Instance == UART7){ temp_serial_ptr = &serial1; temp_serial_ptr->transmit_complete = 1; }
 80071b4:	4a0b      	ldr	r2, [pc, #44]	; (80071e4 <HAL_UART_TxCpltCallback+0x64>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d0e6      	beq.n	8007188 <HAL_UART_TxCpltCallback+0x8>


	else{ _Error_Handler(__FILE__, __LINE__); }
 80071ba:	f44f 71fd 	mov.w	r1, #506	; 0x1fa
 80071be:	480a      	ldr	r0, [pc, #40]	; (80071e8 <HAL_UART_TxCpltCallback+0x68>)
 80071c0:	f7ff baa4 	b.w	800670c <_Error_Handler>
 80071c4:	40011000 	.word	0x40011000
 80071c8:	20004350 	.word	0x20004350
 80071cc:	40004400 	.word	0x40004400
 80071d0:	20004900 	.word	0x20004900
 80071d4:	40011400 	.word	0x40011400
 80071d8:	20004334 	.word	0x20004334
 80071dc:	40004c00 	.word	0x40004c00
 80071e0:	40005000 	.word	0x40005000
 80071e4:	40007800 	.word	0x40007800
 80071e8:	08007656 	.word	0x08007656

080071ec <HAL_UART_RxCpltCallback>:
  //__NOP();

  serial_HandleTypeDef *temp_serial_ptr;

  // Get the corresponding serial handle
  if(huart->Instance == USART1){ temp_serial_ptr = &serial1; }
 80071ec:	6803      	ldr	r3, [r0, #0]
 80071ee:	4a20      	ldr	r2, [pc, #128]	; (8007270 <HAL_UART_RxCpltCallback+0x84>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d03a      	beq.n	800726a <HAL_UART_RxCpltCallback+0x7e>
  else if(huart->Instance == USART2){ temp_serial_ptr = &serial2; }
 80071f4:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d00c      	beq.n	8007216 <HAL_UART_RxCpltCallback+0x2a>
  else if(huart->Instance == USART6){ temp_serial_ptr = &serial6; }
 80071fc:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
 8007200:	4293      	cmp	r3, r2
 8007202:	d030      	beq.n	8007266 <HAL_UART_RxCpltCallback+0x7a>
//  else if(huart->Instance == UART4){ temp_serial_ptr = &serial2; }
//  else if(huart->Instance == UART5){ temp_serial_ptr = &serial1; }


  // Yet another temporary patch. Will be re-doing this in the near future
  else if(huart->Instance == UART7){ temp_serial_ptr = &serial1; }
 8007204:	f5a2 421c 	sub.w	r2, r2, #39936	; 0x9c00
 8007208:	4293      	cmp	r3, r2
 800720a:	d02e      	beq.n	800726a <HAL_UART_RxCpltCallback+0x7e>

  else{ _Error_Handler(__FILE__, __LINE__); return; }	// return statement here will never be reached because of error handler while loop, however it fixes a compiler warning
 800720c:	f44f 7104 	mov.w	r1, #528	; 0x210
 8007210:	4818      	ldr	r0, [pc, #96]	; (8007274 <HAL_UART_RxCpltCallback+0x88>)
 8007212:	f7ff ba7b 	b.w	800670c <_Error_Handler>
  else if(huart->Instance == USART2){ temp_serial_ptr = &serial2; }
 8007216:	4b18      	ldr	r3, [pc, #96]	; (8007278 <HAL_UART_RxCpltCallback+0x8c>)

  if(temp_serial_ptr->active)
 8007218:	7b5a      	ldrb	r2, [r3, #13]
 800721a:	b342      	cbz	r2, 800726e <HAL_UART_RxCpltCallback+0x82>
  {
    if(temp_serial_ptr->write_ok)
 800721c:	7c9a      	ldrb	r2, [r3, #18]
 800721e:	b1ea      	cbz	r2, 800725c <HAL_UART_RxCpltCallback+0x70>
    {
      *((temp_serial_ptr->pbuff) + temp_serial_ptr->write_index ) = temp_serial_ptr->lock;      // Lock will have been filled with new data by the HAL_Recieve function
 8007220:	89da      	ldrh	r2, [r3, #14]
 8007222:	6899      	ldr	r1, [r3, #8]
 8007224:	7918      	ldrb	r0, [r3, #4]
 8007226:	b292      	uxth	r2, r2
 8007228:	5488      	strb	r0, [r1, r2]
      temp_serial_ptr->write_index++;
 800722a:	89da      	ldrh	r2, [r3, #14]
 800722c:	3201      	adds	r2, #1
 800722e:	b292      	uxth	r2, r2
 8007230:	81da      	strh	r2, [r3, #14]
      temp_serial_ptr->num_avail++;
 8007232:	8a9a      	ldrh	r2, [r3, #20]
 8007234:	3201      	adds	r2, #1
 8007236:	b292      	uxth	r2, r2
 8007238:	829a      	strh	r2, [r3, #20]
      if(temp_serial_ptr->write_index >= serial_default_buff_size)
 800723a:	89da      	ldrh	r2, [r3, #14]
 800723c:	b292      	uxth	r2, r2
 800723e:	2aff      	cmp	r2, #255	; 0xff
 8007240:	d901      	bls.n	8007246 <HAL_UART_RxCpltCallback+0x5a>
      {
        temp_serial_ptr->write_index = 0;                             // Wrap the write index back to zero
 8007242:	2200      	movs	r2, #0
 8007244:	81da      	strh	r2, [r3, #14]
      }
      if(temp_serial_ptr->write_index == temp_serial_ptr->read_index)
 8007246:	89d9      	ldrh	r1, [r3, #14]
 8007248:	8a1a      	ldrh	r2, [r3, #16]
 800724a:	b289      	uxth	r1, r1
 800724c:	b292      	uxth	r2, r2
 800724e:	4291      	cmp	r1, r2
 8007250:	d104      	bne.n	800725c <HAL_UART_RxCpltCallback+0x70>
      {
        temp_serial_ptr->write_ok = 0;                                // If after incrementing the write pointer it lands on the read pointer then the buffer must be full
 8007252:	2200      	movs	r2, #0
 8007254:	749a      	strb	r2, [r3, #18]
        temp_serial_ptr->num_avail = serial_default_buff_size;
 8007256:	f44f 7280 	mov.w	r2, #256	; 0x100
 800725a:	829a      	strh	r2, [r3, #20]
    else
    {
        // This discards the value in lock, effectively blocking it from entering the buffer
    }

    HAL_UART_Receive_IT(temp_serial_ptr->huart, &(temp_serial_ptr->lock), serial_default_receive_size); // Call the receive function again to continue the chain reaction
 800725c:	2201      	movs	r2, #1
 800725e:	1d19      	adds	r1, r3, #4
 8007260:	6818      	ldr	r0, [r3, #0]
 8007262:	f7fb bb9d 	b.w	80029a0 <HAL_UART_Receive_IT>
  else if(huart->Instance == USART6){ temp_serial_ptr = &serial6; }
 8007266:	4b05      	ldr	r3, [pc, #20]	; (800727c <HAL_UART_RxCpltCallback+0x90>)
 8007268:	e7d6      	b.n	8007218 <HAL_UART_RxCpltCallback+0x2c>
  if(huart->Instance == USART1){ temp_serial_ptr = &serial1; }
 800726a:	4b05      	ldr	r3, [pc, #20]	; (8007280 <HAL_UART_RxCpltCallback+0x94>)
 800726c:	e7d4      	b.n	8007218 <HAL_UART_RxCpltCallback+0x2c>
 800726e:	4770      	bx	lr
 8007270:	40011000 	.word	0x40011000
 8007274:	08007656 	.word	0x08007656
 8007278:	20004900 	.word	0x20004900
 800727c:	20004334 	.word	0x20004334
 8007280:	20004350 	.word	0x20004350

08007284 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8007284:	f8df d034 	ldr.w	sp, [pc, #52]	; 80072bc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007288:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800728a:	e003      	b.n	8007294 <LoopCopyDataInit>

0800728c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800728c:	4b0c      	ldr	r3, [pc, #48]	; (80072c0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800728e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007290:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007292:	3104      	adds	r1, #4

08007294 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007294:	480b      	ldr	r0, [pc, #44]	; (80072c4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8007296:	4b0c      	ldr	r3, [pc, #48]	; (80072c8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007298:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800729a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800729c:	d3f6      	bcc.n	800728c <CopyDataInit>
  ldr  r2, =_sbss
 800729e:	4a0b      	ldr	r2, [pc, #44]	; (80072cc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80072a0:	e002      	b.n	80072a8 <LoopFillZerobss>

080072a2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80072a2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80072a4:	f842 3b04 	str.w	r3, [r2], #4

080072a8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80072a8:	4b09      	ldr	r3, [pc, #36]	; (80072d0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80072aa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80072ac:	d3f9      	bcc.n	80072a2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80072ae:	f7ff fb5d 	bl	800696c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80072b2:	f000 f811 	bl	80072d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80072b6:	f7ff f9c1 	bl	800663c <main>
  bx  lr    
 80072ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80072bc:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80072c0:	0800767c 	.word	0x0800767c
  ldr  r0, =_sdata
 80072c4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80072c8:	2000017c 	.word	0x2000017c
  ldr  r2, =_sbss
 80072cc:	2000017c 	.word	0x2000017c
  ldr  r3, = _ebss
 80072d0:	20005558 	.word	0x20005558

080072d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80072d4:	e7fe      	b.n	80072d4 <ADC_IRQHandler>
	...

080072d8 <__libc_init_array>:
 80072d8:	b570      	push	{r4, r5, r6, lr}
 80072da:	4e0d      	ldr	r6, [pc, #52]	; (8007310 <__libc_init_array+0x38>)
 80072dc:	4c0d      	ldr	r4, [pc, #52]	; (8007314 <__libc_init_array+0x3c>)
 80072de:	1ba4      	subs	r4, r4, r6
 80072e0:	10a4      	asrs	r4, r4, #2
 80072e2:	2500      	movs	r5, #0
 80072e4:	42a5      	cmp	r5, r4
 80072e6:	d109      	bne.n	80072fc <__libc_init_array+0x24>
 80072e8:	4e0b      	ldr	r6, [pc, #44]	; (8007318 <__libc_init_array+0x40>)
 80072ea:	4c0c      	ldr	r4, [pc, #48]	; (800731c <__libc_init_array+0x44>)
 80072ec:	f000 f8f4 	bl	80074d8 <_init>
 80072f0:	1ba4      	subs	r4, r4, r6
 80072f2:	10a4      	asrs	r4, r4, #2
 80072f4:	2500      	movs	r5, #0
 80072f6:	42a5      	cmp	r5, r4
 80072f8:	d105      	bne.n	8007306 <__libc_init_array+0x2e>
 80072fa:	bd70      	pop	{r4, r5, r6, pc}
 80072fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007300:	4798      	blx	r3
 8007302:	3501      	adds	r5, #1
 8007304:	e7ee      	b.n	80072e4 <__libc_init_array+0xc>
 8007306:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800730a:	4798      	blx	r3
 800730c:	3501      	adds	r5, #1
 800730e:	e7f2      	b.n	80072f6 <__libc_init_array+0x1e>
 8007310:	08007674 	.word	0x08007674
 8007314:	08007674 	.word	0x08007674
 8007318:	08007674 	.word	0x08007674
 800731c:	08007678 	.word	0x08007678

08007320 <malloc>:
 8007320:	4b02      	ldr	r3, [pc, #8]	; (800732c <malloc+0xc>)
 8007322:	4601      	mov	r1, r0
 8007324:	6818      	ldr	r0, [r3, #0]
 8007326:	f000 b859 	b.w	80073dc <_malloc_r>
 800732a:	bf00      	nop
 800732c:	20000118 	.word	0x20000118

08007330 <free>:
 8007330:	4b02      	ldr	r3, [pc, #8]	; (800733c <free+0xc>)
 8007332:	4601      	mov	r1, r0
 8007334:	6818      	ldr	r0, [r3, #0]
 8007336:	f000 b803 	b.w	8007340 <_free_r>
 800733a:	bf00      	nop
 800733c:	20000118 	.word	0x20000118

08007340 <_free_r>:
 8007340:	b538      	push	{r3, r4, r5, lr}
 8007342:	4605      	mov	r5, r0
 8007344:	2900      	cmp	r1, #0
 8007346:	d045      	beq.n	80073d4 <_free_r+0x94>
 8007348:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800734c:	1f0c      	subs	r4, r1, #4
 800734e:	2b00      	cmp	r3, #0
 8007350:	bfb8      	it	lt
 8007352:	18e4      	addlt	r4, r4, r3
 8007354:	f000 f8b0 	bl	80074b8 <__malloc_lock>
 8007358:	4a1f      	ldr	r2, [pc, #124]	; (80073d8 <_free_r+0x98>)
 800735a:	6813      	ldr	r3, [r2, #0]
 800735c:	4610      	mov	r0, r2
 800735e:	b933      	cbnz	r3, 800736e <_free_r+0x2e>
 8007360:	6063      	str	r3, [r4, #4]
 8007362:	6014      	str	r4, [r2, #0]
 8007364:	4628      	mov	r0, r5
 8007366:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800736a:	f000 b8a6 	b.w	80074ba <__malloc_unlock>
 800736e:	42a3      	cmp	r3, r4
 8007370:	d90c      	bls.n	800738c <_free_r+0x4c>
 8007372:	6821      	ldr	r1, [r4, #0]
 8007374:	1862      	adds	r2, r4, r1
 8007376:	4293      	cmp	r3, r2
 8007378:	bf04      	itt	eq
 800737a:	681a      	ldreq	r2, [r3, #0]
 800737c:	685b      	ldreq	r3, [r3, #4]
 800737e:	6063      	str	r3, [r4, #4]
 8007380:	bf04      	itt	eq
 8007382:	1852      	addeq	r2, r2, r1
 8007384:	6022      	streq	r2, [r4, #0]
 8007386:	6004      	str	r4, [r0, #0]
 8007388:	e7ec      	b.n	8007364 <_free_r+0x24>
 800738a:	4613      	mov	r3, r2
 800738c:	685a      	ldr	r2, [r3, #4]
 800738e:	b10a      	cbz	r2, 8007394 <_free_r+0x54>
 8007390:	42a2      	cmp	r2, r4
 8007392:	d9fa      	bls.n	800738a <_free_r+0x4a>
 8007394:	6819      	ldr	r1, [r3, #0]
 8007396:	1858      	adds	r0, r3, r1
 8007398:	42a0      	cmp	r0, r4
 800739a:	d10b      	bne.n	80073b4 <_free_r+0x74>
 800739c:	6820      	ldr	r0, [r4, #0]
 800739e:	4401      	add	r1, r0
 80073a0:	1858      	adds	r0, r3, r1
 80073a2:	4282      	cmp	r2, r0
 80073a4:	6019      	str	r1, [r3, #0]
 80073a6:	d1dd      	bne.n	8007364 <_free_r+0x24>
 80073a8:	6810      	ldr	r0, [r2, #0]
 80073aa:	6852      	ldr	r2, [r2, #4]
 80073ac:	605a      	str	r2, [r3, #4]
 80073ae:	4401      	add	r1, r0
 80073b0:	6019      	str	r1, [r3, #0]
 80073b2:	e7d7      	b.n	8007364 <_free_r+0x24>
 80073b4:	d902      	bls.n	80073bc <_free_r+0x7c>
 80073b6:	230c      	movs	r3, #12
 80073b8:	602b      	str	r3, [r5, #0]
 80073ba:	e7d3      	b.n	8007364 <_free_r+0x24>
 80073bc:	6820      	ldr	r0, [r4, #0]
 80073be:	1821      	adds	r1, r4, r0
 80073c0:	428a      	cmp	r2, r1
 80073c2:	bf04      	itt	eq
 80073c4:	6811      	ldreq	r1, [r2, #0]
 80073c6:	6852      	ldreq	r2, [r2, #4]
 80073c8:	6062      	str	r2, [r4, #4]
 80073ca:	bf04      	itt	eq
 80073cc:	1809      	addeq	r1, r1, r0
 80073ce:	6021      	streq	r1, [r4, #0]
 80073d0:	605c      	str	r4, [r3, #4]
 80073d2:	e7c7      	b.n	8007364 <_free_r+0x24>
 80073d4:	bd38      	pop	{r3, r4, r5, pc}
 80073d6:	bf00      	nop
 80073d8:	20003f04 	.word	0x20003f04

080073dc <_malloc_r>:
 80073dc:	b570      	push	{r4, r5, r6, lr}
 80073de:	1ccd      	adds	r5, r1, #3
 80073e0:	f025 0503 	bic.w	r5, r5, #3
 80073e4:	3508      	adds	r5, #8
 80073e6:	2d0c      	cmp	r5, #12
 80073e8:	bf38      	it	cc
 80073ea:	250c      	movcc	r5, #12
 80073ec:	2d00      	cmp	r5, #0
 80073ee:	4606      	mov	r6, r0
 80073f0:	db01      	blt.n	80073f6 <_malloc_r+0x1a>
 80073f2:	42a9      	cmp	r1, r5
 80073f4:	d903      	bls.n	80073fe <_malloc_r+0x22>
 80073f6:	230c      	movs	r3, #12
 80073f8:	6033      	str	r3, [r6, #0]
 80073fa:	2000      	movs	r0, #0
 80073fc:	bd70      	pop	{r4, r5, r6, pc}
 80073fe:	f000 f85b 	bl	80074b8 <__malloc_lock>
 8007402:	4a23      	ldr	r2, [pc, #140]	; (8007490 <_malloc_r+0xb4>)
 8007404:	6814      	ldr	r4, [r2, #0]
 8007406:	4621      	mov	r1, r4
 8007408:	b991      	cbnz	r1, 8007430 <_malloc_r+0x54>
 800740a:	4c22      	ldr	r4, [pc, #136]	; (8007494 <_malloc_r+0xb8>)
 800740c:	6823      	ldr	r3, [r4, #0]
 800740e:	b91b      	cbnz	r3, 8007418 <_malloc_r+0x3c>
 8007410:	4630      	mov	r0, r6
 8007412:	f000 f841 	bl	8007498 <_sbrk_r>
 8007416:	6020      	str	r0, [r4, #0]
 8007418:	4629      	mov	r1, r5
 800741a:	4630      	mov	r0, r6
 800741c:	f000 f83c 	bl	8007498 <_sbrk_r>
 8007420:	1c43      	adds	r3, r0, #1
 8007422:	d126      	bne.n	8007472 <_malloc_r+0x96>
 8007424:	230c      	movs	r3, #12
 8007426:	6033      	str	r3, [r6, #0]
 8007428:	4630      	mov	r0, r6
 800742a:	f000 f846 	bl	80074ba <__malloc_unlock>
 800742e:	e7e4      	b.n	80073fa <_malloc_r+0x1e>
 8007430:	680b      	ldr	r3, [r1, #0]
 8007432:	1b5b      	subs	r3, r3, r5
 8007434:	d41a      	bmi.n	800746c <_malloc_r+0x90>
 8007436:	2b0b      	cmp	r3, #11
 8007438:	d90f      	bls.n	800745a <_malloc_r+0x7e>
 800743a:	600b      	str	r3, [r1, #0]
 800743c:	50cd      	str	r5, [r1, r3]
 800743e:	18cc      	adds	r4, r1, r3
 8007440:	4630      	mov	r0, r6
 8007442:	f000 f83a 	bl	80074ba <__malloc_unlock>
 8007446:	f104 000b 	add.w	r0, r4, #11
 800744a:	1d23      	adds	r3, r4, #4
 800744c:	f020 0007 	bic.w	r0, r0, #7
 8007450:	1ac3      	subs	r3, r0, r3
 8007452:	d01b      	beq.n	800748c <_malloc_r+0xb0>
 8007454:	425a      	negs	r2, r3
 8007456:	50e2      	str	r2, [r4, r3]
 8007458:	bd70      	pop	{r4, r5, r6, pc}
 800745a:	428c      	cmp	r4, r1
 800745c:	bf0d      	iteet	eq
 800745e:	6863      	ldreq	r3, [r4, #4]
 8007460:	684b      	ldrne	r3, [r1, #4]
 8007462:	6063      	strne	r3, [r4, #4]
 8007464:	6013      	streq	r3, [r2, #0]
 8007466:	bf18      	it	ne
 8007468:	460c      	movne	r4, r1
 800746a:	e7e9      	b.n	8007440 <_malloc_r+0x64>
 800746c:	460c      	mov	r4, r1
 800746e:	6849      	ldr	r1, [r1, #4]
 8007470:	e7ca      	b.n	8007408 <_malloc_r+0x2c>
 8007472:	1cc4      	adds	r4, r0, #3
 8007474:	f024 0403 	bic.w	r4, r4, #3
 8007478:	42a0      	cmp	r0, r4
 800747a:	d005      	beq.n	8007488 <_malloc_r+0xac>
 800747c:	1a21      	subs	r1, r4, r0
 800747e:	4630      	mov	r0, r6
 8007480:	f000 f80a 	bl	8007498 <_sbrk_r>
 8007484:	3001      	adds	r0, #1
 8007486:	d0cd      	beq.n	8007424 <_malloc_r+0x48>
 8007488:	6025      	str	r5, [r4, #0]
 800748a:	e7d9      	b.n	8007440 <_malloc_r+0x64>
 800748c:	bd70      	pop	{r4, r5, r6, pc}
 800748e:	bf00      	nop
 8007490:	20003f04 	.word	0x20003f04
 8007494:	20003f08 	.word	0x20003f08

08007498 <_sbrk_r>:
 8007498:	b538      	push	{r3, r4, r5, lr}
 800749a:	4c06      	ldr	r4, [pc, #24]	; (80074b4 <_sbrk_r+0x1c>)
 800749c:	2300      	movs	r3, #0
 800749e:	4605      	mov	r5, r0
 80074a0:	4608      	mov	r0, r1
 80074a2:	6023      	str	r3, [r4, #0]
 80074a4:	f000 f80a 	bl	80074bc <_sbrk>
 80074a8:	1c43      	adds	r3, r0, #1
 80074aa:	d102      	bne.n	80074b2 <_sbrk_r+0x1a>
 80074ac:	6823      	ldr	r3, [r4, #0]
 80074ae:	b103      	cbz	r3, 80074b2 <_sbrk_r+0x1a>
 80074b0:	602b      	str	r3, [r5, #0]
 80074b2:	bd38      	pop	{r3, r4, r5, pc}
 80074b4:	20005554 	.word	0x20005554

080074b8 <__malloc_lock>:
 80074b8:	4770      	bx	lr

080074ba <__malloc_unlock>:
 80074ba:	4770      	bx	lr

080074bc <_sbrk>:
 80074bc:	4b04      	ldr	r3, [pc, #16]	; (80074d0 <_sbrk+0x14>)
 80074be:	6819      	ldr	r1, [r3, #0]
 80074c0:	4602      	mov	r2, r0
 80074c2:	b909      	cbnz	r1, 80074c8 <_sbrk+0xc>
 80074c4:	4903      	ldr	r1, [pc, #12]	; (80074d4 <_sbrk+0x18>)
 80074c6:	6019      	str	r1, [r3, #0]
 80074c8:	6818      	ldr	r0, [r3, #0]
 80074ca:	4402      	add	r2, r0
 80074cc:	601a      	str	r2, [r3, #0]
 80074ce:	4770      	bx	lr
 80074d0:	20003f0c 	.word	0x20003f0c
 80074d4:	20005558 	.word	0x20005558

080074d8 <_init>:
 80074d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074da:	bf00      	nop
 80074dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074de:	bc08      	pop	{r3}
 80074e0:	469e      	mov	lr, r3
 80074e2:	4770      	bx	lr

080074e4 <_fini>:
 80074e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074e6:	bf00      	nop
 80074e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074ea:	bc08      	pop	{r3}
 80074ec:	469e      	mov	lr, r3
 80074ee:	4770      	bx	lr
